
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08005c78  08005c78  00015c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006100  08006100  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006100  08006100  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200001dc  080062e4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080062e4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054e3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000faf  00000000  00000000  000256ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  000266a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d0  00000000  00000000  00026c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002831c  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000048d4  00000000  00000000  0004f414  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8511  00000000  00000000  00053ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c1f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002108  00000000  00000000  0014c274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005c60 	.word	0x08005c60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08005c60 	.word	0x08005c60

08000200 <kalman>:
	//s4 -> p
	//s5 -> k
	//s6 -> used for intermediate in math

	//CALLEE-SAVE CONVENTION
	vpush {s1-s6}
 8000200:	ed6d 0a06 	vpush	{s1-s6}

	vldr s1, [r0] //q
 8000204:	edd0 0a00 	vldr	s1, [r0]
	vldr s2, [r0, #4] //r
 8000208:	ed90 1a01 	vldr	s2, [r0, #4]
	vldr s3, [r0, #8] //x
 800020c:	edd0 1a02 	vldr	s3, [r0, #8]
	vldr s4, [r0, #12] //p
 8000210:	ed90 2a03 	vldr	s4, [r0, #12]
	vldr s5, [r0, #16] //k
 8000214:	edd0 2a04 	vldr	s5, [r0, #16]

	//p = p + q ---> s4 = s4 + s1
	vadd.f32 s4, s4, s1
 8000218:	ee32 2a20 	vadd.f32	s4, s4, s1

	//k = p/(p+r)
	vadd.f32 s6, s4, s2
 800021c:	ee32 3a01 	vadd.f32	s6, s4, s2
	vdiv.f32 s5, s4, s6
 8000220:	eec2 2a03 	vdiv.f32	s5, s4, s6
	vstr s5, [r0, #16] //Store new k
 8000224:	edc0 2a04 	vstr	s5, [r0, #16]

	//x = x + k(measure - x)
	vsub.f32 s6, s0, s3
 8000228:	ee30 3a61 	vsub.f32	s6, s0, s3
	vmul.f32 s6, s5, s6
 800022c:	ee22 3a83 	vmul.f32	s6, s5, s6
	vadd.f32 s3, s3, s6
 8000230:	ee71 1a83 	vadd.f32	s3, s3, s6
	vstr s3, [r0, #8] //Store new x
 8000234:	edc0 1a02 	vstr	s3, [r0, #8]

	//p = (1-k)p
	vmov s6, #1.0
 8000238:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	vsub.f32 s6, s6, s5
 800023c:	ee33 3a62 	vsub.f32	s6, s6, s5
	vmul.f32 s4, s6, s4
 8000240:	ee23 2a02 	vmul.f32	s4, s6, s4
	vstr s4, [r0, #12] //Store new p
 8000244:	ed80 2a03 	vstr	s4, [r0, #12]

	//CALLEE-SAVE CONVENTION
	vpop {s1-s6}
 8000248:	ecfd 0a06 	vpop	{s1-s6}

	bx lr
 800024c:	4770      	bx	lr

0800024e <strlen>:
 800024e:	4603      	mov	r3, r0
 8000250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000254:	2a00      	cmp	r2, #0
 8000256:	d1fb      	bne.n	8000250 <strlen+0x2>
 8000258:	1a18      	subs	r0, r3, r0
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2uiz>:
 8000c28:	004a      	lsls	r2, r1, #1
 8000c2a:	d211      	bcs.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d211      	bcs.n	8000c56 <__aeabi_d2uiz+0x2e>
 8000c32:	d50d      	bpl.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d40e      	bmi.n	8000c5c <__aeabi_d2uiz+0x34>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_d2uiz+0x3a>
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ec      	sub	sp, #432	; 0x1b0
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f000 f97e 	bl	800100e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f843 	bl	8000d9c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  struct KalmanFilter filter;
  filter.k = 1.0;
 8000d16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  filter.x = 1.0;
 8000d1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d22:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  filter.p = 1.0;
 8000d26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  filter.q = 1.0;
 8000d2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d32:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  filter.r = 1.0;
 8000d36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d3a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  float array[] = TEST_ARRAY;
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <main+0x90>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	4611      	mov	r1, r2
 8000d46:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f001 fa46 	bl	80021dc <memcpy>
  int array_size = sizeof(array)/sizeof(float);
 8000d50:	2365      	movs	r3, #101	; 0x65
 8000d52:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  int cnt = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (array_size > 0) {
 8000d5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	ddfb      	ble.n	8000d5c <main+0x54>
		  kalman(&filter, array[cnt]);
 8000d64:	463a      	mov	r2, r7
 8000d66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	edd3 7a00 	vldr	s15, [r3]
 8000d72:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa40 	bl	8000200 <kalman>
		  cnt++;
 8000d80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d84:	3301      	adds	r3, #1
 8000d86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
		  array_size--;
 8000d8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  if (array_size > 0) {
 8000d94:	e7e2      	b.n	8000d5c <main+0x54>
 8000d96:	bf00      	nop
 8000d98:	08005c78 	.word	0x08005c78

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	; 0x58
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fa21 	bl	80021f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 faa0 	bl	8001304 <HAL_PWREx_ControlVoltageScaling>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000dca:	f000 f838 	bl	8000e3e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dda:	2360      	movs	r3, #96	; 0x60
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000de2:	2301      	movs	r3, #1
 8000de4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000dea:	233c      	movs	r3, #60	; 0x3c
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fb24 	bl	800144c <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e0a:	f000 f818 	bl	8000e3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2303      	movs	r3, #3
 8000e14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	2105      	movs	r1, #5
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 ff36 	bl	8001c98 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e32:	f000 f804 	bl	8000e3e <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3758      	adds	r7, #88	; 0x58
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e42:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x6>
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8ec 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f001 f938 	bl	8002188 <__errno>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200a0000 	.word	0x200a0000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	200001f8 	.word	0x200001f8
 8000f4c:	20000210 	.word	0x20000210

08000f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <SystemInit+0x64>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <SystemInit+0x64>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <SystemInit+0x68>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <SystemInit+0x68>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <SystemInit+0x68>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <SystemInit+0x68>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <SystemInit+0x68>)
 8000f7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <SystemInit+0x68>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SystemInit+0x68>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <SystemInit+0x68>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <SystemInit+0x68>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SystemInit+0x64>)
 8000fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	40021000 	.word	0x40021000

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffc6 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <LoopForever+0x16>)
	cmp	r2, r3
 8000fe6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 f8d3 	bl	8002194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fe8b 	bl	8000d08 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000ff8:	08006108 	.word	0x08006108
	ldr	r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001000:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001004:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001008:	2000020c 	.word	0x2000020c

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>

0800100e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f91f 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f80e 	bl	8001040 <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e001      	b.n	8001034 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001030:	f7ff ff0a 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_InitTick+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d023      	beq.n	800109c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_InitTick+0x70>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_InitTick+0x6c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f91d 	bl	80012aa <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10f      	bne.n	8001096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d809      	bhi.n	8001090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f000 f8f5 	bl	8001272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_InitTick+0x74>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e007      	b.n	80010a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e004      	b.n	80010a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e001      	b.n	80010a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000204 	.word	0x20000204

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000204 	.word	0x20000204

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5c 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	d102      	bne.n	80012dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	e00b      	b.n	80012f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ea:	d102      	bne.n	80012f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f0:	e000      	b.n	80012f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40007000 	.word	0x40007000

08001304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d141      	bne.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001312:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d131      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001326:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800132c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	4b43      	ldr	r3, [pc, #268]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001338:	4a41      	ldr	r2, [pc, #260]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2232      	movs	r2, #50	; 0x32
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001356:	e002      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3b01      	subs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d102      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f2      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137e:	d158      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e057      	b.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800138a:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001394:	e04d      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139c:	d141      	bne.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d131      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2232      	movs	r2, #50	; 0x32
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e2:	e002      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f6:	d102      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f2      	bne.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	d112      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e011      	b.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001420:	e007      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001430:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40007000 	.word	0x40007000
 8001444:	20000000 	.word	0x20000000
 8001448:	431bde83 	.word	0x431bde83

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f000 bc16 	b.w	8001c8c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001460:	4ba0      	ldr	r3, [pc, #640]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146a:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80e4 	beq.w	800164a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_RCC_OscConfig+0x4c>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	f040 808b 	bne.w	80015a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b01      	cmp	r3, #1
 8001494:	f040 8087 	bne.w	80015a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x64>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e3ed      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_RCC_OscConfig+0x7e>
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c8:	e005      	b.n	80014d6 <HAL_RCC_OscConfig+0x8a>
 80014ca:	4b86      	ldr	r3, [pc, #536]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d223      	bcs.n	8001522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fd90 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e3ce      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4977      	ldr	r1, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150c:	4b75      	ldr	r3, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	4972      	ldr	r1, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e025      	b.n	800156e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	496a      	ldr	r1, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	4965      	ldr	r1, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fd50 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e38e      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800156e:	f000 fcbf 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001572:	4601      	mov	r1, r0
 8001574:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4a5a      	ldr	r2, [pc, #360]	; (80016e8 <HAL_RCC_OscConfig+0x29c>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa21 f303 	lsr.w	r3, r1, r3
 800158a:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_OscConfig+0x2a0>)
 800158c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800158e:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd54 	bl	8001040 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d052      	beq.n	8001648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	e372      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d032      	beq.n	8001614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fd91 	bl	80010e0 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c2:	f7ff fd8d 	bl	80010e0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e35b      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	493a      	ldr	r1, [pc, #232]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e01a      	b.n	800164a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001620:	f7ff fd5e 	bl	80010e0 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001628:	f7ff fd5a 	bl	80010e0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e328      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1dc>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d073      	beq.n	800173e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d005      	beq.n	8001668 <HAL_RCC_OscConfig+0x21c>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d10e      	bne.n	8001680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d063      	beq.n	800173c <HAL_RCC_OscConfig+0x2f0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d15f      	bne.n	800173c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e305      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x24c>
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0x288>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x270>
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x288>
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_RCC_OscConfig+0x298>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01b      	beq.n	8001714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fd00 	bl	80010e0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	e010      	b.n	8001706 <HAL_RCC_OscConfig+0x2ba>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	08005e0c 	.word	0x08005e0c
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fcf4 	bl	80010e0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e2c2      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	4baf      	ldr	r3, [pc, #700]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2a8>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fce4 	bl	80010e0 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fce0 	bl	80010e0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e2ae      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	4ba5      	ldr	r3, [pc, #660]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x2d0>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d060      	beq.n	800180c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x310>
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d119      	bne.n	800178a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d116      	bne.n	800178a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x328>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e28b      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	4990      	ldr	r1, [pc, #576]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	e040      	b.n	800180c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d023      	beq.n	80017da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a8b      	ldr	r2, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fc9f 	bl	80010e0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fc9b 	bl	80010e0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e269      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b8:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	497c      	ldr	r1, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
 80017d8:	e018      	b.n	800180c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a79      	ldr	r2, [pc, #484]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fc7b 	bl	80010e0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fc77 	bl	80010e0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e245      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d03c      	beq.n	8001892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01c      	beq.n	800185a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001826:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fc56 	bl	80010e0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fc52 	bl	80010e0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e220      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184a:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ef      	beq.n	8001838 <HAL_RCC_OscConfig+0x3ec>
 8001858:	e01b      	b.n	8001892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800185c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff fc39 	bl	80010e0 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff fc35 	bl	80010e0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e203      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ef      	bne.n	8001872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80a6 	beq.w	80019ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018a4:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10d      	bne.n	80018cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d118      	bne.n	800190a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fbfc 	bl	80010e0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ec:	f7ff fbf8 	bl	80010e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1c6      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <HAL_RCC_OscConfig+0x4d8>
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001922:	e024      	b.n	800196e <HAL_RCC_OscConfig+0x522>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d110      	bne.n	800194e <HAL_RCC_OscConfig+0x502>
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194c:	e00f      	b.n	800196e <HAL_RCC_OscConfig+0x522>
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fbb3 	bl	80010e0 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff fbaf 	bl	80010e0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e17b      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ed      	beq.n	800197e <HAL_RCC_OscConfig+0x532>
 80019a2:	e01a      	b.n	80019da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fb9c 	bl	80010e0 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019aa:	e00f      	b.n	80019cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff fb98 	bl	80010e0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d906      	bls.n	80019cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e164      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	4ba8      	ldr	r3, [pc, #672]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1e8      	bne.n	80019ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4ba3      	ldr	r3, [pc, #652]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4aa2      	ldr	r2, [pc, #648]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d03c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a00:	4b9b      	ldr	r3, [pc, #620]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a06:	4a9a      	ldr	r2, [pc, #616]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff fb66 	bl	80010e0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a18:	f7ff fb62 	bl	80010e0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e130      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2a:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ef      	beq.n	8001a18 <HAL_RCC_OscConfig+0x5cc>
 8001a38:	e01b      	b.n	8001a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a3a:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a40:	4a8b      	ldr	r2, [pc, #556]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb49 	bl	80010e0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fb45 	bl	80010e0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e113      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a64:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8107 	beq.w	8001c8a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	f040 80cb 	bne.w	8001c1c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a86:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d12c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d123      	bne.n	8001af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d11b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d113      	bne.n	8001af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d109      	bne.n	8001af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d06d      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d068      	beq.n	8001bcc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b06:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ba      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b22:	f7ff fadd 	bl	80010e0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff fad9 	bl	80010e0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0a7      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCC_OscConfig+0x828>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b6a:	0852      	lsrs	r2, r2, #1
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0552      	lsls	r2, r2, #21
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b76:	0852      	lsrs	r2, r2, #1
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	0652      	lsls	r2, r2, #25
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b82:	06d2      	lsls	r2, r2, #27
 8001b84:	430a      	orrs	r2, r1
 8001b86:	493a      	ldr	r1, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba4:	f7ff fa9c 	bl	80010e0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff fa98 	bl	80010e0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e066      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bca:	e05e      	b.n	8001c8a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e05d      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d156      	bne.n	8001c8a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf4:	f7ff fa74 	bl	80010e0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa70 	bl	80010e0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e03e      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x7b0>
 8001c1a:	e036      	b.n	8001c8a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d031      	beq.n	8001c86 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c40:	f023 0303 	bic.w	r3, r3, #3
 8001c44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x824>)
 8001c4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fa43 	bl	80010e0 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fa3f 	bl	80010e0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d905      	bls.n	8001c78 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e00d      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_OscConfig+0x848>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ec      	bne.n	8001c5e <HAL_RCC_OscConfig+0x812>
 8001c84:	e001      	b.n	8001c8a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e10f      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	4984      	ldr	r1, [pc, #528]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b82      	ldr	r3, [pc, #520]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0f7      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8089 	beq.w	8001e00 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d133      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0e4      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d06:	f000 f9d7 	bl	80020b8 <RCC_GetSysClockFreqFromPLLSource>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_ClockConfig+0x248>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d955      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d26:	4a6d      	ldr	r2, [pc, #436]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e044      	b.n	8001dbe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03e      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x126>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13a      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d50:	4a62      	ldr	r2, [pc, #392]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e02f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0ac      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0a0      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e098      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001d9e:	f000 f8a7 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <HAL_RCC_ClockConfig+0x248>)
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d909      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db2:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4944      	ldr	r1, [pc, #272]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd0:	f7ff f986 	bl	80010e0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff f982 	bl	80010e0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e070      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4930      	ldr	r1, [pc, #192]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b80      	cmp	r3, #128	; 0x80
 8001e24:	d105      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e30:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d210      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 020f 	bic.w	r2, r3, #15
 8001e48:	4923      	ldr	r1, [pc, #140]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e036      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4918      	ldr	r1, [pc, #96]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4910      	ldr	r1, [pc, #64]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea0:	f000 f826 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_RCC_ClockConfig+0x24c>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x250>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x254>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f8bb 	bl	8001040 <HAL_InitTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	04c4b400 	.word	0x04c4b400
 8001ee4:	08005e0c 	.word	0x08005e0c
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x34>
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d121      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d11e      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e004      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d133      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0xaa>
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f96:	617b      	str	r3, [r7, #20]
      break;
 8001f98:	e005      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9c:	617b      	str	r3, [r7, #20]
      break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	617b      	str	r3, [r7, #20]
      break;
 8001fa4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	fb02 f203 	mul.w	r2, r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0e5b      	lsrs	r3, r3, #25
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3724      	adds	r7, #36	; 0x24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08005e1c 	.word	0x08005e1c
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f952 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
 8002022:	e014      	b.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800203c:	f7ff f942 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8002040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002054:	d10b      	bne.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d913      	bls.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2ba0      	cmp	r3, #160	; 0xa0
 8002060:	d902      	bls.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002062:	2302      	movs	r3, #2
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e00d      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e00a      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b7f      	cmp	r3, #127	; 0x7f
 8002072:	d902      	bls.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e004      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b70      	cmp	r3, #112	; 0x70
 800207e:	d101      	bne.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 020f 	bic.w	r2, r3, #15
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d118      	bne.n	8002100 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e005      	b.n	80020f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d002      	beq.n	8002116 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002114:	e005      	b.n	8002122 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002118:	613b      	str	r3, [r7, #16]
    break;
 800211a:	e005      	b.n	8002128 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800211e:	613b      	str	r3, [r7, #16]
    break;
 8002120:	e002      	b.n	8002128 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	613b      	str	r3, [r7, #16]
    break;
 8002126:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	fb02 f203 	mul.w	r2, r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0e5b      	lsrs	r3, r3, #25
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	3301      	adds	r3, #1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002168:	683b      	ldr	r3, [r7, #0]
}
 800216a:	4618      	mov	r0, r3
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	08005e1c 	.word	0x08005e1c
 8002180:	00f42400 	.word	0x00f42400
 8002184:	007a1200 	.word	0x007a1200

08002188 <__errno>:
 8002188:	4b01      	ldr	r3, [pc, #4]	; (8002190 <__errno+0x8>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c

08002194 <__libc_init_array>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4e0d      	ldr	r6, [pc, #52]	; (80021cc <__libc_init_array+0x38>)
 8002198:	4c0d      	ldr	r4, [pc, #52]	; (80021d0 <__libc_init_array+0x3c>)
 800219a:	1ba4      	subs	r4, r4, r6
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	2500      	movs	r5, #0
 80021a0:	42a5      	cmp	r5, r4
 80021a2:	d109      	bne.n	80021b8 <__libc_init_array+0x24>
 80021a4:	4e0b      	ldr	r6, [pc, #44]	; (80021d4 <__libc_init_array+0x40>)
 80021a6:	4c0c      	ldr	r4, [pc, #48]	; (80021d8 <__libc_init_array+0x44>)
 80021a8:	f003 fd5a 	bl	8005c60 <_init>
 80021ac:	1ba4      	subs	r4, r4, r6
 80021ae:	10a4      	asrs	r4, r4, #2
 80021b0:	2500      	movs	r5, #0
 80021b2:	42a5      	cmp	r5, r4
 80021b4:	d105      	bne.n	80021c2 <__libc_init_array+0x2e>
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021bc:	4798      	blx	r3
 80021be:	3501      	adds	r5, #1
 80021c0:	e7ee      	b.n	80021a0 <__libc_init_array+0xc>
 80021c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021c6:	4798      	blx	r3
 80021c8:	3501      	adds	r5, #1
 80021ca:	e7f2      	b.n	80021b2 <__libc_init_array+0x1e>
 80021cc:	08006100 	.word	0x08006100
 80021d0:	08006100 	.word	0x08006100
 80021d4:	08006100 	.word	0x08006100
 80021d8:	08006104 	.word	0x08006104

080021dc <memcpy>:
 80021dc:	b510      	push	{r4, lr}
 80021de:	1e43      	subs	r3, r0, #1
 80021e0:	440a      	add	r2, r1
 80021e2:	4291      	cmp	r1, r2
 80021e4:	d100      	bne.n	80021e8 <memcpy+0xc>
 80021e6:	bd10      	pop	{r4, pc}
 80021e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021f0:	e7f7      	b.n	80021e2 <memcpy+0x6>

080021f2 <memset>:
 80021f2:	4402      	add	r2, r0
 80021f4:	4603      	mov	r3, r0
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d100      	bne.n	80021fc <memset+0xa>
 80021fa:	4770      	bx	lr
 80021fc:	f803 1b01 	strb.w	r1, [r3], #1
 8002200:	e7f9      	b.n	80021f6 <memset+0x4>

08002202 <__cvt>:
 8002202:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002206:	ec55 4b10 	vmov	r4, r5, d0
 800220a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800220c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002210:	2d00      	cmp	r5, #0
 8002212:	460e      	mov	r6, r1
 8002214:	4691      	mov	r9, r2
 8002216:	4619      	mov	r1, r3
 8002218:	bfb8      	it	lt
 800221a:	4622      	movlt	r2, r4
 800221c:	462b      	mov	r3, r5
 800221e:	f027 0720 	bic.w	r7, r7, #32
 8002222:	bfbb      	ittet	lt
 8002224:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002228:	461d      	movlt	r5, r3
 800222a:	2300      	movge	r3, #0
 800222c:	232d      	movlt	r3, #45	; 0x2d
 800222e:	bfb8      	it	lt
 8002230:	4614      	movlt	r4, r2
 8002232:	2f46      	cmp	r7, #70	; 0x46
 8002234:	700b      	strb	r3, [r1, #0]
 8002236:	d004      	beq.n	8002242 <__cvt+0x40>
 8002238:	2f45      	cmp	r7, #69	; 0x45
 800223a:	d100      	bne.n	800223e <__cvt+0x3c>
 800223c:	3601      	adds	r6, #1
 800223e:	2102      	movs	r1, #2
 8002240:	e000      	b.n	8002244 <__cvt+0x42>
 8002242:	2103      	movs	r1, #3
 8002244:	ab03      	add	r3, sp, #12
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	ab02      	add	r3, sp, #8
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4632      	mov	r2, r6
 800224e:	4653      	mov	r3, sl
 8002250:	ec45 4b10 	vmov	d0, r4, r5
 8002254:	f001 fd78 	bl	8003d48 <_dtoa_r>
 8002258:	2f47      	cmp	r7, #71	; 0x47
 800225a:	4680      	mov	r8, r0
 800225c:	d102      	bne.n	8002264 <__cvt+0x62>
 800225e:	f019 0f01 	tst.w	r9, #1
 8002262:	d026      	beq.n	80022b2 <__cvt+0xb0>
 8002264:	2f46      	cmp	r7, #70	; 0x46
 8002266:	eb08 0906 	add.w	r9, r8, r6
 800226a:	d111      	bne.n	8002290 <__cvt+0x8e>
 800226c:	f898 3000 	ldrb.w	r3, [r8]
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d10a      	bne.n	800228a <__cvt+0x88>
 8002274:	2200      	movs	r2, #0
 8002276:	2300      	movs	r3, #0
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe fc64 	bl	8000b48 <__aeabi_dcmpeq>
 8002280:	b918      	cbnz	r0, 800228a <__cvt+0x88>
 8002282:	f1c6 0601 	rsb	r6, r6, #1
 8002286:	f8ca 6000 	str.w	r6, [sl]
 800228a:	f8da 3000 	ldr.w	r3, [sl]
 800228e:	4499      	add	r9, r3
 8002290:	2200      	movs	r2, #0
 8002292:	2300      	movs	r3, #0
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe fc56 	bl	8000b48 <__aeabi_dcmpeq>
 800229c:	b938      	cbnz	r0, 80022ae <__cvt+0xac>
 800229e:	2230      	movs	r2, #48	; 0x30
 80022a0:	9b03      	ldr	r3, [sp, #12]
 80022a2:	454b      	cmp	r3, r9
 80022a4:	d205      	bcs.n	80022b2 <__cvt+0xb0>
 80022a6:	1c59      	adds	r1, r3, #1
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e7f8      	b.n	80022a0 <__cvt+0x9e>
 80022ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022b6:	eba3 0308 	sub.w	r3, r3, r8
 80022ba:	4640      	mov	r0, r8
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	b004      	add	sp, #16
 80022c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080022c4 <__exponent>:
 80022c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022c6:	2900      	cmp	r1, #0
 80022c8:	4604      	mov	r4, r0
 80022ca:	bfba      	itte	lt
 80022cc:	4249      	neglt	r1, r1
 80022ce:	232d      	movlt	r3, #45	; 0x2d
 80022d0:	232b      	movge	r3, #43	; 0x2b
 80022d2:	2909      	cmp	r1, #9
 80022d4:	f804 2b02 	strb.w	r2, [r4], #2
 80022d8:	7043      	strb	r3, [r0, #1]
 80022da:	dd20      	ble.n	800231e <__exponent+0x5a>
 80022dc:	f10d 0307 	add.w	r3, sp, #7
 80022e0:	461f      	mov	r7, r3
 80022e2:	260a      	movs	r6, #10
 80022e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80022e8:	fb06 1115 	mls	r1, r6, r5, r1
 80022ec:	3130      	adds	r1, #48	; 0x30
 80022ee:	2d09      	cmp	r5, #9
 80022f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80022f4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80022f8:	4629      	mov	r1, r5
 80022fa:	dc09      	bgt.n	8002310 <__exponent+0x4c>
 80022fc:	3130      	adds	r1, #48	; 0x30
 80022fe:	3b02      	subs	r3, #2
 8002300:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002304:	42bb      	cmp	r3, r7
 8002306:	4622      	mov	r2, r4
 8002308:	d304      	bcc.n	8002314 <__exponent+0x50>
 800230a:	1a10      	subs	r0, r2, r0
 800230c:	b003      	add	sp, #12
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002310:	4613      	mov	r3, r2
 8002312:	e7e7      	b.n	80022e4 <__exponent+0x20>
 8002314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002318:	f804 2b01 	strb.w	r2, [r4], #1
 800231c:	e7f2      	b.n	8002304 <__exponent+0x40>
 800231e:	2330      	movs	r3, #48	; 0x30
 8002320:	4419      	add	r1, r3
 8002322:	7083      	strb	r3, [r0, #2]
 8002324:	1d02      	adds	r2, r0, #4
 8002326:	70c1      	strb	r1, [r0, #3]
 8002328:	e7ef      	b.n	800230a <__exponent+0x46>
	...

0800232c <_printf_float>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	b08d      	sub	sp, #52	; 0x34
 8002332:	460c      	mov	r4, r1
 8002334:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002338:	4616      	mov	r6, r2
 800233a:	461f      	mov	r7, r3
 800233c:	4605      	mov	r5, r0
 800233e:	f002 fde7 	bl	8004f10 <_localeconv_r>
 8002342:	6803      	ldr	r3, [r0, #0]
 8002344:	9304      	str	r3, [sp, #16]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fd ff81 	bl	800024e <strlen>
 800234c:	2300      	movs	r3, #0
 800234e:	930a      	str	r3, [sp, #40]	; 0x28
 8002350:	f8d8 3000 	ldr.w	r3, [r8]
 8002354:	9005      	str	r0, [sp, #20]
 8002356:	3307      	adds	r3, #7
 8002358:	f023 0307 	bic.w	r3, r3, #7
 800235c:	f103 0208 	add.w	r2, r3, #8
 8002360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002364:	f8d4 b000 	ldr.w	fp, [r4]
 8002368:	f8c8 2000 	str.w	r2, [r8]
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002374:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002378:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800237c:	9307      	str	r3, [sp, #28]
 800237e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002386:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <_printf_float+0x2f8>)
 8002388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800238c:	f7fe fc0e 	bl	8000bac <__aeabi_dcmpun>
 8002390:	bb70      	cbnz	r0, 80023f0 <_printf_float+0xc4>
 8002392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002396:	4ba3      	ldr	r3, [pc, #652]	; (8002624 <_printf_float+0x2f8>)
 8002398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800239c:	f7fe fbe8 	bl	8000b70 <__aeabi_dcmple>
 80023a0:	bb30      	cbnz	r0, 80023f0 <_printf_float+0xc4>
 80023a2:	2200      	movs	r2, #0
 80023a4:	2300      	movs	r3, #0
 80023a6:	4640      	mov	r0, r8
 80023a8:	4649      	mov	r1, r9
 80023aa:	f7fe fbd7 	bl	8000b5c <__aeabi_dcmplt>
 80023ae:	b110      	cbz	r0, 80023b6 <_printf_float+0x8a>
 80023b0:	232d      	movs	r3, #45	; 0x2d
 80023b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023b6:	4a9c      	ldr	r2, [pc, #624]	; (8002628 <_printf_float+0x2fc>)
 80023b8:	4b9c      	ldr	r3, [pc, #624]	; (800262c <_printf_float+0x300>)
 80023ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80023be:	bf8c      	ite	hi
 80023c0:	4690      	movhi	r8, r2
 80023c2:	4698      	movls	r8, r3
 80023c4:	2303      	movs	r3, #3
 80023c6:	f02b 0204 	bic.w	r2, fp, #4
 80023ca:	6123      	str	r3, [r4, #16]
 80023cc:	6022      	str	r2, [r4, #0]
 80023ce:	f04f 0900 	mov.w	r9, #0
 80023d2:	9700      	str	r7, [sp, #0]
 80023d4:	4633      	mov	r3, r6
 80023d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80023d8:	4621      	mov	r1, r4
 80023da:	4628      	mov	r0, r5
 80023dc:	f000 f9e6 	bl	80027ac <_printf_common>
 80023e0:	3001      	adds	r0, #1
 80023e2:	f040 808d 	bne.w	8002500 <_printf_float+0x1d4>
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ea:	b00d      	add	sp, #52	; 0x34
 80023ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f0:	4642      	mov	r2, r8
 80023f2:	464b      	mov	r3, r9
 80023f4:	4640      	mov	r0, r8
 80023f6:	4649      	mov	r1, r9
 80023f8:	f7fe fbd8 	bl	8000bac <__aeabi_dcmpun>
 80023fc:	b110      	cbz	r0, 8002404 <_printf_float+0xd8>
 80023fe:	4a8c      	ldr	r2, [pc, #560]	; (8002630 <_printf_float+0x304>)
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <_printf_float+0x308>)
 8002402:	e7da      	b.n	80023ba <_printf_float+0x8e>
 8002404:	6861      	ldr	r1, [r4, #4]
 8002406:	1c4b      	adds	r3, r1, #1
 8002408:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800240c:	a80a      	add	r0, sp, #40	; 0x28
 800240e:	d13e      	bne.n	800248e <_printf_float+0x162>
 8002410:	2306      	movs	r3, #6
 8002412:	6063      	str	r3, [r4, #4]
 8002414:	2300      	movs	r3, #0
 8002416:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800241a:	ab09      	add	r3, sp, #36	; 0x24
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	ec49 8b10 	vmov	d0, r8, r9
 8002422:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002426:	6022      	str	r2, [r4, #0]
 8002428:	f8cd a004 	str.w	sl, [sp, #4]
 800242c:	6861      	ldr	r1, [r4, #4]
 800242e:	4628      	mov	r0, r5
 8002430:	f7ff fee7 	bl	8002202 <__cvt>
 8002434:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002438:	2b47      	cmp	r3, #71	; 0x47
 800243a:	4680      	mov	r8, r0
 800243c:	d109      	bne.n	8002452 <_printf_float+0x126>
 800243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002440:	1cd8      	adds	r0, r3, #3
 8002442:	db02      	blt.n	800244a <_printf_float+0x11e>
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	4293      	cmp	r3, r2
 8002448:	dd47      	ble.n	80024da <_printf_float+0x1ae>
 800244a:	f1aa 0a02 	sub.w	sl, sl, #2
 800244e:	fa5f fa8a 	uxtb.w	sl, sl
 8002452:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002458:	d824      	bhi.n	80024a4 <_printf_float+0x178>
 800245a:	3901      	subs	r1, #1
 800245c:	4652      	mov	r2, sl
 800245e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002462:	9109      	str	r1, [sp, #36]	; 0x24
 8002464:	f7ff ff2e 	bl	80022c4 <__exponent>
 8002468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800246a:	1813      	adds	r3, r2, r0
 800246c:	2a01      	cmp	r2, #1
 800246e:	4681      	mov	r9, r0
 8002470:	6123      	str	r3, [r4, #16]
 8002472:	dc02      	bgt.n	800247a <_printf_float+0x14e>
 8002474:	6822      	ldr	r2, [r4, #0]
 8002476:	07d1      	lsls	r1, r2, #31
 8002478:	d501      	bpl.n	800247e <_printf_float+0x152>
 800247a:	3301      	adds	r3, #1
 800247c:	6123      	str	r3, [r4, #16]
 800247e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0a5      	beq.n	80023d2 <_printf_float+0xa6>
 8002486:	232d      	movs	r3, #45	; 0x2d
 8002488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248c:	e7a1      	b.n	80023d2 <_printf_float+0xa6>
 800248e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002492:	f000 8177 	beq.w	8002784 <_printf_float+0x458>
 8002496:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800249a:	d1bb      	bne.n	8002414 <_printf_float+0xe8>
 800249c:	2900      	cmp	r1, #0
 800249e:	d1b9      	bne.n	8002414 <_printf_float+0xe8>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e7b6      	b.n	8002412 <_printf_float+0xe6>
 80024a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80024a8:	d119      	bne.n	80024de <_printf_float+0x1b2>
 80024aa:	2900      	cmp	r1, #0
 80024ac:	6863      	ldr	r3, [r4, #4]
 80024ae:	dd0c      	ble.n	80024ca <_printf_float+0x19e>
 80024b0:	6121      	str	r1, [r4, #16]
 80024b2:	b913      	cbnz	r3, 80024ba <_printf_float+0x18e>
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	07d2      	lsls	r2, r2, #31
 80024b8:	d502      	bpl.n	80024c0 <_printf_float+0x194>
 80024ba:	3301      	adds	r3, #1
 80024bc:	440b      	add	r3, r1
 80024be:	6123      	str	r3, [r4, #16]
 80024c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80024c4:	f04f 0900 	mov.w	r9, #0
 80024c8:	e7d9      	b.n	800247e <_printf_float+0x152>
 80024ca:	b913      	cbnz	r3, 80024d2 <_printf_float+0x1a6>
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	07d0      	lsls	r0, r2, #31
 80024d0:	d501      	bpl.n	80024d6 <_printf_float+0x1aa>
 80024d2:	3302      	adds	r3, #2
 80024d4:	e7f3      	b.n	80024be <_printf_float+0x192>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e7f1      	b.n	80024be <_printf_float+0x192>
 80024da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80024de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80024e2:	4293      	cmp	r3, r2
 80024e4:	db05      	blt.n	80024f2 <_printf_float+0x1c6>
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	6123      	str	r3, [r4, #16]
 80024ea:	07d1      	lsls	r1, r2, #31
 80024ec:	d5e8      	bpl.n	80024c0 <_printf_float+0x194>
 80024ee:	3301      	adds	r3, #1
 80024f0:	e7e5      	b.n	80024be <_printf_float+0x192>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bfd4      	ite	le
 80024f6:	f1c3 0302 	rsble	r3, r3, #2
 80024fa:	2301      	movgt	r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	e7de      	b.n	80024be <_printf_float+0x192>
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	055a      	lsls	r2, r3, #21
 8002504:	d407      	bmi.n	8002516 <_printf_float+0x1ea>
 8002506:	6923      	ldr	r3, [r4, #16]
 8002508:	4642      	mov	r2, r8
 800250a:	4631      	mov	r1, r6
 800250c:	4628      	mov	r0, r5
 800250e:	47b8      	blx	r7
 8002510:	3001      	adds	r0, #1
 8002512:	d12b      	bne.n	800256c <_printf_float+0x240>
 8002514:	e767      	b.n	80023e6 <_printf_float+0xba>
 8002516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800251a:	f240 80dc 	bls.w	80026d6 <_printf_float+0x3aa>
 800251e:	2200      	movs	r2, #0
 8002520:	2300      	movs	r3, #0
 8002522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002526:	f7fe fb0f 	bl	8000b48 <__aeabi_dcmpeq>
 800252a:	2800      	cmp	r0, #0
 800252c:	d033      	beq.n	8002596 <_printf_float+0x26a>
 800252e:	2301      	movs	r3, #1
 8002530:	4a41      	ldr	r2, [pc, #260]	; (8002638 <_printf_float+0x30c>)
 8002532:	4631      	mov	r1, r6
 8002534:	4628      	mov	r0, r5
 8002536:	47b8      	blx	r7
 8002538:	3001      	adds	r0, #1
 800253a:	f43f af54 	beq.w	80023e6 <_printf_float+0xba>
 800253e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002542:	429a      	cmp	r2, r3
 8002544:	db02      	blt.n	800254c <_printf_float+0x220>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	07d8      	lsls	r0, r3, #31
 800254a:	d50f      	bpl.n	800256c <_printf_float+0x240>
 800254c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002550:	4631      	mov	r1, r6
 8002552:	4628      	mov	r0, r5
 8002554:	47b8      	blx	r7
 8002556:	3001      	adds	r0, #1
 8002558:	f43f af45 	beq.w	80023e6 <_printf_float+0xba>
 800255c:	f04f 0800 	mov.w	r8, #0
 8002560:	f104 091a 	add.w	r9, r4, #26
 8002564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	4543      	cmp	r3, r8
 800256a:	dc09      	bgt.n	8002580 <_printf_float+0x254>
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	079b      	lsls	r3, r3, #30
 8002570:	f100 8103 	bmi.w	800277a <_printf_float+0x44e>
 8002574:	68e0      	ldr	r0, [r4, #12]
 8002576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002578:	4298      	cmp	r0, r3
 800257a:	bfb8      	it	lt
 800257c:	4618      	movlt	r0, r3
 800257e:	e734      	b.n	80023ea <_printf_float+0xbe>
 8002580:	2301      	movs	r3, #1
 8002582:	464a      	mov	r2, r9
 8002584:	4631      	mov	r1, r6
 8002586:	4628      	mov	r0, r5
 8002588:	47b8      	blx	r7
 800258a:	3001      	adds	r0, #1
 800258c:	f43f af2b 	beq.w	80023e6 <_printf_float+0xba>
 8002590:	f108 0801 	add.w	r8, r8, #1
 8002594:	e7e6      	b.n	8002564 <_printf_float+0x238>
 8002596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	dc2b      	bgt.n	80025f4 <_printf_float+0x2c8>
 800259c:	2301      	movs	r3, #1
 800259e:	4a26      	ldr	r2, [pc, #152]	; (8002638 <_printf_float+0x30c>)
 80025a0:	4631      	mov	r1, r6
 80025a2:	4628      	mov	r0, r5
 80025a4:	47b8      	blx	r7
 80025a6:	3001      	adds	r0, #1
 80025a8:	f43f af1d 	beq.w	80023e6 <_printf_float+0xba>
 80025ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ae:	b923      	cbnz	r3, 80025ba <_printf_float+0x28e>
 80025b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025b2:	b913      	cbnz	r3, 80025ba <_printf_float+0x28e>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	07d9      	lsls	r1, r3, #31
 80025b8:	d5d8      	bpl.n	800256c <_printf_float+0x240>
 80025ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025be:	4631      	mov	r1, r6
 80025c0:	4628      	mov	r0, r5
 80025c2:	47b8      	blx	r7
 80025c4:	3001      	adds	r0, #1
 80025c6:	f43f af0e 	beq.w	80023e6 <_printf_float+0xba>
 80025ca:	f04f 0900 	mov.w	r9, #0
 80025ce:	f104 0a1a 	add.w	sl, r4, #26
 80025d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025d4:	425b      	negs	r3, r3
 80025d6:	454b      	cmp	r3, r9
 80025d8:	dc01      	bgt.n	80025de <_printf_float+0x2b2>
 80025da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025dc:	e794      	b.n	8002508 <_printf_float+0x1dc>
 80025de:	2301      	movs	r3, #1
 80025e0:	4652      	mov	r2, sl
 80025e2:	4631      	mov	r1, r6
 80025e4:	4628      	mov	r0, r5
 80025e6:	47b8      	blx	r7
 80025e8:	3001      	adds	r0, #1
 80025ea:	f43f aefc 	beq.w	80023e6 <_printf_float+0xba>
 80025ee:	f109 0901 	add.w	r9, r9, #1
 80025f2:	e7ee      	b.n	80025d2 <_printf_float+0x2a6>
 80025f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025f8:	429a      	cmp	r2, r3
 80025fa:	bfa8      	it	ge
 80025fc:	461a      	movge	r2, r3
 80025fe:	2a00      	cmp	r2, #0
 8002600:	4691      	mov	r9, r2
 8002602:	dd07      	ble.n	8002614 <_printf_float+0x2e8>
 8002604:	4613      	mov	r3, r2
 8002606:	4631      	mov	r1, r6
 8002608:	4642      	mov	r2, r8
 800260a:	4628      	mov	r0, r5
 800260c:	47b8      	blx	r7
 800260e:	3001      	adds	r0, #1
 8002610:	f43f aee9 	beq.w	80023e6 <_printf_float+0xba>
 8002614:	f104 031a 	add.w	r3, r4, #26
 8002618:	f04f 0b00 	mov.w	fp, #0
 800261c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002620:	9306      	str	r3, [sp, #24]
 8002622:	e015      	b.n	8002650 <_printf_float+0x324>
 8002624:	7fefffff 	.word	0x7fefffff
 8002628:	08005e50 	.word	0x08005e50
 800262c:	08005e4c 	.word	0x08005e4c
 8002630:	08005e58 	.word	0x08005e58
 8002634:	08005e54 	.word	0x08005e54
 8002638:	08005e5c 	.word	0x08005e5c
 800263c:	2301      	movs	r3, #1
 800263e:	9a06      	ldr	r2, [sp, #24]
 8002640:	4631      	mov	r1, r6
 8002642:	4628      	mov	r0, r5
 8002644:	47b8      	blx	r7
 8002646:	3001      	adds	r0, #1
 8002648:	f43f aecd 	beq.w	80023e6 <_printf_float+0xba>
 800264c:	f10b 0b01 	add.w	fp, fp, #1
 8002650:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002654:	ebaa 0309 	sub.w	r3, sl, r9
 8002658:	455b      	cmp	r3, fp
 800265a:	dcef      	bgt.n	800263c <_printf_float+0x310>
 800265c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002660:	429a      	cmp	r2, r3
 8002662:	44d0      	add	r8, sl
 8002664:	db15      	blt.n	8002692 <_printf_float+0x366>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	07da      	lsls	r2, r3, #31
 800266a:	d412      	bmi.n	8002692 <_printf_float+0x366>
 800266c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800266e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002670:	eba3 020a 	sub.w	r2, r3, sl
 8002674:	eba3 0a01 	sub.w	sl, r3, r1
 8002678:	4592      	cmp	sl, r2
 800267a:	bfa8      	it	ge
 800267c:	4692      	movge	sl, r2
 800267e:	f1ba 0f00 	cmp.w	sl, #0
 8002682:	dc0e      	bgt.n	80026a2 <_printf_float+0x376>
 8002684:	f04f 0800 	mov.w	r8, #0
 8002688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800268c:	f104 091a 	add.w	r9, r4, #26
 8002690:	e019      	b.n	80026c6 <_printf_float+0x39a>
 8002692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002696:	4631      	mov	r1, r6
 8002698:	4628      	mov	r0, r5
 800269a:	47b8      	blx	r7
 800269c:	3001      	adds	r0, #1
 800269e:	d1e5      	bne.n	800266c <_printf_float+0x340>
 80026a0:	e6a1      	b.n	80023e6 <_printf_float+0xba>
 80026a2:	4653      	mov	r3, sl
 80026a4:	4642      	mov	r2, r8
 80026a6:	4631      	mov	r1, r6
 80026a8:	4628      	mov	r0, r5
 80026aa:	47b8      	blx	r7
 80026ac:	3001      	adds	r0, #1
 80026ae:	d1e9      	bne.n	8002684 <_printf_float+0x358>
 80026b0:	e699      	b.n	80023e6 <_printf_float+0xba>
 80026b2:	2301      	movs	r3, #1
 80026b4:	464a      	mov	r2, r9
 80026b6:	4631      	mov	r1, r6
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b8      	blx	r7
 80026bc:	3001      	adds	r0, #1
 80026be:	f43f ae92 	beq.w	80023e6 <_printf_float+0xba>
 80026c2:	f108 0801 	add.w	r8, r8, #1
 80026c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	eba3 030a 	sub.w	r3, r3, sl
 80026d0:	4543      	cmp	r3, r8
 80026d2:	dcee      	bgt.n	80026b2 <_printf_float+0x386>
 80026d4:	e74a      	b.n	800256c <_printf_float+0x240>
 80026d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80026d8:	2a01      	cmp	r2, #1
 80026da:	dc01      	bgt.n	80026e0 <_printf_float+0x3b4>
 80026dc:	07db      	lsls	r3, r3, #31
 80026de:	d53a      	bpl.n	8002756 <_printf_float+0x42a>
 80026e0:	2301      	movs	r3, #1
 80026e2:	4642      	mov	r2, r8
 80026e4:	4631      	mov	r1, r6
 80026e6:	4628      	mov	r0, r5
 80026e8:	47b8      	blx	r7
 80026ea:	3001      	adds	r0, #1
 80026ec:	f43f ae7b 	beq.w	80023e6 <_printf_float+0xba>
 80026f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026f4:	4631      	mov	r1, r6
 80026f6:	4628      	mov	r0, r5
 80026f8:	47b8      	blx	r7
 80026fa:	3001      	adds	r0, #1
 80026fc:	f108 0801 	add.w	r8, r8, #1
 8002700:	f43f ae71 	beq.w	80023e6 <_printf_float+0xba>
 8002704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002706:	2200      	movs	r2, #0
 8002708:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800270c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002710:	2300      	movs	r3, #0
 8002712:	f7fe fa19 	bl	8000b48 <__aeabi_dcmpeq>
 8002716:	b9c8      	cbnz	r0, 800274c <_printf_float+0x420>
 8002718:	4653      	mov	r3, sl
 800271a:	4642      	mov	r2, r8
 800271c:	4631      	mov	r1, r6
 800271e:	4628      	mov	r0, r5
 8002720:	47b8      	blx	r7
 8002722:	3001      	adds	r0, #1
 8002724:	d10e      	bne.n	8002744 <_printf_float+0x418>
 8002726:	e65e      	b.n	80023e6 <_printf_float+0xba>
 8002728:	2301      	movs	r3, #1
 800272a:	4652      	mov	r2, sl
 800272c:	4631      	mov	r1, r6
 800272e:	4628      	mov	r0, r5
 8002730:	47b8      	blx	r7
 8002732:	3001      	adds	r0, #1
 8002734:	f43f ae57 	beq.w	80023e6 <_printf_float+0xba>
 8002738:	f108 0801 	add.w	r8, r8, #1
 800273c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	4543      	cmp	r3, r8
 8002742:	dcf1      	bgt.n	8002728 <_printf_float+0x3fc>
 8002744:	464b      	mov	r3, r9
 8002746:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800274a:	e6de      	b.n	800250a <_printf_float+0x1de>
 800274c:	f04f 0800 	mov.w	r8, #0
 8002750:	f104 0a1a 	add.w	sl, r4, #26
 8002754:	e7f2      	b.n	800273c <_printf_float+0x410>
 8002756:	2301      	movs	r3, #1
 8002758:	e7df      	b.n	800271a <_printf_float+0x3ee>
 800275a:	2301      	movs	r3, #1
 800275c:	464a      	mov	r2, r9
 800275e:	4631      	mov	r1, r6
 8002760:	4628      	mov	r0, r5
 8002762:	47b8      	blx	r7
 8002764:	3001      	adds	r0, #1
 8002766:	f43f ae3e 	beq.w	80023e6 <_printf_float+0xba>
 800276a:	f108 0801 	add.w	r8, r8, #1
 800276e:	68e3      	ldr	r3, [r4, #12]
 8002770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	4543      	cmp	r3, r8
 8002776:	dcf0      	bgt.n	800275a <_printf_float+0x42e>
 8002778:	e6fc      	b.n	8002574 <_printf_float+0x248>
 800277a:	f04f 0800 	mov.w	r8, #0
 800277e:	f104 0919 	add.w	r9, r4, #25
 8002782:	e7f4      	b.n	800276e <_printf_float+0x442>
 8002784:	2900      	cmp	r1, #0
 8002786:	f43f ae8b 	beq.w	80024a0 <_printf_float+0x174>
 800278a:	2300      	movs	r3, #0
 800278c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002790:	ab09      	add	r3, sp, #36	; 0x24
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	ec49 8b10 	vmov	d0, r8, r9
 8002798:	6022      	str	r2, [r4, #0]
 800279a:	f8cd a004 	str.w	sl, [sp, #4]
 800279e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80027a2:	4628      	mov	r0, r5
 80027a4:	f7ff fd2d 	bl	8002202 <__cvt>
 80027a8:	4680      	mov	r8, r0
 80027aa:	e648      	b.n	800243e <_printf_float+0x112>

080027ac <_printf_common>:
 80027ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b0:	4691      	mov	r9, r2
 80027b2:	461f      	mov	r7, r3
 80027b4:	688a      	ldr	r2, [r1, #8]
 80027b6:	690b      	ldr	r3, [r1, #16]
 80027b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027bc:	4293      	cmp	r3, r2
 80027be:	bfb8      	it	lt
 80027c0:	4613      	movlt	r3, r2
 80027c2:	f8c9 3000 	str.w	r3, [r9]
 80027c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027ca:	4606      	mov	r6, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	b112      	cbz	r2, 80027d6 <_printf_common+0x2a>
 80027d0:	3301      	adds	r3, #1
 80027d2:	f8c9 3000 	str.w	r3, [r9]
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	0699      	lsls	r1, r3, #26
 80027da:	bf42      	ittt	mi
 80027dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027e0:	3302      	addmi	r3, #2
 80027e2:	f8c9 3000 	strmi.w	r3, [r9]
 80027e6:	6825      	ldr	r5, [r4, #0]
 80027e8:	f015 0506 	ands.w	r5, r5, #6
 80027ec:	d107      	bne.n	80027fe <_printf_common+0x52>
 80027ee:	f104 0a19 	add.w	sl, r4, #25
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	f8d9 2000 	ldr.w	r2, [r9]
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	42ab      	cmp	r3, r5
 80027fc:	dc28      	bgt.n	8002850 <_printf_common+0xa4>
 80027fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	3300      	adds	r3, #0
 8002806:	bf18      	it	ne
 8002808:	2301      	movne	r3, #1
 800280a:	0692      	lsls	r2, r2, #26
 800280c:	d42d      	bmi.n	800286a <_printf_common+0xbe>
 800280e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002812:	4639      	mov	r1, r7
 8002814:	4630      	mov	r0, r6
 8002816:	47c0      	blx	r8
 8002818:	3001      	adds	r0, #1
 800281a:	d020      	beq.n	800285e <_printf_common+0xb2>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	68e5      	ldr	r5, [r4, #12]
 8002820:	f8d9 2000 	ldr.w	r2, [r9]
 8002824:	f003 0306 	and.w	r3, r3, #6
 8002828:	2b04      	cmp	r3, #4
 800282a:	bf08      	it	eq
 800282c:	1aad      	subeq	r5, r5, r2
 800282e:	68a3      	ldr	r3, [r4, #8]
 8002830:	6922      	ldr	r2, [r4, #16]
 8002832:	bf0c      	ite	eq
 8002834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002838:	2500      	movne	r5, #0
 800283a:	4293      	cmp	r3, r2
 800283c:	bfc4      	itt	gt
 800283e:	1a9b      	subgt	r3, r3, r2
 8002840:	18ed      	addgt	r5, r5, r3
 8002842:	f04f 0900 	mov.w	r9, #0
 8002846:	341a      	adds	r4, #26
 8002848:	454d      	cmp	r5, r9
 800284a:	d11a      	bne.n	8002882 <_printf_common+0xd6>
 800284c:	2000      	movs	r0, #0
 800284e:	e008      	b.n	8002862 <_printf_common+0xb6>
 8002850:	2301      	movs	r3, #1
 8002852:	4652      	mov	r2, sl
 8002854:	4639      	mov	r1, r7
 8002856:	4630      	mov	r0, r6
 8002858:	47c0      	blx	r8
 800285a:	3001      	adds	r0, #1
 800285c:	d103      	bne.n	8002866 <_printf_common+0xba>
 800285e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002866:	3501      	adds	r5, #1
 8002868:	e7c3      	b.n	80027f2 <_printf_common+0x46>
 800286a:	18e1      	adds	r1, r4, r3
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	2030      	movs	r0, #48	; 0x30
 8002870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002874:	4422      	add	r2, r4
 8002876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800287a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800287e:	3302      	adds	r3, #2
 8002880:	e7c5      	b.n	800280e <_printf_common+0x62>
 8002882:	2301      	movs	r3, #1
 8002884:	4622      	mov	r2, r4
 8002886:	4639      	mov	r1, r7
 8002888:	4630      	mov	r0, r6
 800288a:	47c0      	blx	r8
 800288c:	3001      	adds	r0, #1
 800288e:	d0e6      	beq.n	800285e <_printf_common+0xb2>
 8002890:	f109 0901 	add.w	r9, r9, #1
 8002894:	e7d8      	b.n	8002848 <_printf_common+0x9c>
	...

08002898 <_printf_i>:
 8002898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800289c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028a0:	460c      	mov	r4, r1
 80028a2:	7e09      	ldrb	r1, [r1, #24]
 80028a4:	b085      	sub	sp, #20
 80028a6:	296e      	cmp	r1, #110	; 0x6e
 80028a8:	4617      	mov	r7, r2
 80028aa:	4606      	mov	r6, r0
 80028ac:	4698      	mov	r8, r3
 80028ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028b0:	f000 80b3 	beq.w	8002a1a <_printf_i+0x182>
 80028b4:	d822      	bhi.n	80028fc <_printf_i+0x64>
 80028b6:	2963      	cmp	r1, #99	; 0x63
 80028b8:	d036      	beq.n	8002928 <_printf_i+0x90>
 80028ba:	d80a      	bhi.n	80028d2 <_printf_i+0x3a>
 80028bc:	2900      	cmp	r1, #0
 80028be:	f000 80b9 	beq.w	8002a34 <_printf_i+0x19c>
 80028c2:	2958      	cmp	r1, #88	; 0x58
 80028c4:	f000 8083 	beq.w	80029ce <_printf_i+0x136>
 80028c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80028d0:	e032      	b.n	8002938 <_printf_i+0xa0>
 80028d2:	2964      	cmp	r1, #100	; 0x64
 80028d4:	d001      	beq.n	80028da <_printf_i+0x42>
 80028d6:	2969      	cmp	r1, #105	; 0x69
 80028d8:	d1f6      	bne.n	80028c8 <_printf_i+0x30>
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	0605      	lsls	r5, r0, #24
 80028e0:	f103 0104 	add.w	r1, r3, #4
 80028e4:	d52a      	bpl.n	800293c <_printf_i+0xa4>
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da03      	bge.n	80028f6 <_printf_i+0x5e>
 80028ee:	222d      	movs	r2, #45	; 0x2d
 80028f0:	425b      	negs	r3, r3
 80028f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028f6:	486f      	ldr	r0, [pc, #444]	; (8002ab4 <_printf_i+0x21c>)
 80028f8:	220a      	movs	r2, #10
 80028fa:	e039      	b.n	8002970 <_printf_i+0xd8>
 80028fc:	2973      	cmp	r1, #115	; 0x73
 80028fe:	f000 809d 	beq.w	8002a3c <_printf_i+0x1a4>
 8002902:	d808      	bhi.n	8002916 <_printf_i+0x7e>
 8002904:	296f      	cmp	r1, #111	; 0x6f
 8002906:	d020      	beq.n	800294a <_printf_i+0xb2>
 8002908:	2970      	cmp	r1, #112	; 0x70
 800290a:	d1dd      	bne.n	80028c8 <_printf_i+0x30>
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6023      	str	r3, [r4, #0]
 8002914:	e003      	b.n	800291e <_printf_i+0x86>
 8002916:	2975      	cmp	r1, #117	; 0x75
 8002918:	d017      	beq.n	800294a <_printf_i+0xb2>
 800291a:	2978      	cmp	r1, #120	; 0x78
 800291c:	d1d4      	bne.n	80028c8 <_printf_i+0x30>
 800291e:	2378      	movs	r3, #120	; 0x78
 8002920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002924:	4864      	ldr	r0, [pc, #400]	; (8002ab8 <_printf_i+0x220>)
 8002926:	e055      	b.n	80029d4 <_printf_i+0x13c>
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	1d19      	adds	r1, r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6011      	str	r1, [r2, #0]
 8002930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002938:	2301      	movs	r3, #1
 800293a:	e08c      	b.n	8002a56 <_printf_i+0x1be>
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002944:	bf18      	it	ne
 8002946:	b21b      	sxthne	r3, r3
 8002948:	e7cf      	b.n	80028ea <_printf_i+0x52>
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	6825      	ldr	r5, [r4, #0]
 800294e:	1d18      	adds	r0, r3, #4
 8002950:	6010      	str	r0, [r2, #0]
 8002952:	0628      	lsls	r0, r5, #24
 8002954:	d501      	bpl.n	800295a <_printf_i+0xc2>
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e002      	b.n	8002960 <_printf_i+0xc8>
 800295a:	0668      	lsls	r0, r5, #25
 800295c:	d5fb      	bpl.n	8002956 <_printf_i+0xbe>
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	4854      	ldr	r0, [pc, #336]	; (8002ab4 <_printf_i+0x21c>)
 8002962:	296f      	cmp	r1, #111	; 0x6f
 8002964:	bf14      	ite	ne
 8002966:	220a      	movne	r2, #10
 8002968:	2208      	moveq	r2, #8
 800296a:	2100      	movs	r1, #0
 800296c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002970:	6865      	ldr	r5, [r4, #4]
 8002972:	60a5      	str	r5, [r4, #8]
 8002974:	2d00      	cmp	r5, #0
 8002976:	f2c0 8095 	blt.w	8002aa4 <_printf_i+0x20c>
 800297a:	6821      	ldr	r1, [r4, #0]
 800297c:	f021 0104 	bic.w	r1, r1, #4
 8002980:	6021      	str	r1, [r4, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13d      	bne.n	8002a02 <_printf_i+0x16a>
 8002986:	2d00      	cmp	r5, #0
 8002988:	f040 808e 	bne.w	8002aa8 <_printf_i+0x210>
 800298c:	4665      	mov	r5, ip
 800298e:	2a08      	cmp	r2, #8
 8002990:	d10b      	bne.n	80029aa <_printf_i+0x112>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	07db      	lsls	r3, r3, #31
 8002996:	d508      	bpl.n	80029aa <_printf_i+0x112>
 8002998:	6923      	ldr	r3, [r4, #16]
 800299a:	6862      	ldr	r2, [r4, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	bfde      	ittt	le
 80029a0:	2330      	movle	r3, #48	; 0x30
 80029a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029aa:	ebac 0305 	sub.w	r3, ip, r5
 80029ae:	6123      	str	r3, [r4, #16]
 80029b0:	f8cd 8000 	str.w	r8, [sp]
 80029b4:	463b      	mov	r3, r7
 80029b6:	aa03      	add	r2, sp, #12
 80029b8:	4621      	mov	r1, r4
 80029ba:	4630      	mov	r0, r6
 80029bc:	f7ff fef6 	bl	80027ac <_printf_common>
 80029c0:	3001      	adds	r0, #1
 80029c2:	d14d      	bne.n	8002a60 <_printf_i+0x1c8>
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c8:	b005      	add	sp, #20
 80029ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ce:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <_printf_i+0x21c>)
 80029d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	6821      	ldr	r1, [r4, #0]
 80029d8:	1d1d      	adds	r5, r3, #4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6015      	str	r5, [r2, #0]
 80029de:	060a      	lsls	r2, r1, #24
 80029e0:	d50b      	bpl.n	80029fa <_printf_i+0x162>
 80029e2:	07ca      	lsls	r2, r1, #31
 80029e4:	bf44      	itt	mi
 80029e6:	f041 0120 	orrmi.w	r1, r1, #32
 80029ea:	6021      	strmi	r1, [r4, #0]
 80029ec:	b91b      	cbnz	r3, 80029f6 <_printf_i+0x15e>
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	f022 0220 	bic.w	r2, r2, #32
 80029f4:	6022      	str	r2, [r4, #0]
 80029f6:	2210      	movs	r2, #16
 80029f8:	e7b7      	b.n	800296a <_printf_i+0xd2>
 80029fa:	064d      	lsls	r5, r1, #25
 80029fc:	bf48      	it	mi
 80029fe:	b29b      	uxthmi	r3, r3
 8002a00:	e7ef      	b.n	80029e2 <_printf_i+0x14a>
 8002a02:	4665      	mov	r5, ip
 8002a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a08:	fb02 3311 	mls	r3, r2, r1, r3
 8002a0c:	5cc3      	ldrb	r3, [r0, r3]
 8002a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a12:	460b      	mov	r3, r1
 8002a14:	2900      	cmp	r1, #0
 8002a16:	d1f5      	bne.n	8002a04 <_printf_i+0x16c>
 8002a18:	e7b9      	b.n	800298e <_printf_i+0xf6>
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	6825      	ldr	r5, [r4, #0]
 8002a1e:	6961      	ldr	r1, [r4, #20]
 8002a20:	1d18      	adds	r0, r3, #4
 8002a22:	6010      	str	r0, [r2, #0]
 8002a24:	0628      	lsls	r0, r5, #24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	d501      	bpl.n	8002a2e <_printf_i+0x196>
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	e002      	b.n	8002a34 <_printf_i+0x19c>
 8002a2e:	066a      	lsls	r2, r5, #25
 8002a30:	d5fb      	bpl.n	8002a2a <_printf_i+0x192>
 8002a32:	8019      	strh	r1, [r3, #0]
 8002a34:	2300      	movs	r3, #0
 8002a36:	6123      	str	r3, [r4, #16]
 8002a38:	4665      	mov	r5, ip
 8002a3a:	e7b9      	b.n	80029b0 <_printf_i+0x118>
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	1d19      	adds	r1, r3, #4
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	681d      	ldr	r5, [r3, #0]
 8002a44:	6862      	ldr	r2, [r4, #4]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f7fd fc09 	bl	8000260 <memchr>
 8002a4e:	b108      	cbz	r0, 8002a54 <_printf_i+0x1bc>
 8002a50:	1b40      	subs	r0, r0, r5
 8002a52:	6060      	str	r0, [r4, #4]
 8002a54:	6863      	ldr	r3, [r4, #4]
 8002a56:	6123      	str	r3, [r4, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a5e:	e7a7      	b.n	80029b0 <_printf_i+0x118>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	462a      	mov	r2, r5
 8002a64:	4639      	mov	r1, r7
 8002a66:	4630      	mov	r0, r6
 8002a68:	47c0      	blx	r8
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d0aa      	beq.n	80029c4 <_printf_i+0x12c>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	079b      	lsls	r3, r3, #30
 8002a72:	d413      	bmi.n	8002a9c <_printf_i+0x204>
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	bfb8      	it	lt
 8002a7c:	4618      	movlt	r0, r3
 8002a7e:	e7a3      	b.n	80029c8 <_printf_i+0x130>
 8002a80:	2301      	movs	r3, #1
 8002a82:	464a      	mov	r2, r9
 8002a84:	4639      	mov	r1, r7
 8002a86:	4630      	mov	r0, r6
 8002a88:	47c0      	blx	r8
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d09a      	beq.n	80029c4 <_printf_i+0x12c>
 8002a8e:	3501      	adds	r5, #1
 8002a90:	68e3      	ldr	r3, [r4, #12]
 8002a92:	9a03      	ldr	r2, [sp, #12]
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	dcf2      	bgt.n	8002a80 <_printf_i+0x1e8>
 8002a9a:	e7eb      	b.n	8002a74 <_printf_i+0x1dc>
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	f104 0919 	add.w	r9, r4, #25
 8002aa2:	e7f5      	b.n	8002a90 <_printf_i+0x1f8>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ac      	bne.n	8002a02 <_printf_i+0x16a>
 8002aa8:	7803      	ldrb	r3, [r0, #0]
 8002aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab2:	e76c      	b.n	800298e <_printf_i+0xf6>
 8002ab4:	08005e5e 	.word	0x08005e5e
 8002ab8:	08005e6f 	.word	0x08005e6f

08002abc <_scanf_float>:
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	469a      	mov	sl, r3
 8002ac2:	688b      	ldr	r3, [r1, #8]
 8002ac4:	4616      	mov	r6, r2
 8002ac6:	1e5a      	subs	r2, r3, #1
 8002ac8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002acc:	b087      	sub	sp, #28
 8002ace:	bf83      	ittte	hi
 8002ad0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8002ad4:	189b      	addhi	r3, r3, r2
 8002ad6:	9301      	strhi	r3, [sp, #4]
 8002ad8:	2300      	movls	r3, #0
 8002ada:	bf86      	itte	hi
 8002adc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002ae0:	608b      	strhi	r3, [r1, #8]
 8002ae2:	9301      	strls	r3, [sp, #4]
 8002ae4:	680b      	ldr	r3, [r1, #0]
 8002ae6:	4688      	mov	r8, r1
 8002ae8:	f04f 0b00 	mov.w	fp, #0
 8002aec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002af0:	f848 3b1c 	str.w	r3, [r8], #28
 8002af4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8002af8:	4607      	mov	r7, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4645      	mov	r5, r8
 8002afe:	465a      	mov	r2, fp
 8002b00:	46d9      	mov	r9, fp
 8002b02:	f8cd b008 	str.w	fp, [sp, #8]
 8002b06:	68a1      	ldr	r1, [r4, #8]
 8002b08:	b181      	cbz	r1, 8002b2c <_scanf_float+0x70>
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b49      	cmp	r3, #73	; 0x49
 8002b10:	d071      	beq.n	8002bf6 <_scanf_float+0x13a>
 8002b12:	d84d      	bhi.n	8002bb0 <_scanf_float+0xf4>
 8002b14:	2b39      	cmp	r3, #57	; 0x39
 8002b16:	d840      	bhi.n	8002b9a <_scanf_float+0xde>
 8002b18:	2b31      	cmp	r3, #49	; 0x31
 8002b1a:	f080 8088 	bcs.w	8002c2e <_scanf_float+0x172>
 8002b1e:	2b2d      	cmp	r3, #45	; 0x2d
 8002b20:	f000 8090 	beq.w	8002c44 <_scanf_float+0x188>
 8002b24:	d815      	bhi.n	8002b52 <_scanf_float+0x96>
 8002b26:	2b2b      	cmp	r3, #43	; 0x2b
 8002b28:	f000 808c 	beq.w	8002c44 <_scanf_float+0x188>
 8002b2c:	f1b9 0f00 	cmp.w	r9, #0
 8002b30:	d003      	beq.n	8002b3a <_scanf_float+0x7e>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	2a01      	cmp	r2, #1
 8002b3e:	f200 80ea 	bhi.w	8002d16 <_scanf_float+0x25a>
 8002b42:	4545      	cmp	r5, r8
 8002b44:	f200 80dc 	bhi.w	8002d00 <_scanf_float+0x244>
 8002b48:	2601      	movs	r6, #1
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	b007      	add	sp, #28
 8002b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b52:	2b2e      	cmp	r3, #46	; 0x2e
 8002b54:	f000 809f 	beq.w	8002c96 <_scanf_float+0x1da>
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d1e7      	bne.n	8002b2c <_scanf_float+0x70>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002b62:	d064      	beq.n	8002c2e <_scanf_float+0x172>
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002b6a:	6020      	str	r0, [r4, #0]
 8002b6c:	f109 0901 	add.w	r9, r9, #1
 8002b70:	b11b      	cbz	r3, 8002b7a <_scanf_float+0xbe>
 8002b72:	3b01      	subs	r3, #1
 8002b74:	3101      	adds	r1, #1
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	60a1      	str	r1, [r4, #8]
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60a3      	str	r3, [r4, #8]
 8002b80:	6923      	ldr	r3, [r4, #16]
 8002b82:	3301      	adds	r3, #1
 8002b84:	6123      	str	r3, [r4, #16]
 8002b86:	6873      	ldr	r3, [r6, #4]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	6073      	str	r3, [r6, #4]
 8002b8e:	f340 80ac 	ble.w	8002cea <_scanf_float+0x22e>
 8002b92:	6833      	ldr	r3, [r6, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	6033      	str	r3, [r6, #0]
 8002b98:	e7b5      	b.n	8002b06 <_scanf_float+0x4a>
 8002b9a:	2b45      	cmp	r3, #69	; 0x45
 8002b9c:	f000 8085 	beq.w	8002caa <_scanf_float+0x1ee>
 8002ba0:	2b46      	cmp	r3, #70	; 0x46
 8002ba2:	d06a      	beq.n	8002c7a <_scanf_float+0x1be>
 8002ba4:	2b41      	cmp	r3, #65	; 0x41
 8002ba6:	d1c1      	bne.n	8002b2c <_scanf_float+0x70>
 8002ba8:	2a01      	cmp	r2, #1
 8002baa:	d1bf      	bne.n	8002b2c <_scanf_float+0x70>
 8002bac:	2202      	movs	r2, #2
 8002bae:	e046      	b.n	8002c3e <_scanf_float+0x182>
 8002bb0:	2b65      	cmp	r3, #101	; 0x65
 8002bb2:	d07a      	beq.n	8002caa <_scanf_float+0x1ee>
 8002bb4:	d818      	bhi.n	8002be8 <_scanf_float+0x12c>
 8002bb6:	2b54      	cmp	r3, #84	; 0x54
 8002bb8:	d066      	beq.n	8002c88 <_scanf_float+0x1cc>
 8002bba:	d811      	bhi.n	8002be0 <_scanf_float+0x124>
 8002bbc:	2b4e      	cmp	r3, #78	; 0x4e
 8002bbe:	d1b5      	bne.n	8002b2c <_scanf_float+0x70>
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	d146      	bne.n	8002c52 <_scanf_float+0x196>
 8002bc4:	f1b9 0f00 	cmp.w	r9, #0
 8002bc8:	d145      	bne.n	8002c56 <_scanf_float+0x19a>
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002bd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002bd4:	d13f      	bne.n	8002c56 <_scanf_float+0x19a>
 8002bd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002bda:	6021      	str	r1, [r4, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	e02e      	b.n	8002c3e <_scanf_float+0x182>
 8002be0:	2b59      	cmp	r3, #89	; 0x59
 8002be2:	d01e      	beq.n	8002c22 <_scanf_float+0x166>
 8002be4:	2b61      	cmp	r3, #97	; 0x61
 8002be6:	e7de      	b.n	8002ba6 <_scanf_float+0xea>
 8002be8:	2b6e      	cmp	r3, #110	; 0x6e
 8002bea:	d0e9      	beq.n	8002bc0 <_scanf_float+0x104>
 8002bec:	d815      	bhi.n	8002c1a <_scanf_float+0x15e>
 8002bee:	2b66      	cmp	r3, #102	; 0x66
 8002bf0:	d043      	beq.n	8002c7a <_scanf_float+0x1be>
 8002bf2:	2b69      	cmp	r3, #105	; 0x69
 8002bf4:	d19a      	bne.n	8002b2c <_scanf_float+0x70>
 8002bf6:	f1bb 0f00 	cmp.w	fp, #0
 8002bfa:	d138      	bne.n	8002c6e <_scanf_float+0x1b2>
 8002bfc:	f1b9 0f00 	cmp.w	r9, #0
 8002c00:	d197      	bne.n	8002b32 <_scanf_float+0x76>
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002c08:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002c0c:	d195      	bne.n	8002b3a <_scanf_float+0x7e>
 8002c0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002c12:	6021      	str	r1, [r4, #0]
 8002c14:	f04f 0b01 	mov.w	fp, #1
 8002c18:	e011      	b.n	8002c3e <_scanf_float+0x182>
 8002c1a:	2b74      	cmp	r3, #116	; 0x74
 8002c1c:	d034      	beq.n	8002c88 <_scanf_float+0x1cc>
 8002c1e:	2b79      	cmp	r3, #121	; 0x79
 8002c20:	d184      	bne.n	8002b2c <_scanf_float+0x70>
 8002c22:	f1bb 0f07 	cmp.w	fp, #7
 8002c26:	d181      	bne.n	8002b2c <_scanf_float+0x70>
 8002c28:	f04f 0b08 	mov.w	fp, #8
 8002c2c:	e007      	b.n	8002c3e <_scanf_float+0x182>
 8002c2e:	eb12 0f0b 	cmn.w	r2, fp
 8002c32:	f47f af7b 	bne.w	8002b2c <_scanf_float+0x70>
 8002c36:	6821      	ldr	r1, [r4, #0]
 8002c38:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8002c3c:	6021      	str	r1, [r4, #0]
 8002c3e:	702b      	strb	r3, [r5, #0]
 8002c40:	3501      	adds	r5, #1
 8002c42:	e79a      	b.n	8002b7a <_scanf_float+0xbe>
 8002c44:	6821      	ldr	r1, [r4, #0]
 8002c46:	0608      	lsls	r0, r1, #24
 8002c48:	f57f af70 	bpl.w	8002b2c <_scanf_float+0x70>
 8002c4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c50:	e7f4      	b.n	8002c3c <_scanf_float+0x180>
 8002c52:	2a02      	cmp	r2, #2
 8002c54:	d047      	beq.n	8002ce6 <_scanf_float+0x22a>
 8002c56:	f1bb 0f01 	cmp.w	fp, #1
 8002c5a:	d003      	beq.n	8002c64 <_scanf_float+0x1a8>
 8002c5c:	f1bb 0f04 	cmp.w	fp, #4
 8002c60:	f47f af64 	bne.w	8002b2c <_scanf_float+0x70>
 8002c64:	f10b 0b01 	add.w	fp, fp, #1
 8002c68:	fa5f fb8b 	uxtb.w	fp, fp
 8002c6c:	e7e7      	b.n	8002c3e <_scanf_float+0x182>
 8002c6e:	f1bb 0f03 	cmp.w	fp, #3
 8002c72:	d0f7      	beq.n	8002c64 <_scanf_float+0x1a8>
 8002c74:	f1bb 0f05 	cmp.w	fp, #5
 8002c78:	e7f2      	b.n	8002c60 <_scanf_float+0x1a4>
 8002c7a:	f1bb 0f02 	cmp.w	fp, #2
 8002c7e:	f47f af55 	bne.w	8002b2c <_scanf_float+0x70>
 8002c82:	f04f 0b03 	mov.w	fp, #3
 8002c86:	e7da      	b.n	8002c3e <_scanf_float+0x182>
 8002c88:	f1bb 0f06 	cmp.w	fp, #6
 8002c8c:	f47f af4e 	bne.w	8002b2c <_scanf_float+0x70>
 8002c90:	f04f 0b07 	mov.w	fp, #7
 8002c94:	e7d3      	b.n	8002c3e <_scanf_float+0x182>
 8002c96:	6821      	ldr	r1, [r4, #0]
 8002c98:	0588      	lsls	r0, r1, #22
 8002c9a:	f57f af47 	bpl.w	8002b2c <_scanf_float+0x70>
 8002c9e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8002ca2:	6021      	str	r1, [r4, #0]
 8002ca4:	f8cd 9008 	str.w	r9, [sp, #8]
 8002ca8:	e7c9      	b.n	8002c3e <_scanf_float+0x182>
 8002caa:	6821      	ldr	r1, [r4, #0]
 8002cac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8002cb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002cb4:	d006      	beq.n	8002cc4 <_scanf_float+0x208>
 8002cb6:	0548      	lsls	r0, r1, #21
 8002cb8:	f57f af38 	bpl.w	8002b2c <_scanf_float+0x70>
 8002cbc:	f1b9 0f00 	cmp.w	r9, #0
 8002cc0:	f43f af3b 	beq.w	8002b3a <_scanf_float+0x7e>
 8002cc4:	0588      	lsls	r0, r1, #22
 8002cc6:	bf58      	it	pl
 8002cc8:	9802      	ldrpl	r0, [sp, #8]
 8002cca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002cce:	bf58      	it	pl
 8002cd0:	eba9 0000 	subpl.w	r0, r9, r0
 8002cd4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002cd8:	bf58      	it	pl
 8002cda:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8002cde:	6021      	str	r1, [r4, #0]
 8002ce0:	f04f 0900 	mov.w	r9, #0
 8002ce4:	e7ab      	b.n	8002c3e <_scanf_float+0x182>
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	e7a9      	b.n	8002c3e <_scanf_float+0x182>
 8002cea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002cee:	9205      	str	r2, [sp, #20]
 8002cf0:	4631      	mov	r1, r6
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	4798      	blx	r3
 8002cf6:	9a05      	ldr	r2, [sp, #20]
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f43f af04 	beq.w	8002b06 <_scanf_float+0x4a>
 8002cfe:	e715      	b.n	8002b2c <_scanf_float+0x70>
 8002d00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002d08:	4632      	mov	r2, r6
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	4798      	blx	r3
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	6123      	str	r3, [r4, #16]
 8002d14:	e715      	b.n	8002b42 <_scanf_float+0x86>
 8002d16:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d80a      	bhi.n	8002d34 <_scanf_float+0x278>
 8002d1e:	f1bb 0f02 	cmp.w	fp, #2
 8002d22:	d968      	bls.n	8002df6 <_scanf_float+0x33a>
 8002d24:	f1ab 0b03 	sub.w	fp, fp, #3
 8002d28:	fa5f fb8b 	uxtb.w	fp, fp
 8002d2c:	eba5 0b0b 	sub.w	fp, r5, fp
 8002d30:	455d      	cmp	r5, fp
 8002d32:	d14b      	bne.n	8002dcc <_scanf_float+0x310>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	05da      	lsls	r2, r3, #23
 8002d38:	d51f      	bpl.n	8002d7a <_scanf_float+0x2be>
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	d468      	bmi.n	8002e10 <_scanf_float+0x354>
 8002d3e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	2965      	cmp	r1, #101	; 0x65
 8002d46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002d4a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8002d4e:	6123      	str	r3, [r4, #16]
 8002d50:	d00d      	beq.n	8002d6e <_scanf_float+0x2b2>
 8002d52:	2945      	cmp	r1, #69	; 0x45
 8002d54:	d00b      	beq.n	8002d6e <_scanf_float+0x2b2>
 8002d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d5a:	4632      	mov	r2, r6
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	4798      	blx	r3
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1a5 0b02 	sub.w	fp, r5, #2
 8002d6c:	6123      	str	r3, [r4, #16]
 8002d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d72:	4632      	mov	r2, r6
 8002d74:	4638      	mov	r0, r7
 8002d76:	4798      	blx	r3
 8002d78:	465d      	mov	r5, fp
 8002d7a:	6826      	ldr	r6, [r4, #0]
 8002d7c:	f016 0610 	ands.w	r6, r6, #16
 8002d80:	d17a      	bne.n	8002e78 <_scanf_float+0x3bc>
 8002d82:	702e      	strb	r6, [r5, #0]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d142      	bne.n	8002e16 <_scanf_float+0x35a>
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	eba9 0303 	sub.w	r3, r9, r3
 8002d96:	425a      	negs	r2, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d149      	bne.n	8002e30 <_scanf_float+0x374>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4641      	mov	r1, r8
 8002da0:	4638      	mov	r0, r7
 8002da2:	f000 fea5 	bl	8003af0 <_strtod_r>
 8002da6:	6825      	ldr	r5, [r4, #0]
 8002da8:	f8da 3000 	ldr.w	r3, [sl]
 8002dac:	f015 0f02 	tst.w	r5, #2
 8002db0:	f103 0204 	add.w	r2, r3, #4
 8002db4:	ec59 8b10 	vmov	r8, r9, d0
 8002db8:	f8ca 2000 	str.w	r2, [sl]
 8002dbc:	d043      	beq.n	8002e46 <_scanf_float+0x38a>
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e9c3 8900 	strd	r8, r9, [r3]
 8002dc4:	68e3      	ldr	r3, [r4, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60e3      	str	r3, [r4, #12]
 8002dca:	e6be      	b.n	8002b4a <_scanf_float+0x8e>
 8002dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002dd4:	4632      	mov	r2, r6
 8002dd6:	4638      	mov	r0, r7
 8002dd8:	4798      	blx	r3
 8002dda:	6923      	ldr	r3, [r4, #16]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	6123      	str	r3, [r4, #16]
 8002de0:	e7a6      	b.n	8002d30 <_scanf_float+0x274>
 8002de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002de6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002dea:	4632      	mov	r2, r6
 8002dec:	4638      	mov	r0, r7
 8002dee:	4798      	blx	r3
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6123      	str	r3, [r4, #16]
 8002df6:	4545      	cmp	r5, r8
 8002df8:	d8f3      	bhi.n	8002de2 <_scanf_float+0x326>
 8002dfa:	e6a5      	b.n	8002b48 <_scanf_float+0x8c>
 8002dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002e04:	4632      	mov	r2, r6
 8002e06:	4638      	mov	r0, r7
 8002e08:	4798      	blx	r3
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	6123      	str	r3, [r4, #16]
 8002e10:	4545      	cmp	r5, r8
 8002e12:	d8f3      	bhi.n	8002dfc <_scanf_float+0x340>
 8002e14:	e698      	b.n	8002b48 <_scanf_float+0x8c>
 8002e16:	9b03      	ldr	r3, [sp, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0bf      	beq.n	8002d9c <_scanf_float+0x2e0>
 8002e1c:	9904      	ldr	r1, [sp, #16]
 8002e1e:	230a      	movs	r3, #10
 8002e20:	4632      	mov	r2, r6
 8002e22:	3101      	adds	r1, #1
 8002e24:	4638      	mov	r0, r7
 8002e26:	f000 feef 	bl	8003c08 <_strtol_r>
 8002e2a:	9b03      	ldr	r3, [sp, #12]
 8002e2c:	9d04      	ldr	r5, [sp, #16]
 8002e2e:	1ac2      	subs	r2, r0, r3
 8002e30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002e34:	429d      	cmp	r5, r3
 8002e36:	bf28      	it	cs
 8002e38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8002e3c:	490f      	ldr	r1, [pc, #60]	; (8002e7c <_scanf_float+0x3c0>)
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f824 	bl	8002e8c <siprintf>
 8002e44:	e7aa      	b.n	8002d9c <_scanf_float+0x2e0>
 8002e46:	f015 0504 	ands.w	r5, r5, #4
 8002e4a:	d1b8      	bne.n	8002dbe <_scanf_float+0x302>
 8002e4c:	681f      	ldr	r7, [r3, #0]
 8002e4e:	ee10 2a10 	vmov	r2, s0
 8002e52:	464b      	mov	r3, r9
 8002e54:	ee10 0a10 	vmov	r0, s0
 8002e58:	4649      	mov	r1, r9
 8002e5a:	f7fd fea7 	bl	8000bac <__aeabi_dcmpun>
 8002e5e:	b128      	cbz	r0, 8002e6c <_scanf_float+0x3b0>
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f80d 	bl	8002e80 <nanf>
 8002e66:	ed87 0a00 	vstr	s0, [r7]
 8002e6a:	e7ab      	b.n	8002dc4 <_scanf_float+0x308>
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd fefa 	bl	8000c68 <__aeabi_d2f>
 8002e74:	6038      	str	r0, [r7, #0]
 8002e76:	e7a5      	b.n	8002dc4 <_scanf_float+0x308>
 8002e78:	2600      	movs	r6, #0
 8002e7a:	e666      	b.n	8002b4a <_scanf_float+0x8e>
 8002e7c:	08005e80 	.word	0x08005e80

08002e80 <nanf>:
 8002e80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002e88 <nanf+0x8>
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	7fc00000 	.word	0x7fc00000

08002e8c <siprintf>:
 8002e8c:	b40e      	push	{r1, r2, r3}
 8002e8e:	b500      	push	{lr}
 8002e90:	b09c      	sub	sp, #112	; 0x70
 8002e92:	ab1d      	add	r3, sp, #116	; 0x74
 8002e94:	9002      	str	r0, [sp, #8]
 8002e96:	9006      	str	r0, [sp, #24]
 8002e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <siprintf+0x38>)
 8002e9e:	9107      	str	r1, [sp, #28]
 8002ea0:	9104      	str	r1, [sp, #16]
 8002ea2:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <siprintf+0x3c>)
 8002ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ea8:	9105      	str	r1, [sp, #20]
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	a902      	add	r1, sp, #8
 8002eb0:	f002 fd66 	bl	8005980 <_svfiprintf_r>
 8002eb4:	9b02      	ldr	r3, [sp, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	b01c      	add	sp, #112	; 0x70
 8002ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ec0:	b003      	add	sp, #12
 8002ec2:	4770      	bx	lr
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	ffff0208 	.word	0xffff0208

08002ecc <sulp>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	460d      	mov	r5, r1
 8002ed2:	ec45 4b10 	vmov	d0, r4, r5
 8002ed6:	4616      	mov	r6, r2
 8002ed8:	f002 fb0e 	bl	80054f8 <__ulp>
 8002edc:	ec51 0b10 	vmov	r0, r1, d0
 8002ee0:	b17e      	cbz	r6, 8002f02 <sulp+0x36>
 8002ee2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8002ee6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dd09      	ble.n	8002f02 <sulp+0x36>
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	f7fd fbbb 	bl	8000678 <__aeabi_dmul>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	0000      	movs	r0, r0
	...

08002f08 <_strtod_l>:
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	461f      	mov	r7, r3
 8002f0e:	b0a1      	sub	sp, #132	; 0x84
 8002f10:	2300      	movs	r3, #0
 8002f12:	4681      	mov	r9, r0
 8002f14:	4638      	mov	r0, r7
 8002f16:	460e      	mov	r6, r1
 8002f18:	9217      	str	r2, [sp, #92]	; 0x5c
 8002f1a:	931c      	str	r3, [sp, #112]	; 0x70
 8002f1c:	f001 fff5 	bl	8004f0a <__localeconv_l>
 8002f20:	4680      	mov	r8, r0
 8002f22:	6800      	ldr	r0, [r0, #0]
 8002f24:	f7fd f993 	bl	800024e <strlen>
 8002f28:	f04f 0a00 	mov.w	sl, #0
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	f04f 0b00 	mov.w	fp, #0
 8002f32:	961b      	str	r6, [sp, #108]	; 0x6c
 8002f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	2a0d      	cmp	r2, #13
 8002f3a:	d832      	bhi.n	8002fa2 <_strtod_l+0x9a>
 8002f3c:	2a09      	cmp	r2, #9
 8002f3e:	d236      	bcs.n	8002fae <_strtod_l+0xa6>
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d03e      	beq.n	8002fc2 <_strtod_l+0xba>
 8002f44:	2300      	movs	r3, #0
 8002f46:	930d      	str	r3, [sp, #52]	; 0x34
 8002f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002f4a:	782b      	ldrb	r3, [r5, #0]
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	f040 80ac 	bne.w	80030aa <_strtod_l+0x1a2>
 8002f52:	786b      	ldrb	r3, [r5, #1]
 8002f54:	2b58      	cmp	r3, #88	; 0x58
 8002f56:	d001      	beq.n	8002f5c <_strtod_l+0x54>
 8002f58:	2b78      	cmp	r3, #120	; 0x78
 8002f5a:	d167      	bne.n	800302c <_strtod_l+0x124>
 8002f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	ab1c      	add	r3, sp, #112	; 0x70
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	9702      	str	r7, [sp, #8]
 8002f66:	ab1d      	add	r3, sp, #116	; 0x74
 8002f68:	4a88      	ldr	r2, [pc, #544]	; (800318c <_strtod_l+0x284>)
 8002f6a:	a91b      	add	r1, sp, #108	; 0x6c
 8002f6c:	4648      	mov	r0, r9
 8002f6e:	f001 fcf2 	bl	8004956 <__gethex>
 8002f72:	f010 0407 	ands.w	r4, r0, #7
 8002f76:	4606      	mov	r6, r0
 8002f78:	d005      	beq.n	8002f86 <_strtod_l+0x7e>
 8002f7a:	2c06      	cmp	r4, #6
 8002f7c:	d12b      	bne.n	8002fd6 <_strtod_l+0xce>
 8002f7e:	3501      	adds	r5, #1
 8002f80:	2300      	movs	r3, #0
 8002f82:	951b      	str	r5, [sp, #108]	; 0x6c
 8002f84:	930d      	str	r3, [sp, #52]	; 0x34
 8002f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 859a 	bne.w	8003ac2 <_strtod_l+0xbba>
 8002f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f90:	b1e3      	cbz	r3, 8002fcc <_strtod_l+0xc4>
 8002f92:	4652      	mov	r2, sl
 8002f94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002f98:	ec43 2b10 	vmov	d0, r2, r3
 8002f9c:	b021      	add	sp, #132	; 0x84
 8002f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa2:	2a2b      	cmp	r2, #43	; 0x2b
 8002fa4:	d015      	beq.n	8002fd2 <_strtod_l+0xca>
 8002fa6:	2a2d      	cmp	r2, #45	; 0x2d
 8002fa8:	d004      	beq.n	8002fb4 <_strtod_l+0xac>
 8002faa:	2a20      	cmp	r2, #32
 8002fac:	d1ca      	bne.n	8002f44 <_strtod_l+0x3c>
 8002fae:	3301      	adds	r3, #1
 8002fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8002fb2:	e7bf      	b.n	8002f34 <_strtod_l+0x2c>
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	920d      	str	r2, [sp, #52]	; 0x34
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	921b      	str	r2, [sp, #108]	; 0x6c
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1c2      	bne.n	8002f48 <_strtod_l+0x40>
 8002fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 8579 	bne.w	8003abe <_strtod_l+0xbb6>
 8002fcc:	4652      	mov	r2, sl
 8002fce:	465b      	mov	r3, fp
 8002fd0:	e7e2      	b.n	8002f98 <_strtod_l+0x90>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	e7ef      	b.n	8002fb6 <_strtod_l+0xae>
 8002fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002fd8:	b13a      	cbz	r2, 8002fea <_strtod_l+0xe2>
 8002fda:	2135      	movs	r1, #53	; 0x35
 8002fdc:	a81e      	add	r0, sp, #120	; 0x78
 8002fde:	f002 fb83 	bl	80056e8 <__copybits>
 8002fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002fe4:	4648      	mov	r0, r9
 8002fe6:	f001 ffef 	bl	8004fc8 <_Bfree>
 8002fea:	3c01      	subs	r4, #1
 8002fec:	2c04      	cmp	r4, #4
 8002fee:	d806      	bhi.n	8002ffe <_strtod_l+0xf6>
 8002ff0:	e8df f004 	tbb	[pc, r4]
 8002ff4:	1714030a 	.word	0x1714030a
 8002ff8:	0a          	.byte	0x0a
 8002ff9:	00          	.byte	0x00
 8002ffa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8002ffe:	0730      	lsls	r0, r6, #28
 8003000:	d5c1      	bpl.n	8002f86 <_strtod_l+0x7e>
 8003002:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003006:	e7be      	b.n	8002f86 <_strtod_l+0x7e>
 8003008:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800300c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800300e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003012:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003016:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800301a:	e7f0      	b.n	8002ffe <_strtod_l+0xf6>
 800301c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8003190 <_strtod_l+0x288>
 8003020:	e7ed      	b.n	8002ffe <_strtod_l+0xf6>
 8003022:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003026:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800302a:	e7e8      	b.n	8002ffe <_strtod_l+0xf6>
 800302c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	921b      	str	r2, [sp, #108]	; 0x6c
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d0f9      	beq.n	800302c <_strtod_l+0x124>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0a4      	beq.n	8002f86 <_strtod_l+0x7e>
 800303c:	2301      	movs	r3, #1
 800303e:	2500      	movs	r5, #0
 8003040:	9306      	str	r3, [sp, #24]
 8003042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003044:	9308      	str	r3, [sp, #32]
 8003046:	9507      	str	r5, [sp, #28]
 8003048:	9505      	str	r5, [sp, #20]
 800304a:	220a      	movs	r2, #10
 800304c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800304e:	7807      	ldrb	r7, [r0, #0]
 8003050:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003054:	b2d9      	uxtb	r1, r3
 8003056:	2909      	cmp	r1, #9
 8003058:	d929      	bls.n	80030ae <_strtod_l+0x1a6>
 800305a:	4622      	mov	r2, r4
 800305c:	f8d8 1000 	ldr.w	r1, [r8]
 8003060:	f002 fd96 	bl	8005b90 <strncmp>
 8003064:	2800      	cmp	r0, #0
 8003066:	d031      	beq.n	80030cc <_strtod_l+0x1c4>
 8003068:	2000      	movs	r0, #0
 800306a:	9c05      	ldr	r4, [sp, #20]
 800306c:	9004      	str	r0, [sp, #16]
 800306e:	463b      	mov	r3, r7
 8003070:	4602      	mov	r2, r0
 8003072:	2b65      	cmp	r3, #101	; 0x65
 8003074:	d001      	beq.n	800307a <_strtod_l+0x172>
 8003076:	2b45      	cmp	r3, #69	; 0x45
 8003078:	d114      	bne.n	80030a4 <_strtod_l+0x19c>
 800307a:	b924      	cbnz	r4, 8003086 <_strtod_l+0x17e>
 800307c:	b910      	cbnz	r0, 8003084 <_strtod_l+0x17c>
 800307e:	9b06      	ldr	r3, [sp, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d09e      	beq.n	8002fc2 <_strtod_l+0xba>
 8003084:	2400      	movs	r4, #0
 8003086:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003088:	1c73      	adds	r3, r6, #1
 800308a:	931b      	str	r3, [sp, #108]	; 0x6c
 800308c:	7873      	ldrb	r3, [r6, #1]
 800308e:	2b2b      	cmp	r3, #43	; 0x2b
 8003090:	d078      	beq.n	8003184 <_strtod_l+0x27c>
 8003092:	2b2d      	cmp	r3, #45	; 0x2d
 8003094:	d070      	beq.n	8003178 <_strtod_l+0x270>
 8003096:	f04f 0c00 	mov.w	ip, #0
 800309a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800309e:	2f09      	cmp	r7, #9
 80030a0:	d97c      	bls.n	800319c <_strtod_l+0x294>
 80030a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80030a4:	f04f 0e00 	mov.w	lr, #0
 80030a8:	e09a      	b.n	80031e0 <_strtod_l+0x2d8>
 80030aa:	2300      	movs	r3, #0
 80030ac:	e7c7      	b.n	800303e <_strtod_l+0x136>
 80030ae:	9905      	ldr	r1, [sp, #20]
 80030b0:	2908      	cmp	r1, #8
 80030b2:	bfdd      	ittte	le
 80030b4:	9907      	ldrle	r1, [sp, #28]
 80030b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80030ba:	9307      	strle	r3, [sp, #28]
 80030bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80030c0:	9b05      	ldr	r3, [sp, #20]
 80030c2:	3001      	adds	r0, #1
 80030c4:	3301      	adds	r3, #1
 80030c6:	9305      	str	r3, [sp, #20]
 80030c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80030ca:	e7bf      	b.n	800304c <_strtod_l+0x144>
 80030cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030ce:	191a      	adds	r2, r3, r4
 80030d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80030d2:	9a05      	ldr	r2, [sp, #20]
 80030d4:	5d1b      	ldrb	r3, [r3, r4]
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d037      	beq.n	800314a <_strtod_l+0x242>
 80030da:	9c05      	ldr	r4, [sp, #20]
 80030dc:	4602      	mov	r2, r0
 80030de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80030e2:	2909      	cmp	r1, #9
 80030e4:	d913      	bls.n	800310e <_strtod_l+0x206>
 80030e6:	2101      	movs	r1, #1
 80030e8:	9104      	str	r1, [sp, #16]
 80030ea:	e7c2      	b.n	8003072 <_strtod_l+0x16a>
 80030ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	3001      	adds	r0, #1
 80030f6:	2b30      	cmp	r3, #48	; 0x30
 80030f8:	d0f8      	beq.n	80030ec <_strtod_l+0x1e4>
 80030fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80030fe:	2a08      	cmp	r2, #8
 8003100:	f200 84e4 	bhi.w	8003acc <_strtod_l+0xbc4>
 8003104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003106:	9208      	str	r2, [sp, #32]
 8003108:	4602      	mov	r2, r0
 800310a:	2000      	movs	r0, #0
 800310c:	4604      	mov	r4, r0
 800310e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003112:	f100 0101 	add.w	r1, r0, #1
 8003116:	d012      	beq.n	800313e <_strtod_l+0x236>
 8003118:	440a      	add	r2, r1
 800311a:	eb00 0c04 	add.w	ip, r0, r4
 800311e:	4621      	mov	r1, r4
 8003120:	270a      	movs	r7, #10
 8003122:	458c      	cmp	ip, r1
 8003124:	d113      	bne.n	800314e <_strtod_l+0x246>
 8003126:	1821      	adds	r1, r4, r0
 8003128:	2908      	cmp	r1, #8
 800312a:	f104 0401 	add.w	r4, r4, #1
 800312e:	4404      	add	r4, r0
 8003130:	dc19      	bgt.n	8003166 <_strtod_l+0x25e>
 8003132:	9b07      	ldr	r3, [sp, #28]
 8003134:	210a      	movs	r1, #10
 8003136:	fb01 e303 	mla	r3, r1, r3, lr
 800313a:	9307      	str	r3, [sp, #28]
 800313c:	2100      	movs	r1, #0
 800313e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003140:	1c58      	adds	r0, r3, #1
 8003142:	901b      	str	r0, [sp, #108]	; 0x6c
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	4608      	mov	r0, r1
 8003148:	e7c9      	b.n	80030de <_strtod_l+0x1d6>
 800314a:	9805      	ldr	r0, [sp, #20]
 800314c:	e7d3      	b.n	80030f6 <_strtod_l+0x1ee>
 800314e:	2908      	cmp	r1, #8
 8003150:	f101 0101 	add.w	r1, r1, #1
 8003154:	dc03      	bgt.n	800315e <_strtod_l+0x256>
 8003156:	9b07      	ldr	r3, [sp, #28]
 8003158:	437b      	muls	r3, r7
 800315a:	9307      	str	r3, [sp, #28]
 800315c:	e7e1      	b.n	8003122 <_strtod_l+0x21a>
 800315e:	2910      	cmp	r1, #16
 8003160:	bfd8      	it	le
 8003162:	437d      	mulle	r5, r7
 8003164:	e7dd      	b.n	8003122 <_strtod_l+0x21a>
 8003166:	2c10      	cmp	r4, #16
 8003168:	bfdc      	itt	le
 800316a:	210a      	movle	r1, #10
 800316c:	fb01 e505 	mlale	r5, r1, r5, lr
 8003170:	e7e4      	b.n	800313c <_strtod_l+0x234>
 8003172:	2301      	movs	r3, #1
 8003174:	9304      	str	r3, [sp, #16]
 8003176:	e781      	b.n	800307c <_strtod_l+0x174>
 8003178:	f04f 0c01 	mov.w	ip, #1
 800317c:	1cb3      	adds	r3, r6, #2
 800317e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003180:	78b3      	ldrb	r3, [r6, #2]
 8003182:	e78a      	b.n	800309a <_strtod_l+0x192>
 8003184:	f04f 0c00 	mov.w	ip, #0
 8003188:	e7f8      	b.n	800317c <_strtod_l+0x274>
 800318a:	bf00      	nop
 800318c:	08005e88 	.word	0x08005e88
 8003190:	7ff00000 	.word	0x7ff00000
 8003194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003196:	1c5f      	adds	r7, r3, #1
 8003198:	971b      	str	r7, [sp, #108]	; 0x6c
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b30      	cmp	r3, #48	; 0x30
 800319e:	d0f9      	beq.n	8003194 <_strtod_l+0x28c>
 80031a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80031a4:	2f08      	cmp	r7, #8
 80031a6:	f63f af7d 	bhi.w	80030a4 <_strtod_l+0x19c>
 80031aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80031ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031b0:	930a      	str	r3, [sp, #40]	; 0x28
 80031b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031b4:	1c5f      	adds	r7, r3, #1
 80031b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80031be:	f1b8 0f09 	cmp.w	r8, #9
 80031c2:	d937      	bls.n	8003234 <_strtod_l+0x32c>
 80031c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031c6:	1a7f      	subs	r7, r7, r1
 80031c8:	2f08      	cmp	r7, #8
 80031ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80031ce:	dc37      	bgt.n	8003240 <_strtod_l+0x338>
 80031d0:	45be      	cmp	lr, r7
 80031d2:	bfa8      	it	ge
 80031d4:	46be      	movge	lr, r7
 80031d6:	f1bc 0f00 	cmp.w	ip, #0
 80031da:	d001      	beq.n	80031e0 <_strtod_l+0x2d8>
 80031dc:	f1ce 0e00 	rsb	lr, lr, #0
 80031e0:	2c00      	cmp	r4, #0
 80031e2:	d151      	bne.n	8003288 <_strtod_l+0x380>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	f47f aece 	bne.w	8002f86 <_strtod_l+0x7e>
 80031ea:	9a06      	ldr	r2, [sp, #24]
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	f47f aeca 	bne.w	8002f86 <_strtod_l+0x7e>
 80031f2:	9a04      	ldr	r2, [sp, #16]
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	f47f aee4 	bne.w	8002fc2 <_strtod_l+0xba>
 80031fa:	2b4e      	cmp	r3, #78	; 0x4e
 80031fc:	d027      	beq.n	800324e <_strtod_l+0x346>
 80031fe:	dc21      	bgt.n	8003244 <_strtod_l+0x33c>
 8003200:	2b49      	cmp	r3, #73	; 0x49
 8003202:	f47f aede 	bne.w	8002fc2 <_strtod_l+0xba>
 8003206:	49a0      	ldr	r1, [pc, #640]	; (8003488 <_strtod_l+0x580>)
 8003208:	a81b      	add	r0, sp, #108	; 0x6c
 800320a:	f001 fdd7 	bl	8004dbc <__match>
 800320e:	2800      	cmp	r0, #0
 8003210:	f43f aed7 	beq.w	8002fc2 <_strtod_l+0xba>
 8003214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003216:	499d      	ldr	r1, [pc, #628]	; (800348c <_strtod_l+0x584>)
 8003218:	3b01      	subs	r3, #1
 800321a:	a81b      	add	r0, sp, #108	; 0x6c
 800321c:	931b      	str	r3, [sp, #108]	; 0x6c
 800321e:	f001 fdcd 	bl	8004dbc <__match>
 8003222:	b910      	cbnz	r0, 800322a <_strtod_l+0x322>
 8003224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003226:	3301      	adds	r3, #1
 8003228:	931b      	str	r3, [sp, #108]	; 0x6c
 800322a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80034a0 <_strtod_l+0x598>
 800322e:	f04f 0a00 	mov.w	sl, #0
 8003232:	e6a8      	b.n	8002f86 <_strtod_l+0x7e>
 8003234:	210a      	movs	r1, #10
 8003236:	fb01 3e0e 	mla	lr, r1, lr, r3
 800323a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800323e:	e7b8      	b.n	80031b2 <_strtod_l+0x2aa>
 8003240:	46be      	mov	lr, r7
 8003242:	e7c8      	b.n	80031d6 <_strtod_l+0x2ce>
 8003244:	2b69      	cmp	r3, #105	; 0x69
 8003246:	d0de      	beq.n	8003206 <_strtod_l+0x2fe>
 8003248:	2b6e      	cmp	r3, #110	; 0x6e
 800324a:	f47f aeba 	bne.w	8002fc2 <_strtod_l+0xba>
 800324e:	4990      	ldr	r1, [pc, #576]	; (8003490 <_strtod_l+0x588>)
 8003250:	a81b      	add	r0, sp, #108	; 0x6c
 8003252:	f001 fdb3 	bl	8004dbc <__match>
 8003256:	2800      	cmp	r0, #0
 8003258:	f43f aeb3 	beq.w	8002fc2 <_strtod_l+0xba>
 800325c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b28      	cmp	r3, #40	; 0x28
 8003262:	d10e      	bne.n	8003282 <_strtod_l+0x37a>
 8003264:	aa1e      	add	r2, sp, #120	; 0x78
 8003266:	498b      	ldr	r1, [pc, #556]	; (8003494 <_strtod_l+0x58c>)
 8003268:	a81b      	add	r0, sp, #108	; 0x6c
 800326a:	f001 fdbb 	bl	8004de4 <__hexnan>
 800326e:	2805      	cmp	r0, #5
 8003270:	d107      	bne.n	8003282 <_strtod_l+0x37a>
 8003272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003274:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8003278:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800327c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003280:	e681      	b.n	8002f86 <_strtod_l+0x7e>
 8003282:	f8df b224 	ldr.w	fp, [pc, #548]	; 80034a8 <_strtod_l+0x5a0>
 8003286:	e7d2      	b.n	800322e <_strtod_l+0x326>
 8003288:	ebae 0302 	sub.w	r3, lr, r2
 800328c:	9306      	str	r3, [sp, #24]
 800328e:	9b05      	ldr	r3, [sp, #20]
 8003290:	9807      	ldr	r0, [sp, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf08      	it	eq
 8003296:	4623      	moveq	r3, r4
 8003298:	2c10      	cmp	r4, #16
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	46a0      	mov	r8, r4
 800329e:	bfa8      	it	ge
 80032a0:	f04f 0810 	movge.w	r8, #16
 80032a4:	f7fd f96e 	bl	8000584 <__aeabi_ui2d>
 80032a8:	2c09      	cmp	r4, #9
 80032aa:	4682      	mov	sl, r0
 80032ac:	468b      	mov	fp, r1
 80032ae:	dc13      	bgt.n	80032d8 <_strtod_l+0x3d0>
 80032b0:	9b06      	ldr	r3, [sp, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f43f ae67 	beq.w	8002f86 <_strtod_l+0x7e>
 80032b8:	9b06      	ldr	r3, [sp, #24]
 80032ba:	dd7a      	ble.n	80033b2 <_strtod_l+0x4aa>
 80032bc:	2b16      	cmp	r3, #22
 80032be:	dc61      	bgt.n	8003384 <_strtod_l+0x47c>
 80032c0:	4a75      	ldr	r2, [pc, #468]	; (8003498 <_strtod_l+0x590>)
 80032c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80032c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80032ca:	4652      	mov	r2, sl
 80032cc:	465b      	mov	r3, fp
 80032ce:	f7fd f9d3 	bl	8000678 <__aeabi_dmul>
 80032d2:	4682      	mov	sl, r0
 80032d4:	468b      	mov	fp, r1
 80032d6:	e656      	b.n	8002f86 <_strtod_l+0x7e>
 80032d8:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <_strtod_l+0x590>)
 80032da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80032de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80032e2:	f7fd f9c9 	bl	8000678 <__aeabi_dmul>
 80032e6:	4606      	mov	r6, r0
 80032e8:	4628      	mov	r0, r5
 80032ea:	460f      	mov	r7, r1
 80032ec:	f7fd f94a 	bl	8000584 <__aeabi_ui2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4630      	mov	r0, r6
 80032f6:	4639      	mov	r1, r7
 80032f8:	f7fd f808 	bl	800030c <__adddf3>
 80032fc:	2c0f      	cmp	r4, #15
 80032fe:	4682      	mov	sl, r0
 8003300:	468b      	mov	fp, r1
 8003302:	ddd5      	ble.n	80032b0 <_strtod_l+0x3a8>
 8003304:	9b06      	ldr	r3, [sp, #24]
 8003306:	eba4 0808 	sub.w	r8, r4, r8
 800330a:	4498      	add	r8, r3
 800330c:	f1b8 0f00 	cmp.w	r8, #0
 8003310:	f340 8096 	ble.w	8003440 <_strtod_l+0x538>
 8003314:	f018 030f 	ands.w	r3, r8, #15
 8003318:	d00a      	beq.n	8003330 <_strtod_l+0x428>
 800331a:	495f      	ldr	r1, [pc, #380]	; (8003498 <_strtod_l+0x590>)
 800331c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003320:	4652      	mov	r2, sl
 8003322:	465b      	mov	r3, fp
 8003324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003328:	f7fd f9a6 	bl	8000678 <__aeabi_dmul>
 800332c:	4682      	mov	sl, r0
 800332e:	468b      	mov	fp, r1
 8003330:	f038 080f 	bics.w	r8, r8, #15
 8003334:	d073      	beq.n	800341e <_strtod_l+0x516>
 8003336:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800333a:	dd47      	ble.n	80033cc <_strtod_l+0x4c4>
 800333c:	2400      	movs	r4, #0
 800333e:	46a0      	mov	r8, r4
 8003340:	9407      	str	r4, [sp, #28]
 8003342:	9405      	str	r4, [sp, #20]
 8003344:	2322      	movs	r3, #34	; 0x22
 8003346:	f8df b158 	ldr.w	fp, [pc, #344]	; 80034a0 <_strtod_l+0x598>
 800334a:	f8c9 3000 	str.w	r3, [r9]
 800334e:	f04f 0a00 	mov.w	sl, #0
 8003352:	9b07      	ldr	r3, [sp, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f43f ae16 	beq.w	8002f86 <_strtod_l+0x7e>
 800335a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800335c:	4648      	mov	r0, r9
 800335e:	f001 fe33 	bl	8004fc8 <_Bfree>
 8003362:	9905      	ldr	r1, [sp, #20]
 8003364:	4648      	mov	r0, r9
 8003366:	f001 fe2f 	bl	8004fc8 <_Bfree>
 800336a:	4641      	mov	r1, r8
 800336c:	4648      	mov	r0, r9
 800336e:	f001 fe2b 	bl	8004fc8 <_Bfree>
 8003372:	9907      	ldr	r1, [sp, #28]
 8003374:	4648      	mov	r0, r9
 8003376:	f001 fe27 	bl	8004fc8 <_Bfree>
 800337a:	4621      	mov	r1, r4
 800337c:	4648      	mov	r0, r9
 800337e:	f001 fe23 	bl	8004fc8 <_Bfree>
 8003382:	e600      	b.n	8002f86 <_strtod_l+0x7e>
 8003384:	9a06      	ldr	r2, [sp, #24]
 8003386:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800338a:	4293      	cmp	r3, r2
 800338c:	dbba      	blt.n	8003304 <_strtod_l+0x3fc>
 800338e:	4d42      	ldr	r5, [pc, #264]	; (8003498 <_strtod_l+0x590>)
 8003390:	f1c4 040f 	rsb	r4, r4, #15
 8003394:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003398:	4652      	mov	r2, sl
 800339a:	465b      	mov	r3, fp
 800339c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a0:	f7fd f96a 	bl	8000678 <__aeabi_dmul>
 80033a4:	9b06      	ldr	r3, [sp, #24]
 80033a6:	1b1c      	subs	r4, r3, r4
 80033a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80033ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80033b0:	e78d      	b.n	80032ce <_strtod_l+0x3c6>
 80033b2:	f113 0f16 	cmn.w	r3, #22
 80033b6:	dba5      	blt.n	8003304 <_strtod_l+0x3fc>
 80033b8:	4a37      	ldr	r2, [pc, #220]	; (8003498 <_strtod_l+0x590>)
 80033ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80033be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80033c2:	4650      	mov	r0, sl
 80033c4:	4659      	mov	r1, fp
 80033c6:	f7fd fa81 	bl	80008cc <__aeabi_ddiv>
 80033ca:	e782      	b.n	80032d2 <_strtod_l+0x3ca>
 80033cc:	2300      	movs	r3, #0
 80033ce:	4e33      	ldr	r6, [pc, #204]	; (800349c <_strtod_l+0x594>)
 80033d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80033d4:	4650      	mov	r0, sl
 80033d6:	4659      	mov	r1, fp
 80033d8:	461d      	mov	r5, r3
 80033da:	f1b8 0f01 	cmp.w	r8, #1
 80033de:	dc21      	bgt.n	8003424 <_strtod_l+0x51c>
 80033e0:	b10b      	cbz	r3, 80033e6 <_strtod_l+0x4de>
 80033e2:	4682      	mov	sl, r0
 80033e4:	468b      	mov	fp, r1
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <_strtod_l+0x594>)
 80033e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80033ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80033f0:	4652      	mov	r2, sl
 80033f2:	465b      	mov	r3, fp
 80033f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80033f8:	f7fd f93e 	bl	8000678 <__aeabi_dmul>
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <_strtod_l+0x598>)
 80033fe:	460a      	mov	r2, r1
 8003400:	400b      	ands	r3, r1
 8003402:	4928      	ldr	r1, [pc, #160]	; (80034a4 <_strtod_l+0x59c>)
 8003404:	428b      	cmp	r3, r1
 8003406:	4682      	mov	sl, r0
 8003408:	d898      	bhi.n	800333c <_strtod_l+0x434>
 800340a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800340e:	428b      	cmp	r3, r1
 8003410:	bf86      	itte	hi
 8003412:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80034ac <_strtod_l+0x5a4>
 8003416:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800341a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800341e:	2300      	movs	r3, #0
 8003420:	9304      	str	r3, [sp, #16]
 8003422:	e077      	b.n	8003514 <_strtod_l+0x60c>
 8003424:	f018 0f01 	tst.w	r8, #1
 8003428:	d006      	beq.n	8003438 <_strtod_l+0x530>
 800342a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd f921 	bl	8000678 <__aeabi_dmul>
 8003436:	2301      	movs	r3, #1
 8003438:	3501      	adds	r5, #1
 800343a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800343e:	e7cc      	b.n	80033da <_strtod_l+0x4d2>
 8003440:	d0ed      	beq.n	800341e <_strtod_l+0x516>
 8003442:	f1c8 0800 	rsb	r8, r8, #0
 8003446:	f018 020f 	ands.w	r2, r8, #15
 800344a:	d00a      	beq.n	8003462 <_strtod_l+0x55a>
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <_strtod_l+0x590>)
 800344e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003452:	4650      	mov	r0, sl
 8003454:	4659      	mov	r1, fp
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd fa37 	bl	80008cc <__aeabi_ddiv>
 800345e:	4682      	mov	sl, r0
 8003460:	468b      	mov	fp, r1
 8003462:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003466:	d0da      	beq.n	800341e <_strtod_l+0x516>
 8003468:	f1b8 0f1f 	cmp.w	r8, #31
 800346c:	dd20      	ble.n	80034b0 <_strtod_l+0x5a8>
 800346e:	2400      	movs	r4, #0
 8003470:	46a0      	mov	r8, r4
 8003472:	9407      	str	r4, [sp, #28]
 8003474:	9405      	str	r4, [sp, #20]
 8003476:	2322      	movs	r3, #34	; 0x22
 8003478:	f04f 0a00 	mov.w	sl, #0
 800347c:	f04f 0b00 	mov.w	fp, #0
 8003480:	f8c9 3000 	str.w	r3, [r9]
 8003484:	e765      	b.n	8003352 <_strtod_l+0x44a>
 8003486:	bf00      	nop
 8003488:	08005e51 	.word	0x08005e51
 800348c:	08005edb 	.word	0x08005edb
 8003490:	08005e59 	.word	0x08005e59
 8003494:	08005e9c 	.word	0x08005e9c
 8003498:	08005f18 	.word	0x08005f18
 800349c:	08005ef0 	.word	0x08005ef0
 80034a0:	7ff00000 	.word	0x7ff00000
 80034a4:	7ca00000 	.word	0x7ca00000
 80034a8:	fff80000 	.word	0xfff80000
 80034ac:	7fefffff 	.word	0x7fefffff
 80034b0:	f018 0310 	ands.w	r3, r8, #16
 80034b4:	bf18      	it	ne
 80034b6:	236a      	movne	r3, #106	; 0x6a
 80034b8:	4da0      	ldr	r5, [pc, #640]	; (800373c <_strtod_l+0x834>)
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	4650      	mov	r0, sl
 80034be:	4659      	mov	r1, fp
 80034c0:	2300      	movs	r3, #0
 80034c2:	f1b8 0f00 	cmp.w	r8, #0
 80034c6:	f300 810a 	bgt.w	80036de <_strtod_l+0x7d6>
 80034ca:	b10b      	cbz	r3, 80034d0 <_strtod_l+0x5c8>
 80034cc:	4682      	mov	sl, r0
 80034ce:	468b      	mov	fp, r1
 80034d0:	9b04      	ldr	r3, [sp, #16]
 80034d2:	b1bb      	cbz	r3, 8003504 <_strtod_l+0x5fc>
 80034d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80034d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80034dc:	2b00      	cmp	r3, #0
 80034de:	4659      	mov	r1, fp
 80034e0:	dd10      	ble.n	8003504 <_strtod_l+0x5fc>
 80034e2:	2b1f      	cmp	r3, #31
 80034e4:	f340 8107 	ble.w	80036f6 <_strtod_l+0x7ee>
 80034e8:	2b34      	cmp	r3, #52	; 0x34
 80034ea:	bfde      	ittt	le
 80034ec:	3b20      	suble	r3, #32
 80034ee:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80034f2:	fa02 f303 	lslle.w	r3, r2, r3
 80034f6:	f04f 0a00 	mov.w	sl, #0
 80034fa:	bfcc      	ite	gt
 80034fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003500:	ea03 0b01 	andle.w	fp, r3, r1
 8003504:	2200      	movs	r2, #0
 8003506:	2300      	movs	r3, #0
 8003508:	4650      	mov	r0, sl
 800350a:	4659      	mov	r1, fp
 800350c:	f7fd fb1c 	bl	8000b48 <__aeabi_dcmpeq>
 8003510:	2800      	cmp	r0, #0
 8003512:	d1ac      	bne.n	800346e <_strtod_l+0x566>
 8003514:	9b07      	ldr	r3, [sp, #28]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	9a05      	ldr	r2, [sp, #20]
 800351a:	9908      	ldr	r1, [sp, #32]
 800351c:	4623      	mov	r3, r4
 800351e:	4648      	mov	r0, r9
 8003520:	f001 fda4 	bl	800506c <__s2b>
 8003524:	9007      	str	r0, [sp, #28]
 8003526:	2800      	cmp	r0, #0
 8003528:	f43f af08 	beq.w	800333c <_strtod_l+0x434>
 800352c:	9a06      	ldr	r2, [sp, #24]
 800352e:	9b06      	ldr	r3, [sp, #24]
 8003530:	2a00      	cmp	r2, #0
 8003532:	f1c3 0300 	rsb	r3, r3, #0
 8003536:	bfa8      	it	ge
 8003538:	2300      	movge	r3, #0
 800353a:	930e      	str	r3, [sp, #56]	; 0x38
 800353c:	2400      	movs	r4, #0
 800353e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003542:	9316      	str	r3, [sp, #88]	; 0x58
 8003544:	46a0      	mov	r8, r4
 8003546:	9b07      	ldr	r3, [sp, #28]
 8003548:	4648      	mov	r0, r9
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	f001 fd08 	bl	8004f60 <_Balloc>
 8003550:	9005      	str	r0, [sp, #20]
 8003552:	2800      	cmp	r0, #0
 8003554:	f43f aef6 	beq.w	8003344 <_strtod_l+0x43c>
 8003558:	9b07      	ldr	r3, [sp, #28]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	3202      	adds	r2, #2
 800355e:	f103 010c 	add.w	r1, r3, #12
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	300c      	adds	r0, #12
 8003566:	f7fe fe39 	bl	80021dc <memcpy>
 800356a:	aa1e      	add	r2, sp, #120	; 0x78
 800356c:	a91d      	add	r1, sp, #116	; 0x74
 800356e:	ec4b ab10 	vmov	d0, sl, fp
 8003572:	4648      	mov	r0, r9
 8003574:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003578:	f002 f834 	bl	80055e4 <__d2b>
 800357c:	901c      	str	r0, [sp, #112]	; 0x70
 800357e:	2800      	cmp	r0, #0
 8003580:	f43f aee0 	beq.w	8003344 <_strtod_l+0x43c>
 8003584:	2101      	movs	r1, #1
 8003586:	4648      	mov	r0, r9
 8003588:	f001 fdfc 	bl	8005184 <__i2b>
 800358c:	4680      	mov	r8, r0
 800358e:	2800      	cmp	r0, #0
 8003590:	f43f aed8 	beq.w	8003344 <_strtod_l+0x43c>
 8003594:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003596:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003598:	2e00      	cmp	r6, #0
 800359a:	bfab      	itete	ge
 800359c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800359e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80035a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80035a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80035a4:	bfac      	ite	ge
 80035a6:	18f7      	addge	r7, r6, r3
 80035a8:	1b9d      	sublt	r5, r3, r6
 80035aa:	9b04      	ldr	r3, [sp, #16]
 80035ac:	1af6      	subs	r6, r6, r3
 80035ae:	4416      	add	r6, r2
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <_strtod_l+0x838>)
 80035b2:	3e01      	subs	r6, #1
 80035b4:	429e      	cmp	r6, r3
 80035b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80035ba:	f280 80af 	bge.w	800371c <_strtod_l+0x814>
 80035be:	1b9b      	subs	r3, r3, r6
 80035c0:	2b1f      	cmp	r3, #31
 80035c2:	eba2 0203 	sub.w	r2, r2, r3
 80035c6:	f04f 0101 	mov.w	r1, #1
 80035ca:	f300 809b 	bgt.w	8003704 <_strtod_l+0x7fc>
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80035d4:	2300      	movs	r3, #0
 80035d6:	930a      	str	r3, [sp, #40]	; 0x28
 80035d8:	18be      	adds	r6, r7, r2
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	42b7      	cmp	r7, r6
 80035de:	4415      	add	r5, r2
 80035e0:	441d      	add	r5, r3
 80035e2:	463b      	mov	r3, r7
 80035e4:	bfa8      	it	ge
 80035e6:	4633      	movge	r3, r6
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	bfa8      	it	ge
 80035ec:	462b      	movge	r3, r5
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bfc2      	ittt	gt
 80035f2:	1af6      	subgt	r6, r6, r3
 80035f4:	1aed      	subgt	r5, r5, r3
 80035f6:	1aff      	subgt	r7, r7, r3
 80035f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035fa:	b1bb      	cbz	r3, 800362c <_strtod_l+0x724>
 80035fc:	4641      	mov	r1, r8
 80035fe:	461a      	mov	r2, r3
 8003600:	4648      	mov	r0, r9
 8003602:	f001 fe5f 	bl	80052c4 <__pow5mult>
 8003606:	4680      	mov	r8, r0
 8003608:	2800      	cmp	r0, #0
 800360a:	f43f ae9b 	beq.w	8003344 <_strtod_l+0x43c>
 800360e:	4601      	mov	r1, r0
 8003610:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003612:	4648      	mov	r0, r9
 8003614:	f001 fdbf 	bl	8005196 <__multiply>
 8003618:	900c      	str	r0, [sp, #48]	; 0x30
 800361a:	2800      	cmp	r0, #0
 800361c:	f43f ae92 	beq.w	8003344 <_strtod_l+0x43c>
 8003620:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003622:	4648      	mov	r0, r9
 8003624:	f001 fcd0 	bl	8004fc8 <_Bfree>
 8003628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800362a:	931c      	str	r3, [sp, #112]	; 0x70
 800362c:	2e00      	cmp	r6, #0
 800362e:	dc7a      	bgt.n	8003726 <_strtod_l+0x81e>
 8003630:	9b06      	ldr	r3, [sp, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dd08      	ble.n	8003648 <_strtod_l+0x740>
 8003636:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003638:	9905      	ldr	r1, [sp, #20]
 800363a:	4648      	mov	r0, r9
 800363c:	f001 fe42 	bl	80052c4 <__pow5mult>
 8003640:	9005      	str	r0, [sp, #20]
 8003642:	2800      	cmp	r0, #0
 8003644:	f43f ae7e 	beq.w	8003344 <_strtod_l+0x43c>
 8003648:	2d00      	cmp	r5, #0
 800364a:	dd08      	ble.n	800365e <_strtod_l+0x756>
 800364c:	462a      	mov	r2, r5
 800364e:	9905      	ldr	r1, [sp, #20]
 8003650:	4648      	mov	r0, r9
 8003652:	f001 fe85 	bl	8005360 <__lshift>
 8003656:	9005      	str	r0, [sp, #20]
 8003658:	2800      	cmp	r0, #0
 800365a:	f43f ae73 	beq.w	8003344 <_strtod_l+0x43c>
 800365e:	2f00      	cmp	r7, #0
 8003660:	dd08      	ble.n	8003674 <_strtod_l+0x76c>
 8003662:	4641      	mov	r1, r8
 8003664:	463a      	mov	r2, r7
 8003666:	4648      	mov	r0, r9
 8003668:	f001 fe7a 	bl	8005360 <__lshift>
 800366c:	4680      	mov	r8, r0
 800366e:	2800      	cmp	r0, #0
 8003670:	f43f ae68 	beq.w	8003344 <_strtod_l+0x43c>
 8003674:	9a05      	ldr	r2, [sp, #20]
 8003676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003678:	4648      	mov	r0, r9
 800367a:	f001 fedf 	bl	800543c <__mdiff>
 800367e:	4604      	mov	r4, r0
 8003680:	2800      	cmp	r0, #0
 8003682:	f43f ae5f 	beq.w	8003344 <_strtod_l+0x43c>
 8003686:	68c3      	ldr	r3, [r0, #12]
 8003688:	930c      	str	r3, [sp, #48]	; 0x30
 800368a:	2300      	movs	r3, #0
 800368c:	60c3      	str	r3, [r0, #12]
 800368e:	4641      	mov	r1, r8
 8003690:	f001 feba 	bl	8005408 <__mcmp>
 8003694:	2800      	cmp	r0, #0
 8003696:	da55      	bge.n	8003744 <_strtod_l+0x83c>
 8003698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800369a:	b9e3      	cbnz	r3, 80036d6 <_strtod_l+0x7ce>
 800369c:	f1ba 0f00 	cmp.w	sl, #0
 80036a0:	d119      	bne.n	80036d6 <_strtod_l+0x7ce>
 80036a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80036a6:	b9b3      	cbnz	r3, 80036d6 <_strtod_l+0x7ce>
 80036a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80036ac:	0d1b      	lsrs	r3, r3, #20
 80036ae:	051b      	lsls	r3, r3, #20
 80036b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80036b4:	d90f      	bls.n	80036d6 <_strtod_l+0x7ce>
 80036b6:	6963      	ldr	r3, [r4, #20]
 80036b8:	b913      	cbnz	r3, 80036c0 <_strtod_l+0x7b8>
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	dd0a      	ble.n	80036d6 <_strtod_l+0x7ce>
 80036c0:	4621      	mov	r1, r4
 80036c2:	2201      	movs	r2, #1
 80036c4:	4648      	mov	r0, r9
 80036c6:	f001 fe4b 	bl	8005360 <__lshift>
 80036ca:	4641      	mov	r1, r8
 80036cc:	4604      	mov	r4, r0
 80036ce:	f001 fe9b 	bl	8005408 <__mcmp>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	dc67      	bgt.n	80037a6 <_strtod_l+0x89e>
 80036d6:	9b04      	ldr	r3, [sp, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d171      	bne.n	80037c0 <_strtod_l+0x8b8>
 80036dc:	e63d      	b.n	800335a <_strtod_l+0x452>
 80036de:	f018 0f01 	tst.w	r8, #1
 80036e2:	d004      	beq.n	80036ee <_strtod_l+0x7e6>
 80036e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80036e8:	f7fc ffc6 	bl	8000678 <__aeabi_dmul>
 80036ec:	2301      	movs	r3, #1
 80036ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80036f2:	3508      	adds	r5, #8
 80036f4:	e6e5      	b.n	80034c2 <_strtod_l+0x5ba>
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	ea03 0a0a 	and.w	sl, r3, sl
 8003702:	e6ff      	b.n	8003504 <_strtod_l+0x5fc>
 8003704:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8003708:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800370c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8003710:	36e2      	adds	r6, #226	; 0xe2
 8003712:	fa01 f306 	lsl.w	r3, r1, r6
 8003716:	930a      	str	r3, [sp, #40]	; 0x28
 8003718:	910f      	str	r1, [sp, #60]	; 0x3c
 800371a:	e75d      	b.n	80035d8 <_strtod_l+0x6d0>
 800371c:	2300      	movs	r3, #0
 800371e:	930a      	str	r3, [sp, #40]	; 0x28
 8003720:	2301      	movs	r3, #1
 8003722:	930f      	str	r3, [sp, #60]	; 0x3c
 8003724:	e758      	b.n	80035d8 <_strtod_l+0x6d0>
 8003726:	4632      	mov	r2, r6
 8003728:	991c      	ldr	r1, [sp, #112]	; 0x70
 800372a:	4648      	mov	r0, r9
 800372c:	f001 fe18 	bl	8005360 <__lshift>
 8003730:	901c      	str	r0, [sp, #112]	; 0x70
 8003732:	2800      	cmp	r0, #0
 8003734:	f47f af7c 	bne.w	8003630 <_strtod_l+0x728>
 8003738:	e604      	b.n	8003344 <_strtod_l+0x43c>
 800373a:	bf00      	nop
 800373c:	08005eb0 	.word	0x08005eb0
 8003740:	fffffc02 	.word	0xfffffc02
 8003744:	465d      	mov	r5, fp
 8003746:	f040 8086 	bne.w	8003856 <_strtod_l+0x94e>
 800374a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800374c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003750:	b32a      	cbz	r2, 800379e <_strtod_l+0x896>
 8003752:	4aaf      	ldr	r2, [pc, #700]	; (8003a10 <_strtod_l+0xb08>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d153      	bne.n	8003800 <_strtod_l+0x8f8>
 8003758:	9b04      	ldr	r3, [sp, #16]
 800375a:	4650      	mov	r0, sl
 800375c:	b1d3      	cbz	r3, 8003794 <_strtod_l+0x88c>
 800375e:	4aad      	ldr	r2, [pc, #692]	; (8003a14 <_strtod_l+0xb0c>)
 8003760:	402a      	ands	r2, r5
 8003762:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800376a:	d816      	bhi.n	800379a <_strtod_l+0x892>
 800376c:	0d12      	lsrs	r2, r2, #20
 800376e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	4298      	cmp	r0, r3
 8003778:	d142      	bne.n	8003800 <_strtod_l+0x8f8>
 800377a:	4ba7      	ldr	r3, [pc, #668]	; (8003a18 <_strtod_l+0xb10>)
 800377c:	429d      	cmp	r5, r3
 800377e:	d102      	bne.n	8003786 <_strtod_l+0x87e>
 8003780:	3001      	adds	r0, #1
 8003782:	f43f addf 	beq.w	8003344 <_strtod_l+0x43c>
 8003786:	4ba3      	ldr	r3, [pc, #652]	; (8003a14 <_strtod_l+0xb0c>)
 8003788:	402b      	ands	r3, r5
 800378a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800378e:	f04f 0a00 	mov.w	sl, #0
 8003792:	e7a0      	b.n	80036d6 <_strtod_l+0x7ce>
 8003794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003798:	e7ed      	b.n	8003776 <_strtod_l+0x86e>
 800379a:	460b      	mov	r3, r1
 800379c:	e7eb      	b.n	8003776 <_strtod_l+0x86e>
 800379e:	bb7b      	cbnz	r3, 8003800 <_strtod_l+0x8f8>
 80037a0:	f1ba 0f00 	cmp.w	sl, #0
 80037a4:	d12c      	bne.n	8003800 <_strtod_l+0x8f8>
 80037a6:	9904      	ldr	r1, [sp, #16]
 80037a8:	4a9a      	ldr	r2, [pc, #616]	; (8003a14 <_strtod_l+0xb0c>)
 80037aa:	465b      	mov	r3, fp
 80037ac:	b1f1      	cbz	r1, 80037ec <_strtod_l+0x8e4>
 80037ae:	ea02 010b 	and.w	r1, r2, fp
 80037b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80037b6:	dc19      	bgt.n	80037ec <_strtod_l+0x8e4>
 80037b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80037bc:	f77f ae5b 	ble.w	8003476 <_strtod_l+0x56e>
 80037c0:	4a96      	ldr	r2, [pc, #600]	; (8003a1c <_strtod_l+0xb14>)
 80037c2:	2300      	movs	r3, #0
 80037c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80037c8:	4650      	mov	r0, sl
 80037ca:	4659      	mov	r1, fp
 80037cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80037d0:	f7fc ff52 	bl	8000678 <__aeabi_dmul>
 80037d4:	4682      	mov	sl, r0
 80037d6:	468b      	mov	fp, r1
 80037d8:	2900      	cmp	r1, #0
 80037da:	f47f adbe 	bne.w	800335a <_strtod_l+0x452>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f47f adbb 	bne.w	800335a <_strtod_l+0x452>
 80037e4:	2322      	movs	r3, #34	; 0x22
 80037e6:	f8c9 3000 	str.w	r3, [r9]
 80037ea:	e5b6      	b.n	800335a <_strtod_l+0x452>
 80037ec:	4013      	ands	r3, r2
 80037ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80037f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80037f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80037fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80037fe:	e76a      	b.n	80036d6 <_strtod_l+0x7ce>
 8003800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003802:	b193      	cbz	r3, 800382a <_strtod_l+0x922>
 8003804:	422b      	tst	r3, r5
 8003806:	f43f af66 	beq.w	80036d6 <_strtod_l+0x7ce>
 800380a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800380c:	9a04      	ldr	r2, [sp, #16]
 800380e:	4650      	mov	r0, sl
 8003810:	4659      	mov	r1, fp
 8003812:	b173      	cbz	r3, 8003832 <_strtod_l+0x92a>
 8003814:	f7ff fb5a 	bl	8002ecc <sulp>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003820:	f7fc fd74 	bl	800030c <__adddf3>
 8003824:	4682      	mov	sl, r0
 8003826:	468b      	mov	fp, r1
 8003828:	e755      	b.n	80036d6 <_strtod_l+0x7ce>
 800382a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800382c:	ea13 0f0a 	tst.w	r3, sl
 8003830:	e7e9      	b.n	8003806 <_strtod_l+0x8fe>
 8003832:	f7ff fb4b 	bl	8002ecc <sulp>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800383e:	f7fc fd63 	bl	8000308 <__aeabi_dsub>
 8003842:	2200      	movs	r2, #0
 8003844:	2300      	movs	r3, #0
 8003846:	4682      	mov	sl, r0
 8003848:	468b      	mov	fp, r1
 800384a:	f7fd f97d 	bl	8000b48 <__aeabi_dcmpeq>
 800384e:	2800      	cmp	r0, #0
 8003850:	f47f ae11 	bne.w	8003476 <_strtod_l+0x56e>
 8003854:	e73f      	b.n	80036d6 <_strtod_l+0x7ce>
 8003856:	4641      	mov	r1, r8
 8003858:	4620      	mov	r0, r4
 800385a:	f001 ff12 	bl	8005682 <__ratio>
 800385e:	ec57 6b10 	vmov	r6, r7, d0
 8003862:	2200      	movs	r2, #0
 8003864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003868:	ee10 0a10 	vmov	r0, s0
 800386c:	4639      	mov	r1, r7
 800386e:	f7fd f97f 	bl	8000b70 <__aeabi_dcmple>
 8003872:	2800      	cmp	r0, #0
 8003874:	d077      	beq.n	8003966 <_strtod_l+0xa5e>
 8003876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003878:	2b00      	cmp	r3, #0
 800387a:	d04a      	beq.n	8003912 <_strtod_l+0xa0a>
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <_strtod_l+0xb18>)
 800387e:	2200      	movs	r2, #0
 8003880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003884:	4f66      	ldr	r7, [pc, #408]	; (8003a20 <_strtod_l+0xb18>)
 8003886:	2600      	movs	r6, #0
 8003888:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <_strtod_l+0xb0c>)
 800388a:	402b      	ands	r3, r5
 800388c:	930f      	str	r3, [sp, #60]	; 0x3c
 800388e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <_strtod_l+0xb1c>)
 8003892:	429a      	cmp	r2, r3
 8003894:	f040 80ce 	bne.w	8003a34 <_strtod_l+0xb2c>
 8003898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800389c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80038a4:	ec4b ab10 	vmov	d0, sl, fp
 80038a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80038ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038b0:	f001 fe22 	bl	80054f8 <__ulp>
 80038b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038b8:	ec53 2b10 	vmov	r2, r3, d0
 80038bc:	f7fc fedc 	bl	8000678 <__aeabi_dmul>
 80038c0:	4652      	mov	r2, sl
 80038c2:	465b      	mov	r3, fp
 80038c4:	f7fc fd22 	bl	800030c <__adddf3>
 80038c8:	460b      	mov	r3, r1
 80038ca:	4952      	ldr	r1, [pc, #328]	; (8003a14 <_strtod_l+0xb0c>)
 80038cc:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <_strtod_l+0xb20>)
 80038ce:	4019      	ands	r1, r3
 80038d0:	4291      	cmp	r1, r2
 80038d2:	4682      	mov	sl, r0
 80038d4:	d95b      	bls.n	800398e <_strtod_l+0xa86>
 80038d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80038dc:	4293      	cmp	r3, r2
 80038de:	d103      	bne.n	80038e8 <_strtod_l+0x9e0>
 80038e0:	9b08      	ldr	r3, [sp, #32]
 80038e2:	3301      	adds	r3, #1
 80038e4:	f43f ad2e 	beq.w	8003344 <_strtod_l+0x43c>
 80038e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003a18 <_strtod_l+0xb10>
 80038ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80038f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80038f2:	4648      	mov	r0, r9
 80038f4:	f001 fb68 	bl	8004fc8 <_Bfree>
 80038f8:	9905      	ldr	r1, [sp, #20]
 80038fa:	4648      	mov	r0, r9
 80038fc:	f001 fb64 	bl	8004fc8 <_Bfree>
 8003900:	4641      	mov	r1, r8
 8003902:	4648      	mov	r0, r9
 8003904:	f001 fb60 	bl	8004fc8 <_Bfree>
 8003908:	4621      	mov	r1, r4
 800390a:	4648      	mov	r0, r9
 800390c:	f001 fb5c 	bl	8004fc8 <_Bfree>
 8003910:	e619      	b.n	8003546 <_strtod_l+0x63e>
 8003912:	f1ba 0f00 	cmp.w	sl, #0
 8003916:	d11a      	bne.n	800394e <_strtod_l+0xa46>
 8003918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800391c:	b9eb      	cbnz	r3, 800395a <_strtod_l+0xa52>
 800391e:	2200      	movs	r2, #0
 8003920:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <_strtod_l+0xb18>)
 8003922:	4630      	mov	r0, r6
 8003924:	4639      	mov	r1, r7
 8003926:	f7fd f919 	bl	8000b5c <__aeabi_dcmplt>
 800392a:	b9c8      	cbnz	r0, 8003960 <_strtod_l+0xa58>
 800392c:	4630      	mov	r0, r6
 800392e:	4639      	mov	r1, r7
 8003930:	2200      	movs	r2, #0
 8003932:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <_strtod_l+0xb24>)
 8003934:	f7fc fea0 	bl	8000678 <__aeabi_dmul>
 8003938:	4606      	mov	r6, r0
 800393a:	460f      	mov	r7, r1
 800393c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003940:	9618      	str	r6, [sp, #96]	; 0x60
 8003942:	9319      	str	r3, [sp, #100]	; 0x64
 8003944:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003948:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800394c:	e79c      	b.n	8003888 <_strtod_l+0x980>
 800394e:	f1ba 0f01 	cmp.w	sl, #1
 8003952:	d102      	bne.n	800395a <_strtod_l+0xa52>
 8003954:	2d00      	cmp	r5, #0
 8003956:	f43f ad8e 	beq.w	8003476 <_strtod_l+0x56e>
 800395a:	2200      	movs	r2, #0
 800395c:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <_strtod_l+0xb28>)
 800395e:	e78f      	b.n	8003880 <_strtod_l+0x978>
 8003960:	2600      	movs	r6, #0
 8003962:	4f32      	ldr	r7, [pc, #200]	; (8003a2c <_strtod_l+0xb24>)
 8003964:	e7ea      	b.n	800393c <_strtod_l+0xa34>
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <_strtod_l+0xb24>)
 8003968:	4630      	mov	r0, r6
 800396a:	4639      	mov	r1, r7
 800396c:	2200      	movs	r2, #0
 800396e:	f7fc fe83 	bl	8000678 <__aeabi_dmul>
 8003972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003974:	4606      	mov	r6, r0
 8003976:	460f      	mov	r7, r1
 8003978:	b933      	cbnz	r3, 8003988 <_strtod_l+0xa80>
 800397a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800397e:	9010      	str	r0, [sp, #64]	; 0x40
 8003980:	9311      	str	r3, [sp, #68]	; 0x44
 8003982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003986:	e7df      	b.n	8003948 <_strtod_l+0xa40>
 8003988:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800398c:	e7f9      	b.n	8003982 <_strtod_l+0xa7a>
 800398e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8003992:	9b04      	ldr	r3, [sp, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ab      	bne.n	80038f0 <_strtod_l+0x9e8>
 8003998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800399c:	0d1b      	lsrs	r3, r3, #20
 800399e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039a0:	051b      	lsls	r3, r3, #20
 80039a2:	429a      	cmp	r2, r3
 80039a4:	465d      	mov	r5, fp
 80039a6:	d1a3      	bne.n	80038f0 <_strtod_l+0x9e8>
 80039a8:	4639      	mov	r1, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7fd f914 	bl	8000bd8 <__aeabi_d2iz>
 80039b0:	f7fc fdf8 	bl	80005a4 <__aeabi_i2d>
 80039b4:	460b      	mov	r3, r1
 80039b6:	4602      	mov	r2, r0
 80039b8:	4639      	mov	r1, r7
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7fc fca4 	bl	8000308 <__aeabi_dsub>
 80039c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039c2:	4606      	mov	r6, r0
 80039c4:	460f      	mov	r7, r1
 80039c6:	b933      	cbnz	r3, 80039d6 <_strtod_l+0xace>
 80039c8:	f1ba 0f00 	cmp.w	sl, #0
 80039cc:	d103      	bne.n	80039d6 <_strtod_l+0xace>
 80039ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	d06d      	beq.n	8003ab2 <_strtod_l+0xbaa>
 80039d6:	a30a      	add	r3, pc, #40	; (adr r3, 8003a00 <_strtod_l+0xaf8>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	4630      	mov	r0, r6
 80039de:	4639      	mov	r1, r7
 80039e0:	f7fd f8bc 	bl	8000b5c <__aeabi_dcmplt>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	f47f acb8 	bne.w	800335a <_strtod_l+0x452>
 80039ea:	a307      	add	r3, pc, #28	; (adr r3, 8003a08 <_strtod_l+0xb00>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	f7fd f8d0 	bl	8000b98 <__aeabi_dcmpgt>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	f43f af79 	beq.w	80038f0 <_strtod_l+0x9e8>
 80039fe:	e4ac      	b.n	800335a <_strtod_l+0x452>
 8003a00:	94a03595 	.word	0x94a03595
 8003a04:	3fdfffff 	.word	0x3fdfffff
 8003a08:	35afe535 	.word	0x35afe535
 8003a0c:	3fe00000 	.word	0x3fe00000
 8003a10:	000fffff 	.word	0x000fffff
 8003a14:	7ff00000 	.word	0x7ff00000
 8003a18:	7fefffff 	.word	0x7fefffff
 8003a1c:	39500000 	.word	0x39500000
 8003a20:	3ff00000 	.word	0x3ff00000
 8003a24:	7fe00000 	.word	0x7fe00000
 8003a28:	7c9fffff 	.word	0x7c9fffff
 8003a2c:	3fe00000 	.word	0x3fe00000
 8003a30:	bff00000 	.word	0xbff00000
 8003a34:	9b04      	ldr	r3, [sp, #16]
 8003a36:	b333      	cbz	r3, 8003a86 <_strtod_l+0xb7e>
 8003a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003a3e:	d822      	bhi.n	8003a86 <_strtod_l+0xb7e>
 8003a40:	a327      	add	r3, pc, #156	; (adr r3, 8003ae0 <_strtod_l+0xbd8>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	4630      	mov	r0, r6
 8003a48:	4639      	mov	r1, r7
 8003a4a:	f7fd f891 	bl	8000b70 <__aeabi_dcmple>
 8003a4e:	b1a0      	cbz	r0, 8003a7a <_strtod_l+0xb72>
 8003a50:	4639      	mov	r1, r7
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7fd f8e8 	bl	8000c28 <__aeabi_d2uiz>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	bf08      	it	eq
 8003a5c:	2001      	moveq	r0, #1
 8003a5e:	f7fc fd91 	bl	8000584 <__aeabi_ui2d>
 8003a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a64:	4606      	mov	r6, r0
 8003a66:	460f      	mov	r7, r1
 8003a68:	bb03      	cbnz	r3, 8003aac <_strtod_l+0xba4>
 8003a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a6e:	9012      	str	r0, [sp, #72]	; 0x48
 8003a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003a76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003a8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8003a8e:	f001 fd33 	bl	80054f8 <__ulp>
 8003a92:	4650      	mov	r0, sl
 8003a94:	ec53 2b10 	vmov	r2, r3, d0
 8003a98:	4659      	mov	r1, fp
 8003a9a:	f7fc fded 	bl	8000678 <__aeabi_dmul>
 8003a9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003aa2:	f7fc fc33 	bl	800030c <__adddf3>
 8003aa6:	4682      	mov	sl, r0
 8003aa8:	468b      	mov	fp, r1
 8003aaa:	e772      	b.n	8003992 <_strtod_l+0xa8a>
 8003aac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8003ab0:	e7df      	b.n	8003a72 <_strtod_l+0xb6a>
 8003ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8003ae8 <_strtod_l+0xbe0>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fd f850 	bl	8000b5c <__aeabi_dcmplt>
 8003abc:	e79c      	b.n	80039f8 <_strtod_l+0xaf0>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8003ac2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	f7ff ba61 	b.w	8002f8e <_strtod_l+0x86>
 8003acc:	2b65      	cmp	r3, #101	; 0x65
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f43f ab4e 	beq.w	8003172 <_strtod_l+0x26a>
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	9104      	str	r1, [sp, #16]
 8003adc:	f7ff bacb 	b.w	8003076 <_strtod_l+0x16e>
 8003ae0:	ffc00000 	.word	0xffc00000
 8003ae4:	41dfffff 	.word	0x41dfffff
 8003ae8:	94a03595 	.word	0x94a03595
 8003aec:	3fcfffff 	.word	0x3fcfffff

08003af0 <_strtod_r>:
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <_strtod_r+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b410      	push	{r4}
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4c04      	ldr	r4, [pc, #16]	; (8003b0c <_strtod_r+0x1c>)
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf08      	it	eq
 8003afe:	4623      	moveq	r3, r4
 8003b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b04:	f7ff ba00 	b.w	8002f08 <_strtod_l>
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	20000070 	.word	0x20000070

08003b10 <_strtol_l.isra.0>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	4680      	mov	r8, r0
 8003b16:	4689      	mov	r9, r1
 8003b18:	4692      	mov	sl, r2
 8003b1a:	461e      	mov	r6, r3
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	463d      	mov	r5, r7
 8003b20:	9808      	ldr	r0, [sp, #32]
 8003b22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b26:	f001 f9ed 	bl	8004f04 <__locale_ctype_ptr_l>
 8003b2a:	4420      	add	r0, r4
 8003b2c:	7843      	ldrb	r3, [r0, #1]
 8003b2e:	f013 0308 	ands.w	r3, r3, #8
 8003b32:	d132      	bne.n	8003b9a <_strtol_l.isra.0+0x8a>
 8003b34:	2c2d      	cmp	r4, #45	; 0x2d
 8003b36:	d132      	bne.n	8003b9e <_strtol_l.isra.0+0x8e>
 8003b38:	787c      	ldrb	r4, [r7, #1]
 8003b3a:	1cbd      	adds	r5, r7, #2
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d05d      	beq.n	8003bfe <_strtol_l.isra.0+0xee>
 8003b42:	2e10      	cmp	r6, #16
 8003b44:	d109      	bne.n	8003b5a <_strtol_l.isra.0+0x4a>
 8003b46:	2c30      	cmp	r4, #48	; 0x30
 8003b48:	d107      	bne.n	8003b5a <_strtol_l.isra.0+0x4a>
 8003b4a:	782b      	ldrb	r3, [r5, #0]
 8003b4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003b50:	2b58      	cmp	r3, #88	; 0x58
 8003b52:	d14f      	bne.n	8003bf4 <_strtol_l.isra.0+0xe4>
 8003b54:	786c      	ldrb	r4, [r5, #1]
 8003b56:	2610      	movs	r6, #16
 8003b58:	3502      	adds	r5, #2
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003b62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003b66:	2700      	movs	r7, #0
 8003b68:	fbb1 fcf6 	udiv	ip, r1, r6
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003b72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d817      	bhi.n	8003baa <_strtol_l.isra.0+0x9a>
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	dd23      	ble.n	8003bc8 <_strtol_l.isra.0+0xb8>
 8003b80:	1c7b      	adds	r3, r7, #1
 8003b82:	d007      	beq.n	8003b94 <_strtol_l.isra.0+0x84>
 8003b84:	4584      	cmp	ip, r0
 8003b86:	d31c      	bcc.n	8003bc2 <_strtol_l.isra.0+0xb2>
 8003b88:	d101      	bne.n	8003b8e <_strtol_l.isra.0+0x7e>
 8003b8a:	45a6      	cmp	lr, r4
 8003b8c:	db19      	blt.n	8003bc2 <_strtol_l.isra.0+0xb2>
 8003b8e:	fb00 4006 	mla	r0, r0, r6, r4
 8003b92:	2701      	movs	r7, #1
 8003b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b98:	e7eb      	b.n	8003b72 <_strtol_l.isra.0+0x62>
 8003b9a:	462f      	mov	r7, r5
 8003b9c:	e7bf      	b.n	8003b1e <_strtol_l.isra.0+0xe>
 8003b9e:	2c2b      	cmp	r4, #43	; 0x2b
 8003ba0:	bf04      	itt	eq
 8003ba2:	1cbd      	addeq	r5, r7, #2
 8003ba4:	787c      	ldrbeq	r4, [r7, #1]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	e7c9      	b.n	8003b3e <_strtol_l.isra.0+0x2e>
 8003baa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003bae:	2b19      	cmp	r3, #25
 8003bb0:	d801      	bhi.n	8003bb6 <_strtol_l.isra.0+0xa6>
 8003bb2:	3c37      	subs	r4, #55	; 0x37
 8003bb4:	e7e2      	b.n	8003b7c <_strtol_l.isra.0+0x6c>
 8003bb6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003bba:	2b19      	cmp	r3, #25
 8003bbc:	d804      	bhi.n	8003bc8 <_strtol_l.isra.0+0xb8>
 8003bbe:	3c57      	subs	r4, #87	; 0x57
 8003bc0:	e7dc      	b.n	8003b7c <_strtol_l.isra.0+0x6c>
 8003bc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003bc6:	e7e5      	b.n	8003b94 <_strtol_l.isra.0+0x84>
 8003bc8:	1c7b      	adds	r3, r7, #1
 8003bca:	d108      	bne.n	8003bde <_strtol_l.isra.0+0xce>
 8003bcc:	2322      	movs	r3, #34	; 0x22
 8003bce:	f8c8 3000 	str.w	r3, [r8]
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	f1ba 0f00 	cmp.w	sl, #0
 8003bd8:	d107      	bne.n	8003bea <_strtol_l.isra.0+0xda>
 8003bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bde:	b102      	cbz	r2, 8003be2 <_strtol_l.isra.0+0xd2>
 8003be0:	4240      	negs	r0, r0
 8003be2:	f1ba 0f00 	cmp.w	sl, #0
 8003be6:	d0f8      	beq.n	8003bda <_strtol_l.isra.0+0xca>
 8003be8:	b10f      	cbz	r7, 8003bee <_strtol_l.isra.0+0xde>
 8003bea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003bee:	f8ca 9000 	str.w	r9, [sl]
 8003bf2:	e7f2      	b.n	8003bda <_strtol_l.isra.0+0xca>
 8003bf4:	2430      	movs	r4, #48	; 0x30
 8003bf6:	2e00      	cmp	r6, #0
 8003bf8:	d1af      	bne.n	8003b5a <_strtol_l.isra.0+0x4a>
 8003bfa:	2608      	movs	r6, #8
 8003bfc:	e7ad      	b.n	8003b5a <_strtol_l.isra.0+0x4a>
 8003bfe:	2c30      	cmp	r4, #48	; 0x30
 8003c00:	d0a3      	beq.n	8003b4a <_strtol_l.isra.0+0x3a>
 8003c02:	260a      	movs	r6, #10
 8003c04:	e7a9      	b.n	8003b5a <_strtol_l.isra.0+0x4a>
	...

08003c08 <_strtol_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	4c06      	ldr	r4, [pc, #24]	; (8003c24 <_strtol_r+0x1c>)
 8003c0c:	4d06      	ldr	r5, [pc, #24]	; (8003c28 <_strtol_r+0x20>)
 8003c0e:	6824      	ldr	r4, [r4, #0]
 8003c10:	6a24      	ldr	r4, [r4, #32]
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	bf08      	it	eq
 8003c16:	462c      	moveq	r4, r5
 8003c18:	9400      	str	r4, [sp, #0]
 8003c1a:	f7ff ff79 	bl	8003b10 <_strtol_l.isra.0>
 8003c1e:	b003      	add	sp, #12
 8003c20:	bd30      	pop	{r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000070 	.word	0x20000070

08003c2c <quorem>:
 8003c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	6903      	ldr	r3, [r0, #16]
 8003c32:	690c      	ldr	r4, [r1, #16]
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	4680      	mov	r8, r0
 8003c38:	f2c0 8082 	blt.w	8003d40 <quorem+0x114>
 8003c3c:	3c01      	subs	r4, #1
 8003c3e:	f101 0714 	add.w	r7, r1, #20
 8003c42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003c46:	f100 0614 	add.w	r6, r0, #20
 8003c4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003c4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c52:	eb06 030c 	add.w	r3, r6, ip
 8003c56:	3501      	adds	r5, #1
 8003c58:	eb07 090c 	add.w	r9, r7, ip
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c62:	b395      	cbz	r5, 8003cca <quorem+0x9e>
 8003c64:	f04f 0a00 	mov.w	sl, #0
 8003c68:	4638      	mov	r0, r7
 8003c6a:	46b6      	mov	lr, r6
 8003c6c:	46d3      	mov	fp, sl
 8003c6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c72:	b293      	uxth	r3, r2
 8003c74:	fb05 a303 	mla	r3, r5, r3, sl
 8003c78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ebab 0303 	sub.w	r3, fp, r3
 8003c82:	0c12      	lsrs	r2, r2, #16
 8003c84:	f8de b000 	ldr.w	fp, [lr]
 8003c88:	fb05 a202 	mla	r2, r5, r2, sl
 8003c8c:	fa13 f38b 	uxtah	r3, r3, fp
 8003c90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c94:	fa1f fb82 	uxth.w	fp, r2
 8003c98:	f8de 2000 	ldr.w	r2, [lr]
 8003c9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003caa:	4581      	cmp	r9, r0
 8003cac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003cb0:	f84e 3b04 	str.w	r3, [lr], #4
 8003cb4:	d2db      	bcs.n	8003c6e <quorem+0x42>
 8003cb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8003cba:	b933      	cbnz	r3, 8003cca <quorem+0x9e>
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	429e      	cmp	r6, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	d330      	bcc.n	8003d28 <quorem+0xfc>
 8003cc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f001 fb9c 	bl	8005408 <__mcmp>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	db25      	blt.n	8003d20 <quorem+0xf4>
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f04f 0c00 	mov.w	ip, #0
 8003cdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8003ce0:	f8d0 e000 	ldr.w	lr, [r0]
 8003ce4:	b293      	uxth	r3, r2
 8003ce6:	ebac 0303 	sub.w	r3, ip, r3
 8003cea:	0c12      	lsrs	r2, r2, #16
 8003cec:	fa13 f38e 	uxtah	r3, r3, lr
 8003cf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cfe:	45b9      	cmp	r9, r7
 8003d00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003d04:	f840 3b04 	str.w	r3, [r0], #4
 8003d08:	d2e8      	bcs.n	8003cdc <quorem+0xb0>
 8003d0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003d0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003d12:	b92a      	cbnz	r2, 8003d20 <quorem+0xf4>
 8003d14:	3b04      	subs	r3, #4
 8003d16:	429e      	cmp	r6, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	d30b      	bcc.n	8003d34 <quorem+0x108>
 8003d1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003d20:	4628      	mov	r0, r5
 8003d22:	b003      	add	sp, #12
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d1ca      	bne.n	8003cc6 <quorem+0x9a>
 8003d30:	3c01      	subs	r4, #1
 8003d32:	e7c5      	b.n	8003cc0 <quorem+0x94>
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	3b04      	subs	r3, #4
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d1ef      	bne.n	8003d1c <quorem+0xf0>
 8003d3c:	3c01      	subs	r4, #1
 8003d3e:	e7ea      	b.n	8003d16 <quorem+0xea>
 8003d40:	2000      	movs	r0, #0
 8003d42:	e7ee      	b.n	8003d22 <quorem+0xf6>
 8003d44:	0000      	movs	r0, r0
	...

08003d48 <_dtoa_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	ec57 6b10 	vmov	r6, r7, d0
 8003d50:	b097      	sub	sp, #92	; 0x5c
 8003d52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d54:	9106      	str	r1, [sp, #24]
 8003d56:	4604      	mov	r4, r0
 8003d58:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8003d5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003d60:	e9cd 6700 	strd	r6, r7, [sp]
 8003d64:	b93d      	cbnz	r5, 8003d76 <_dtoa_r+0x2e>
 8003d66:	2010      	movs	r0, #16
 8003d68:	f001 f8e0 	bl	8004f2c <malloc>
 8003d6c:	6260      	str	r0, [r4, #36]	; 0x24
 8003d6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d72:	6005      	str	r5, [r0, #0]
 8003d74:	60c5      	str	r5, [r0, #12]
 8003d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	b151      	cbz	r1, 8003d92 <_dtoa_r+0x4a>
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	604a      	str	r2, [r1, #4]
 8003d80:	2301      	movs	r3, #1
 8003d82:	4093      	lsls	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
 8003d86:	4620      	mov	r0, r4
 8003d88:	f001 f91e 	bl	8004fc8 <_Bfree>
 8003d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	1e3b      	subs	r3, r7, #0
 8003d94:	bfbb      	ittet	lt
 8003d96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	9301      	strlt	r3, [sp, #4]
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	2201      	movlt	r2, #1
 8003da0:	bfac      	ite	ge
 8003da2:	f8c8 3000 	strge.w	r3, [r8]
 8003da6:	f8c8 2000 	strlt.w	r2, [r8]
 8003daa:	4baf      	ldr	r3, [pc, #700]	; (8004068 <_dtoa_r+0x320>)
 8003dac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003db0:	ea33 0308 	bics.w	r3, r3, r8
 8003db4:	d114      	bne.n	8003de0 <_dtoa_r+0x98>
 8003db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003db8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	9b00      	ldr	r3, [sp, #0]
 8003dc0:	b923      	cbnz	r3, 8003dcc <_dtoa_r+0x84>
 8003dc2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	f000 8542 	beq.w	8004850 <_dtoa_r+0xb08>
 8003dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800407c <_dtoa_r+0x334>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8544 	beq.w	8004860 <_dtoa_r+0xb18>
 8003dd8:	f10b 0303 	add.w	r3, fp, #3
 8003ddc:	f000 bd3e 	b.w	800485c <_dtoa_r+0xb14>
 8003de0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2300      	movs	r3, #0
 8003de8:	4630      	mov	r0, r6
 8003dea:	4639      	mov	r1, r7
 8003dec:	f7fc feac 	bl	8000b48 <__aeabi_dcmpeq>
 8003df0:	4681      	mov	r9, r0
 8003df2:	b168      	cbz	r0, 8003e10 <_dtoa_r+0xc8>
 8003df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003df6:	2301      	movs	r3, #1
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8524 	beq.w	800484a <_dtoa_r+0xb02>
 8003e02:	4b9a      	ldr	r3, [pc, #616]	; (800406c <_dtoa_r+0x324>)
 8003e04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e06:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	f000 bd28 	b.w	8004860 <_dtoa_r+0xb18>
 8003e10:	aa14      	add	r2, sp, #80	; 0x50
 8003e12:	a915      	add	r1, sp, #84	; 0x54
 8003e14:	ec47 6b10 	vmov	d0, r6, r7
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f001 fbe3 	bl	80055e4 <__d2b>
 8003e1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003e22:	9004      	str	r0, [sp, #16]
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	d07c      	beq.n	8003f22 <_dtoa_r+0x1da>
 8003e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003e2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003e30:	46b2      	mov	sl, r6
 8003e32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003e36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4b8b      	ldr	r3, [pc, #556]	; (8004070 <_dtoa_r+0x328>)
 8003e42:	4650      	mov	r0, sl
 8003e44:	4659      	mov	r1, fp
 8003e46:	f7fc fa5f 	bl	8000308 <__aeabi_dsub>
 8003e4a:	a381      	add	r3, pc, #516	; (adr r3, 8004050 <_dtoa_r+0x308>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fc12 	bl	8000678 <__aeabi_dmul>
 8003e54:	a380      	add	r3, pc, #512	; (adr r3, 8004058 <_dtoa_r+0x310>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fa57 	bl	800030c <__adddf3>
 8003e5e:	4606      	mov	r6, r0
 8003e60:	4628      	mov	r0, r5
 8003e62:	460f      	mov	r7, r1
 8003e64:	f7fc fb9e 	bl	80005a4 <__aeabi_i2d>
 8003e68:	a37d      	add	r3, pc, #500	; (adr r3, 8004060 <_dtoa_r+0x318>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fc03 	bl	8000678 <__aeabi_dmul>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4630      	mov	r0, r6
 8003e78:	4639      	mov	r1, r7
 8003e7a:	f7fc fa47 	bl	800030c <__adddf3>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460f      	mov	r7, r1
 8003e82:	f7fc fea9 	bl	8000bd8 <__aeabi_d2iz>
 8003e86:	2200      	movs	r2, #0
 8003e88:	4682      	mov	sl, r0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	4639      	mov	r1, r7
 8003e90:	f7fc fe64 	bl	8000b5c <__aeabi_dcmplt>
 8003e94:	b148      	cbz	r0, 8003eaa <_dtoa_r+0x162>
 8003e96:	4650      	mov	r0, sl
 8003e98:	f7fc fb84 	bl	80005a4 <__aeabi_i2d>
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	f7fc fe52 	bl	8000b48 <__aeabi_dcmpeq>
 8003ea4:	b908      	cbnz	r0, 8003eaa <_dtoa_r+0x162>
 8003ea6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003eaa:	f1ba 0f16 	cmp.w	sl, #22
 8003eae:	d859      	bhi.n	8003f64 <_dtoa_r+0x21c>
 8003eb0:	4970      	ldr	r1, [pc, #448]	; (8004074 <_dtoa_r+0x32c>)
 8003eb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003eb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ebe:	f7fc fe6b 	bl	8000b98 <__aeabi_dcmpgt>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d050      	beq.n	8003f68 <_dtoa_r+0x220>
 8003ec6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003eca:	2300      	movs	r3, #0
 8003ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ed0:	1b5d      	subs	r5, r3, r5
 8003ed2:	f1b5 0801 	subs.w	r8, r5, #1
 8003ed6:	bf49      	itett	mi
 8003ed8:	f1c5 0301 	rsbmi	r3, r5, #1
 8003edc:	2300      	movpl	r3, #0
 8003ede:	9305      	strmi	r3, [sp, #20]
 8003ee0:	f04f 0800 	movmi.w	r8, #0
 8003ee4:	bf58      	it	pl
 8003ee6:	9305      	strpl	r3, [sp, #20]
 8003ee8:	f1ba 0f00 	cmp.w	sl, #0
 8003eec:	db3e      	blt.n	8003f6c <_dtoa_r+0x224>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	44d0      	add	r8, sl
 8003ef2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	9b06      	ldr	r3, [sp, #24]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	f200 8090 	bhi.w	8004020 <_dtoa_r+0x2d8>
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	bfc4      	itt	gt
 8003f04:	3b04      	subgt	r3, #4
 8003f06:	9306      	strgt	r3, [sp, #24]
 8003f08:	9b06      	ldr	r3, [sp, #24]
 8003f0a:	f1a3 0302 	sub.w	r3, r3, #2
 8003f0e:	bfcc      	ite	gt
 8003f10:	2500      	movgt	r5, #0
 8003f12:	2501      	movle	r5, #1
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	f200 808f 	bhi.w	8004038 <_dtoa_r+0x2f0>
 8003f1a:	e8df f003 	tbb	[pc, r3]
 8003f1e:	7f7d      	.short	0x7f7d
 8003f20:	7131      	.short	0x7131
 8003f22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003f26:	441d      	add	r5, r3
 8003f28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003f2c:	2820      	cmp	r0, #32
 8003f2e:	dd13      	ble.n	8003f58 <_dtoa_r+0x210>
 8003f30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003f34:	9b00      	ldr	r3, [sp, #0]
 8003f36:	fa08 f800 	lsl.w	r8, r8, r0
 8003f3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003f3e:	fa23 f000 	lsr.w	r0, r3, r0
 8003f42:	ea48 0000 	orr.w	r0, r8, r0
 8003f46:	f7fc fb1d 	bl	8000584 <__aeabi_ui2d>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4682      	mov	sl, r0
 8003f4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003f52:	3d01      	subs	r5, #1
 8003f54:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f56:	e772      	b.n	8003e3e <_dtoa_r+0xf6>
 8003f58:	9b00      	ldr	r3, [sp, #0]
 8003f5a:	f1c0 0020 	rsb	r0, r0, #32
 8003f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f62:	e7f0      	b.n	8003f46 <_dtoa_r+0x1fe>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e7b1      	b.n	8003ecc <_dtoa_r+0x184>
 8003f68:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f6a:	e7b0      	b.n	8003ece <_dtoa_r+0x186>
 8003f6c:	9b05      	ldr	r3, [sp, #20]
 8003f6e:	eba3 030a 	sub.w	r3, r3, sl
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	f1ca 0300 	rsb	r3, sl, #0
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8003f7e:	e7bb      	b.n	8003ef8 <_dtoa_r+0x1b0>
 8003f80:	2301      	movs	r3, #1
 8003f82:	930a      	str	r3, [sp, #40]	; 0x28
 8003f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	dd59      	ble.n	800403e <_dtoa_r+0x2f6>
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f90:	2200      	movs	r2, #0
 8003f92:	6072      	str	r2, [r6, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f102 0014 	add.w	r0, r2, #20
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	6871      	ldr	r1, [r6, #4]
 8003f9e:	d953      	bls.n	8004048 <_dtoa_r+0x300>
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 ffdd 	bl	8004f60 <_Balloc>
 8003fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fa8:	6030      	str	r0, [r6, #0]
 8003faa:	f1b9 0f0e 	cmp.w	r9, #14
 8003fae:	f8d3 b000 	ldr.w	fp, [r3]
 8003fb2:	f200 80e6 	bhi.w	8004182 <_dtoa_r+0x43a>
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	f000 80e3 	beq.w	8004182 <_dtoa_r+0x43a>
 8003fbc:	ed9d 7b00 	vldr	d7, [sp]
 8003fc0:	f1ba 0f00 	cmp.w	sl, #0
 8003fc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003fc8:	dd74      	ble.n	80040b4 <_dtoa_r+0x36c>
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <_dtoa_r+0x32c>)
 8003fcc:	f00a 030f 	and.w	r3, sl, #15
 8003fd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fd4:	ed93 7b00 	vldr	d7, [r3]
 8003fd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003fdc:	06f0      	lsls	r0, r6, #27
 8003fde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003fe2:	d565      	bpl.n	80040b0 <_dtoa_r+0x368>
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <_dtoa_r+0x330>)
 8003fe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fee:	f7fc fc6d 	bl	80008cc <__aeabi_ddiv>
 8003ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ff6:	f006 060f 	and.w	r6, r6, #15
 8003ffa:	2503      	movs	r5, #3
 8003ffc:	4f1e      	ldr	r7, [pc, #120]	; (8004078 <_dtoa_r+0x330>)
 8003ffe:	e04c      	b.n	800409a <_dtoa_r+0x352>
 8004000:	2301      	movs	r3, #1
 8004002:	930a      	str	r3, [sp, #40]	; 0x28
 8004004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004006:	4453      	add	r3, sl
 8004008:	f103 0901 	add.w	r9, r3, #1
 800400c:	9302      	str	r3, [sp, #8]
 800400e:	464b      	mov	r3, r9
 8004010:	2b01      	cmp	r3, #1
 8004012:	bfb8      	it	lt
 8004014:	2301      	movlt	r3, #1
 8004016:	e7ba      	b.n	8003f8e <_dtoa_r+0x246>
 8004018:	2300      	movs	r3, #0
 800401a:	e7b2      	b.n	8003f82 <_dtoa_r+0x23a>
 800401c:	2300      	movs	r3, #0
 800401e:	e7f0      	b.n	8004002 <_dtoa_r+0x2ba>
 8004020:	2501      	movs	r5, #1
 8004022:	2300      	movs	r3, #0
 8004024:	9306      	str	r3, [sp, #24]
 8004026:	950a      	str	r5, [sp, #40]	; 0x28
 8004028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800402c:	9302      	str	r3, [sp, #8]
 800402e:	4699      	mov	r9, r3
 8004030:	2200      	movs	r2, #0
 8004032:	2312      	movs	r3, #18
 8004034:	920b      	str	r2, [sp, #44]	; 0x2c
 8004036:	e7aa      	b.n	8003f8e <_dtoa_r+0x246>
 8004038:	2301      	movs	r3, #1
 800403a:	930a      	str	r3, [sp, #40]	; 0x28
 800403c:	e7f4      	b.n	8004028 <_dtoa_r+0x2e0>
 800403e:	2301      	movs	r3, #1
 8004040:	9302      	str	r3, [sp, #8]
 8004042:	4699      	mov	r9, r3
 8004044:	461a      	mov	r2, r3
 8004046:	e7f5      	b.n	8004034 <_dtoa_r+0x2ec>
 8004048:	3101      	adds	r1, #1
 800404a:	6071      	str	r1, [r6, #4]
 800404c:	0052      	lsls	r2, r2, #1
 800404e:	e7a2      	b.n	8003f96 <_dtoa_r+0x24e>
 8004050:	636f4361 	.word	0x636f4361
 8004054:	3fd287a7 	.word	0x3fd287a7
 8004058:	8b60c8b3 	.word	0x8b60c8b3
 800405c:	3fc68a28 	.word	0x3fc68a28
 8004060:	509f79fb 	.word	0x509f79fb
 8004064:	3fd34413 	.word	0x3fd34413
 8004068:	7ff00000 	.word	0x7ff00000
 800406c:	08005e5d 	.word	0x08005e5d
 8004070:	3ff80000 	.word	0x3ff80000
 8004074:	08005f18 	.word	0x08005f18
 8004078:	08005ef0 	.word	0x08005ef0
 800407c:	08005ee1 	.word	0x08005ee1
 8004080:	07f1      	lsls	r1, r6, #31
 8004082:	d508      	bpl.n	8004096 <_dtoa_r+0x34e>
 8004084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408c:	f7fc faf4 	bl	8000678 <__aeabi_dmul>
 8004090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004094:	3501      	adds	r5, #1
 8004096:	1076      	asrs	r6, r6, #1
 8004098:	3708      	adds	r7, #8
 800409a:	2e00      	cmp	r6, #0
 800409c:	d1f0      	bne.n	8004080 <_dtoa_r+0x338>
 800409e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040a6:	f7fc fc11 	bl	80008cc <__aeabi_ddiv>
 80040aa:	e9cd 0100 	strd	r0, r1, [sp]
 80040ae:	e01a      	b.n	80040e6 <_dtoa_r+0x39e>
 80040b0:	2502      	movs	r5, #2
 80040b2:	e7a3      	b.n	8003ffc <_dtoa_r+0x2b4>
 80040b4:	f000 80a0 	beq.w	80041f8 <_dtoa_r+0x4b0>
 80040b8:	f1ca 0600 	rsb	r6, sl, #0
 80040bc:	4b9f      	ldr	r3, [pc, #636]	; (800433c <_dtoa_r+0x5f4>)
 80040be:	4fa0      	ldr	r7, [pc, #640]	; (8004340 <_dtoa_r+0x5f8>)
 80040c0:	f006 020f 	and.w	r2, r6, #15
 80040c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040d0:	f7fc fad2 	bl	8000678 <__aeabi_dmul>
 80040d4:	e9cd 0100 	strd	r0, r1, [sp]
 80040d8:	1136      	asrs	r6, r6, #4
 80040da:	2300      	movs	r3, #0
 80040dc:	2502      	movs	r5, #2
 80040de:	2e00      	cmp	r6, #0
 80040e0:	d17f      	bne.n	80041e2 <_dtoa_r+0x49a>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e1      	bne.n	80040aa <_dtoa_r+0x362>
 80040e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8087 	beq.w	80041fc <_dtoa_r+0x4b4>
 80040ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80040f2:	2200      	movs	r2, #0
 80040f4:	4b93      	ldr	r3, [pc, #588]	; (8004344 <_dtoa_r+0x5fc>)
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fd2f 	bl	8000b5c <__aeabi_dcmplt>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d07c      	beq.n	80041fc <_dtoa_r+0x4b4>
 8004102:	f1b9 0f00 	cmp.w	r9, #0
 8004106:	d079      	beq.n	80041fc <_dtoa_r+0x4b4>
 8004108:	9b02      	ldr	r3, [sp, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	dd35      	ble.n	800417a <_dtoa_r+0x432>
 800410e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004112:	9308      	str	r3, [sp, #32]
 8004114:	4639      	mov	r1, r7
 8004116:	2200      	movs	r2, #0
 8004118:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <_dtoa_r+0x600>)
 800411a:	4630      	mov	r0, r6
 800411c:	f7fc faac 	bl	8000678 <__aeabi_dmul>
 8004120:	e9cd 0100 	strd	r0, r1, [sp]
 8004124:	9f02      	ldr	r7, [sp, #8]
 8004126:	3501      	adds	r5, #1
 8004128:	4628      	mov	r0, r5
 800412a:	f7fc fa3b 	bl	80005a4 <__aeabi_i2d>
 800412e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004132:	f7fc faa1 	bl	8000678 <__aeabi_dmul>
 8004136:	2200      	movs	r2, #0
 8004138:	4b84      	ldr	r3, [pc, #528]	; (800434c <_dtoa_r+0x604>)
 800413a:	f7fc f8e7 	bl	800030c <__adddf3>
 800413e:	4605      	mov	r5, r0
 8004140:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004144:	2f00      	cmp	r7, #0
 8004146:	d15d      	bne.n	8004204 <_dtoa_r+0x4bc>
 8004148:	2200      	movs	r2, #0
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <_dtoa_r+0x608>)
 800414c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004150:	f7fc f8da 	bl	8000308 <__aeabi_dsub>
 8004154:	462a      	mov	r2, r5
 8004156:	4633      	mov	r3, r6
 8004158:	e9cd 0100 	strd	r0, r1, [sp]
 800415c:	f7fc fd1c 	bl	8000b98 <__aeabi_dcmpgt>
 8004160:	2800      	cmp	r0, #0
 8004162:	f040 8288 	bne.w	8004676 <_dtoa_r+0x92e>
 8004166:	462a      	mov	r2, r5
 8004168:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800416c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004170:	f7fc fcf4 	bl	8000b5c <__aeabi_dcmplt>
 8004174:	2800      	cmp	r0, #0
 8004176:	f040 827c 	bne.w	8004672 <_dtoa_r+0x92a>
 800417a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800417e:	e9cd 2300 	strd	r2, r3, [sp]
 8004182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004184:	2b00      	cmp	r3, #0
 8004186:	f2c0 8150 	blt.w	800442a <_dtoa_r+0x6e2>
 800418a:	f1ba 0f0e 	cmp.w	sl, #14
 800418e:	f300 814c 	bgt.w	800442a <_dtoa_r+0x6e2>
 8004192:	4b6a      	ldr	r3, [pc, #424]	; (800433c <_dtoa_r+0x5f4>)
 8004194:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004198:	ed93 7b00 	vldr	d7, [r3]
 800419c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041a4:	f280 80d8 	bge.w	8004358 <_dtoa_r+0x610>
 80041a8:	f1b9 0f00 	cmp.w	r9, #0
 80041ac:	f300 80d4 	bgt.w	8004358 <_dtoa_r+0x610>
 80041b0:	f040 825e 	bne.w	8004670 <_dtoa_r+0x928>
 80041b4:	2200      	movs	r2, #0
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <_dtoa_r+0x608>)
 80041b8:	ec51 0b17 	vmov	r0, r1, d7
 80041bc:	f7fc fa5c 	bl	8000678 <__aeabi_dmul>
 80041c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041c4:	f7fc fcde 	bl	8000b84 <__aeabi_dcmpge>
 80041c8:	464f      	mov	r7, r9
 80041ca:	464e      	mov	r6, r9
 80041cc:	2800      	cmp	r0, #0
 80041ce:	f040 8234 	bne.w	800463a <_dtoa_r+0x8f2>
 80041d2:	2331      	movs	r3, #49	; 0x31
 80041d4:	f10b 0501 	add.w	r5, fp, #1
 80041d8:	f88b 3000 	strb.w	r3, [fp]
 80041dc:	f10a 0a01 	add.w	sl, sl, #1
 80041e0:	e22f      	b.n	8004642 <_dtoa_r+0x8fa>
 80041e2:	07f2      	lsls	r2, r6, #31
 80041e4:	d505      	bpl.n	80041f2 <_dtoa_r+0x4aa>
 80041e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ea:	f7fc fa45 	bl	8000678 <__aeabi_dmul>
 80041ee:	3501      	adds	r5, #1
 80041f0:	2301      	movs	r3, #1
 80041f2:	1076      	asrs	r6, r6, #1
 80041f4:	3708      	adds	r7, #8
 80041f6:	e772      	b.n	80040de <_dtoa_r+0x396>
 80041f8:	2502      	movs	r5, #2
 80041fa:	e774      	b.n	80040e6 <_dtoa_r+0x39e>
 80041fc:	f8cd a020 	str.w	sl, [sp, #32]
 8004200:	464f      	mov	r7, r9
 8004202:	e791      	b.n	8004128 <_dtoa_r+0x3e0>
 8004204:	4b4d      	ldr	r3, [pc, #308]	; (800433c <_dtoa_r+0x5f4>)
 8004206:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800420a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800420e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d047      	beq.n	80042a4 <_dtoa_r+0x55c>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	2000      	movs	r0, #0
 800421a:	494e      	ldr	r1, [pc, #312]	; (8004354 <_dtoa_r+0x60c>)
 800421c:	f7fc fb56 	bl	80008cc <__aeabi_ddiv>
 8004220:	462a      	mov	r2, r5
 8004222:	4633      	mov	r3, r6
 8004224:	f7fc f870 	bl	8000308 <__aeabi_dsub>
 8004228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800422c:	465d      	mov	r5, fp
 800422e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004232:	f7fc fcd1 	bl	8000bd8 <__aeabi_d2iz>
 8004236:	4606      	mov	r6, r0
 8004238:	f7fc f9b4 	bl	80005a4 <__aeabi_i2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004244:	f7fc f860 	bl	8000308 <__aeabi_dsub>
 8004248:	3630      	adds	r6, #48	; 0x30
 800424a:	f805 6b01 	strb.w	r6, [r5], #1
 800424e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004252:	e9cd 0100 	strd	r0, r1, [sp]
 8004256:	f7fc fc81 	bl	8000b5c <__aeabi_dcmplt>
 800425a:	2800      	cmp	r0, #0
 800425c:	d163      	bne.n	8004326 <_dtoa_r+0x5de>
 800425e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004262:	2000      	movs	r0, #0
 8004264:	4937      	ldr	r1, [pc, #220]	; (8004344 <_dtoa_r+0x5fc>)
 8004266:	f7fc f84f 	bl	8000308 <__aeabi_dsub>
 800426a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800426e:	f7fc fc75 	bl	8000b5c <__aeabi_dcmplt>
 8004272:	2800      	cmp	r0, #0
 8004274:	f040 80b7 	bne.w	80043e6 <_dtoa_r+0x69e>
 8004278:	eba5 030b 	sub.w	r3, r5, fp
 800427c:	429f      	cmp	r7, r3
 800427e:	f77f af7c 	ble.w	800417a <_dtoa_r+0x432>
 8004282:	2200      	movs	r2, #0
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <_dtoa_r+0x600>)
 8004286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800428a:	f7fc f9f5 	bl	8000678 <__aeabi_dmul>
 800428e:	2200      	movs	r2, #0
 8004290:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <_dtoa_r+0x600>)
 8004296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800429a:	f7fc f9ed 	bl	8000678 <__aeabi_dmul>
 800429e:	e9cd 0100 	strd	r0, r1, [sp]
 80042a2:	e7c4      	b.n	800422e <_dtoa_r+0x4e6>
 80042a4:	462a      	mov	r2, r5
 80042a6:	4633      	mov	r3, r6
 80042a8:	f7fc f9e6 	bl	8000678 <__aeabi_dmul>
 80042ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80042b0:	eb0b 0507 	add.w	r5, fp, r7
 80042b4:	465e      	mov	r6, fp
 80042b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042ba:	f7fc fc8d 	bl	8000bd8 <__aeabi_d2iz>
 80042be:	4607      	mov	r7, r0
 80042c0:	f7fc f970 	bl	80005a4 <__aeabi_i2d>
 80042c4:	3730      	adds	r7, #48	; 0x30
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042ce:	f7fc f81b 	bl	8000308 <__aeabi_dsub>
 80042d2:	f806 7b01 	strb.w	r7, [r6], #1
 80042d6:	42ae      	cmp	r6, r5
 80042d8:	e9cd 0100 	strd	r0, r1, [sp]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	d126      	bne.n	8004330 <_dtoa_r+0x5e8>
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <_dtoa_r+0x60c>)
 80042e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042e8:	f7fc f810 	bl	800030c <__adddf3>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042f4:	f7fc fc50 	bl	8000b98 <__aeabi_dcmpgt>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d174      	bne.n	80043e6 <_dtoa_r+0x69e>
 80042fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004300:	2000      	movs	r0, #0
 8004302:	4914      	ldr	r1, [pc, #80]	; (8004354 <_dtoa_r+0x60c>)
 8004304:	f7fc f800 	bl	8000308 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004310:	f7fc fc24 	bl	8000b5c <__aeabi_dcmplt>
 8004314:	2800      	cmp	r0, #0
 8004316:	f43f af30 	beq.w	800417a <_dtoa_r+0x432>
 800431a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004324:	d002      	beq.n	800432c <_dtoa_r+0x5e4>
 8004326:	f8dd a020 	ldr.w	sl, [sp, #32]
 800432a:	e04a      	b.n	80043c2 <_dtoa_r+0x67a>
 800432c:	4615      	mov	r5, r2
 800432e:	e7f4      	b.n	800431a <_dtoa_r+0x5d2>
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <_dtoa_r+0x600>)
 8004332:	f7fc f9a1 	bl	8000678 <__aeabi_dmul>
 8004336:	e9cd 0100 	strd	r0, r1, [sp]
 800433a:	e7bc      	b.n	80042b6 <_dtoa_r+0x56e>
 800433c:	08005f18 	.word	0x08005f18
 8004340:	08005ef0 	.word	0x08005ef0
 8004344:	3ff00000 	.word	0x3ff00000
 8004348:	40240000 	.word	0x40240000
 800434c:	401c0000 	.word	0x401c0000
 8004350:	40140000 	.word	0x40140000
 8004354:	3fe00000 	.word	0x3fe00000
 8004358:	e9dd 6700 	ldrd	r6, r7, [sp]
 800435c:	465d      	mov	r5, fp
 800435e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004362:	4630      	mov	r0, r6
 8004364:	4639      	mov	r1, r7
 8004366:	f7fc fab1 	bl	80008cc <__aeabi_ddiv>
 800436a:	f7fc fc35 	bl	8000bd8 <__aeabi_d2iz>
 800436e:	4680      	mov	r8, r0
 8004370:	f7fc f918 	bl	80005a4 <__aeabi_i2d>
 8004374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004378:	f7fc f97e 	bl	8000678 <__aeabi_dmul>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004388:	f7fb ffbe 	bl	8000308 <__aeabi_dsub>
 800438c:	f805 6b01 	strb.w	r6, [r5], #1
 8004390:	eba5 060b 	sub.w	r6, r5, fp
 8004394:	45b1      	cmp	r9, r6
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	d139      	bne.n	8004410 <_dtoa_r+0x6c8>
 800439c:	f7fb ffb6 	bl	800030c <__adddf3>
 80043a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	f7fc fbf6 	bl	8000b98 <__aeabi_dcmpgt>
 80043ac:	b9c8      	cbnz	r0, 80043e2 <_dtoa_r+0x69a>
 80043ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043b2:	4630      	mov	r0, r6
 80043b4:	4639      	mov	r1, r7
 80043b6:	f7fc fbc7 	bl	8000b48 <__aeabi_dcmpeq>
 80043ba:	b110      	cbz	r0, 80043c2 <_dtoa_r+0x67a>
 80043bc:	f018 0f01 	tst.w	r8, #1
 80043c0:	d10f      	bne.n	80043e2 <_dtoa_r+0x69a>
 80043c2:	9904      	ldr	r1, [sp, #16]
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 fdff 	bl	8004fc8 <_Bfree>
 80043ca:	2300      	movs	r3, #0
 80043cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ce:	702b      	strb	r3, [r5, #0]
 80043d0:	f10a 0301 	add.w	r3, sl, #1
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8241 	beq.w	8004860 <_dtoa_r+0xb18>
 80043de:	601d      	str	r5, [r3, #0]
 80043e0:	e23e      	b.n	8004860 <_dtoa_r+0xb18>
 80043e2:	f8cd a020 	str.w	sl, [sp, #32]
 80043e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043ea:	2a39      	cmp	r2, #57	; 0x39
 80043ec:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80043f0:	d108      	bne.n	8004404 <_dtoa_r+0x6bc>
 80043f2:	459b      	cmp	fp, r3
 80043f4:	d10a      	bne.n	800440c <_dtoa_r+0x6c4>
 80043f6:	9b08      	ldr	r3, [sp, #32]
 80043f8:	3301      	adds	r3, #1
 80043fa:	9308      	str	r3, [sp, #32]
 80043fc:	2330      	movs	r3, #48	; 0x30
 80043fe:	f88b 3000 	strb.w	r3, [fp]
 8004402:	465b      	mov	r3, fp
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	3201      	adds	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e78c      	b.n	8004326 <_dtoa_r+0x5de>
 800440c:	461d      	mov	r5, r3
 800440e:	e7ea      	b.n	80043e6 <_dtoa_r+0x69e>
 8004410:	2200      	movs	r2, #0
 8004412:	4b9b      	ldr	r3, [pc, #620]	; (8004680 <_dtoa_r+0x938>)
 8004414:	f7fc f930 	bl	8000678 <__aeabi_dmul>
 8004418:	2200      	movs	r2, #0
 800441a:	2300      	movs	r3, #0
 800441c:	4606      	mov	r6, r0
 800441e:	460f      	mov	r7, r1
 8004420:	f7fc fb92 	bl	8000b48 <__aeabi_dcmpeq>
 8004424:	2800      	cmp	r0, #0
 8004426:	d09a      	beq.n	800435e <_dtoa_r+0x616>
 8004428:	e7cb      	b.n	80043c2 <_dtoa_r+0x67a>
 800442a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442c:	2a00      	cmp	r2, #0
 800442e:	f000 808b 	beq.w	8004548 <_dtoa_r+0x800>
 8004432:	9a06      	ldr	r2, [sp, #24]
 8004434:	2a01      	cmp	r2, #1
 8004436:	dc6e      	bgt.n	8004516 <_dtoa_r+0x7ce>
 8004438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800443a:	2a00      	cmp	r2, #0
 800443c:	d067      	beq.n	800450e <_dtoa_r+0x7c6>
 800443e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004442:	9f07      	ldr	r7, [sp, #28]
 8004444:	9d05      	ldr	r5, [sp, #20]
 8004446:	9a05      	ldr	r2, [sp, #20]
 8004448:	2101      	movs	r1, #1
 800444a:	441a      	add	r2, r3
 800444c:	4620      	mov	r0, r4
 800444e:	9205      	str	r2, [sp, #20]
 8004450:	4498      	add	r8, r3
 8004452:	f000 fe97 	bl	8005184 <__i2b>
 8004456:	4606      	mov	r6, r0
 8004458:	2d00      	cmp	r5, #0
 800445a:	dd0c      	ble.n	8004476 <_dtoa_r+0x72e>
 800445c:	f1b8 0f00 	cmp.w	r8, #0
 8004460:	dd09      	ble.n	8004476 <_dtoa_r+0x72e>
 8004462:	4545      	cmp	r5, r8
 8004464:	9a05      	ldr	r2, [sp, #20]
 8004466:	462b      	mov	r3, r5
 8004468:	bfa8      	it	ge
 800446a:	4643      	movge	r3, r8
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	9205      	str	r2, [sp, #20]
 8004470:	1aed      	subs	r5, r5, r3
 8004472:	eba8 0803 	sub.w	r8, r8, r3
 8004476:	9b07      	ldr	r3, [sp, #28]
 8004478:	b1eb      	cbz	r3, 80044b6 <_dtoa_r+0x76e>
 800447a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d067      	beq.n	8004550 <_dtoa_r+0x808>
 8004480:	b18f      	cbz	r7, 80044a6 <_dtoa_r+0x75e>
 8004482:	4631      	mov	r1, r6
 8004484:	463a      	mov	r2, r7
 8004486:	4620      	mov	r0, r4
 8004488:	f000 ff1c 	bl	80052c4 <__pow5mult>
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	4601      	mov	r1, r0
 8004490:	4606      	mov	r6, r0
 8004492:	4620      	mov	r0, r4
 8004494:	f000 fe7f 	bl	8005196 <__multiply>
 8004498:	9904      	ldr	r1, [sp, #16]
 800449a:	9008      	str	r0, [sp, #32]
 800449c:	4620      	mov	r0, r4
 800449e:	f000 fd93 	bl	8004fc8 <_Bfree>
 80044a2:	9b08      	ldr	r3, [sp, #32]
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	9b07      	ldr	r3, [sp, #28]
 80044a8:	1bda      	subs	r2, r3, r7
 80044aa:	d004      	beq.n	80044b6 <_dtoa_r+0x76e>
 80044ac:	9904      	ldr	r1, [sp, #16]
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 ff08 	bl	80052c4 <__pow5mult>
 80044b4:	9004      	str	r0, [sp, #16]
 80044b6:	2101      	movs	r1, #1
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 fe63 	bl	8005184 <__i2b>
 80044be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044c0:	4607      	mov	r7, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 81d0 	beq.w	8004868 <_dtoa_r+0xb20>
 80044c8:	461a      	mov	r2, r3
 80044ca:	4601      	mov	r1, r0
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fef9 	bl	80052c4 <__pow5mult>
 80044d2:	9b06      	ldr	r3, [sp, #24]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	4607      	mov	r7, r0
 80044d8:	dc40      	bgt.n	800455c <_dtoa_r+0x814>
 80044da:	9b00      	ldr	r3, [sp, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d139      	bne.n	8004554 <_dtoa_r+0x80c>
 80044e0:	9b01      	ldr	r3, [sp, #4]
 80044e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d136      	bne.n	8004558 <_dtoa_r+0x810>
 80044ea:	9b01      	ldr	r3, [sp, #4]
 80044ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	0d1b      	lsrs	r3, r3, #20
 80044f2:	051b      	lsls	r3, r3, #20
 80044f4:	b12b      	cbz	r3, 8004502 <_dtoa_r+0x7ba>
 80044f6:	9b05      	ldr	r3, [sp, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	9305      	str	r3, [sp, #20]
 80044fc:	f108 0801 	add.w	r8, r8, #1
 8004500:	2301      	movs	r3, #1
 8004502:	9307      	str	r3, [sp, #28]
 8004504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004506:	2b00      	cmp	r3, #0
 8004508:	d12a      	bne.n	8004560 <_dtoa_r+0x818>
 800450a:	2001      	movs	r0, #1
 800450c:	e030      	b.n	8004570 <_dtoa_r+0x828>
 800450e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004510:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004514:	e795      	b.n	8004442 <_dtoa_r+0x6fa>
 8004516:	9b07      	ldr	r3, [sp, #28]
 8004518:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800451c:	42bb      	cmp	r3, r7
 800451e:	bfbf      	itttt	lt
 8004520:	9b07      	ldrlt	r3, [sp, #28]
 8004522:	9707      	strlt	r7, [sp, #28]
 8004524:	1afa      	sublt	r2, r7, r3
 8004526:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004528:	bfbb      	ittet	lt
 800452a:	189b      	addlt	r3, r3, r2
 800452c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800452e:	1bdf      	subge	r7, r3, r7
 8004530:	2700      	movlt	r7, #0
 8004532:	f1b9 0f00 	cmp.w	r9, #0
 8004536:	bfb5      	itete	lt
 8004538:	9b05      	ldrlt	r3, [sp, #20]
 800453a:	9d05      	ldrge	r5, [sp, #20]
 800453c:	eba3 0509 	sublt.w	r5, r3, r9
 8004540:	464b      	movge	r3, r9
 8004542:	bfb8      	it	lt
 8004544:	2300      	movlt	r3, #0
 8004546:	e77e      	b.n	8004446 <_dtoa_r+0x6fe>
 8004548:	9f07      	ldr	r7, [sp, #28]
 800454a:	9d05      	ldr	r5, [sp, #20]
 800454c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800454e:	e783      	b.n	8004458 <_dtoa_r+0x710>
 8004550:	9a07      	ldr	r2, [sp, #28]
 8004552:	e7ab      	b.n	80044ac <_dtoa_r+0x764>
 8004554:	2300      	movs	r3, #0
 8004556:	e7d4      	b.n	8004502 <_dtoa_r+0x7ba>
 8004558:	9b00      	ldr	r3, [sp, #0]
 800455a:	e7d2      	b.n	8004502 <_dtoa_r+0x7ba>
 800455c:	2300      	movs	r3, #0
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004566:	6918      	ldr	r0, [r3, #16]
 8004568:	f000 fdbe 	bl	80050e8 <__hi0bits>
 800456c:	f1c0 0020 	rsb	r0, r0, #32
 8004570:	4440      	add	r0, r8
 8004572:	f010 001f 	ands.w	r0, r0, #31
 8004576:	d047      	beq.n	8004608 <_dtoa_r+0x8c0>
 8004578:	f1c0 0320 	rsb	r3, r0, #32
 800457c:	2b04      	cmp	r3, #4
 800457e:	dd3b      	ble.n	80045f8 <_dtoa_r+0x8b0>
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	f1c0 001c 	rsb	r0, r0, #28
 8004586:	4403      	add	r3, r0
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	4405      	add	r5, r0
 800458c:	4480      	add	r8, r0
 800458e:	9b05      	ldr	r3, [sp, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	dd05      	ble.n	80045a0 <_dtoa_r+0x858>
 8004594:	461a      	mov	r2, r3
 8004596:	9904      	ldr	r1, [sp, #16]
 8004598:	4620      	mov	r0, r4
 800459a:	f000 fee1 	bl	8005360 <__lshift>
 800459e:	9004      	str	r0, [sp, #16]
 80045a0:	f1b8 0f00 	cmp.w	r8, #0
 80045a4:	dd05      	ble.n	80045b2 <_dtoa_r+0x86a>
 80045a6:	4639      	mov	r1, r7
 80045a8:	4642      	mov	r2, r8
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 fed8 	bl	8005360 <__lshift>
 80045b0:	4607      	mov	r7, r0
 80045b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045b4:	b353      	cbz	r3, 800460c <_dtoa_r+0x8c4>
 80045b6:	4639      	mov	r1, r7
 80045b8:	9804      	ldr	r0, [sp, #16]
 80045ba:	f000 ff25 	bl	8005408 <__mcmp>
 80045be:	2800      	cmp	r0, #0
 80045c0:	da24      	bge.n	800460c <_dtoa_r+0x8c4>
 80045c2:	2300      	movs	r3, #0
 80045c4:	220a      	movs	r2, #10
 80045c6:	9904      	ldr	r1, [sp, #16]
 80045c8:	4620      	mov	r0, r4
 80045ca:	f000 fd14 	bl	8004ff6 <__multadd>
 80045ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d0:	9004      	str	r0, [sp, #16]
 80045d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 814d 	beq.w	8004876 <_dtoa_r+0xb2e>
 80045dc:	2300      	movs	r3, #0
 80045de:	4631      	mov	r1, r6
 80045e0:	220a      	movs	r2, #10
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 fd07 	bl	8004ff6 <__multadd>
 80045e8:	9b02      	ldr	r3, [sp, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	4606      	mov	r6, r0
 80045ee:	dc4f      	bgt.n	8004690 <_dtoa_r+0x948>
 80045f0:	9b06      	ldr	r3, [sp, #24]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	dd4c      	ble.n	8004690 <_dtoa_r+0x948>
 80045f6:	e011      	b.n	800461c <_dtoa_r+0x8d4>
 80045f8:	d0c9      	beq.n	800458e <_dtoa_r+0x846>
 80045fa:	9a05      	ldr	r2, [sp, #20]
 80045fc:	331c      	adds	r3, #28
 80045fe:	441a      	add	r2, r3
 8004600:	9205      	str	r2, [sp, #20]
 8004602:	441d      	add	r5, r3
 8004604:	4498      	add	r8, r3
 8004606:	e7c2      	b.n	800458e <_dtoa_r+0x846>
 8004608:	4603      	mov	r3, r0
 800460a:	e7f6      	b.n	80045fa <_dtoa_r+0x8b2>
 800460c:	f1b9 0f00 	cmp.w	r9, #0
 8004610:	dc38      	bgt.n	8004684 <_dtoa_r+0x93c>
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	2b02      	cmp	r3, #2
 8004616:	dd35      	ble.n	8004684 <_dtoa_r+0x93c>
 8004618:	f8cd 9008 	str.w	r9, [sp, #8]
 800461c:	9b02      	ldr	r3, [sp, #8]
 800461e:	b963      	cbnz	r3, 800463a <_dtoa_r+0x8f2>
 8004620:	4639      	mov	r1, r7
 8004622:	2205      	movs	r2, #5
 8004624:	4620      	mov	r0, r4
 8004626:	f000 fce6 	bl	8004ff6 <__multadd>
 800462a:	4601      	mov	r1, r0
 800462c:	4607      	mov	r7, r0
 800462e:	9804      	ldr	r0, [sp, #16]
 8004630:	f000 feea 	bl	8005408 <__mcmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	f73f adcc 	bgt.w	80041d2 <_dtoa_r+0x48a>
 800463a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800463c:	465d      	mov	r5, fp
 800463e:	ea6f 0a03 	mvn.w	sl, r3
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	4639      	mov	r1, r7
 8004648:	4620      	mov	r0, r4
 800464a:	f000 fcbd 	bl	8004fc8 <_Bfree>
 800464e:	2e00      	cmp	r6, #0
 8004650:	f43f aeb7 	beq.w	80043c2 <_dtoa_r+0x67a>
 8004654:	f1b9 0f00 	cmp.w	r9, #0
 8004658:	d005      	beq.n	8004666 <_dtoa_r+0x91e>
 800465a:	45b1      	cmp	r9, r6
 800465c:	d003      	beq.n	8004666 <_dtoa_r+0x91e>
 800465e:	4649      	mov	r1, r9
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fcb1 	bl	8004fc8 <_Bfree>
 8004666:	4631      	mov	r1, r6
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fcad 	bl	8004fc8 <_Bfree>
 800466e:	e6a8      	b.n	80043c2 <_dtoa_r+0x67a>
 8004670:	2700      	movs	r7, #0
 8004672:	463e      	mov	r6, r7
 8004674:	e7e1      	b.n	800463a <_dtoa_r+0x8f2>
 8004676:	f8dd a020 	ldr.w	sl, [sp, #32]
 800467a:	463e      	mov	r6, r7
 800467c:	e5a9      	b.n	80041d2 <_dtoa_r+0x48a>
 800467e:	bf00      	nop
 8004680:	40240000 	.word	0x40240000
 8004684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004686:	f8cd 9008 	str.w	r9, [sp, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80fa 	beq.w	8004884 <_dtoa_r+0xb3c>
 8004690:	2d00      	cmp	r5, #0
 8004692:	dd05      	ble.n	80046a0 <_dtoa_r+0x958>
 8004694:	4631      	mov	r1, r6
 8004696:	462a      	mov	r2, r5
 8004698:	4620      	mov	r0, r4
 800469a:	f000 fe61 	bl	8005360 <__lshift>
 800469e:	4606      	mov	r6, r0
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d04c      	beq.n	8004740 <_dtoa_r+0x9f8>
 80046a6:	6871      	ldr	r1, [r6, #4]
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 fc59 	bl	8004f60 <_Balloc>
 80046ae:	6932      	ldr	r2, [r6, #16]
 80046b0:	3202      	adds	r2, #2
 80046b2:	4605      	mov	r5, r0
 80046b4:	0092      	lsls	r2, r2, #2
 80046b6:	f106 010c 	add.w	r1, r6, #12
 80046ba:	300c      	adds	r0, #12
 80046bc:	f7fd fd8e 	bl	80021dc <memcpy>
 80046c0:	2201      	movs	r2, #1
 80046c2:	4629      	mov	r1, r5
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 fe4b 	bl	8005360 <__lshift>
 80046ca:	9b00      	ldr	r3, [sp, #0]
 80046cc:	f8cd b014 	str.w	fp, [sp, #20]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	46b1      	mov	r9, r6
 80046d6:	9307      	str	r3, [sp, #28]
 80046d8:	4606      	mov	r6, r0
 80046da:	4639      	mov	r1, r7
 80046dc:	9804      	ldr	r0, [sp, #16]
 80046de:	f7ff faa5 	bl	8003c2c <quorem>
 80046e2:	4649      	mov	r1, r9
 80046e4:	4605      	mov	r5, r0
 80046e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80046ea:	9804      	ldr	r0, [sp, #16]
 80046ec:	f000 fe8c 	bl	8005408 <__mcmp>
 80046f0:	4632      	mov	r2, r6
 80046f2:	9000      	str	r0, [sp, #0]
 80046f4:	4639      	mov	r1, r7
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 fea0 	bl	800543c <__mdiff>
 80046fc:	68c3      	ldr	r3, [r0, #12]
 80046fe:	4602      	mov	r2, r0
 8004700:	bb03      	cbnz	r3, 8004744 <_dtoa_r+0x9fc>
 8004702:	4601      	mov	r1, r0
 8004704:	9008      	str	r0, [sp, #32]
 8004706:	9804      	ldr	r0, [sp, #16]
 8004708:	f000 fe7e 	bl	8005408 <__mcmp>
 800470c:	9a08      	ldr	r2, [sp, #32]
 800470e:	4603      	mov	r3, r0
 8004710:	4611      	mov	r1, r2
 8004712:	4620      	mov	r0, r4
 8004714:	9308      	str	r3, [sp, #32]
 8004716:	f000 fc57 	bl	8004fc8 <_Bfree>
 800471a:	9b08      	ldr	r3, [sp, #32]
 800471c:	b9a3      	cbnz	r3, 8004748 <_dtoa_r+0xa00>
 800471e:	9a06      	ldr	r2, [sp, #24]
 8004720:	b992      	cbnz	r2, 8004748 <_dtoa_r+0xa00>
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	b982      	cbnz	r2, 8004748 <_dtoa_r+0xa00>
 8004726:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800472a:	d029      	beq.n	8004780 <_dtoa_r+0xa38>
 800472c:	9b00      	ldr	r3, [sp, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	dd01      	ble.n	8004736 <_dtoa_r+0x9ee>
 8004732:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004736:	9b05      	ldr	r3, [sp, #20]
 8004738:	1c5d      	adds	r5, r3, #1
 800473a:	f883 8000 	strb.w	r8, [r3]
 800473e:	e782      	b.n	8004646 <_dtoa_r+0x8fe>
 8004740:	4630      	mov	r0, r6
 8004742:	e7c2      	b.n	80046ca <_dtoa_r+0x982>
 8004744:	2301      	movs	r3, #1
 8004746:	e7e3      	b.n	8004710 <_dtoa_r+0x9c8>
 8004748:	9a00      	ldr	r2, [sp, #0]
 800474a:	2a00      	cmp	r2, #0
 800474c:	db04      	blt.n	8004758 <_dtoa_r+0xa10>
 800474e:	d125      	bne.n	800479c <_dtoa_r+0xa54>
 8004750:	9a06      	ldr	r2, [sp, #24]
 8004752:	bb1a      	cbnz	r2, 800479c <_dtoa_r+0xa54>
 8004754:	9a07      	ldr	r2, [sp, #28]
 8004756:	bb0a      	cbnz	r2, 800479c <_dtoa_r+0xa54>
 8004758:	2b00      	cmp	r3, #0
 800475a:	ddec      	ble.n	8004736 <_dtoa_r+0x9ee>
 800475c:	2201      	movs	r2, #1
 800475e:	9904      	ldr	r1, [sp, #16]
 8004760:	4620      	mov	r0, r4
 8004762:	f000 fdfd 	bl	8005360 <__lshift>
 8004766:	4639      	mov	r1, r7
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	f000 fe4d 	bl	8005408 <__mcmp>
 800476e:	2800      	cmp	r0, #0
 8004770:	dc03      	bgt.n	800477a <_dtoa_r+0xa32>
 8004772:	d1e0      	bne.n	8004736 <_dtoa_r+0x9ee>
 8004774:	f018 0f01 	tst.w	r8, #1
 8004778:	d0dd      	beq.n	8004736 <_dtoa_r+0x9ee>
 800477a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800477e:	d1d8      	bne.n	8004732 <_dtoa_r+0x9ea>
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	9a05      	ldr	r2, [sp, #20]
 8004784:	1c5d      	adds	r5, r3, #1
 8004786:	2339      	movs	r3, #57	; 0x39
 8004788:	7013      	strb	r3, [r2, #0]
 800478a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800478e:	2b39      	cmp	r3, #57	; 0x39
 8004790:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004794:	d04f      	beq.n	8004836 <_dtoa_r+0xaee>
 8004796:	3301      	adds	r3, #1
 8004798:	7013      	strb	r3, [r2, #0]
 800479a:	e754      	b.n	8004646 <_dtoa_r+0x8fe>
 800479c:	9a05      	ldr	r2, [sp, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f102 0501 	add.w	r5, r2, #1
 80047a4:	dd06      	ble.n	80047b4 <_dtoa_r+0xa6c>
 80047a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80047aa:	d0e9      	beq.n	8004780 <_dtoa_r+0xa38>
 80047ac:	f108 0801 	add.w	r8, r8, #1
 80047b0:	9b05      	ldr	r3, [sp, #20]
 80047b2:	e7c2      	b.n	800473a <_dtoa_r+0x9f2>
 80047b4:	9a02      	ldr	r2, [sp, #8]
 80047b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80047ba:	eba5 030b 	sub.w	r3, r5, fp
 80047be:	4293      	cmp	r3, r2
 80047c0:	d021      	beq.n	8004806 <_dtoa_r+0xabe>
 80047c2:	2300      	movs	r3, #0
 80047c4:	220a      	movs	r2, #10
 80047c6:	9904      	ldr	r1, [sp, #16]
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 fc14 	bl	8004ff6 <__multadd>
 80047ce:	45b1      	cmp	r9, r6
 80047d0:	9004      	str	r0, [sp, #16]
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	f04f 020a 	mov.w	r2, #10
 80047da:	4649      	mov	r1, r9
 80047dc:	4620      	mov	r0, r4
 80047de:	d105      	bne.n	80047ec <_dtoa_r+0xaa4>
 80047e0:	f000 fc09 	bl	8004ff6 <__multadd>
 80047e4:	4681      	mov	r9, r0
 80047e6:	4606      	mov	r6, r0
 80047e8:	9505      	str	r5, [sp, #20]
 80047ea:	e776      	b.n	80046da <_dtoa_r+0x992>
 80047ec:	f000 fc03 	bl	8004ff6 <__multadd>
 80047f0:	4631      	mov	r1, r6
 80047f2:	4681      	mov	r9, r0
 80047f4:	2300      	movs	r3, #0
 80047f6:	220a      	movs	r2, #10
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fbfc 	bl	8004ff6 <__multadd>
 80047fe:	4606      	mov	r6, r0
 8004800:	e7f2      	b.n	80047e8 <_dtoa_r+0xaa0>
 8004802:	f04f 0900 	mov.w	r9, #0
 8004806:	2201      	movs	r2, #1
 8004808:	9904      	ldr	r1, [sp, #16]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fda8 	bl	8005360 <__lshift>
 8004810:	4639      	mov	r1, r7
 8004812:	9004      	str	r0, [sp, #16]
 8004814:	f000 fdf8 	bl	8005408 <__mcmp>
 8004818:	2800      	cmp	r0, #0
 800481a:	dcb6      	bgt.n	800478a <_dtoa_r+0xa42>
 800481c:	d102      	bne.n	8004824 <_dtoa_r+0xadc>
 800481e:	f018 0f01 	tst.w	r8, #1
 8004822:	d1b2      	bne.n	800478a <_dtoa_r+0xa42>
 8004824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800482e:	f47f af0a 	bne.w	8004646 <_dtoa_r+0x8fe>
 8004832:	4615      	mov	r5, r2
 8004834:	e7f6      	b.n	8004824 <_dtoa_r+0xadc>
 8004836:	4593      	cmp	fp, r2
 8004838:	d105      	bne.n	8004846 <_dtoa_r+0xafe>
 800483a:	2331      	movs	r3, #49	; 0x31
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	f88b 3000 	strb.w	r3, [fp]
 8004844:	e6ff      	b.n	8004646 <_dtoa_r+0x8fe>
 8004846:	4615      	mov	r5, r2
 8004848:	e79f      	b.n	800478a <_dtoa_r+0xa42>
 800484a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80048b0 <_dtoa_r+0xb68>
 800484e:	e007      	b.n	8004860 <_dtoa_r+0xb18>
 8004850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004852:	f8df b060 	ldr.w	fp, [pc, #96]	; 80048b4 <_dtoa_r+0xb6c>
 8004856:	b11b      	cbz	r3, 8004860 <_dtoa_r+0xb18>
 8004858:	f10b 0308 	add.w	r3, fp, #8
 800485c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4658      	mov	r0, fp
 8004862:	b017      	add	sp, #92	; 0x5c
 8004864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004868:	9b06      	ldr	r3, [sp, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	f77f ae35 	ble.w	80044da <_dtoa_r+0x792>
 8004870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004872:	9307      	str	r3, [sp, #28]
 8004874:	e649      	b.n	800450a <_dtoa_r+0x7c2>
 8004876:	9b02      	ldr	r3, [sp, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	dc03      	bgt.n	8004884 <_dtoa_r+0xb3c>
 800487c:	9b06      	ldr	r3, [sp, #24]
 800487e:	2b02      	cmp	r3, #2
 8004880:	f73f aecc 	bgt.w	800461c <_dtoa_r+0x8d4>
 8004884:	465d      	mov	r5, fp
 8004886:	4639      	mov	r1, r7
 8004888:	9804      	ldr	r0, [sp, #16]
 800488a:	f7ff f9cf 	bl	8003c2c <quorem>
 800488e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004892:	f805 8b01 	strb.w	r8, [r5], #1
 8004896:	9a02      	ldr	r2, [sp, #8]
 8004898:	eba5 030b 	sub.w	r3, r5, fp
 800489c:	429a      	cmp	r2, r3
 800489e:	ddb0      	ble.n	8004802 <_dtoa_r+0xaba>
 80048a0:	2300      	movs	r3, #0
 80048a2:	220a      	movs	r2, #10
 80048a4:	9904      	ldr	r1, [sp, #16]
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fba5 	bl	8004ff6 <__multadd>
 80048ac:	9004      	str	r0, [sp, #16]
 80048ae:	e7ea      	b.n	8004886 <_dtoa_r+0xb3e>
 80048b0:	08005e5c 	.word	0x08005e5c
 80048b4:	08005ed8 	.word	0x08005ed8

080048b8 <rshift>:
 80048b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ba:	6906      	ldr	r6, [r0, #16]
 80048bc:	114b      	asrs	r3, r1, #5
 80048be:	429e      	cmp	r6, r3
 80048c0:	f100 0414 	add.w	r4, r0, #20
 80048c4:	dd30      	ble.n	8004928 <rshift+0x70>
 80048c6:	f011 011f 	ands.w	r1, r1, #31
 80048ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80048ce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80048d2:	d108      	bne.n	80048e6 <rshift+0x2e>
 80048d4:	4621      	mov	r1, r4
 80048d6:	42b2      	cmp	r2, r6
 80048d8:	460b      	mov	r3, r1
 80048da:	d211      	bcs.n	8004900 <rshift+0x48>
 80048dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80048e0:	f841 3b04 	str.w	r3, [r1], #4
 80048e4:	e7f7      	b.n	80048d6 <rshift+0x1e>
 80048e6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80048ea:	f1c1 0c20 	rsb	ip, r1, #32
 80048ee:	40cd      	lsrs	r5, r1
 80048f0:	3204      	adds	r2, #4
 80048f2:	4623      	mov	r3, r4
 80048f4:	42b2      	cmp	r2, r6
 80048f6:	4617      	mov	r7, r2
 80048f8:	d30c      	bcc.n	8004914 <rshift+0x5c>
 80048fa:	601d      	str	r5, [r3, #0]
 80048fc:	b105      	cbz	r5, 8004900 <rshift+0x48>
 80048fe:	3304      	adds	r3, #4
 8004900:	1b1a      	subs	r2, r3, r4
 8004902:	42a3      	cmp	r3, r4
 8004904:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004908:	bf08      	it	eq
 800490a:	2300      	moveq	r3, #0
 800490c:	6102      	str	r2, [r0, #16]
 800490e:	bf08      	it	eq
 8004910:	6143      	streq	r3, [r0, #20]
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004914:	683f      	ldr	r7, [r7, #0]
 8004916:	fa07 f70c 	lsl.w	r7, r7, ip
 800491a:	433d      	orrs	r5, r7
 800491c:	f843 5b04 	str.w	r5, [r3], #4
 8004920:	f852 5b04 	ldr.w	r5, [r2], #4
 8004924:	40cd      	lsrs	r5, r1
 8004926:	e7e5      	b.n	80048f4 <rshift+0x3c>
 8004928:	4623      	mov	r3, r4
 800492a:	e7e9      	b.n	8004900 <rshift+0x48>

0800492c <__hexdig_fun>:
 800492c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004930:	2b09      	cmp	r3, #9
 8004932:	d802      	bhi.n	800493a <__hexdig_fun+0xe>
 8004934:	3820      	subs	r0, #32
 8004936:	b2c0      	uxtb	r0, r0
 8004938:	4770      	bx	lr
 800493a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800493e:	2b05      	cmp	r3, #5
 8004940:	d801      	bhi.n	8004946 <__hexdig_fun+0x1a>
 8004942:	3847      	subs	r0, #71	; 0x47
 8004944:	e7f7      	b.n	8004936 <__hexdig_fun+0xa>
 8004946:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800494a:	2b05      	cmp	r3, #5
 800494c:	d801      	bhi.n	8004952 <__hexdig_fun+0x26>
 800494e:	3827      	subs	r0, #39	; 0x27
 8004950:	e7f1      	b.n	8004936 <__hexdig_fun+0xa>
 8004952:	2000      	movs	r0, #0
 8004954:	4770      	bx	lr

08004956 <__gethex>:
 8004956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	b08b      	sub	sp, #44	; 0x2c
 800495c:	468a      	mov	sl, r1
 800495e:	9002      	str	r0, [sp, #8]
 8004960:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004962:	9306      	str	r3, [sp, #24]
 8004964:	4690      	mov	r8, r2
 8004966:	f000 fad0 	bl	8004f0a <__localeconv_l>
 800496a:	6803      	ldr	r3, [r0, #0]
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fb fc6d 	bl	800024e <strlen>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	9001      	str	r0, [sp, #4]
 8004978:	4403      	add	r3, r0
 800497a:	f04f 0b00 	mov.w	fp, #0
 800497e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004982:	9307      	str	r3, [sp, #28]
 8004984:	f8da 3000 	ldr.w	r3, [sl]
 8004988:	3302      	adds	r3, #2
 800498a:	461f      	mov	r7, r3
 800498c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004990:	2830      	cmp	r0, #48	; 0x30
 8004992:	d06c      	beq.n	8004a6e <__gethex+0x118>
 8004994:	f7ff ffca 	bl	800492c <__hexdig_fun>
 8004998:	4604      	mov	r4, r0
 800499a:	2800      	cmp	r0, #0
 800499c:	d16a      	bne.n	8004a74 <__gethex+0x11e>
 800499e:	9a01      	ldr	r2, [sp, #4]
 80049a0:	9903      	ldr	r1, [sp, #12]
 80049a2:	4638      	mov	r0, r7
 80049a4:	f001 f8f4 	bl	8005b90 <strncmp>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d166      	bne.n	8004a7a <__gethex+0x124>
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	5cf8      	ldrb	r0, [r7, r3]
 80049b0:	18fe      	adds	r6, r7, r3
 80049b2:	f7ff ffbb 	bl	800492c <__hexdig_fun>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d062      	beq.n	8004a80 <__gethex+0x12a>
 80049ba:	4633      	mov	r3, r6
 80049bc:	7818      	ldrb	r0, [r3, #0]
 80049be:	2830      	cmp	r0, #48	; 0x30
 80049c0:	461f      	mov	r7, r3
 80049c2:	f103 0301 	add.w	r3, r3, #1
 80049c6:	d0f9      	beq.n	80049bc <__gethex+0x66>
 80049c8:	f7ff ffb0 	bl	800492c <__hexdig_fun>
 80049cc:	fab0 f580 	clz	r5, r0
 80049d0:	096d      	lsrs	r5, r5, #5
 80049d2:	4634      	mov	r4, r6
 80049d4:	f04f 0b01 	mov.w	fp, #1
 80049d8:	463a      	mov	r2, r7
 80049da:	4616      	mov	r6, r2
 80049dc:	3201      	adds	r2, #1
 80049de:	7830      	ldrb	r0, [r6, #0]
 80049e0:	f7ff ffa4 	bl	800492c <__hexdig_fun>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d1f8      	bne.n	80049da <__gethex+0x84>
 80049e8:	9a01      	ldr	r2, [sp, #4]
 80049ea:	9903      	ldr	r1, [sp, #12]
 80049ec:	4630      	mov	r0, r6
 80049ee:	f001 f8cf 	bl	8005b90 <strncmp>
 80049f2:	b950      	cbnz	r0, 8004a0a <__gethex+0xb4>
 80049f4:	b954      	cbnz	r4, 8004a0c <__gethex+0xb6>
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	18f4      	adds	r4, r6, r3
 80049fa:	4622      	mov	r2, r4
 80049fc:	4616      	mov	r6, r2
 80049fe:	3201      	adds	r2, #1
 8004a00:	7830      	ldrb	r0, [r6, #0]
 8004a02:	f7ff ff93 	bl	800492c <__hexdig_fun>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d1f8      	bne.n	80049fc <__gethex+0xa6>
 8004a0a:	b10c      	cbz	r4, 8004a10 <__gethex+0xba>
 8004a0c:	1ba4      	subs	r4, r4, r6
 8004a0e:	00a4      	lsls	r4, r4, #2
 8004a10:	7833      	ldrb	r3, [r6, #0]
 8004a12:	2b50      	cmp	r3, #80	; 0x50
 8004a14:	d001      	beq.n	8004a1a <__gethex+0xc4>
 8004a16:	2b70      	cmp	r3, #112	; 0x70
 8004a18:	d140      	bne.n	8004a9c <__gethex+0x146>
 8004a1a:	7873      	ldrb	r3, [r6, #1]
 8004a1c:	2b2b      	cmp	r3, #43	; 0x2b
 8004a1e:	d031      	beq.n	8004a84 <__gethex+0x12e>
 8004a20:	2b2d      	cmp	r3, #45	; 0x2d
 8004a22:	d033      	beq.n	8004a8c <__gethex+0x136>
 8004a24:	1c71      	adds	r1, r6, #1
 8004a26:	f04f 0900 	mov.w	r9, #0
 8004a2a:	7808      	ldrb	r0, [r1, #0]
 8004a2c:	f7ff ff7e 	bl	800492c <__hexdig_fun>
 8004a30:	1e43      	subs	r3, r0, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b18      	cmp	r3, #24
 8004a36:	d831      	bhi.n	8004a9c <__gethex+0x146>
 8004a38:	f1a0 0210 	sub.w	r2, r0, #16
 8004a3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004a40:	f7ff ff74 	bl	800492c <__hexdig_fun>
 8004a44:	1e43      	subs	r3, r0, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b18      	cmp	r3, #24
 8004a4a:	d922      	bls.n	8004a92 <__gethex+0x13c>
 8004a4c:	f1b9 0f00 	cmp.w	r9, #0
 8004a50:	d000      	beq.n	8004a54 <__gethex+0xfe>
 8004a52:	4252      	negs	r2, r2
 8004a54:	4414      	add	r4, r2
 8004a56:	f8ca 1000 	str.w	r1, [sl]
 8004a5a:	b30d      	cbz	r5, 8004aa0 <__gethex+0x14a>
 8004a5c:	f1bb 0f00 	cmp.w	fp, #0
 8004a60:	bf0c      	ite	eq
 8004a62:	2706      	moveq	r7, #6
 8004a64:	2700      	movne	r7, #0
 8004a66:	4638      	mov	r0, r7
 8004a68:	b00b      	add	sp, #44	; 0x2c
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	f10b 0b01 	add.w	fp, fp, #1
 8004a72:	e78a      	b.n	800498a <__gethex+0x34>
 8004a74:	2500      	movs	r5, #0
 8004a76:	462c      	mov	r4, r5
 8004a78:	e7ae      	b.n	80049d8 <__gethex+0x82>
 8004a7a:	463e      	mov	r6, r7
 8004a7c:	2501      	movs	r5, #1
 8004a7e:	e7c7      	b.n	8004a10 <__gethex+0xba>
 8004a80:	4604      	mov	r4, r0
 8004a82:	e7fb      	b.n	8004a7c <__gethex+0x126>
 8004a84:	f04f 0900 	mov.w	r9, #0
 8004a88:	1cb1      	adds	r1, r6, #2
 8004a8a:	e7ce      	b.n	8004a2a <__gethex+0xd4>
 8004a8c:	f04f 0901 	mov.w	r9, #1
 8004a90:	e7fa      	b.n	8004a88 <__gethex+0x132>
 8004a92:	230a      	movs	r3, #10
 8004a94:	fb03 0202 	mla	r2, r3, r2, r0
 8004a98:	3a10      	subs	r2, #16
 8004a9a:	e7cf      	b.n	8004a3c <__gethex+0xe6>
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	e7da      	b.n	8004a56 <__gethex+0x100>
 8004aa0:	1bf3      	subs	r3, r6, r7
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	2b07      	cmp	r3, #7
 8004aa8:	dc49      	bgt.n	8004b3e <__gethex+0x1e8>
 8004aaa:	9802      	ldr	r0, [sp, #8]
 8004aac:	f000 fa58 	bl	8004f60 <_Balloc>
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	f100 0914 	add.w	r9, r0, #20
 8004ab6:	f04f 0b00 	mov.w	fp, #0
 8004aba:	f1c3 0301 	rsb	r3, r3, #1
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f8cd 9010 	str.w	r9, [sp, #16]
 8004ac4:	46da      	mov	sl, fp
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	42b7      	cmp	r7, r6
 8004aca:	d33b      	bcc.n	8004b44 <__gethex+0x1ee>
 8004acc:	9804      	ldr	r0, [sp, #16]
 8004ace:	f840 ab04 	str.w	sl, [r0], #4
 8004ad2:	eba0 0009 	sub.w	r0, r0, r9
 8004ad6:	1080      	asrs	r0, r0, #2
 8004ad8:	6128      	str	r0, [r5, #16]
 8004ada:	0147      	lsls	r7, r0, #5
 8004adc:	4650      	mov	r0, sl
 8004ade:	f000 fb03 	bl	80050e8 <__hi0bits>
 8004ae2:	f8d8 6000 	ldr.w	r6, [r8]
 8004ae6:	1a3f      	subs	r7, r7, r0
 8004ae8:	42b7      	cmp	r7, r6
 8004aea:	dd64      	ble.n	8004bb6 <__gethex+0x260>
 8004aec:	1bbf      	subs	r7, r7, r6
 8004aee:	4639      	mov	r1, r7
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 fe13 	bl	800571c <__any_on>
 8004af6:	4682      	mov	sl, r0
 8004af8:	b178      	cbz	r0, 8004b1a <__gethex+0x1c4>
 8004afa:	1e7b      	subs	r3, r7, #1
 8004afc:	1159      	asrs	r1, r3, #5
 8004afe:	f003 021f 	and.w	r2, r3, #31
 8004b02:	f04f 0a01 	mov.w	sl, #1
 8004b06:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004b0a:	fa0a f202 	lsl.w	r2, sl, r2
 8004b0e:	420a      	tst	r2, r1
 8004b10:	d003      	beq.n	8004b1a <__gethex+0x1c4>
 8004b12:	4553      	cmp	r3, sl
 8004b14:	dc46      	bgt.n	8004ba4 <__gethex+0x24e>
 8004b16:	f04f 0a02 	mov.w	sl, #2
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff fecb 	bl	80048b8 <rshift>
 8004b22:	443c      	add	r4, r7
 8004b24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	da52      	bge.n	8004bd2 <__gethex+0x27c>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	9802      	ldr	r0, [sp, #8]
 8004b30:	f000 fa4a 	bl	8004fc8 <_Bfree>
 8004b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b36:	2300      	movs	r3, #0
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	27a3      	movs	r7, #163	; 0xa3
 8004b3c:	e793      	b.n	8004a66 <__gethex+0x110>
 8004b3e:	3101      	adds	r1, #1
 8004b40:	105b      	asrs	r3, r3, #1
 8004b42:	e7b0      	b.n	8004aa6 <__gethex+0x150>
 8004b44:	1e73      	subs	r3, r6, #1
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	9a07      	ldr	r2, [sp, #28]
 8004b4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <__gethex+0x22e>
 8004b52:	f1bb 0f20 	cmp.w	fp, #32
 8004b56:	d107      	bne.n	8004b68 <__gethex+0x212>
 8004b58:	9b04      	ldr	r3, [sp, #16]
 8004b5a:	f8c3 a000 	str.w	sl, [r3]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	f04f 0a00 	mov.w	sl, #0
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	46d3      	mov	fp, sl
 8004b68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004b6c:	f7ff fede 	bl	800492c <__hexdig_fun>
 8004b70:	f000 000f 	and.w	r0, r0, #15
 8004b74:	fa00 f00b 	lsl.w	r0, r0, fp
 8004b78:	ea4a 0a00 	orr.w	sl, sl, r0
 8004b7c:	f10b 0b04 	add.w	fp, fp, #4
 8004b80:	9b05      	ldr	r3, [sp, #20]
 8004b82:	e00d      	b.n	8004ba0 <__gethex+0x24a>
 8004b84:	9b05      	ldr	r3, [sp, #20]
 8004b86:	9a08      	ldr	r2, [sp, #32]
 8004b88:	4413      	add	r3, r2
 8004b8a:	42bb      	cmp	r3, r7
 8004b8c:	d3e1      	bcc.n	8004b52 <__gethex+0x1fc>
 8004b8e:	4618      	mov	r0, r3
 8004b90:	9a01      	ldr	r2, [sp, #4]
 8004b92:	9903      	ldr	r1, [sp, #12]
 8004b94:	9309      	str	r3, [sp, #36]	; 0x24
 8004b96:	f000 fffb 	bl	8005b90 <strncmp>
 8004b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d1d8      	bne.n	8004b52 <__gethex+0x1fc>
 8004ba0:	461e      	mov	r6, r3
 8004ba2:	e791      	b.n	8004ac8 <__gethex+0x172>
 8004ba4:	1eb9      	subs	r1, r7, #2
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 fdb8 	bl	800571c <__any_on>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0b2      	beq.n	8004b16 <__gethex+0x1c0>
 8004bb0:	f04f 0a03 	mov.w	sl, #3
 8004bb4:	e7b1      	b.n	8004b1a <__gethex+0x1c4>
 8004bb6:	da09      	bge.n	8004bcc <__gethex+0x276>
 8004bb8:	1bf7      	subs	r7, r6, r7
 8004bba:	4629      	mov	r1, r5
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	9802      	ldr	r0, [sp, #8]
 8004bc0:	f000 fbce 	bl	8005360 <__lshift>
 8004bc4:	1be4      	subs	r4, r4, r7
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	f100 0914 	add.w	r9, r0, #20
 8004bcc:	f04f 0a00 	mov.w	sl, #0
 8004bd0:	e7a8      	b.n	8004b24 <__gethex+0x1ce>
 8004bd2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004bd6:	42a0      	cmp	r0, r4
 8004bd8:	dd6a      	ble.n	8004cb0 <__gethex+0x35a>
 8004bda:	1b04      	subs	r4, r0, r4
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	dc2e      	bgt.n	8004c3e <__gethex+0x2e8>
 8004be0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d022      	beq.n	8004c2e <__gethex+0x2d8>
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d024      	beq.n	8004c36 <__gethex+0x2e0>
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d115      	bne.n	8004c1c <__gethex+0x2c6>
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d113      	bne.n	8004c1c <__gethex+0x2c6>
 8004bf4:	2e01      	cmp	r6, #1
 8004bf6:	dc0b      	bgt.n	8004c10 <__gethex+0x2ba>
 8004bf8:	9a06      	ldr	r2, [sp, #24]
 8004bfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	2301      	movs	r3, #1
 8004c02:	612b      	str	r3, [r5, #16]
 8004c04:	f8c9 3000 	str.w	r3, [r9]
 8004c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c0a:	2762      	movs	r7, #98	; 0x62
 8004c0c:	601d      	str	r5, [r3, #0]
 8004c0e:	e72a      	b.n	8004a66 <__gethex+0x110>
 8004c10:	1e71      	subs	r1, r6, #1
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fd82 	bl	800571c <__any_on>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d1ed      	bne.n	8004bf8 <__gethex+0x2a2>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	9802      	ldr	r0, [sp, #8]
 8004c20:	f000 f9d2 	bl	8004fc8 <_Bfree>
 8004c24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c26:	2300      	movs	r3, #0
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	2750      	movs	r7, #80	; 0x50
 8004c2c:	e71b      	b.n	8004a66 <__gethex+0x110>
 8004c2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0e1      	beq.n	8004bf8 <__gethex+0x2a2>
 8004c34:	e7f2      	b.n	8004c1c <__gethex+0x2c6>
 8004c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1dd      	bne.n	8004bf8 <__gethex+0x2a2>
 8004c3c:	e7ee      	b.n	8004c1c <__gethex+0x2c6>
 8004c3e:	1e67      	subs	r7, r4, #1
 8004c40:	f1ba 0f00 	cmp.w	sl, #0
 8004c44:	d131      	bne.n	8004caa <__gethex+0x354>
 8004c46:	b127      	cbz	r7, 8004c52 <__gethex+0x2fc>
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 fd66 	bl	800571c <__any_on>
 8004c50:	4682      	mov	sl, r0
 8004c52:	117a      	asrs	r2, r7, #5
 8004c54:	2301      	movs	r3, #1
 8004c56:	f007 071f 	and.w	r7, r7, #31
 8004c5a:	fa03 f707 	lsl.w	r7, r3, r7
 8004c5e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8004c62:	4621      	mov	r1, r4
 8004c64:	421f      	tst	r7, r3
 8004c66:	4628      	mov	r0, r5
 8004c68:	bf18      	it	ne
 8004c6a:	f04a 0a02 	orrne.w	sl, sl, #2
 8004c6e:	1b36      	subs	r6, r6, r4
 8004c70:	f7ff fe22 	bl	80048b8 <rshift>
 8004c74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004c78:	2702      	movs	r7, #2
 8004c7a:	f1ba 0f00 	cmp.w	sl, #0
 8004c7e:	d048      	beq.n	8004d12 <__gethex+0x3bc>
 8004c80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d015      	beq.n	8004cb4 <__gethex+0x35e>
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d017      	beq.n	8004cbc <__gethex+0x366>
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d109      	bne.n	8004ca4 <__gethex+0x34e>
 8004c90:	f01a 0f02 	tst.w	sl, #2
 8004c94:	d006      	beq.n	8004ca4 <__gethex+0x34e>
 8004c96:	f8d9 3000 	ldr.w	r3, [r9]
 8004c9a:	ea4a 0a03 	orr.w	sl, sl, r3
 8004c9e:	f01a 0f01 	tst.w	sl, #1
 8004ca2:	d10e      	bne.n	8004cc2 <__gethex+0x36c>
 8004ca4:	f047 0710 	orr.w	r7, r7, #16
 8004ca8:	e033      	b.n	8004d12 <__gethex+0x3bc>
 8004caa:	f04f 0a01 	mov.w	sl, #1
 8004cae:	e7d0      	b.n	8004c52 <__gethex+0x2fc>
 8004cb0:	2701      	movs	r7, #1
 8004cb2:	e7e2      	b.n	8004c7a <__gethex+0x324>
 8004cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cb6:	f1c3 0301 	rsb	r3, r3, #1
 8004cba:	9315      	str	r3, [sp, #84]	; 0x54
 8004cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <__gethex+0x34e>
 8004cc2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8004cc6:	f105 0314 	add.w	r3, r5, #20
 8004cca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8004cce:	eb03 010a 	add.w	r1, r3, sl
 8004cd2:	f04f 0c00 	mov.w	ip, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cdc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004ce0:	d01c      	beq.n	8004d1c <__gethex+0x3c6>
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	6002      	str	r2, [r0, #0]
 8004ce6:	2f02      	cmp	r7, #2
 8004ce8:	f105 0314 	add.w	r3, r5, #20
 8004cec:	d138      	bne.n	8004d60 <__gethex+0x40a>
 8004cee:	f8d8 2000 	ldr.w	r2, [r8]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	42b2      	cmp	r2, r6
 8004cf6:	d10a      	bne.n	8004d0e <__gethex+0x3b8>
 8004cf8:	1171      	asrs	r1, r6, #5
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f006 061f 	and.w	r6, r6, #31
 8004d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d04:	fa02 f606 	lsl.w	r6, r2, r6
 8004d08:	421e      	tst	r6, r3
 8004d0a:	bf18      	it	ne
 8004d0c:	4617      	movne	r7, r2
 8004d0e:	f047 0720 	orr.w	r7, r7, #32
 8004d12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d14:	601d      	str	r5, [r3, #0]
 8004d16:	9b06      	ldr	r3, [sp, #24]
 8004d18:	601c      	str	r4, [r3, #0]
 8004d1a:	e6a4      	b.n	8004a66 <__gethex+0x110>
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	f843 cc04 	str.w	ip, [r3, #-4]
 8004d22:	d8d8      	bhi.n	8004cd6 <__gethex+0x380>
 8004d24:	68ab      	ldr	r3, [r5, #8]
 8004d26:	4599      	cmp	r9, r3
 8004d28:	db12      	blt.n	8004d50 <__gethex+0x3fa>
 8004d2a:	6869      	ldr	r1, [r5, #4]
 8004d2c:	9802      	ldr	r0, [sp, #8]
 8004d2e:	3101      	adds	r1, #1
 8004d30:	f000 f916 	bl	8004f60 <_Balloc>
 8004d34:	692a      	ldr	r2, [r5, #16]
 8004d36:	3202      	adds	r2, #2
 8004d38:	f105 010c 	add.w	r1, r5, #12
 8004d3c:	4683      	mov	fp, r0
 8004d3e:	0092      	lsls	r2, r2, #2
 8004d40:	300c      	adds	r0, #12
 8004d42:	f7fd fa4b 	bl	80021dc <memcpy>
 8004d46:	4629      	mov	r1, r5
 8004d48:	9802      	ldr	r0, [sp, #8]
 8004d4a:	f000 f93d 	bl	8004fc8 <_Bfree>
 8004d4e:	465d      	mov	r5, fp
 8004d50:	692b      	ldr	r3, [r5, #16]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d58:	612a      	str	r2, [r5, #16]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]
 8004d5e:	e7c2      	b.n	8004ce6 <__gethex+0x390>
 8004d60:	692a      	ldr	r2, [r5, #16]
 8004d62:	454a      	cmp	r2, r9
 8004d64:	dd0b      	ble.n	8004d7e <__gethex+0x428>
 8004d66:	2101      	movs	r1, #1
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fda5 	bl	80048b8 <rshift>
 8004d6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004d72:	3401      	adds	r4, #1
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	f6ff aed9 	blt.w	8004b2c <__gethex+0x1d6>
 8004d7a:	2701      	movs	r7, #1
 8004d7c:	e7c7      	b.n	8004d0e <__gethex+0x3b8>
 8004d7e:	f016 061f 	ands.w	r6, r6, #31
 8004d82:	d0fa      	beq.n	8004d7a <__gethex+0x424>
 8004d84:	449a      	add	sl, r3
 8004d86:	f1c6 0620 	rsb	r6, r6, #32
 8004d8a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004d8e:	f000 f9ab 	bl	80050e8 <__hi0bits>
 8004d92:	42b0      	cmp	r0, r6
 8004d94:	dbe7      	blt.n	8004d66 <__gethex+0x410>
 8004d96:	e7f0      	b.n	8004d7a <__gethex+0x424>

08004d98 <L_shift>:
 8004d98:	f1c2 0208 	rsb	r2, r2, #8
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	b570      	push	{r4, r5, r6, lr}
 8004da0:	f1c2 0620 	rsb	r6, r2, #32
 8004da4:	6843      	ldr	r3, [r0, #4]
 8004da6:	6804      	ldr	r4, [r0, #0]
 8004da8:	fa03 f506 	lsl.w	r5, r3, r6
 8004dac:	432c      	orrs	r4, r5
 8004dae:	40d3      	lsrs	r3, r2
 8004db0:	6004      	str	r4, [r0, #0]
 8004db2:	f840 3f04 	str.w	r3, [r0, #4]!
 8004db6:	4288      	cmp	r0, r1
 8004db8:	d3f4      	bcc.n	8004da4 <L_shift+0xc>
 8004dba:	bd70      	pop	{r4, r5, r6, pc}

08004dbc <__match>:
 8004dbc:	b530      	push	{r4, r5, lr}
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	b914      	cbnz	r4, 8004dce <__match+0x12>
 8004dc8:	6003      	str	r3, [r0, #0]
 8004dca:	2001      	movs	r0, #1
 8004dcc:	bd30      	pop	{r4, r5, pc}
 8004dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004dd6:	2d19      	cmp	r5, #25
 8004dd8:	bf98      	it	ls
 8004dda:	3220      	addls	r2, #32
 8004ddc:	42a2      	cmp	r2, r4
 8004dde:	d0f0      	beq.n	8004dc2 <__match+0x6>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e7f3      	b.n	8004dcc <__match+0x10>

08004de4 <__hexnan>:
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	6801      	ldr	r1, [r0, #0]
 8004dec:	115f      	asrs	r7, r3, #5
 8004dee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004df2:	f013 031f 	ands.w	r3, r3, #31
 8004df6:	b087      	sub	sp, #28
 8004df8:	bf18      	it	ne
 8004dfa:	3704      	addne	r7, #4
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	1f3e      	subs	r6, r7, #4
 8004e00:	4682      	mov	sl, r0
 8004e02:	4690      	mov	r8, r2
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	f847 5c04 	str.w	r5, [r7, #-4]
 8004e0a:	46b1      	mov	r9, r6
 8004e0c:	4634      	mov	r4, r6
 8004e0e:	9502      	str	r5, [sp, #8]
 8004e10:	46ab      	mov	fp, r5
 8004e12:	784a      	ldrb	r2, [r1, #1]
 8004e14:	1c4b      	adds	r3, r1, #1
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	b342      	cbz	r2, 8004e6c <__hexnan+0x88>
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	9105      	str	r1, [sp, #20]
 8004e1e:	9204      	str	r2, [sp, #16]
 8004e20:	f7ff fd84 	bl	800492c <__hexdig_fun>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d143      	bne.n	8004eb0 <__hexnan+0xcc>
 8004e28:	9a04      	ldr	r2, [sp, #16]
 8004e2a:	9905      	ldr	r1, [sp, #20]
 8004e2c:	2a20      	cmp	r2, #32
 8004e2e:	d818      	bhi.n	8004e62 <__hexnan+0x7e>
 8004e30:	9b02      	ldr	r3, [sp, #8]
 8004e32:	459b      	cmp	fp, r3
 8004e34:	dd13      	ble.n	8004e5e <__hexnan+0x7a>
 8004e36:	454c      	cmp	r4, r9
 8004e38:	d206      	bcs.n	8004e48 <__hexnan+0x64>
 8004e3a:	2d07      	cmp	r5, #7
 8004e3c:	dc04      	bgt.n	8004e48 <__hexnan+0x64>
 8004e3e:	462a      	mov	r2, r5
 8004e40:	4649      	mov	r1, r9
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff ffa8 	bl	8004d98 <L_shift>
 8004e48:	4544      	cmp	r4, r8
 8004e4a:	d944      	bls.n	8004ed6 <__hexnan+0xf2>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f1a4 0904 	sub.w	r9, r4, #4
 8004e52:	f844 3c04 	str.w	r3, [r4, #-4]
 8004e56:	f8cd b008 	str.w	fp, [sp, #8]
 8004e5a:	464c      	mov	r4, r9
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	9903      	ldr	r1, [sp, #12]
 8004e60:	e7d7      	b.n	8004e12 <__hexnan+0x2e>
 8004e62:	2a29      	cmp	r2, #41	; 0x29
 8004e64:	d14a      	bne.n	8004efc <__hexnan+0x118>
 8004e66:	3102      	adds	r1, #2
 8004e68:	f8ca 1000 	str.w	r1, [sl]
 8004e6c:	f1bb 0f00 	cmp.w	fp, #0
 8004e70:	d044      	beq.n	8004efc <__hexnan+0x118>
 8004e72:	454c      	cmp	r4, r9
 8004e74:	d206      	bcs.n	8004e84 <__hexnan+0xa0>
 8004e76:	2d07      	cmp	r5, #7
 8004e78:	dc04      	bgt.n	8004e84 <__hexnan+0xa0>
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff ff8a 	bl	8004d98 <L_shift>
 8004e84:	4544      	cmp	r4, r8
 8004e86:	d928      	bls.n	8004eda <__hexnan+0xf6>
 8004e88:	4643      	mov	r3, r8
 8004e8a:	f854 2b04 	ldr.w	r2, [r4], #4
 8004e8e:	f843 2b04 	str.w	r2, [r3], #4
 8004e92:	42a6      	cmp	r6, r4
 8004e94:	d2f9      	bcs.n	8004e8a <__hexnan+0xa6>
 8004e96:	2200      	movs	r2, #0
 8004e98:	f843 2b04 	str.w	r2, [r3], #4
 8004e9c:	429e      	cmp	r6, r3
 8004e9e:	d2fb      	bcs.n	8004e98 <__hexnan+0xb4>
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	b91b      	cbnz	r3, 8004eac <__hexnan+0xc8>
 8004ea4:	4546      	cmp	r6, r8
 8004ea6:	d127      	bne.n	8004ef8 <__hexnan+0x114>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	6033      	str	r3, [r6, #0]
 8004eac:	2005      	movs	r0, #5
 8004eae:	e026      	b.n	8004efe <__hexnan+0x11a>
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	2d08      	cmp	r5, #8
 8004eb4:	f10b 0b01 	add.w	fp, fp, #1
 8004eb8:	dd06      	ble.n	8004ec8 <__hexnan+0xe4>
 8004eba:	4544      	cmp	r4, r8
 8004ebc:	d9cf      	bls.n	8004e5e <__hexnan+0x7a>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f844 3c04 	str.w	r3, [r4, #-4]
 8004ec4:	2501      	movs	r5, #1
 8004ec6:	3c04      	subs	r4, #4
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	f000 000f 	and.w	r0, r0, #15
 8004ece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004ed2:	6020      	str	r0, [r4, #0]
 8004ed4:	e7c3      	b.n	8004e5e <__hexnan+0x7a>
 8004ed6:	2508      	movs	r5, #8
 8004ed8:	e7c1      	b.n	8004e5e <__hexnan+0x7a>
 8004eda:	9b01      	ldr	r3, [sp, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0df      	beq.n	8004ea0 <__hexnan+0xbc>
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ee4:	f1c3 0320 	rsb	r3, r3, #32
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	f847 2c04 	str.w	r2, [r7, #-4]
 8004ef6:	e7d3      	b.n	8004ea0 <__hexnan+0xbc>
 8004ef8:	3e04      	subs	r6, #4
 8004efa:	e7d1      	b.n	8004ea0 <__hexnan+0xbc>
 8004efc:	2004      	movs	r0, #4
 8004efe:	b007      	add	sp, #28
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f04 <__locale_ctype_ptr_l>:
 8004f04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004f08:	4770      	bx	lr

08004f0a <__localeconv_l>:
 8004f0a:	30f0      	adds	r0, #240	; 0xf0
 8004f0c:	4770      	bx	lr
	...

08004f10 <_localeconv_r>:
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <_localeconv_r+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a18      	ldr	r0, [r3, #32]
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <_localeconv_r+0x18>)
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	bf08      	it	eq
 8004f1c:	4618      	moveq	r0, r3
 8004f1e:	30f0      	adds	r0, #240	; 0xf0
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000000c 	.word	0x2000000c
 8004f28:	20000070 	.word	0x20000070

08004f2c <malloc>:
 8004f2c:	4b02      	ldr	r3, [pc, #8]	; (8004f38 <malloc+0xc>)
 8004f2e:	4601      	mov	r1, r0
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	f000 bc71 	b.w	8005818 <_malloc_r>
 8004f36:	bf00      	nop
 8004f38:	2000000c 	.word	0x2000000c

08004f3c <__ascii_mbtowc>:
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	b901      	cbnz	r1, 8004f42 <__ascii_mbtowc+0x6>
 8004f40:	a901      	add	r1, sp, #4
 8004f42:	b142      	cbz	r2, 8004f56 <__ascii_mbtowc+0x1a>
 8004f44:	b14b      	cbz	r3, 8004f5a <__ascii_mbtowc+0x1e>
 8004f46:	7813      	ldrb	r3, [r2, #0]
 8004f48:	600b      	str	r3, [r1, #0]
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	1c10      	adds	r0, r2, #0
 8004f4e:	bf18      	it	ne
 8004f50:	2001      	movne	r0, #1
 8004f52:	b002      	add	sp, #8
 8004f54:	4770      	bx	lr
 8004f56:	4610      	mov	r0, r2
 8004f58:	e7fb      	b.n	8004f52 <__ascii_mbtowc+0x16>
 8004f5a:	f06f 0001 	mvn.w	r0, #1
 8004f5e:	e7f8      	b.n	8004f52 <__ascii_mbtowc+0x16>

08004f60 <_Balloc>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f64:	4604      	mov	r4, r0
 8004f66:	460e      	mov	r6, r1
 8004f68:	b93d      	cbnz	r5, 8004f7a <_Balloc+0x1a>
 8004f6a:	2010      	movs	r0, #16
 8004f6c:	f7ff ffde 	bl	8004f2c <malloc>
 8004f70:	6260      	str	r0, [r4, #36]	; 0x24
 8004f72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f76:	6005      	str	r5, [r0, #0]
 8004f78:	60c5      	str	r5, [r0, #12]
 8004f7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f7c:	68eb      	ldr	r3, [r5, #12]
 8004f7e:	b183      	cbz	r3, 8004fa2 <_Balloc+0x42>
 8004f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004f88:	b9b8      	cbnz	r0, 8004fba <_Balloc+0x5a>
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	fa01 f506 	lsl.w	r5, r1, r6
 8004f90:	1d6a      	adds	r2, r5, #5
 8004f92:	0092      	lsls	r2, r2, #2
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fbe2 	bl	800575e <_calloc_r>
 8004f9a:	b160      	cbz	r0, 8004fb6 <_Balloc+0x56>
 8004f9c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004fa0:	e00e      	b.n	8004fc0 <_Balloc+0x60>
 8004fa2:	2221      	movs	r2, #33	; 0x21
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 fbd9 	bl	800575e <_calloc_r>
 8004fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fae:	60e8      	str	r0, [r5, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e4      	bne.n	8004f80 <_Balloc+0x20>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	6802      	ldr	r2, [r0, #0]
 8004fbc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fc6:	e7f7      	b.n	8004fb8 <_Balloc+0x58>

08004fc8 <_Bfree>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fcc:	4606      	mov	r6, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	b93c      	cbnz	r4, 8004fe2 <_Bfree+0x1a>
 8004fd2:	2010      	movs	r0, #16
 8004fd4:	f7ff ffaa 	bl	8004f2c <malloc>
 8004fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8004fda:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fde:	6004      	str	r4, [r0, #0]
 8004fe0:	60c4      	str	r4, [r0, #12]
 8004fe2:	b13d      	cbz	r5, 8004ff4 <_Bfree+0x2c>
 8004fe4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004fe6:	686a      	ldr	r2, [r5, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fee:	6029      	str	r1, [r5, #0]
 8004ff0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}

08004ff6 <__multadd>:
 8004ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	690d      	ldr	r5, [r1, #16]
 8004ffc:	461f      	mov	r7, r3
 8004ffe:	4606      	mov	r6, r0
 8005000:	460c      	mov	r4, r1
 8005002:	f101 0c14 	add.w	ip, r1, #20
 8005006:	2300      	movs	r3, #0
 8005008:	f8dc 0000 	ldr.w	r0, [ip]
 800500c:	b281      	uxth	r1, r0
 800500e:	fb02 7101 	mla	r1, r2, r1, r7
 8005012:	0c0f      	lsrs	r7, r1, #16
 8005014:	0c00      	lsrs	r0, r0, #16
 8005016:	fb02 7000 	mla	r0, r2, r0, r7
 800501a:	b289      	uxth	r1, r1
 800501c:	3301      	adds	r3, #1
 800501e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005022:	429d      	cmp	r5, r3
 8005024:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005028:	f84c 1b04 	str.w	r1, [ip], #4
 800502c:	dcec      	bgt.n	8005008 <__multadd+0x12>
 800502e:	b1d7      	cbz	r7, 8005066 <__multadd+0x70>
 8005030:	68a3      	ldr	r3, [r4, #8]
 8005032:	42ab      	cmp	r3, r5
 8005034:	dc12      	bgt.n	800505c <__multadd+0x66>
 8005036:	6861      	ldr	r1, [r4, #4]
 8005038:	4630      	mov	r0, r6
 800503a:	3101      	adds	r1, #1
 800503c:	f7ff ff90 	bl	8004f60 <_Balloc>
 8005040:	6922      	ldr	r2, [r4, #16]
 8005042:	3202      	adds	r2, #2
 8005044:	f104 010c 	add.w	r1, r4, #12
 8005048:	4680      	mov	r8, r0
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	300c      	adds	r0, #12
 800504e:	f7fd f8c5 	bl	80021dc <memcpy>
 8005052:	4621      	mov	r1, r4
 8005054:	4630      	mov	r0, r6
 8005056:	f7ff ffb7 	bl	8004fc8 <_Bfree>
 800505a:	4644      	mov	r4, r8
 800505c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005060:	3501      	adds	r5, #1
 8005062:	615f      	str	r7, [r3, #20]
 8005064:	6125      	str	r5, [r4, #16]
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800506c <__s2b>:
 800506c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005070:	460c      	mov	r4, r1
 8005072:	4615      	mov	r5, r2
 8005074:	461f      	mov	r7, r3
 8005076:	2209      	movs	r2, #9
 8005078:	3308      	adds	r3, #8
 800507a:	4606      	mov	r6, r0
 800507c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005080:	2100      	movs	r1, #0
 8005082:	2201      	movs	r2, #1
 8005084:	429a      	cmp	r2, r3
 8005086:	db20      	blt.n	80050ca <__s2b+0x5e>
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ff69 	bl	8004f60 <_Balloc>
 800508e:	9b08      	ldr	r3, [sp, #32]
 8005090:	6143      	str	r3, [r0, #20]
 8005092:	2d09      	cmp	r5, #9
 8005094:	f04f 0301 	mov.w	r3, #1
 8005098:	6103      	str	r3, [r0, #16]
 800509a:	dd19      	ble.n	80050d0 <__s2b+0x64>
 800509c:	f104 0809 	add.w	r8, r4, #9
 80050a0:	46c1      	mov	r9, r8
 80050a2:	442c      	add	r4, r5
 80050a4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80050a8:	4601      	mov	r1, r0
 80050aa:	3b30      	subs	r3, #48	; 0x30
 80050ac:	220a      	movs	r2, #10
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ffa1 	bl	8004ff6 <__multadd>
 80050b4:	45a1      	cmp	r9, r4
 80050b6:	d1f5      	bne.n	80050a4 <__s2b+0x38>
 80050b8:	eb08 0405 	add.w	r4, r8, r5
 80050bc:	3c08      	subs	r4, #8
 80050be:	1b2d      	subs	r5, r5, r4
 80050c0:	1963      	adds	r3, r4, r5
 80050c2:	42bb      	cmp	r3, r7
 80050c4:	db07      	blt.n	80050d6 <__s2b+0x6a>
 80050c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ca:	0052      	lsls	r2, r2, #1
 80050cc:	3101      	adds	r1, #1
 80050ce:	e7d9      	b.n	8005084 <__s2b+0x18>
 80050d0:	340a      	adds	r4, #10
 80050d2:	2509      	movs	r5, #9
 80050d4:	e7f3      	b.n	80050be <__s2b+0x52>
 80050d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050da:	4601      	mov	r1, r0
 80050dc:	3b30      	subs	r3, #48	; 0x30
 80050de:	220a      	movs	r2, #10
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7ff ff88 	bl	8004ff6 <__multadd>
 80050e6:	e7eb      	b.n	80050c0 <__s2b+0x54>

080050e8 <__hi0bits>:
 80050e8:	0c02      	lsrs	r2, r0, #16
 80050ea:	0412      	lsls	r2, r2, #16
 80050ec:	4603      	mov	r3, r0
 80050ee:	b9b2      	cbnz	r2, 800511e <__hi0bits+0x36>
 80050f0:	0403      	lsls	r3, r0, #16
 80050f2:	2010      	movs	r0, #16
 80050f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050f8:	bf04      	itt	eq
 80050fa:	021b      	lsleq	r3, r3, #8
 80050fc:	3008      	addeq	r0, #8
 80050fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005102:	bf04      	itt	eq
 8005104:	011b      	lsleq	r3, r3, #4
 8005106:	3004      	addeq	r0, #4
 8005108:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800510c:	bf04      	itt	eq
 800510e:	009b      	lsleq	r3, r3, #2
 8005110:	3002      	addeq	r0, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	db06      	blt.n	8005124 <__hi0bits+0x3c>
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	d503      	bpl.n	8005122 <__hi0bits+0x3a>
 800511a:	3001      	adds	r0, #1
 800511c:	4770      	bx	lr
 800511e:	2000      	movs	r0, #0
 8005120:	e7e8      	b.n	80050f4 <__hi0bits+0xc>
 8005122:	2020      	movs	r0, #32
 8005124:	4770      	bx	lr

08005126 <__lo0bits>:
 8005126:	6803      	ldr	r3, [r0, #0]
 8005128:	f013 0207 	ands.w	r2, r3, #7
 800512c:	4601      	mov	r1, r0
 800512e:	d00b      	beq.n	8005148 <__lo0bits+0x22>
 8005130:	07da      	lsls	r2, r3, #31
 8005132:	d423      	bmi.n	800517c <__lo0bits+0x56>
 8005134:	0798      	lsls	r0, r3, #30
 8005136:	bf49      	itett	mi
 8005138:	085b      	lsrmi	r3, r3, #1
 800513a:	089b      	lsrpl	r3, r3, #2
 800513c:	2001      	movmi	r0, #1
 800513e:	600b      	strmi	r3, [r1, #0]
 8005140:	bf5c      	itt	pl
 8005142:	600b      	strpl	r3, [r1, #0]
 8005144:	2002      	movpl	r0, #2
 8005146:	4770      	bx	lr
 8005148:	b298      	uxth	r0, r3
 800514a:	b9a8      	cbnz	r0, 8005178 <__lo0bits+0x52>
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	2010      	movs	r0, #16
 8005150:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005154:	bf04      	itt	eq
 8005156:	0a1b      	lsreq	r3, r3, #8
 8005158:	3008      	addeq	r0, #8
 800515a:	071a      	lsls	r2, r3, #28
 800515c:	bf04      	itt	eq
 800515e:	091b      	lsreq	r3, r3, #4
 8005160:	3004      	addeq	r0, #4
 8005162:	079a      	lsls	r2, r3, #30
 8005164:	bf04      	itt	eq
 8005166:	089b      	lsreq	r3, r3, #2
 8005168:	3002      	addeq	r0, #2
 800516a:	07da      	lsls	r2, r3, #31
 800516c:	d402      	bmi.n	8005174 <__lo0bits+0x4e>
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	d006      	beq.n	8005180 <__lo0bits+0x5a>
 8005172:	3001      	adds	r0, #1
 8005174:	600b      	str	r3, [r1, #0]
 8005176:	4770      	bx	lr
 8005178:	4610      	mov	r0, r2
 800517a:	e7e9      	b.n	8005150 <__lo0bits+0x2a>
 800517c:	2000      	movs	r0, #0
 800517e:	4770      	bx	lr
 8005180:	2020      	movs	r0, #32
 8005182:	4770      	bx	lr

08005184 <__i2b>:
 8005184:	b510      	push	{r4, lr}
 8005186:	460c      	mov	r4, r1
 8005188:	2101      	movs	r1, #1
 800518a:	f7ff fee9 	bl	8004f60 <_Balloc>
 800518e:	2201      	movs	r2, #1
 8005190:	6144      	str	r4, [r0, #20]
 8005192:	6102      	str	r2, [r0, #16]
 8005194:	bd10      	pop	{r4, pc}

08005196 <__multiply>:
 8005196:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	4614      	mov	r4, r2
 800519c:	690a      	ldr	r2, [r1, #16]
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	bfb8      	it	lt
 80051a4:	460b      	movlt	r3, r1
 80051a6:	4688      	mov	r8, r1
 80051a8:	bfbc      	itt	lt
 80051aa:	46a0      	movlt	r8, r4
 80051ac:	461c      	movlt	r4, r3
 80051ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80051b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80051b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80051ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80051be:	eb07 0609 	add.w	r6, r7, r9
 80051c2:	42b3      	cmp	r3, r6
 80051c4:	bfb8      	it	lt
 80051c6:	3101      	addlt	r1, #1
 80051c8:	f7ff feca 	bl	8004f60 <_Balloc>
 80051cc:	f100 0514 	add.w	r5, r0, #20
 80051d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80051d4:	462b      	mov	r3, r5
 80051d6:	2200      	movs	r2, #0
 80051d8:	4573      	cmp	r3, lr
 80051da:	d316      	bcc.n	800520a <__multiply+0x74>
 80051dc:	f104 0214 	add.w	r2, r4, #20
 80051e0:	f108 0114 	add.w	r1, r8, #20
 80051e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80051e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	9b00      	ldr	r3, [sp, #0]
 80051f0:	9201      	str	r2, [sp, #4]
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d80c      	bhi.n	8005210 <__multiply+0x7a>
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	dd03      	ble.n	8005202 <__multiply+0x6c>
 80051fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d05d      	beq.n	80052be <__multiply+0x128>
 8005202:	6106      	str	r6, [r0, #16]
 8005204:	b003      	add	sp, #12
 8005206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520a:	f843 2b04 	str.w	r2, [r3], #4
 800520e:	e7e3      	b.n	80051d8 <__multiply+0x42>
 8005210:	f8b2 b000 	ldrh.w	fp, [r2]
 8005214:	f1bb 0f00 	cmp.w	fp, #0
 8005218:	d023      	beq.n	8005262 <__multiply+0xcc>
 800521a:	4689      	mov	r9, r1
 800521c:	46ac      	mov	ip, r5
 800521e:	f04f 0800 	mov.w	r8, #0
 8005222:	f859 4b04 	ldr.w	r4, [r9], #4
 8005226:	f8dc a000 	ldr.w	sl, [ip]
 800522a:	b2a3      	uxth	r3, r4
 800522c:	fa1f fa8a 	uxth.w	sl, sl
 8005230:	fb0b a303 	mla	r3, fp, r3, sl
 8005234:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005238:	f8dc 4000 	ldr.w	r4, [ip]
 800523c:	4443      	add	r3, r8
 800523e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005242:	fb0b 840a 	mla	r4, fp, sl, r8
 8005246:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800524a:	46e2      	mov	sl, ip
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005252:	454f      	cmp	r7, r9
 8005254:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005258:	f84a 3b04 	str.w	r3, [sl], #4
 800525c:	d82b      	bhi.n	80052b6 <__multiply+0x120>
 800525e:	f8cc 8004 	str.w	r8, [ip, #4]
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005268:	3204      	adds	r2, #4
 800526a:	f1ba 0f00 	cmp.w	sl, #0
 800526e:	d020      	beq.n	80052b2 <__multiply+0x11c>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	4689      	mov	r9, r1
 8005274:	46a8      	mov	r8, r5
 8005276:	f04f 0b00 	mov.w	fp, #0
 800527a:	f8b9 c000 	ldrh.w	ip, [r9]
 800527e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005282:	fb0a 440c 	mla	r4, sl, ip, r4
 8005286:	445c      	add	r4, fp
 8005288:	46c4      	mov	ip, r8
 800528a:	b29b      	uxth	r3, r3
 800528c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005290:	f84c 3b04 	str.w	r3, [ip], #4
 8005294:	f859 3b04 	ldr.w	r3, [r9], #4
 8005298:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	fb0a b303 	mla	r3, sl, r3, fp
 80052a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80052a6:	454f      	cmp	r7, r9
 80052a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80052ac:	d805      	bhi.n	80052ba <__multiply+0x124>
 80052ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80052b2:	3504      	adds	r5, #4
 80052b4:	e79b      	b.n	80051ee <__multiply+0x58>
 80052b6:	46d4      	mov	ip, sl
 80052b8:	e7b3      	b.n	8005222 <__multiply+0x8c>
 80052ba:	46e0      	mov	r8, ip
 80052bc:	e7dd      	b.n	800527a <__multiply+0xe4>
 80052be:	3e01      	subs	r6, #1
 80052c0:	e799      	b.n	80051f6 <__multiply+0x60>
	...

080052c4 <__pow5mult>:
 80052c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c8:	4615      	mov	r5, r2
 80052ca:	f012 0203 	ands.w	r2, r2, #3
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	d007      	beq.n	80052e4 <__pow5mult+0x20>
 80052d4:	3a01      	subs	r2, #1
 80052d6:	4c21      	ldr	r4, [pc, #132]	; (800535c <__pow5mult+0x98>)
 80052d8:	2300      	movs	r3, #0
 80052da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052de:	f7ff fe8a 	bl	8004ff6 <__multadd>
 80052e2:	4607      	mov	r7, r0
 80052e4:	10ad      	asrs	r5, r5, #2
 80052e6:	d035      	beq.n	8005354 <__pow5mult+0x90>
 80052e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80052ea:	b93c      	cbnz	r4, 80052fc <__pow5mult+0x38>
 80052ec:	2010      	movs	r0, #16
 80052ee:	f7ff fe1d 	bl	8004f2c <malloc>
 80052f2:	6270      	str	r0, [r6, #36]	; 0x24
 80052f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052f8:	6004      	str	r4, [r0, #0]
 80052fa:	60c4      	str	r4, [r0, #12]
 80052fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005304:	b94c      	cbnz	r4, 800531a <__pow5mult+0x56>
 8005306:	f240 2171 	movw	r1, #625	; 0x271
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff ff3a 	bl	8005184 <__i2b>
 8005310:	2300      	movs	r3, #0
 8005312:	f8c8 0008 	str.w	r0, [r8, #8]
 8005316:	4604      	mov	r4, r0
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	f04f 0800 	mov.w	r8, #0
 800531e:	07eb      	lsls	r3, r5, #31
 8005320:	d50a      	bpl.n	8005338 <__pow5mult+0x74>
 8005322:	4639      	mov	r1, r7
 8005324:	4622      	mov	r2, r4
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff ff35 	bl	8005196 <__multiply>
 800532c:	4639      	mov	r1, r7
 800532e:	4681      	mov	r9, r0
 8005330:	4630      	mov	r0, r6
 8005332:	f7ff fe49 	bl	8004fc8 <_Bfree>
 8005336:	464f      	mov	r7, r9
 8005338:	106d      	asrs	r5, r5, #1
 800533a:	d00b      	beq.n	8005354 <__pow5mult+0x90>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	b938      	cbnz	r0, 8005350 <__pow5mult+0x8c>
 8005340:	4622      	mov	r2, r4
 8005342:	4621      	mov	r1, r4
 8005344:	4630      	mov	r0, r6
 8005346:	f7ff ff26 	bl	8005196 <__multiply>
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	f8c0 8000 	str.w	r8, [r0]
 8005350:	4604      	mov	r4, r0
 8005352:	e7e4      	b.n	800531e <__pow5mult+0x5a>
 8005354:	4638      	mov	r0, r7
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	bf00      	nop
 800535c:	08005fe0 	.word	0x08005fe0

08005360 <__lshift>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	460c      	mov	r4, r1
 8005366:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	6849      	ldr	r1, [r1, #4]
 800536e:	eb0a 0903 	add.w	r9, sl, r3
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	4607      	mov	r7, r0
 8005376:	4616      	mov	r6, r2
 8005378:	f109 0501 	add.w	r5, r9, #1
 800537c:	42ab      	cmp	r3, r5
 800537e:	db32      	blt.n	80053e6 <__lshift+0x86>
 8005380:	4638      	mov	r0, r7
 8005382:	f7ff fded 	bl	8004f60 <_Balloc>
 8005386:	2300      	movs	r3, #0
 8005388:	4680      	mov	r8, r0
 800538a:	f100 0114 	add.w	r1, r0, #20
 800538e:	461a      	mov	r2, r3
 8005390:	4553      	cmp	r3, sl
 8005392:	db2b      	blt.n	80053ec <__lshift+0x8c>
 8005394:	6920      	ldr	r0, [r4, #16]
 8005396:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800539a:	f104 0314 	add.w	r3, r4, #20
 800539e:	f016 021f 	ands.w	r2, r6, #31
 80053a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053aa:	d025      	beq.n	80053f8 <__lshift+0x98>
 80053ac:	f1c2 0e20 	rsb	lr, r2, #32
 80053b0:	2000      	movs	r0, #0
 80053b2:	681e      	ldr	r6, [r3, #0]
 80053b4:	468a      	mov	sl, r1
 80053b6:	4096      	lsls	r6, r2
 80053b8:	4330      	orrs	r0, r6
 80053ba:	f84a 0b04 	str.w	r0, [sl], #4
 80053be:	f853 0b04 	ldr.w	r0, [r3], #4
 80053c2:	459c      	cmp	ip, r3
 80053c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80053c8:	d814      	bhi.n	80053f4 <__lshift+0x94>
 80053ca:	6048      	str	r0, [r1, #4]
 80053cc:	b108      	cbz	r0, 80053d2 <__lshift+0x72>
 80053ce:	f109 0502 	add.w	r5, r9, #2
 80053d2:	3d01      	subs	r5, #1
 80053d4:	4638      	mov	r0, r7
 80053d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80053da:	4621      	mov	r1, r4
 80053dc:	f7ff fdf4 	bl	8004fc8 <_Bfree>
 80053e0:	4640      	mov	r0, r8
 80053e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e6:	3101      	adds	r1, #1
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	e7c7      	b.n	800537c <__lshift+0x1c>
 80053ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80053f0:	3301      	adds	r3, #1
 80053f2:	e7cd      	b.n	8005390 <__lshift+0x30>
 80053f4:	4651      	mov	r1, sl
 80053f6:	e7dc      	b.n	80053b2 <__lshift+0x52>
 80053f8:	3904      	subs	r1, #4
 80053fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80053fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005402:	459c      	cmp	ip, r3
 8005404:	d8f9      	bhi.n	80053fa <__lshift+0x9a>
 8005406:	e7e4      	b.n	80053d2 <__lshift+0x72>

08005408 <__mcmp>:
 8005408:	6903      	ldr	r3, [r0, #16]
 800540a:	690a      	ldr	r2, [r1, #16]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	b530      	push	{r4, r5, lr}
 8005410:	d10c      	bne.n	800542c <__mcmp+0x24>
 8005412:	0092      	lsls	r2, r2, #2
 8005414:	3014      	adds	r0, #20
 8005416:	3114      	adds	r1, #20
 8005418:	1884      	adds	r4, r0, r2
 800541a:	4411      	add	r1, r2
 800541c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005424:	4295      	cmp	r5, r2
 8005426:	d003      	beq.n	8005430 <__mcmp+0x28>
 8005428:	d305      	bcc.n	8005436 <__mcmp+0x2e>
 800542a:	2301      	movs	r3, #1
 800542c:	4618      	mov	r0, r3
 800542e:	bd30      	pop	{r4, r5, pc}
 8005430:	42a0      	cmp	r0, r4
 8005432:	d3f3      	bcc.n	800541c <__mcmp+0x14>
 8005434:	e7fa      	b.n	800542c <__mcmp+0x24>
 8005436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543a:	e7f7      	b.n	800542c <__mcmp+0x24>

0800543c <__mdiff>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	460d      	mov	r5, r1
 8005442:	4607      	mov	r7, r0
 8005444:	4611      	mov	r1, r2
 8005446:	4628      	mov	r0, r5
 8005448:	4614      	mov	r4, r2
 800544a:	f7ff ffdd 	bl	8005408 <__mcmp>
 800544e:	1e06      	subs	r6, r0, #0
 8005450:	d108      	bne.n	8005464 <__mdiff+0x28>
 8005452:	4631      	mov	r1, r6
 8005454:	4638      	mov	r0, r7
 8005456:	f7ff fd83 	bl	8004f60 <_Balloc>
 800545a:	2301      	movs	r3, #1
 800545c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	bfa4      	itt	ge
 8005466:	4623      	movge	r3, r4
 8005468:	462c      	movge	r4, r5
 800546a:	4638      	mov	r0, r7
 800546c:	6861      	ldr	r1, [r4, #4]
 800546e:	bfa6      	itte	ge
 8005470:	461d      	movge	r5, r3
 8005472:	2600      	movge	r6, #0
 8005474:	2601      	movlt	r6, #1
 8005476:	f7ff fd73 	bl	8004f60 <_Balloc>
 800547a:	692b      	ldr	r3, [r5, #16]
 800547c:	60c6      	str	r6, [r0, #12]
 800547e:	6926      	ldr	r6, [r4, #16]
 8005480:	f105 0914 	add.w	r9, r5, #20
 8005484:	f104 0214 	add.w	r2, r4, #20
 8005488:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800548c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005490:	f100 0514 	add.w	r5, r0, #20
 8005494:	f04f 0e00 	mov.w	lr, #0
 8005498:	f852 ab04 	ldr.w	sl, [r2], #4
 800549c:	f859 4b04 	ldr.w	r4, [r9], #4
 80054a0:	fa1e f18a 	uxtah	r1, lr, sl
 80054a4:	b2a3      	uxth	r3, r4
 80054a6:	1ac9      	subs	r1, r1, r3
 80054a8:	0c23      	lsrs	r3, r4, #16
 80054aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80054ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80054b2:	b289      	uxth	r1, r1
 80054b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80054b8:	45c8      	cmp	r8, r9
 80054ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80054be:	4694      	mov	ip, r2
 80054c0:	f845 3b04 	str.w	r3, [r5], #4
 80054c4:	d8e8      	bhi.n	8005498 <__mdiff+0x5c>
 80054c6:	45bc      	cmp	ip, r7
 80054c8:	d304      	bcc.n	80054d4 <__mdiff+0x98>
 80054ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80054ce:	b183      	cbz	r3, 80054f2 <__mdiff+0xb6>
 80054d0:	6106      	str	r6, [r0, #16]
 80054d2:	e7c5      	b.n	8005460 <__mdiff+0x24>
 80054d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80054d8:	fa1e f381 	uxtah	r3, lr, r1
 80054dc:	141a      	asrs	r2, r3, #16
 80054de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80054ec:	f845 3b04 	str.w	r3, [r5], #4
 80054f0:	e7e9      	b.n	80054c6 <__mdiff+0x8a>
 80054f2:	3e01      	subs	r6, #1
 80054f4:	e7e9      	b.n	80054ca <__mdiff+0x8e>
	...

080054f8 <__ulp>:
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <__ulp+0x4c>)
 80054fa:	ee10 2a90 	vmov	r2, s1
 80054fe:	401a      	ands	r2, r3
 8005500:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd04      	ble.n	8005512 <__ulp+0x1a>
 8005508:	2000      	movs	r0, #0
 800550a:	4619      	mov	r1, r3
 800550c:	ec41 0b10 	vmov	d0, r0, r1
 8005510:	4770      	bx	lr
 8005512:	425b      	negs	r3, r3
 8005514:	151b      	asrs	r3, r3, #20
 8005516:	2b13      	cmp	r3, #19
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	dc04      	bgt.n	800552c <__ulp+0x34>
 8005522:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005526:	fa42 f103 	asr.w	r1, r2, r3
 800552a:	e7ef      	b.n	800550c <__ulp+0x14>
 800552c:	3b14      	subs	r3, #20
 800552e:	2b1e      	cmp	r3, #30
 8005530:	f04f 0201 	mov.w	r2, #1
 8005534:	bfda      	itte	le
 8005536:	f1c3 031f 	rsble	r3, r3, #31
 800553a:	fa02 f303 	lslle.w	r3, r2, r3
 800553e:	4613      	movgt	r3, r2
 8005540:	4618      	mov	r0, r3
 8005542:	e7e3      	b.n	800550c <__ulp+0x14>
 8005544:	7ff00000 	.word	0x7ff00000

08005548 <__b2d>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	6905      	ldr	r5, [r0, #16]
 800554c:	f100 0714 	add.w	r7, r0, #20
 8005550:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005554:	1f2e      	subs	r6, r5, #4
 8005556:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff fdc4 	bl	80050e8 <__hi0bits>
 8005560:	f1c0 0320 	rsb	r3, r0, #32
 8005564:	280a      	cmp	r0, #10
 8005566:	600b      	str	r3, [r1, #0]
 8005568:	f8df c074 	ldr.w	ip, [pc, #116]	; 80055e0 <__b2d+0x98>
 800556c:	dc14      	bgt.n	8005598 <__b2d+0x50>
 800556e:	f1c0 0e0b 	rsb	lr, r0, #11
 8005572:	fa24 f10e 	lsr.w	r1, r4, lr
 8005576:	42b7      	cmp	r7, r6
 8005578:	ea41 030c 	orr.w	r3, r1, ip
 800557c:	bf34      	ite	cc
 800557e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005582:	2100      	movcs	r1, #0
 8005584:	3015      	adds	r0, #21
 8005586:	fa04 f000 	lsl.w	r0, r4, r0
 800558a:	fa21 f10e 	lsr.w	r1, r1, lr
 800558e:	ea40 0201 	orr.w	r2, r0, r1
 8005592:	ec43 2b10 	vmov	d0, r2, r3
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005598:	42b7      	cmp	r7, r6
 800559a:	bf3a      	itte	cc
 800559c:	f1a5 0608 	subcc.w	r6, r5, #8
 80055a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80055a4:	2100      	movcs	r1, #0
 80055a6:	380b      	subs	r0, #11
 80055a8:	d015      	beq.n	80055d6 <__b2d+0x8e>
 80055aa:	4084      	lsls	r4, r0
 80055ac:	f1c0 0520 	rsb	r5, r0, #32
 80055b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80055b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80055b8:	42be      	cmp	r6, r7
 80055ba:	fa21 fc05 	lsr.w	ip, r1, r5
 80055be:	ea44 030c 	orr.w	r3, r4, ip
 80055c2:	bf8c      	ite	hi
 80055c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80055c8:	2400      	movls	r4, #0
 80055ca:	fa01 f000 	lsl.w	r0, r1, r0
 80055ce:	40ec      	lsrs	r4, r5
 80055d0:	ea40 0204 	orr.w	r2, r0, r4
 80055d4:	e7dd      	b.n	8005592 <__b2d+0x4a>
 80055d6:	ea44 030c 	orr.w	r3, r4, ip
 80055da:	460a      	mov	r2, r1
 80055dc:	e7d9      	b.n	8005592 <__b2d+0x4a>
 80055de:	bf00      	nop
 80055e0:	3ff00000 	.word	0x3ff00000

080055e4 <__d2b>:
 80055e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	460e      	mov	r6, r1
 80055ea:	2101      	movs	r1, #1
 80055ec:	ec59 8b10 	vmov	r8, r9, d0
 80055f0:	4615      	mov	r5, r2
 80055f2:	f7ff fcb5 	bl	8004f60 <_Balloc>
 80055f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80055fa:	4607      	mov	r7, r0
 80055fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005600:	bb34      	cbnz	r4, 8005650 <__d2b+0x6c>
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	f1b8 0300 	subs.w	r3, r8, #0
 8005608:	d027      	beq.n	800565a <__d2b+0x76>
 800560a:	a802      	add	r0, sp, #8
 800560c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005610:	f7ff fd89 	bl	8005126 <__lo0bits>
 8005614:	9900      	ldr	r1, [sp, #0]
 8005616:	b1f0      	cbz	r0, 8005656 <__d2b+0x72>
 8005618:	9a01      	ldr	r2, [sp, #4]
 800561a:	f1c0 0320 	rsb	r3, r0, #32
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	430b      	orrs	r3, r1
 8005624:	40c2      	lsrs	r2, r0
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	9201      	str	r2, [sp, #4]
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2102      	movne	r1, #2
 8005634:	2101      	moveq	r1, #1
 8005636:	6139      	str	r1, [r7, #16]
 8005638:	b1c4      	cbz	r4, 800566c <__d2b+0x88>
 800563a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800563e:	4404      	add	r4, r0
 8005640:	6034      	str	r4, [r6, #0]
 8005642:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005646:	6028      	str	r0, [r5, #0]
 8005648:	4638      	mov	r0, r7
 800564a:	b003      	add	sp, #12
 800564c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005654:	e7d5      	b.n	8005602 <__d2b+0x1e>
 8005656:	6179      	str	r1, [r7, #20]
 8005658:	e7e7      	b.n	800562a <__d2b+0x46>
 800565a:	a801      	add	r0, sp, #4
 800565c:	f7ff fd63 	bl	8005126 <__lo0bits>
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	2101      	movs	r1, #1
 8005666:	6139      	str	r1, [r7, #16]
 8005668:	3020      	adds	r0, #32
 800566a:	e7e5      	b.n	8005638 <__d2b+0x54>
 800566c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005674:	6030      	str	r0, [r6, #0]
 8005676:	6918      	ldr	r0, [r3, #16]
 8005678:	f7ff fd36 	bl	80050e8 <__hi0bits>
 800567c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005680:	e7e1      	b.n	8005646 <__d2b+0x62>

08005682 <__ratio>:
 8005682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	4688      	mov	r8, r1
 8005688:	4669      	mov	r1, sp
 800568a:	4681      	mov	r9, r0
 800568c:	f7ff ff5c 	bl	8005548 <__b2d>
 8005690:	a901      	add	r1, sp, #4
 8005692:	4640      	mov	r0, r8
 8005694:	ec57 6b10 	vmov	r6, r7, d0
 8005698:	f7ff ff56 	bl	8005548 <__b2d>
 800569c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80056a4:	eba3 0c02 	sub.w	ip, r3, r2
 80056a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80056b2:	ec5b ab10 	vmov	sl, fp, d0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfce      	itee	gt
 80056ba:	463a      	movgt	r2, r7
 80056bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80056c0:	465a      	movle	r2, fp
 80056c2:	4659      	mov	r1, fp
 80056c4:	463d      	mov	r5, r7
 80056c6:	bfd4      	ite	le
 80056c8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80056cc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80056d0:	4630      	mov	r0, r6
 80056d2:	ee10 2a10 	vmov	r2, s0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f8f7 	bl	80008cc <__aeabi_ddiv>
 80056de:	ec41 0b10 	vmov	d0, r0, r1
 80056e2:	b003      	add	sp, #12
 80056e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056e8 <__copybits>:
 80056e8:	3901      	subs	r1, #1
 80056ea:	b510      	push	{r4, lr}
 80056ec:	1149      	asrs	r1, r1, #5
 80056ee:	6914      	ldr	r4, [r2, #16]
 80056f0:	3101      	adds	r1, #1
 80056f2:	f102 0314 	add.w	r3, r2, #20
 80056f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80056fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80056fe:	42a3      	cmp	r3, r4
 8005700:	4602      	mov	r2, r0
 8005702:	d303      	bcc.n	800570c <__copybits+0x24>
 8005704:	2300      	movs	r3, #0
 8005706:	428a      	cmp	r2, r1
 8005708:	d305      	bcc.n	8005716 <__copybits+0x2e>
 800570a:	bd10      	pop	{r4, pc}
 800570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005710:	f840 2b04 	str.w	r2, [r0], #4
 8005714:	e7f3      	b.n	80056fe <__copybits+0x16>
 8005716:	f842 3b04 	str.w	r3, [r2], #4
 800571a:	e7f4      	b.n	8005706 <__copybits+0x1e>

0800571c <__any_on>:
 800571c:	f100 0214 	add.w	r2, r0, #20
 8005720:	6900      	ldr	r0, [r0, #16]
 8005722:	114b      	asrs	r3, r1, #5
 8005724:	4298      	cmp	r0, r3
 8005726:	b510      	push	{r4, lr}
 8005728:	db11      	blt.n	800574e <__any_on+0x32>
 800572a:	dd0a      	ble.n	8005742 <__any_on+0x26>
 800572c:	f011 011f 	ands.w	r1, r1, #31
 8005730:	d007      	beq.n	8005742 <__any_on+0x26>
 8005732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005736:	fa24 f001 	lsr.w	r0, r4, r1
 800573a:	fa00 f101 	lsl.w	r1, r0, r1
 800573e:	428c      	cmp	r4, r1
 8005740:	d10b      	bne.n	800575a <__any_on+0x3e>
 8005742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005746:	4293      	cmp	r3, r2
 8005748:	d803      	bhi.n	8005752 <__any_on+0x36>
 800574a:	2000      	movs	r0, #0
 800574c:	bd10      	pop	{r4, pc}
 800574e:	4603      	mov	r3, r0
 8005750:	e7f7      	b.n	8005742 <__any_on+0x26>
 8005752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005756:	2900      	cmp	r1, #0
 8005758:	d0f5      	beq.n	8005746 <__any_on+0x2a>
 800575a:	2001      	movs	r0, #1
 800575c:	e7f6      	b.n	800574c <__any_on+0x30>

0800575e <_calloc_r>:
 800575e:	b538      	push	{r3, r4, r5, lr}
 8005760:	fb02 f401 	mul.w	r4, r2, r1
 8005764:	4621      	mov	r1, r4
 8005766:	f000 f857 	bl	8005818 <_malloc_r>
 800576a:	4605      	mov	r5, r0
 800576c:	b118      	cbz	r0, 8005776 <_calloc_r+0x18>
 800576e:	4622      	mov	r2, r4
 8005770:	2100      	movs	r1, #0
 8005772:	f7fc fd3e 	bl	80021f2 <memset>
 8005776:	4628      	mov	r0, r5
 8005778:	bd38      	pop	{r3, r4, r5, pc}
	...

0800577c <_free_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4605      	mov	r5, r0
 8005780:	2900      	cmp	r1, #0
 8005782:	d045      	beq.n	8005810 <_free_r+0x94>
 8005784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005788:	1f0c      	subs	r4, r1, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	bfb8      	it	lt
 800578e:	18e4      	addlt	r4, r4, r3
 8005790:	f000 fa36 	bl	8005c00 <__malloc_lock>
 8005794:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <_free_r+0x98>)
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	4610      	mov	r0, r2
 800579a:	b933      	cbnz	r3, 80057aa <_free_r+0x2e>
 800579c:	6063      	str	r3, [r4, #4]
 800579e:	6014      	str	r4, [r2, #0]
 80057a0:	4628      	mov	r0, r5
 80057a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a6:	f000 ba2c 	b.w	8005c02 <__malloc_unlock>
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	d90c      	bls.n	80057c8 <_free_r+0x4c>
 80057ae:	6821      	ldr	r1, [r4, #0]
 80057b0:	1862      	adds	r2, r4, r1
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bf04      	itt	eq
 80057b6:	681a      	ldreq	r2, [r3, #0]
 80057b8:	685b      	ldreq	r3, [r3, #4]
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	bf04      	itt	eq
 80057be:	1852      	addeq	r2, r2, r1
 80057c0:	6022      	streq	r2, [r4, #0]
 80057c2:	6004      	str	r4, [r0, #0]
 80057c4:	e7ec      	b.n	80057a0 <_free_r+0x24>
 80057c6:	4613      	mov	r3, r2
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	b10a      	cbz	r2, 80057d0 <_free_r+0x54>
 80057cc:	42a2      	cmp	r2, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x4a>
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	1858      	adds	r0, r3, r1
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x74>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	4401      	add	r1, r0
 80057dc:	1858      	adds	r0, r3, r1
 80057de:	4282      	cmp	r2, r0
 80057e0:	6019      	str	r1, [r3, #0]
 80057e2:	d1dd      	bne.n	80057a0 <_free_r+0x24>
 80057e4:	6810      	ldr	r0, [r2, #0]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	4401      	add	r1, r0
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	e7d7      	b.n	80057a0 <_free_r+0x24>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x7c>
 80057f2:	230c      	movs	r3, #12
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	e7d3      	b.n	80057a0 <_free_r+0x24>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	1821      	adds	r1, r4, r0
 80057fc:	428a      	cmp	r2, r1
 80057fe:	bf04      	itt	eq
 8005800:	6811      	ldreq	r1, [r2, #0]
 8005802:	6852      	ldreq	r2, [r2, #4]
 8005804:	6062      	str	r2, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1809      	addeq	r1, r1, r0
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	605c      	str	r4, [r3, #4]
 800580e:	e7c7      	b.n	80057a0 <_free_r+0x24>
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	200001fc 	.word	0x200001fc

08005818 <_malloc_r>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	1ccd      	adds	r5, r1, #3
 800581c:	f025 0503 	bic.w	r5, r5, #3
 8005820:	3508      	adds	r5, #8
 8005822:	2d0c      	cmp	r5, #12
 8005824:	bf38      	it	cc
 8005826:	250c      	movcc	r5, #12
 8005828:	2d00      	cmp	r5, #0
 800582a:	4606      	mov	r6, r0
 800582c:	db01      	blt.n	8005832 <_malloc_r+0x1a>
 800582e:	42a9      	cmp	r1, r5
 8005830:	d903      	bls.n	800583a <_malloc_r+0x22>
 8005832:	230c      	movs	r3, #12
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	2000      	movs	r0, #0
 8005838:	bd70      	pop	{r4, r5, r6, pc}
 800583a:	f000 f9e1 	bl	8005c00 <__malloc_lock>
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <_malloc_r+0xac>)
 8005840:	6814      	ldr	r4, [r2, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	b991      	cbnz	r1, 800586c <_malloc_r+0x54>
 8005846:	4c20      	ldr	r4, [pc, #128]	; (80058c8 <_malloc_r+0xb0>)
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	b91b      	cbnz	r3, 8005854 <_malloc_r+0x3c>
 800584c:	4630      	mov	r0, r6
 800584e:	f000 f98f 	bl	8005b70 <_sbrk_r>
 8005852:	6020      	str	r0, [r4, #0]
 8005854:	4629      	mov	r1, r5
 8005856:	4630      	mov	r0, r6
 8005858:	f000 f98a 	bl	8005b70 <_sbrk_r>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d124      	bne.n	80058aa <_malloc_r+0x92>
 8005860:	230c      	movs	r3, #12
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f9cc 	bl	8005c02 <__malloc_unlock>
 800586a:	e7e4      	b.n	8005836 <_malloc_r+0x1e>
 800586c:	680b      	ldr	r3, [r1, #0]
 800586e:	1b5b      	subs	r3, r3, r5
 8005870:	d418      	bmi.n	80058a4 <_malloc_r+0x8c>
 8005872:	2b0b      	cmp	r3, #11
 8005874:	d90f      	bls.n	8005896 <_malloc_r+0x7e>
 8005876:	600b      	str	r3, [r1, #0]
 8005878:	50cd      	str	r5, [r1, r3]
 800587a:	18cc      	adds	r4, r1, r3
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f9c0 	bl	8005c02 <__malloc_unlock>
 8005882:	f104 000b 	add.w	r0, r4, #11
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	f020 0007 	bic.w	r0, r0, #7
 800588c:	1ac3      	subs	r3, r0, r3
 800588e:	d0d3      	beq.n	8005838 <_malloc_r+0x20>
 8005890:	425a      	negs	r2, r3
 8005892:	50e2      	str	r2, [r4, r3]
 8005894:	e7d0      	b.n	8005838 <_malloc_r+0x20>
 8005896:	428c      	cmp	r4, r1
 8005898:	684b      	ldr	r3, [r1, #4]
 800589a:	bf16      	itet	ne
 800589c:	6063      	strne	r3, [r4, #4]
 800589e:	6013      	streq	r3, [r2, #0]
 80058a0:	460c      	movne	r4, r1
 80058a2:	e7eb      	b.n	800587c <_malloc_r+0x64>
 80058a4:	460c      	mov	r4, r1
 80058a6:	6849      	ldr	r1, [r1, #4]
 80058a8:	e7cc      	b.n	8005844 <_malloc_r+0x2c>
 80058aa:	1cc4      	adds	r4, r0, #3
 80058ac:	f024 0403 	bic.w	r4, r4, #3
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d005      	beq.n	80058c0 <_malloc_r+0xa8>
 80058b4:	1a21      	subs	r1, r4, r0
 80058b6:	4630      	mov	r0, r6
 80058b8:	f000 f95a 	bl	8005b70 <_sbrk_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d0cf      	beq.n	8005860 <_malloc_r+0x48>
 80058c0:	6025      	str	r5, [r4, #0]
 80058c2:	e7db      	b.n	800587c <_malloc_r+0x64>
 80058c4:	200001fc 	.word	0x200001fc
 80058c8:	20000200 	.word	0x20000200

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	429e      	cmp	r6, r3
 80058d4:	4682      	mov	sl, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	4690      	mov	r8, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	d837      	bhi.n	800594e <__ssputs_r+0x82>
 80058de:	898a      	ldrh	r2, [r1, #12]
 80058e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e4:	d031      	beq.n	800594a <__ssputs_r+0x7e>
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	6909      	ldr	r1, [r1, #16]
 80058ea:	1a6f      	subs	r7, r5, r1
 80058ec:	6965      	ldr	r5, [r4, #20]
 80058ee:	2302      	movs	r3, #2
 80058f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80058f8:	f109 0301 	add.w	r3, r9, #1
 80058fc:	443b      	add	r3, r7
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf38      	it	cc
 8005902:	461d      	movcc	r5, r3
 8005904:	0553      	lsls	r3, r2, #21
 8005906:	d530      	bpl.n	800596a <__ssputs_r+0x9e>
 8005908:	4629      	mov	r1, r5
 800590a:	f7ff ff85 	bl	8005818 <_malloc_r>
 800590e:	4606      	mov	r6, r0
 8005910:	b950      	cbnz	r0, 8005928 <__ssputs_r+0x5c>
 8005912:	230c      	movs	r3, #12
 8005914:	f8ca 3000 	str.w	r3, [sl]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005928:	463a      	mov	r2, r7
 800592a:	6921      	ldr	r1, [r4, #16]
 800592c:	f7fc fc56 	bl	80021dc <memcpy>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	6126      	str	r6, [r4, #16]
 800593e:	6165      	str	r5, [r4, #20]
 8005940:	443e      	add	r6, r7
 8005942:	1bed      	subs	r5, r5, r7
 8005944:	6026      	str	r6, [r4, #0]
 8005946:	60a5      	str	r5, [r4, #8]
 8005948:	464e      	mov	r6, r9
 800594a:	454e      	cmp	r6, r9
 800594c:	d900      	bls.n	8005950 <__ssputs_r+0x84>
 800594e:	464e      	mov	r6, r9
 8005950:	4632      	mov	r2, r6
 8005952:	4641      	mov	r1, r8
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	f000 f93a 	bl	8005bce <memmove>
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	1b9b      	subs	r3, r3, r6
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	441e      	add	r6, r3
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	2000      	movs	r0, #0
 8005968:	e7dc      	b.n	8005924 <__ssputs_r+0x58>
 800596a:	462a      	mov	r2, r5
 800596c:	f000 f94a 	bl	8005c04 <_realloc_r>
 8005970:	4606      	mov	r6, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d1e2      	bne.n	800593c <__ssputs_r+0x70>
 8005976:	6921      	ldr	r1, [r4, #16]
 8005978:	4650      	mov	r0, sl
 800597a:	f7ff feff 	bl	800577c <_free_r>
 800597e:	e7c8      	b.n	8005912 <__ssputs_r+0x46>

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	461d      	mov	r5, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061f      	lsls	r7, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4680      	mov	r8, r0
 800598e:	460c      	mov	r4, r1
 8005990:	4616      	mov	r6, r2
 8005992:	d50f      	bpl.n	80059b4 <_svfiprintf_r+0x34>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b96b      	cbnz	r3, 80059b4 <_svfiprintf_r+0x34>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f7ff ff3d 	bl	8005818 <_malloc_r>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	6120      	str	r0, [r4, #16]
 80059a2:	b928      	cbnz	r0, 80059b0 <_svfiprintf_r+0x30>
 80059a4:	230c      	movs	r3, #12
 80059a6:	f8c8 3000 	str.w	r3, [r8]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ae:	e0c8      	b.n	8005b42 <_svfiprintf_r+0x1c2>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9309      	str	r3, [sp, #36]	; 0x24
 80059b8:	2320      	movs	r3, #32
 80059ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059be:	2330      	movs	r3, #48	; 0x30
 80059c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c4:	9503      	str	r5, [sp, #12]
 80059c6:	f04f 0b01 	mov.w	fp, #1
 80059ca:	4637      	mov	r7, r6
 80059cc:	463d      	mov	r5, r7
 80059ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059d2:	b10b      	cbz	r3, 80059d8 <_svfiprintf_r+0x58>
 80059d4:	2b25      	cmp	r3, #37	; 0x25
 80059d6:	d13e      	bne.n	8005a56 <_svfiprintf_r+0xd6>
 80059d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059dc:	d00b      	beq.n	80059f6 <_svfiprintf_r+0x76>
 80059de:	4653      	mov	r3, sl
 80059e0:	4632      	mov	r2, r6
 80059e2:	4621      	mov	r1, r4
 80059e4:	4640      	mov	r0, r8
 80059e6:	f7ff ff71 	bl	80058cc <__ssputs_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	f000 80a4 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	4453      	add	r3, sl
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	783b      	ldrb	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 809d 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a10:	931a      	str	r3, [sp, #104]	; 0x68
 8005a12:	462f      	mov	r7, r5
 8005a14:	2205      	movs	r2, #5
 8005a16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a1a:	4850      	ldr	r0, [pc, #320]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a1c:	f7fa fc20 	bl	8000260 <memchr>
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	b9d0      	cbnz	r0, 8005a5a <_svfiprintf_r+0xda>
 8005a24:	06d9      	lsls	r1, r3, #27
 8005a26:	bf44      	itt	mi
 8005a28:	2220      	movmi	r2, #32
 8005a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a2e:	071a      	lsls	r2, r3, #28
 8005a30:	bf44      	itt	mi
 8005a32:	222b      	movmi	r2, #43	; 0x2b
 8005a34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a38:	782a      	ldrb	r2, [r5, #0]
 8005a3a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a3c:	d015      	beq.n	8005a6a <_svfiprintf_r+0xea>
 8005a3e:	9a07      	ldr	r2, [sp, #28]
 8005a40:	462f      	mov	r7, r5
 8005a42:	2000      	movs	r0, #0
 8005a44:	250a      	movs	r5, #10
 8005a46:	4639      	mov	r1, r7
 8005a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4c:	3b30      	subs	r3, #48	; 0x30
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d94d      	bls.n	8005aee <_svfiprintf_r+0x16e>
 8005a52:	b1b8      	cbz	r0, 8005a84 <_svfiprintf_r+0x104>
 8005a54:	e00f      	b.n	8005a76 <_svfiprintf_r+0xf6>
 8005a56:	462f      	mov	r7, r5
 8005a58:	e7b8      	b.n	80059cc <_svfiprintf_r+0x4c>
 8005a5a:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a5c:	1a80      	subs	r0, r0, r2
 8005a5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a62:	4318      	orrs	r0, r3
 8005a64:	9004      	str	r0, [sp, #16]
 8005a66:	463d      	mov	r5, r7
 8005a68:	e7d3      	b.n	8005a12 <_svfiprintf_r+0x92>
 8005a6a:	9a03      	ldr	r2, [sp, #12]
 8005a6c:	1d11      	adds	r1, r2, #4
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	9103      	str	r1, [sp, #12]
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	db01      	blt.n	8005a7a <_svfiprintf_r+0xfa>
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	e004      	b.n	8005a84 <_svfiprintf_r+0x104>
 8005a7a:	4252      	negs	r2, r2
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	783b      	ldrb	r3, [r7, #0]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d10c      	bne.n	8005aa4 <_svfiprintf_r+0x124>
 8005a8a:	787b      	ldrb	r3, [r7, #1]
 8005a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8e:	d133      	bne.n	8005af8 <_svfiprintf_r+0x178>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9203      	str	r2, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005aa0:	3702      	adds	r7, #2
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	4d2e      	ldr	r5, [pc, #184]	; (8005b60 <_svfiprintf_r+0x1e0>)
 8005aa6:	7839      	ldrb	r1, [r7, #0]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fbd8 	bl	8000260 <memchr>
 8005ab0:	b138      	cbz	r0, 8005ac2 <_svfiprintf_r+0x142>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	4303      	orrs	r3, r0
 8005abe:	3701      	adds	r7, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	7839      	ldrb	r1, [r7, #0]
 8005ac4:	4827      	ldr	r0, [pc, #156]	; (8005b64 <_svfiprintf_r+0x1e4>)
 8005ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aca:	2206      	movs	r2, #6
 8005acc:	1c7e      	adds	r6, r7, #1
 8005ace:	f7fa fbc7 	bl	8000260 <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d038      	beq.n	8005b48 <_svfiprintf_r+0x1c8>
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <_svfiprintf_r+0x1e8>)
 8005ad8:	bb13      	cbnz	r3, 8005b20 <_svfiprintf_r+0x1a0>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	444b      	add	r3, r9
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	e76d      	b.n	80059ca <_svfiprintf_r+0x4a>
 8005aee:	fb05 3202 	mla	r2, r5, r2, r3
 8005af2:	2001      	movs	r0, #1
 8005af4:	460f      	mov	r7, r1
 8005af6:	e7a6      	b.n	8005a46 <_svfiprintf_r+0xc6>
 8005af8:	2300      	movs	r3, #0
 8005afa:	3701      	adds	r7, #1
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	4619      	mov	r1, r3
 8005b00:	250a      	movs	r5, #10
 8005b02:	4638      	mov	r0, r7
 8005b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b08:	3a30      	subs	r2, #48	; 0x30
 8005b0a:	2a09      	cmp	r2, #9
 8005b0c:	d903      	bls.n	8005b16 <_svfiprintf_r+0x196>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c8      	beq.n	8005aa4 <_svfiprintf_r+0x124>
 8005b12:	9105      	str	r1, [sp, #20]
 8005b14:	e7c6      	b.n	8005aa4 <_svfiprintf_r+0x124>
 8005b16:	fb05 2101 	mla	r1, r5, r1, r2
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	e7f0      	b.n	8005b02 <_svfiprintf_r+0x182>
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4622      	mov	r2, r4
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b28:	a904      	add	r1, sp, #16
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7fc fbfe 	bl	800232c <_printf_float>
 8005b30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b34:	4681      	mov	r9, r0
 8005b36:	d1d6      	bne.n	8005ae6 <_svfiprintf_r+0x166>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	065b      	lsls	r3, r3, #25
 8005b3c:	f53f af35 	bmi.w	80059aa <_svfiprintf_r+0x2a>
 8005b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b42:	b01d      	add	sp, #116	; 0x74
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b50:	a904      	add	r1, sp, #16
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7fc fea0 	bl	8002898 <_printf_i>
 8005b58:	e7ea      	b.n	8005b30 <_svfiprintf_r+0x1b0>
 8005b5a:	bf00      	nop
 8005b5c:	08005fec 	.word	0x08005fec
 8005b60:	08005ff2 	.word	0x08005ff2
 8005b64:	08005ff6 	.word	0x08005ff6
 8005b68:	0800232d 	.word	0x0800232d
 8005b6c:	080058cd 	.word	0x080058cd

08005b70 <_sbrk_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4c06      	ldr	r4, [pc, #24]	; (8005b8c <_sbrk_r+0x1c>)
 8005b74:	2300      	movs	r3, #0
 8005b76:	4605      	mov	r5, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	f7fb f9b2 	bl	8000ee4 <_sbrk>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_sbrk_r+0x1a>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_sbrk_r+0x1a>
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	20000208 	.word	0x20000208

08005b90 <strncmp>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	b16a      	cbz	r2, 8005bb0 <strncmp+0x20>
 8005b94:	3901      	subs	r1, #1
 8005b96:	1884      	adds	r4, r0, r2
 8005b98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d103      	bne.n	8005bac <strncmp+0x1c>
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d001      	beq.n	8005bac <strncmp+0x1c>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f5      	bne.n	8005b98 <strncmp+0x8>
 8005bac:	1a98      	subs	r0, r3, r2
 8005bae:	bd10      	pop	{r4, pc}
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	e7fc      	b.n	8005bae <strncmp+0x1e>

08005bb4 <__ascii_wctomb>:
 8005bb4:	b149      	cbz	r1, 8005bca <__ascii_wctomb+0x16>
 8005bb6:	2aff      	cmp	r2, #255	; 0xff
 8005bb8:	bf85      	ittet	hi
 8005bba:	238a      	movhi	r3, #138	; 0x8a
 8005bbc:	6003      	strhi	r3, [r0, #0]
 8005bbe:	700a      	strbls	r2, [r1, #0]
 8005bc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005bc4:	bf98      	it	ls
 8005bc6:	2001      	movls	r0, #1
 8005bc8:	4770      	bx	lr
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4770      	bx	lr

08005bce <memmove>:
 8005bce:	4288      	cmp	r0, r1
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	eb01 0302 	add.w	r3, r1, r2
 8005bd6:	d807      	bhi.n	8005be8 <memmove+0x1a>
 8005bd8:	1e42      	subs	r2, r0, #1
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d00a      	beq.n	8005bf4 <memmove+0x26>
 8005bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005be6:	e7f8      	b.n	8005bda <memmove+0xc>
 8005be8:	4283      	cmp	r3, r0
 8005bea:	d9f5      	bls.n	8005bd8 <memmove+0xa>
 8005bec:	1881      	adds	r1, r0, r2
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	42d3      	cmn	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memmove+0x28>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005bfe:	e7f7      	b.n	8005bf0 <memmove+0x22>

08005c00 <__malloc_lock>:
 8005c00:	4770      	bx	lr

08005c02 <__malloc_unlock>:
 8005c02:	4770      	bx	lr

08005c04 <_realloc_r>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	4607      	mov	r7, r0
 8005c08:	4614      	mov	r4, r2
 8005c0a:	460e      	mov	r6, r1
 8005c0c:	b921      	cbnz	r1, 8005c18 <_realloc_r+0x14>
 8005c0e:	4611      	mov	r1, r2
 8005c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c14:	f7ff be00 	b.w	8005818 <_malloc_r>
 8005c18:	b922      	cbnz	r2, 8005c24 <_realloc_r+0x20>
 8005c1a:	f7ff fdaf 	bl	800577c <_free_r>
 8005c1e:	4625      	mov	r5, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c24:	f000 f814 	bl	8005c50 <_malloc_usable_size_r>
 8005c28:	42a0      	cmp	r0, r4
 8005c2a:	d20f      	bcs.n	8005c4c <_realloc_r+0x48>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff fdf2 	bl	8005818 <_malloc_r>
 8005c34:	4605      	mov	r5, r0
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0f2      	beq.n	8005c20 <_realloc_r+0x1c>
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	f7fc facd 	bl	80021dc <memcpy>
 8005c42:	4631      	mov	r1, r6
 8005c44:	4638      	mov	r0, r7
 8005c46:	f7ff fd99 	bl	800577c <_free_r>
 8005c4a:	e7e9      	b.n	8005c20 <_realloc_r+0x1c>
 8005c4c:	4635      	mov	r5, r6
 8005c4e:	e7e7      	b.n	8005c20 <_realloc_r+0x1c>

08005c50 <_malloc_usable_size_r>:
 8005c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c54:	1f18      	subs	r0, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfbc      	itt	lt
 8005c5a:	580b      	ldrlt	r3, [r1, r0]
 8005c5c:	18c0      	addlt	r0, r0, r3
 8005c5e:	4770      	bx	lr

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
