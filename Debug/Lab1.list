
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08008440  08008440  00018440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008930  08008930  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008930  08008930  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008930  08008930  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200001e0  08008b18  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08008b18  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad0a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e14  00000000  00000000  0002af1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002cd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a314  00000000  00000000  0002da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007144  00000000  00000000  00057d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd67a  00000000  00000000  0005ee88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0015c502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  0015c5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002ff5  00000000  00000000  0015eed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008424 	.word	0x08008424

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08008424 	.word	0x08008424

08000200 <kalmanASS>:
	//s4 -> p
	//s5 -> k
	//s6 -> used for intermediate in math

	//CALLEE-SAVE CONVENTION
	vpush {s1-s6}
 8000200:	ed6d 0a06 	vpush	{s1-s6}

	vldr s1, [r0] //q
 8000204:	edd0 0a00 	vldr	s1, [r0]
	vldr s2, [r0, #4] //r
 8000208:	ed90 1a01 	vldr	s2, [r0, #4]
	vldr s3, [r0, #8] //x
 800020c:	edd0 1a02 	vldr	s3, [r0, #8]
	vldr s4, [r0, #12] //p
 8000210:	ed90 2a03 	vldr	s4, [r0, #12]
	vldr s5, [r0, #16] //k
 8000214:	edd0 2a04 	vldr	s5, [r0, #16]

	//p = p + q ---> s4 = s4 + s1
	vadd.f32 s4, s4, s1
 8000218:	ee32 2a20 	vadd.f32	s4, s4, s1

	//k = p/(p+r)
	vadd.f32 s6, s4, s2
 800021c:	ee32 3a01 	vadd.f32	s6, s4, s2
	vdiv.f32 s5, s4, s6
 8000220:	eec2 2a03 	vdiv.f32	s5, s4, s6
	vstr s5, [r0, #16] //Store new k
 8000224:	edc0 2a04 	vstr	s5, [r0, #16]

	//x = x + k(measure - x)
	vsub.f32 s6, s0, s3
 8000228:	ee30 3a61 	vsub.f32	s6, s0, s3
	vmul.f32 s6, s5, s6
 800022c:	ee22 3a83 	vmul.f32	s6, s5, s6
	vadd.f32 s3, s3, s6
 8000230:	ee71 1a83 	vadd.f32	s3, s3, s6
	vstr s3, [r0, #8] //Store new x
 8000234:	edc0 1a02 	vstr	s3, [r0, #8]

	//p = (1-k)p
	vmov s6, #1.0
 8000238:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	vsub.f32 s6, s6, s5
 800023c:	ee33 3a62 	vsub.f32	s6, s6, s5
	vmul.f32 s4, s6, s4
 8000240:	ee23 2a02 	vmul.f32	s4, s6, s4
	vstr s4, [r0, #12] //Store new p
 8000244:	ed80 2a03 	vstr	s4, [r0, #12]

	//Check if errors occurred
	vmrs r1, fpscr
 8000248:	eef1 1a10 	vmrs	r1, fpscr
	and r1, r1, 0x0000000F
 800024c:	f001 010f 	and.w	r1, r1, #15
	cmp r1, #0
 8000250:	2900      	cmp	r1, #0
	bgt error
 8000252:	dc04      	bgt.n	800025e <error>

	//CALLEE-SAVE CONVENTION
	vpop {s1-s6}
 8000254:	ecfd 0a06 	vpop	{s1-s6}
	mov r0, #0
 8000258:	f04f 0000 	mov.w	r0, #0
	bx lr
 800025c:	4770      	bx	lr

0800025e <error>:

error:
	//Return -1
	mov r0, #-1
 800025e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	vpop {s1-s6}
 8000262:	ecfd 0a06 	vpop	{s1-s6}
	bx lr
 8000266:	4770      	bx	lr

08000268 <strlen>:
 8000268:	4603      	mov	r3, r0
 800026a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026e:	2a00      	cmp	r2, #0
 8000270:	d1fb      	bne.n	800026a <strlen+0x2>
 8000272:	1a18      	subs	r0, r3, r0
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800045e:	f1a4 0401 	sub.w	r4, r4, #1
 8000462:	d1e9      	bne.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <Kalmanfilter>:





int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b0a1      	sub	sp, #132	; 0x84
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
	/*------------------------------------------------------------------------------------------
	 * Generating outputs with assembly + calculating with C------------------------------------
	 ------------------------------------------------------------------------------------------*/
	int result;
	// Create the output array with the assembly function
	clock_t start = clock(); //Measure time
 8000d36:	f002 fcef 	bl	8003718 <clock>
 8000d3a:	6778      	str	r0, [r7, #116]	; 0x74
	for(int position = 0; position < Length; position++){
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d40:	e015      	b.n	8000d6e <Kalmanfilter+0x46>
		result = kalmanASS(kstate, InputArray[position]);
 8000d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	edd3 7a00 	vldr	s15, [r3]
 8000d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fa54 	bl	8000200 <kalmanASS>
 8000d58:	6678      	str	r0, [r7, #100]	; 0x64
        OutputArray[position] = kstate->x;
 8000d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	4413      	add	r3, r2
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6892      	ldr	r2, [r2, #8]
 8000d66:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8000d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbe5      	blt.n	8000d42 <Kalmanfilter+0x1a>
    }

	if (result == -1) {
 8000d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d7c:	d101      	bne.n	8000d82 <Kalmanfilter+0x5a>
		return result;
 8000d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d80:	e166      	b.n	8001050 <Kalmanfilter+0x328>
	}

	 // Subtraction
	float differences[Length];
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	466b      	mov	r3, sp
 8000d86:	461d      	mov	r5, r3
 8000d88:	1e43      	subs	r3, r0, #1
 8000d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	f04f 0400 	mov.w	r4, #0
 8000d9c:	0154      	lsls	r4, r2, #5
 8000d9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000da2:	014b      	lsls	r3, r1, #5
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	f04f 0400 	mov.w	r4, #0
 8000db4:	0154      	lsls	r4, r2, #5
 8000db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000dba:	014b      	lsls	r3, r1, #5
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	ebad 0d03 	sub.w	sp, sp, r3
 8000dcc:	ab02      	add	r3, sp, #8
 8000dce:	3303      	adds	r3, #3
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
	subtraction(differences, InputArray, OutputArray, Length);
 8000dd6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	f000 f9b4 	bl	800114a <subtraction>

	// Standard Deviation
	float standardDeviationValue;
	standardDeviationValue = standardDeviation(differences, Length);
 8000de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	ee07 2a90 	vmov	s15, r2
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f9d8 	bl	80011a8 <standardDeviation>
 8000df8:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

	// Correlation
	float correlationCoefficient;
	correlationCoefficient = correlation(InputArray, OutputArray, Length);
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f000 fa61 	bl	80012c8 <correlation>
 8000e06:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

	// Convolution
	float convolutionValue;
	convolutionValue = convolution(InputArray, OutputArray, Length);
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f000 fb86 	bl	8001520 <convolution>
 8000e14:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

	clock_t end = clock(); //Measure time
 8000e18:	f002 fc7e 	bl	8003718 <clock>
 8000e1c:	64f8      	str	r0, [r7, #76]	; 0x4c
	double time_spent1 = ((double)(end - start))/(double)CLOCKS_PER_SEC;
 8000e1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fbbd 	bl	80005a4 <__aeabi_ui2d>
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b8a      	ldr	r3, [pc, #552]	; (8001058 <Kalmanfilter+0x330>)
 8000e30:	f7ff fd5c 	bl	80008ec <__aeabi_ddiv>
 8000e34:	4603      	mov	r3, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	/*------------------------------------------------------------------------------------------
	 * Generating outputs with C + calculating with C-------------------------------------------
	 -------------------------------------------------------------------------------------------*/
	// Create the output array with the assembly function
	start = clock(); //Measure time
 8000e3c:	f002 fc6c 	bl	8003718 <clock>
 8000e40:	6778      	str	r0, [r7, #116]	; 0x74
	for(int position = 0; position < Length; position++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e46:	e015      	b.n	8000e74 <Kalmanfilter+0x14c>
		result = kalmanC(kstate, InputArray[position]);
 8000e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	eeb0 0a67 	vmov.f32	s0, s15
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f8ff 	bl	800105c <kalmanC>
 8000e5e:	6678      	str	r0, [r7, #100]	; 0x64
		OutputArray[position] = kstate->x;
 8000e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6892      	ldr	r2, [r2, #8]
 8000e6c:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8000e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e70:	3301      	adds	r3, #1
 8000e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbe5      	blt.n	8000e48 <Kalmanfilter+0x120>
	}

	if (result == -1) {
 8000e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e82:	d101      	bne.n	8000e88 <Kalmanfilter+0x160>
		return result;
 8000e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e86:	e0e2      	b.n	800104e <Kalmanfilter+0x326>
	}



	 // Subtraction
	subtraction(differences, InputArray, OutputArray, Length);
 8000e88:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	f000 f95b 	bl	800114a <subtraction>

	// Standard Deviation
	standardDeviationValue = standardDeviation(differences, Length);
 8000e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	ee07 2a90 	vmov	s15, r2
 8000e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f97f 	bl	80011a8 <standardDeviation>
 8000eaa:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

	// Correlation
	correlationCoefficient = correlation(InputArray, OutputArray, Length);
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 fa08 	bl	80012c8 <correlation>
 8000eb8:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

	// Convolution
	convolutionValue = convolution(InputArray, OutputArray, Length);
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 fb2d 	bl	8001520 <convolution>
 8000ec6:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

	end = clock(); //Measure time
 8000eca:	f002 fc25 	bl	8003718 <clock>
 8000ece:	64f8      	str	r0, [r7, #76]	; 0x4c
	double time_spent2 = ((double)(end - start))/(double)CLOCKS_PER_SEC;
 8000ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb64 	bl	80005a4 <__aeabi_ui2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <Kalmanfilter+0x330>)
 8000ee2:	f7ff fd03 	bl	80008ec <__aeabi_ddiv>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	/*------------------------------------------------------------------------------------------
	 * Generating outputs with assembly + calculating with CMSIS-DSP----------------------------
	 ------------------------------------------------------------------------------------------*/
	// Create the output array with the assembly function
	start = clock(); //Measure time
 8000eee:	f002 fc13 	bl	8003718 <clock>
 8000ef2:	6778      	str	r0, [r7, #116]	; 0x74
	for(int position = 0; position < Length; position++){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef8:	e015      	b.n	8000f26 <Kalmanfilter+0x1fe>
		int result = kalmanASS(kstate, InputArray[position]);
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff f978 	bl	8000200 <kalmanASS>
 8000f10:	61f8      	str	r0, [r7, #28]
		OutputArray[position] = kstate->x;
 8000f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6892      	ldr	r2, [r2, #8]
 8000f1e:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8000f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f22:	3301      	adds	r3, #1
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
 8000f26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbe5      	blt.n	8000efa <Kalmanfilter+0x1d2>
	}

	//Subtraction
	arm_sub_f32(InputArray, OutputArray, differences, Length);
 8000f2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f002 fb95 	bl	8003664 <arm_sub_f32>

	//Mean
	float mean;
	arm_mean_f32(differences, Length, &mean);
 8000f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	f107 0218 	add.w	r2, r7, #24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fe00 	bl	8002b48 <arm_mean_f32>

	//Standard Deviation
	float stddev;
	arm_std_f32(differences, Length, &stddev);
 8000f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	f107 0214 	add.w	r2, r7, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fd6f 	bl	8002a34 <arm_std_f32>

	//Correlation
	float corr[(2*Length - 1)];
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	1e58      	subs	r0, r3, #1
 8000f5c:	466b      	mov	r3, sp
 8000f5e:	461e      	mov	r6, r3
 8000f60:	1e43      	subs	r3, r0, #1
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
 8000f64:	4603      	mov	r3, r0
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	f04f 0400 	mov.w	r4, #0
 8000f74:	0154      	lsls	r4, r2, #5
 8000f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f7a:	014b      	lsls	r3, r1, #5
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	f04f 0400 	mov.w	r4, #0
 8000f8c:	0154      	lsls	r4, r2, #5
 8000f8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f92:	014b      	lsls	r3, r1, #5
 8000f94:	4603      	mov	r3, r0
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3303      	adds	r3, #3
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa4:	ab02      	add	r3, sp, #8
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
	arm_correlate_f32(InputArray, Length, OutputArray, Length, &corr);
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f001 fe02 	bl	8002bc4 <arm_correlate_f32>

	//Convolution
	float conv[(2*Length - 1)];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	1e58      	subs	r0, r3, #1
 8000fc6:	1e43      	subs	r3, r0, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f04f 0400 	mov.w	r4, #0
 8000fda:	0154      	lsls	r4, r2, #5
 8000fdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fe0:	014b      	lsls	r3, r1, #5
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	f04f 0400 	mov.w	r4, #0
 8000ff2:	0154      	lsls	r4, r2, #5
 8000ff4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff8:	014b      	lsls	r3, r1, #5
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3303      	adds	r3, #3
 8001000:	3307      	adds	r3, #7
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	ebad 0d03 	sub.w	sp, sp, r3
 800100a:	ab02      	add	r3, sp, #8
 800100c:	3303      	adds	r3, #3
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_conv_f32(InputArray, Length, OutputArray, Length, &conv);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f002 f885 	bl	8003130 <arm_conv_f32>


	end = clock(); //Measure time
 8001026:	f002 fb77 	bl	8003718 <clock>
 800102a:	64f8      	str	r0, [r7, #76]	; 0x4c
	double time_spent3 = ((double)(end - start))/(double)CLOCKS_PER_SEC;
 800102c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800102e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fab6 	bl	80005a4 <__aeabi_ui2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <Kalmanfilter+0x330>)
 800103e:	f7ff fc55 	bl	80008ec <__aeabi_ddiv>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	e9c7 3408 	strd	r3, r4, [r7, #32]
	//------------------------------------------------------------------------------------------



    return result;
 800104a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104c:	46b5      	mov	sp, r6
 800104e:	46ad      	mov	sp, r5
}
 8001050:	4618      	mov	r0, r3
 8001052:	377c      	adds	r7, #124	; 0x7c
 8001054:	46bd      	mov	sp, r7
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001058:	40590000 	.word	0x40590000

0800105c <kalmanC>:





int kalmanC(kalman_state* kstate, float measurement){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	ed87 0a00 	vstr	s0, [r7]
	//Typical Kalman Filter update
	kstate->p = kstate->p + kstate->q;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	ed93 7a03 	vldr	s14, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edc3 7a03 	vstr	s15, [r3, #12]
	kstate->k = kstate->p/(kstate->p + kstate->r);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 6a03 	vldr	s13, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ed93 7a03 	vldr	s14, [r3, #12]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edc3 7a04 	vstr	s15, [r3, #16]
	kstate->x = kstate->x + kstate->k * (measurement - kstate->x);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	edd3 6a04 	vldr	s13, [r3, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80010b0:	ed97 6a00 	vldr	s12, [r7]
 80010b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edc3 7a02 	vstr	s15, [r3, #8]
	kstate->p = (1 - kstate->k) * kstate->p;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80010cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	edc3 7a03 	vstr	s15, [r3, #12]

	//Checking for NaN's
	if isnan(kstate->p) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ea:	eef4 7a67 	vcmp.f32	s15, s15
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d702      	bvc.n	80010fa <kalmanC+0x9e>
		return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f8:	e021      	b.n	800113e <kalmanC+0xe2>
	}
	else if isnan(kstate->k) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001100:	eef4 7a67 	vcmp.f32	s15, s15
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d702      	bvc.n	8001110 <kalmanC+0xb4>
		return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	e016      	b.n	800113e <kalmanC+0xe2>
	}
	else if isnan(kstate->x) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a02 	vldr	s15, [r3, #8]
 8001116:	eef4 7a67 	vcmp.f32	s15, s15
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	d702      	bvc.n	8001126 <kalmanC+0xca>
		return -1;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001124:	e00b      	b.n	800113e <kalmanC+0xe2>
	}
	else if isnan(kstate->r) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edd3 7a01 	vldr	s15, [r3, #4]
 800112c:	eef4 7a67 	vcmp.f32	s15, s15
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d702      	bvc.n	800113c <kalmanC+0xe0>
		return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	e000      	b.n	800113e <kalmanC+0xe2>
	}
	else {
		return 0;
 800113c:	2300      	movs	r3, #0
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <subtraction>:





float* subtraction(float* differences, float* InputArray, float* OutputArray ,int Length){
 800114a:	b480      	push	{r7}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	603b      	str	r3, [r7, #0]
    for(int position = 0; position < Length; position++){
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e018      	b.n	8001190 <subtraction+0x46>
        float difference = InputArray[position] - OutputArray[position];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4413      	add	r3, r2
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117a:	edc7 7a04 	vstr	s15, [r7, #16]
        differences[position] = difference;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]
    for(int position = 0; position < Length; position++){
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	dbe2      	blt.n	800115e <subtraction+0x14>
    }
    return differences;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <standardDeviation>:

float standardDeviation(float* differences, float Length){
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	ed87 0a00 	vstr	s0, [r7]
    float mean = 0;
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    for(int position = 0; position < Length; position++){
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	e012      	b.n	80011e6 <standardDeviation+0x3e>
        mean += differences[position]/Length;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	edd3 6a00 	vldr	s13, [r3]
 80011cc:	ed97 7a00 	vldr	s14, [r7]
 80011d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int position = 0; position < Length; position++){
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f0:	ed97 7a00 	vldr	s14, [r7]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	dce0      	bgt.n	80011c0 <standardDeviation+0x18>
    }
    float sum = 0;
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	e02d      	b.n	8001266 <standardDeviation+0xbe>
        sum += pow((differences[position] - mean), 2);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	ed93 7a00 	vldr	s14, [r3]
 8001216:	edd7 7a07 	vldr	s15, [r7, #28]
 800121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff f9e1 	bl	80005e8 <__aeabi_f2d>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80012c0 <standardDeviation+0x118>
 800122e:	ec44 3b10 	vmov	d0, r3, r4
 8001232:	f005 fff5 	bl	8007220 <pow>
 8001236:	ec56 5b10 	vmov	r5, r6, d0
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff f9d4 	bl	80005e8 <__aeabi_f2d>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	4628      	mov	r0, r5
 800124a:	4631      	mov	r1, r6
 800124c:	f7ff f86e 	bl	800032c <__adddf3>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4618      	mov	r0, r3
 8001256:	4621      	mov	r1, r4
 8001258:	f7ff fd16 	bl	8000c88 <__aeabi_d2f>
 800125c:	4603      	mov	r3, r0
 800125e:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	3301      	adds	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001270:	ed97 7a00 	vldr	s14, [r7]
 8001274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	dcc5      	bgt.n	800120a <standardDeviation+0x62>
    }
    float standardDeviation = sqrt(sum/Length);
 800127e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001282:	edd7 7a00 	vldr	s15, [r7]
 8001286:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800128a:	ee16 0a90 	vmov	r0, s13
 800128e:	f7ff f9ab 	bl	80005e8 <__aeabi_f2d>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	ec44 3b10 	vmov	d0, r3, r4
 800129a:	f006 f931 	bl	8007500 <sqrt>
 800129e:	ec54 3b10 	vmov	r3, r4, d0
 80012a2:	4618      	mov	r0, r3
 80012a4:	4621      	mov	r1, r4
 80012a6:	f7ff fcef 	bl	8000c88 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	60fb      	str	r3, [r7, #12]
    return standardDeviation;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	ee07 3a90 	vmov	s15, r3
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	bf00      	nop
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40000000 	.word	0x40000000

080012c8 <correlation>:

float correlation(float* InputArray, float* OutputArray, int Length){
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	b093      	sub	sp, #76	; 0x4c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
    float correlation = 0;
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
    float inputMean = 0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
    float outputMean = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	643b      	str	r3, [r7, #64]	; 0x40
    float sum1 = 0;
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    float sum2 = 0;
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
    float sum3 = 0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    float sum4 = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30

    for(int position = 0; position < Length; position++){
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001302:	e015      	b.n	8001330 <correlation+0x68>
        inputMean += InputArray[position]/Length;
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	edd3 6a00 	vldr	s13, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001326:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    for(int position = 0; position < Length; position++){
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	3301      	adds	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbe5      	blt.n	8001304 <correlation+0x3c>
    }
    for(int position = 0; position < Length; position++){
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
 800133c:	e015      	b.n	800136a <correlation+0xa2>
        outputMean += OutputArray[position]/Length;
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4413      	add	r3, r2
 8001346:	edd3 6a00 	vldr	s13, [r3]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for(int position = 0; position < Length; position++){
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	3301      	adds	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
 800136a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbe5      	blt.n	800133e <correlation+0x76>
    }
    for(int position = 0; position < Length; position++){
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	e012      	b.n	800139e <correlation+0xd6>
        sum1 += (InputArray[position]-inputMean);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(int position = 0; position < Length; position++){
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3301      	adds	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbe8      	blt.n	8001378 <correlation+0xb0>
    }
    for(int position = 0; position < Length; position++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	e012      	b.n	80013d2 <correlation+0x10a>
        sum2 += (OutputArray[position]-outputMean);
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80013bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    for(int position = 0; position < Length; position++){
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	3301      	adds	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	6a3a      	ldr	r2, [r7, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbe8      	blt.n	80013ac <correlation+0xe4>
    }
    for(int position = 0; position < Length; position++){
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e02d      	b.n	800143c <correlation+0x174>
        sum3 += pow((InputArray[position]-inputMean),2);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	ed93 7a00 	vldr	s14, [r3]
 80013ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f4:	ee17 0a90 	vmov	r0, s15
 80013f8:	f7ff f8f6 	bl	80005e8 <__aeabi_f2d>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8001518 <correlation+0x250>
 8001404:	ec44 3b10 	vmov	d0, r3, r4
 8001408:	f005 ff0a 	bl	8007220 <pow>
 800140c:	ec56 5b10 	vmov	r5, r6, d0
 8001410:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001412:	f7ff f8e9 	bl	80005e8 <__aeabi_f2d>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	461a      	mov	r2, r3
 800141c:	4623      	mov	r3, r4
 800141e:	4628      	mov	r0, r5
 8001420:	4631      	mov	r1, r6
 8001422:	f7fe ff83 	bl	800032c <__adddf3>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fc2b 	bl	8000c88 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    for(int position = 0; position < Length; position++){
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbcd      	blt.n	80013e0 <correlation+0x118>
    }
    for(int position = 0; position < Length; position++){
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e02d      	b.n	80014a6 <correlation+0x1de>
        sum4 += pow((OutputArray[position]-outputMean),2);
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	ee17 0a90 	vmov	r0, s15
 8001462:	f7ff f8c1 	bl	80005e8 <__aeabi_f2d>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001518 <correlation+0x250>
 800146e:	ec44 3b10 	vmov	d0, r3, r4
 8001472:	f005 fed5 	bl	8007220 <pow>
 8001476:	ec56 5b10 	vmov	r5, r6, d0
 800147a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800147c:	f7ff f8b4 	bl	80005e8 <__aeabi_f2d>
 8001480:	4603      	mov	r3, r0
 8001482:	460c      	mov	r4, r1
 8001484:	461a      	mov	r2, r3
 8001486:	4623      	mov	r3, r4
 8001488:	4628      	mov	r0, r5
 800148a:	4631      	mov	r1, r6
 800148c:	f7fe ff4e 	bl	800032c <__adddf3>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f7ff fbf6 	bl	8000c88 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
    for(int position = 0; position < Length; position++){
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dbcd      	blt.n	800144a <correlation+0x182>
    }
    return correlation = (sum1*sum2)/sqrt(sum3*sum4);
 80014ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	ee17 0a90 	vmov	r0, s15
 80014be:	f7ff f893 	bl	80005e8 <__aeabi_f2d>
 80014c2:	4604      	mov	r4, r0
 80014c4:	460d      	mov	r5, r1
 80014c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80014ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f887 	bl	80005e8 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	ec43 2b10 	vmov	d0, r2, r3
 80014e2:	f006 f80d 	bl	8007500 <sqrt>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7ff f9fd 	bl	80008ec <__aeabi_ddiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fbc5 	bl	8000c88 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	ee07 3a90 	vmov	s15, r3
}
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	374c      	adds	r7, #76	; 0x4c
 800150e:	46bd      	mov	sp, r7
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40000000 	.word	0x40000000

08001520 <convolution>:

float convolution(float* InputArray, float* OutputArray, int Length){
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
    float convolution = 0;
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e016      	b.n	8001566 <convolution+0x46>
        convolution += InputArray[position]*OutputArray[position];
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	ed97 7a05 	vldr	s14, [r7, #20]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	edc7 7a05 	vstr	s15, [r7, #20]
    for(int position = 0; position < Length; position++){
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	3301      	adds	r3, #1
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbe4      	blt.n	8001538 <convolution+0x18>
    }
    return convolution;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	ee07 3a90 	vmov	s15, r3
}
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b0ee      	sub	sp, #440	; 0x1b8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158a:	f000 f996 	bl	80018ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158e:	f000 f84f 	bl	8001630 <SystemClock_Config>





  kalman_state  kstate = { 0.1, 0.1, 5, 0.1, 0.0 };
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <main+0xa4>)
 8001594:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 8001598:	461d      	mov	r5, r3
 800159a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	6023      	str	r3, [r4, #0]
  float InputArray[] = TEST_ARRAY;
 80015a2:	463b      	mov	r3, r7
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <main+0xa8>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	4611      	mov	r1, r2
 80015aa:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80015ae:	461a      	mov	r2, r3
 80015b0:	f002 f8f0 	bl	8003794 <memcpy>
  int Length = (int)sizeof(InputArray)/sizeof(float);
 80015b4:	2365      	movs	r3, #101	; 0x65
 80015b6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  float OutputArray[Length];
 80015ba:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80015be:	1e43      	subs	r3, r0, #1
 80015c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80015c4:	4603      	mov	r3, r0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f04f 0400 	mov.w	r4, #0
 80015d4:	0154      	lsls	r4, r2, #5
 80015d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015da:	014b      	lsls	r3, r1, #5
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	f04f 0400 	mov.w	r4, #0
 80015ec:	0154      	lsls	r4, r2, #5
 80015ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015f2:	014b      	lsls	r3, r1, #5
 80015f4:	4603      	mov	r3, r0
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	3303      	adds	r3, #3
 80015fa:	3307      	adds	r3, #7
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	ebad 0d03 	sub.w	sp, sp, r3
 8001604:	466b      	mov	r3, sp
 8001606:	3303      	adds	r3, #3
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

  int result = Kalmanfilter(InputArray, OutputArray, &kstate, Length);
 8001610:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8001614:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001618:	4638      	mov	r0, r7
 800161a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800161e:	f7ff fb83 	bl	8000d28 <Kalmanfilter>
 8001622:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001626:	e7fe      	b.n	8001626 <main+0xa2>
 8001628:	08008440 	.word	0x08008440
 800162c:	08008454 	.word	0x08008454

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2244      	movs	r2, #68	; 0x44
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f002 f8b3 	bl	80037aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001652:	2000      	movs	r0, #0
 8001654:	f000 faac 	bl	8001bb0 <HAL_PWREx_ControlVoltageScaling>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800165e:	f000 f838 	bl	80016d2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001662:	2310      	movs	r3, #16
 8001664:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001672:	2302      	movs	r3, #2
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001676:	2301      	movs	r3, #1
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800167e:	233c      	movs	r3, #60	; 0x3c
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fb30 	bl	8001cf8 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800169e:	f000 f818 	bl	80016d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a2:	230f      	movs	r3, #15
 80016a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a6:	2303      	movs	r3, #3
 80016a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	2105      	movs	r1, #5
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff42 	bl	8002544 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016c6:	f000 f804 	bl	80016d2 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3758      	adds	r7, #88	; 0x58
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x6>
	...

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x44>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_MspInit+0x44>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6613      	str	r3, [r2, #96]	; 0x60
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_MspInit+0x44>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_MspInit+0x44>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_MspInit+0x44>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_MspInit+0x44>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8f8 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f001 ffbe 	bl	8003740 <__errno>
 80017c4:	4602      	mov	r2, r0
 80017c6:	230c      	movs	r3, #12
 80017c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200a0000 	.word	0x200a0000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	200001fc 	.word	0x200001fc
 80017f8:	20000210 	.word	0x20000210

080017fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <SystemInit+0x64>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <SystemInit+0x64>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <SystemInit+0x68>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <SystemInit+0x68>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <SystemInit+0x68>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <SystemInit+0x68>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <SystemInit+0x68>)
 8001828:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800182c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001830:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <SystemInit+0x68>)
 8001834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001838:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <SystemInit+0x68>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <SystemInit+0x68>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <SystemInit+0x68>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SystemInit+0x64>)
 800184e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001852:	609a      	str	r2, [r3, #8]
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	40021000 	.word	0x40021000

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ffc6 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001872:	e003      	b.n	800187c <LoopCopyDataInit>

08001874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800187a:	3104      	adds	r1, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800187c:	480a      	ldr	r0, [pc, #40]	; (80018a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001884:	d3f6      	bcc.n	8001874 <CopyDataInit>
	ldr	r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001888:	e002      	b.n	8001890 <LoopFillZerobss>

0800188a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800188a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800188c:	f842 3b04 	str.w	r3, [r2], #4

08001890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LoopForever+0x16>)
	cmp	r2, r3
 8001892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001894:	d3f9      	bcc.n	800188a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f001 ff59 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7ff fe73 	bl	8001584 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80018a4:	08008938 	.word	0x08008938
	ldr	r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018ac:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80018b0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80018b4:	20000210 	.word	0x20000210

080018b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_IRQHandler>

080018ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f91f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f80e 	bl	80018ec <HAL_InitTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e001      	b.n	80018e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018dc:	f7ff fefe 	bl	80016dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_InitTick+0x6c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d023      	beq.n	8001948 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_InitTick+0x70>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f91d 	bl	8001b56 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d809      	bhi.n	800193c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	f000 f8f5 	bl	8001b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_InitTick+0x74>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e007      	b.n	800194c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e004      	b.n	800194c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e001      	b.n	800194c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	20000208 	.word	0x20000208

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000208 	.word	0x20000208

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff47 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff5c 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffb0 	bl	8001ac4 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d102      	bne.n	8001b88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b86:	e00b      	b.n	8001ba0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b96:	d102      	bne.n	8001b9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9c:	e000      	b.n	8001ba0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40007000 	.word	0x40007000

08001bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d141      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d131      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd2:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be4:	4a41      	ldr	r2, [pc, #260]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2232      	movs	r2, #50	; 0x32
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a3f      	ldr	r2, [pc, #252]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c02:	e002      	b.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d102      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f2      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d158      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e057      	b.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c40:	e04d      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c48:	d141      	bne.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d131      	bne.n	8001cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2232      	movs	r2, #50	; 0x32
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8e:	e002      	b.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca2:	d102      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f2      	bne.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d112      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e011      	b.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ccc:	e007      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cdc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	431bde83 	.word	0x431bde83

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f000 bc16 	b.w	8002538 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0c:	4ba0      	ldr	r3, [pc, #640]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d16:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80e4 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4c>
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	f040 808b 	bne.w	8001e52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f040 8087 	bne.w	8001e52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d44:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x64>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e3ed      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_RCC_OscConfig+0x7e>
 8001d6c:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d74:	e005      	b.n	8001d82 <HAL_RCC_OscConfig+0x8a>
 8001d76:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d223      	bcs.n	8001dce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fd90 	bl	80028b0 <RCC_SetFlashLatencyFromMSIRange>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e3ce      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7c      	ldr	r2, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4977      	ldr	r1, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	4972      	ldr	r1, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e025      	b.n	8001e1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dce:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	496a      	ldr	r1, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dec:	4b68      	ldr	r3, [pc, #416]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd50 	bl	80028b0 <RCC_SetFlashLatencyFromMSIRange>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e38e      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e1a:	f000 fcbf 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8001e1e:	4601      	mov	r1, r0
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x29c>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	fa21 f303 	lsr.w	r3, r1, r3
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x2a0>)
 8001e38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x2a4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fd54 	bl	80018ec <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d052      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	e372      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d032      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fd91 	bl	800198c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fd8d 	bl	800198c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e35b      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	493a      	ldr	r1, [pc, #232]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
 8001ebe:	e01a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fd5e 	bl	800198c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fd5a 	bl	800198c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e328      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1dc>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d073      	beq.n	8001fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x21c>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d063      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d15f      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e305      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x24c>
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0x288>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x270>
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0x288>
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fd00 	bl	800198c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	e010      	b.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	080085e8 	.word	0x080085e8
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fcf4 	bl	800198c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e2c2      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	4baf      	ldr	r3, [pc, #700]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2a8>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fce4 	bl	800198c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fce0 	bl	800198c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e2ae      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fda:	4ba5      	ldr	r3, [pc, #660]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d0>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d060      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x310>
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d119      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d116      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	4b99      	ldr	r3, [pc, #612]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x328>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e28b      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	4990      	ldr	r1, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	e040      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d023      	beq.n	8002086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203e:	4b8c      	ldr	r3, [pc, #560]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8b      	ldr	r2, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff fc9f 	bl	800198c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fc9b 	bl	800198c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e269      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b82      	ldr	r3, [pc, #520]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	497c      	ldr	r1, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fc7b 	bl	800198c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fc77 	bl	800198c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e245      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03c      	beq.n	800213e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	4a67      	ldr	r2, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff fc56 	bl	800198c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff fc52 	bl	800198c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e220      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff fc39 	bl	800198c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7ff fc35 	bl	800198c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e203      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002130:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a6 	beq.w	8002298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d118      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff fbfc 	bl	800198c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff fbf8 	bl	800198c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1c6      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4d8>
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ce:	e024      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d110      	bne.n	80021fa <HAL_RCC_OscConfig+0x502>
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f8:	e00f      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7ff fbb3 	bl	800198c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff fbaf 	bl	800198c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e17b      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ed      	beq.n	800222a <HAL_RCC_OscConfig+0x532>
 800224e:	e01a      	b.n	8002286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff fb9c 	bl	800198c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff fb98 	bl	800198c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d906      	bls.n	8002278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e164      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4ba8      	ldr	r3, [pc, #672]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e8      	bne.n	8002258 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002286:	7ffb      	ldrb	r3, [r7, #31]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4aa2      	ldr	r2, [pc, #648]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ac:	4b9b      	ldr	r3, [pc, #620]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80022ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b2:	4a9a      	ldr	r2, [pc, #616]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fb66 	bl	800198c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c4:	f7ff fb62 	bl	800198c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e130      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022d6:	4b91      	ldr	r3, [pc, #580]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80022d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x5cc>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022e6:	4b8d      	ldr	r3, [pc, #564]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80022e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ec:	4a8b      	ldr	r2, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7ff fb49 	bl	800198c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fe:	f7ff fb45 	bl	800198c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e113      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002310:	4b82      	ldr	r3, [pc, #520]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8107 	beq.w	8002536 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	2b02      	cmp	r3, #2
 800232e:	f040 80cb 	bne.w	80024c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002332:	4b7a      	ldr	r3, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0203 	and.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	429a      	cmp	r2, r3
 8002344:	d12c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	3b01      	subs	r3, #1
 8002352:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d123      	bne.n	80023a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d11b      	bne.n	80023a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d113      	bne.n	80023a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	3b01      	subs	r3, #1
 800239a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d06d      	beq.n	800247c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d068      	beq.n	8002478 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ba      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a55      	ldr	r2, [pc, #340]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ce:	f7ff fadd 	bl	800198c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fad9 	bl	800198c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0a7      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x828>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002404:	3a01      	subs	r2, #1
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800240e:	0212      	lsls	r2, r2, #8
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002416:	0852      	lsrs	r2, r2, #1
 8002418:	3a01      	subs	r2, #1
 800241a:	0552      	lsls	r2, r2, #21
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002422:	0852      	lsrs	r2, r2, #1
 8002424:	3a01      	subs	r2, #1
 8002426:	0652      	lsls	r2, r2, #25
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800242e:	06d2      	lsls	r2, r2, #27
 8002430:	430a      	orrs	r2, r1
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a37      	ldr	r2, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002450:	f7ff fa9c 	bl	800198c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff fa98 	bl	800198c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e066      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b2c      	ldr	r3, [pc, #176]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002476:	e05e      	b.n	8002536 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e05d      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d156      	bne.n	8002536 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_OscConfig+0x824>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a20      	ldr	r2, [pc, #128]	; (800251c <HAL_RCC_OscConfig+0x824>)
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024a0:	f7ff fa74 	bl	800198c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7ff fa70 	bl	800198c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e03e      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x7b0>
 80024c6:	e036      	b.n	8002536 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d031      	beq.n	8002532 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024ec:	f023 0303 	bic.w	r3, r3, #3
 80024f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x824>)
 80024f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002500:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff fa43 	bl	800198c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002508:	e00c      	b.n	8002524 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff fa3f 	bl	800198c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d905      	bls.n	8002524 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e00d      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
 800251c:	40021000 	.word	0x40021000
 8002520:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_OscConfig+0x848>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ec      	bne.n	800250a <HAL_RCC_OscConfig+0x812>
 8002530:	e001      	b.n	8002536 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e10f      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b86      	ldr	r3, [pc, #536]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	4984      	ldr	r1, [pc, #528]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0f7      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8089 	beq.w	80026ac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d133      	bne.n	800260a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0e4      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80025b2:	f000 f9d7 	bl	8002964 <RCC_GetSysClockFreqFromPLLSource>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b74      	ldr	r3, [pc, #464]	; (800278c <HAL_RCC_ClockConfig+0x248>)
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d955      	bls.n	800266a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ca:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d2:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e044      	b.n	800266a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03e      	beq.n	800266a <HAL_RCC_ClockConfig+0x126>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d13a      	bne.n	800266a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fc:	4a62      	ldr	r2, [pc, #392]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002602:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e02f      	b.n	800266a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0ac      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0a0      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263a:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e098      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800264a:	f000 f8a7 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_RCC_ClockConfig+0x248>)
 8002652:	429a      	cmp	r2, r3
 8002654:	d909      	bls.n	800266a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002656:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800265e:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4944      	ldr	r1, [pc, #272]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267c:	f7ff f986 	bl	800198c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff f982 	bl	800198c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e070      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4930      	ldr	r1, [pc, #192]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
 80026ca:	e008      	b.n	80026de <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b80      	cmp	r3, #128	; 0x80
 80026d0:	d105      	bne.n	80026de <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026dc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d210      	bcs.n	800270e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 020f 	bic.w	r2, r3, #15
 80026f4:	4923      	ldr	r1, [pc, #140]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_ClockConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e036      	b.n	800277c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4918      	ldr	r1, [pc, #96]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4910      	ldr	r1, [pc, #64]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274c:	f000 f826 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002750:	4601      	mov	r1, r0
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_ClockConfig+0x244>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <HAL_RCC_ClockConfig+0x24c>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa21 f303 	lsr.w	r3, r1, r3
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x250>)
 800276a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x254>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f8bb 	bl	80018ec <HAL_InitTick>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

  return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	04c4b400 	.word	0x04c4b400
 8002790:	080085e8 	.word	0x080085e8
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d121      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d11e      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027ec:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027f8:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d102      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e004      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d101      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002822:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d133      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0xa4>
 800283a:	2b03      	cmp	r3, #3
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0xaa>
 800283e:	e005      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002842:	617b      	str	r3, [r7, #20]
      break;
 8002844:	e005      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002848:	617b      	str	r3, [r7, #20]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	617b      	str	r3, [r7, #20]
      break;
 8002850:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	3301      	adds	r3, #1
 800285e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	fb02 f203 	mul.w	r2, r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0e5b      	lsrs	r3, r3, #25
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002892:	69bb      	ldr	r3, [r7, #24]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3724      	adds	r7, #36	; 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080085f8 	.word	0x080085f8
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	007a1200 	.word	0x007a1200

080028b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff f952 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
 80028ce:	e014      	b.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	6593      	str	r3, [r2, #88]	; 0x58
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028e8:	f7ff f942 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 80028ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	4a1a      	ldr	r2, [pc, #104]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d10b      	bne.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d913      	bls.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2ba0      	cmp	r3, #160	; 0xa0
 800290c:	d902      	bls.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800290e:	2302      	movs	r3, #2
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e00d      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e00a      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b7f      	cmp	r3, #127	; 0x7f
 800291e:	d902      	bls.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e004      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b70      	cmp	r3, #112	; 0x70
 800292a:	d101      	bne.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 020f 	bic.w	r2, r3, #15
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40022000 	.word	0x40022000

08002964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d118      	bne.n	80029ac <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e005      	b.n	80029a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d002      	beq.n	80029c2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d003      	beq.n	80029c8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80029c0:	e005      	b.n	80029ce <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80029c4:	613b      	str	r3, [r7, #16]
    break;
 80029c6:	e005      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80029ca:	613b      	str	r3, [r7, #16]
    break;
 80029cc:	e002      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
    break;
 80029d2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3301      	adds	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	fb02 f203 	mul.w	r2, r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0e5b      	lsrs	r3, r3, #25
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	3301      	adds	r3, #1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a14:	683b      	ldr	r3, [r7, #0]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	080085f8 	.word	0x080085f8
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	007a1200 	.word	0x007a1200

08002a34 <arm_std_f32>:
 8002a34:	2901      	cmp	r1, #1
 8002a36:	d97d      	bls.n	8002b34 <arm_std_f32+0x100>
 8002a38:	b530      	push	{r4, r5, lr}
 8002a3a:	ed2d 8b02 	vpush	{d8}
 8002a3e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002b44 <arm_std_f32+0x110>
 8002a42:	088d      	lsrs	r5, r1, #2
 8002a44:	b083      	sub	sp, #12
 8002a46:	eef0 4a47 	vmov.f32	s9, s14
 8002a4a:	d028      	beq.n	8002a9e <arm_std_f32+0x6a>
 8002a4c:	f100 0310 	add.w	r3, r0, #16
 8002a50:	462c      	mov	r4, r5
 8002a52:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002a56:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002a5a:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002a5e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002a62:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002a66:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8002a6a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002a6e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002a72:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002a76:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002a7a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8002a7e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002a82:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002a86:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002a8a:	3c01      	subs	r4, #1
 8002a8c:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002a90:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002a94:	f103 0310 	add.w	r3, r3, #16
 8002a98:	d1db      	bne.n	8002a52 <arm_std_f32+0x1e>
 8002a9a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002a9e:	f011 0303 	ands.w	r3, r1, #3
 8002aa2:	d01b      	beq.n	8002adc <arm_std_f32+0xa8>
 8002aa4:	edd0 7a00 	vldr	s15, [r0]
 8002aa8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002aac:	3b01      	subs	r3, #1
 8002aae:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002ab2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002ab6:	d011      	beq.n	8002adc <arm_std_f32+0xa8>
 8002ab8:	edd0 7a01 	vldr	s15, [r0, #4]
 8002abc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002ac6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002aca:	d007      	beq.n	8002adc <arm_std_f32+0xa8>
 8002acc:	edd0 7a02 	vldr	s15, [r0, #8]
 8002ad0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002ad4:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002ad8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002adc:	ee07 1a90 	vmov	s15, r1
 8002ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ae8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002aec:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002af0:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002af4:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002af8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002afc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002b00:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	db0c      	blt.n	8002b28 <arm_std_f32+0xf4>
 8002b0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002b1a:	d40e      	bmi.n	8002b3a <arm_std_f32+0x106>
 8002b1c:	ed82 8a00 	vstr	s16, [r2]
 8002b20:	b003      	add	sp, #12
 8002b22:	ecbd 8b02 	vpop	{d8}
 8002b26:	bd30      	pop	{r4, r5, pc}
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	b003      	add	sp, #12
 8002b2e:	ecbd 8b02 	vpop	{d8}
 8002b32:	bd30      	pop	{r4, r5, pc}
 8002b34:	2300      	movs	r3, #0
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4770      	bx	lr
 8002b3a:	9201      	str	r2, [sp, #4]
 8002b3c:	f004 fd3a 	bl	80075b4 <sqrtf>
 8002b40:	9a01      	ldr	r2, [sp, #4]
 8002b42:	e7eb      	b.n	8002b1c <arm_std_f32+0xe8>
 8002b44:	00000000 	.word	0x00000000

08002b48 <arm_mean_f32>:
 8002b48:	b430      	push	{r4, r5}
 8002b4a:	088d      	lsrs	r5, r1, #2
 8002b4c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002bc0 <arm_mean_f32+0x78>
 8002b50:	d018      	beq.n	8002b84 <arm_mean_f32+0x3c>
 8002b52:	f100 0310 	add.w	r3, r0, #16
 8002b56:	462c      	mov	r4, r5
 8002b58:	ed53 5a04 	vldr	s11, [r3, #-16]
 8002b5c:	ed13 6a03 	vldr	s12, [r3, #-12]
 8002b60:	ed53 6a02 	vldr	s13, [r3, #-8]
 8002b64:	ed13 7a01 	vldr	s14, [r3, #-4]
 8002b68:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002b6c:	3c01      	subs	r4, #1
 8002b6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b72:	f103 0310 	add.w	r3, r3, #16
 8002b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b7e:	d1eb      	bne.n	8002b58 <arm_mean_f32+0x10>
 8002b80:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002b84:	f011 0303 	ands.w	r3, r1, #3
 8002b88:	d00f      	beq.n	8002baa <arm_mean_f32+0x62>
 8002b8a:	ed90 7a00 	vldr	s14, [r0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b94:	d009      	beq.n	8002baa <arm_mean_f32+0x62>
 8002b96:	ed90 7a01 	vldr	s14, [r0, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ba0:	bf1c      	itt	ne
 8002ba2:	ed90 7a02 	vldrne	s14, [r0, #8]
 8002ba6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8002baa:	ee07 1a10 	vmov	s14, r1
 8002bae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002bb2:	bc30      	pop	{r4, r5}
 8002bb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bb8:	edc2 6a00 	vstr	s13, [r2]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	00000000 	.word	0x00000000

08002bc4 <arm_correlate_f32>:
 8002bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc8:	4299      	cmp	r1, r3
 8002bca:	b08d      	sub	sp, #52	; 0x34
 8002bcc:	f0c0 824c 	bcc.w	8003068 <arm_correlate_f32+0x4a4>
 8002bd0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002bd2:	eba1 0c03 	sub.w	ip, r1, r3
 8002bd6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8002bda:	f04f 0e04 	mov.w	lr, #4
 8002bde:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002be2:	3101      	adds	r1, #1
 8002be4:	1ac9      	subs	r1, r1, r3
 8002be6:	3c01      	subs	r4, #1
 8002be8:	1e5e      	subs	r6, r3, #1
 8002bea:	9102      	str	r1, [sp, #8]
 8002bec:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8002bf0:	f000 8294 	beq.w	800311c <arm_correlate_f32+0x558>
 8002bf4:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002d44 <arm_correlate_f32+0x180>
 8002bf8:	f1a1 0804 	sub.w	r8, r1, #4
 8002bfc:	46e1      	mov	r9, ip
 8002bfe:	4605      	mov	r5, r0
 8002c00:	2401      	movs	r4, #1
 8002c02:	f014 0703 	ands.w	r7, r4, #3
 8002c06:	d01b      	beq.n	8002c40 <arm_correlate_f32+0x7c>
 8002c08:	ed91 7a00 	vldr	s14, [r1]
 8002c0c:	edd5 6a00 	vldr	s13, [r5]
 8002c10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c14:	3f01      	subs	r7, #1
 8002c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1a:	d011      	beq.n	8002c40 <arm_correlate_f32+0x7c>
 8002c1c:	ed91 7a01 	vldr	s14, [r1, #4]
 8002c20:	edd5 6a01 	vldr	s13, [r5, #4]
 8002c24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c28:	2f01      	cmp	r7, #1
 8002c2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c2e:	d007      	beq.n	8002c40 <arm_correlate_f32+0x7c>
 8002c30:	ed95 7a02 	vldr	s14, [r5, #8]
 8002c34:	edd1 6a02 	vldr	s13, [r1, #8]
 8002c38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c40:	1c67      	adds	r7, r4, #1
 8002c42:	42bb      	cmp	r3, r7
 8002c44:	edc9 7a00 	vstr	s15, [r9]
 8002c48:	4641      	mov	r1, r8
 8002c4a:	44f1      	add	r9, lr
 8002c4c:	d03a      	beq.n	8002cc4 <arm_correlate_f32+0x100>
 8002c4e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8002c52:	f000 8267 	beq.w	8003124 <arm_correlate_f32+0x560>
 8002c56:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8002c5a:	f100 0110 	add.w	r1, r0, #16
 8002c5e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002d44 <arm_correlate_f32+0x180>
 8002c62:	eb01 050a 	add.w	r5, r1, sl
 8002c66:	f108 0410 	add.w	r4, r8, #16
 8002c6a:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002c6e:	ed54 3a04 	vldr	s7, [r4, #-16]
 8002c72:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002c76:	ed14 4a03 	vldr	s8, [r4, #-12]
 8002c7a:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002c7e:	ed54 4a02 	vldr	s9, [r4, #-8]
 8002c82:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002c86:	ed14 5a01 	vldr	s10, [r4, #-4]
 8002c8a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002c8e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002c9a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002c9e:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	3110      	adds	r1, #16
 8002ca8:	428d      	cmp	r5, r1
 8002caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cae:	f104 0410 	add.w	r4, r4, #16
 8002cb2:	d1da      	bne.n	8002c6a <arm_correlate_f32+0xa6>
 8002cb4:	eb00 050a 	add.w	r5, r0, sl
 8002cb8:	eb08 010a 	add.w	r1, r8, sl
 8002cbc:	f1a8 0804 	sub.w	r8, r8, #4
 8002cc0:	463c      	mov	r4, r7
 8002cc2:	e79e      	b.n	8002c02 <arm_correlate_f32+0x3e>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	fb0e cc04 	mla	ip, lr, r4, ip
 8002cca:	f240 81dd 	bls.w	8003088 <arm_correlate_f32+0x4c4>
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	0899      	lsrs	r1, r3, #2
 8002cd2:	9103      	str	r1, [sp, #12]
 8002cd4:	f000 8220 	beq.w	8003118 <arm_correlate_f32+0x554>
 8002cd8:	08bb      	lsrs	r3, r7, #2
 8002cda:	f007 0403 	and.w	r4, r7, #3
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	f103 0b0c 	add.w	fp, r3, #12
 8002ce6:	18d5      	adds	r5, r2, r3
 8002ce8:	1e63      	subs	r3, r4, #1
 8002cea:	0109      	lsls	r1, r1, #4
 8002cec:	9306      	str	r3, [sp, #24]
 8002cee:	f100 080c 	add.w	r8, r0, #12
 8002cf2:	9401      	str	r4, [sp, #4]
 8002cf4:	9104      	str	r1, [sp, #16]
 8002cf6:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8002cfa:	4441      	add	r1, r8
 8002cfc:	f102 0310 	add.w	r3, r2, #16
 8002d00:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8002d04:	9e06      	ldr	r6, [sp, #24]
 8002d06:	9405      	str	r4, [sp, #20]
 8002d08:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8002d0c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8002d10:	46e1      	mov	r9, ip
 8002d12:	4483      	add	fp, r0
 8002d14:	460f      	mov	r7, r1
 8002d16:	920b      	str	r2, [sp, #44]	; 0x2c
 8002d18:	469c      	mov	ip, r3
 8002d1a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002d44 <arm_correlate_f32+0x180>
 8002d1e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8002d22:	ed18 2a02 	vldr	s4, [r8, #-8]
 8002d26:	ed58 2a01 	vldr	s5, [r8, #-4]
 8002d2a:	ed98 0a00 	vldr	s0, [r8]
 8002d2e:	9900      	ldr	r1, [sp, #0]
 8002d30:	eef0 5a46 	vmov.f32	s11, s12
 8002d34:	eeb0 5a46 	vmov.f32	s10, s12
 8002d38:	eef0 4a46 	vmov.f32	s9, s12
 8002d3c:	4663      	mov	r3, ip
 8002d3e:	4642      	mov	r2, r8
 8002d40:	e005      	b.n	8002d4e <arm_correlate_f32+0x18a>
 8002d42:	bf00      	nop
 8002d44:	00000000 	.word	0x00000000
 8002d48:	ed90 0a04 	vldr	s0, [r0, #16]
 8002d4c:	3210      	adds	r2, #16
 8002d4e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002d52:	ed13 7a03 	vldr	s14, [r3, #-12]
 8002d56:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002d5a:	ed13 1a01 	vldr	s2, [r3, #-4]
 8002d5e:	ee62 3a26 	vmul.f32	s7, s4, s13
 8002d62:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8002d66:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8002d6a:	edd2 1a01 	vldr	s3, [r2, #4]
 8002d6e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002d72:	ee22 3a07 	vmul.f32	s6, s4, s14
 8002d76:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002d7a:	ee74 5a25 	vadd.f32	s11, s8, s11
 8002d7e:	ee62 3a87 	vmul.f32	s7, s5, s14
 8002d82:	ee20 4a07 	vmul.f32	s8, s0, s14
 8002d86:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8002d8a:	ee36 6a86 	vadd.f32	s12, s13, s12
 8002d8e:	ed92 2a02 	vldr	s4, [r2, #8]
 8002d92:	ee27 7a21 	vmul.f32	s14, s14, s3
 8002d96:	ee73 3a85 	vadd.f32	s7, s7, s10
 8002d9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002d9e:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002da2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8002da6:	ee34 4a25 	vadd.f32	s8, s8, s11
 8002daa:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8002dae:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8002db2:	edd2 2a03 	vldr	s5, [r2, #12]
 8002db6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8002dba:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dc2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002dc6:	ee20 0a01 	vmul.f32	s0, s0, s2
 8002dca:	ee61 3a81 	vmul.f32	s7, s3, s2
 8002dce:	ee75 5a84 	vadd.f32	s11, s11, s8
 8002dd2:	ee22 7a01 	vmul.f32	s14, s4, s2
 8002dd6:	ee21 6a22 	vmul.f32	s12, s2, s5
 8002dda:	3901      	subs	r1, #1
 8002ddc:	f103 0310 	add.w	r3, r3, #16
 8002de0:	ee70 4a24 	vadd.f32	s9, s0, s9
 8002de4:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002de8:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002dec:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002df0:	4610      	mov	r0, r2
 8002df2:	d1a9      	bne.n	8002d48 <arm_correlate_f32+0x184>
 8002df4:	9b01      	ldr	r3, [sp, #4]
 8002df6:	b3f3      	cbz	r3, 8002e76 <arm_correlate_f32+0x2b2>
 8002df8:	edd5 7a00 	vldr	s15, [r5]
 8002dfc:	ed9b 4a00 	vldr	s8, [fp]
 8002e00:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8002e04:	ee62 3a27 	vmul.f32	s7, s4, s15
 8002e08:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8002e0c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002e10:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8002e14:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002e18:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002e1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e20:	b34e      	cbz	r6, 8002e76 <arm_correlate_f32+0x2b2>
 8002e22:	edd5 7a01 	vldr	s15, [r5, #4]
 8002e26:	eddb 6a01 	vldr	s13, [fp, #4]
 8002e2a:	ee22 7a27 	vmul.f32	s14, s4, s15
 8002e2e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8002e32:	ee67 3a84 	vmul.f32	s7, s15, s8
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	2e01      	cmp	r6, #1
 8002e3c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8002e40:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002e44:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8002e48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e4c:	d013      	beq.n	8002e76 <arm_correlate_f32+0x2b2>
 8002e4e:	ed95 7a02 	vldr	s14, [r5, #8]
 8002e52:	eddb 3a02 	vldr	s7, [fp, #8]
 8002e56:	ee62 7a87 	vmul.f32	s15, s5, s14
 8002e5a:	ee27 4a04 	vmul.f32	s8, s14, s8
 8002e5e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002e62:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002e66:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002e6a:	ee35 5a04 	vadd.f32	s10, s10, s8
 8002e6e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002e72:	ee36 6a07 	vadd.f32	s12, s12, s14
 8002e76:	f108 0810 	add.w	r8, r8, #16
 8002e7a:	eb09 020e 	add.w	r2, r9, lr
 8002e7e:	eb0a 030e 	add.w	r3, sl, lr
 8002e82:	4547      	cmp	r7, r8
 8002e84:	edc9 4a00 	vstr	s9, [r9]
 8002e88:	f10b 0b10 	add.w	fp, fp, #16
 8002e8c:	ed82 5a00 	vstr	s10, [r2]
 8002e90:	44a1      	add	r9, r4
 8002e92:	edca 5a00 	vstr	s11, [sl]
 8002e96:	ed83 6a00 	vstr	s12, [r3]
 8002e9a:	44a2      	add	sl, r4
 8002e9c:	f47f af3d 	bne.w	8002d1a <arm_correlate_f32+0x156>
 8002ea0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8002ea4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8002ea8:	9b03      	ldr	r3, [sp, #12]
 8002eaa:	9c05      	ldr	r4, [sp, #20]
 8002eac:	9904      	ldr	r1, [sp, #16]
 8002eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002eb0:	fb04 cc03 	mla	ip, r4, r3, ip
 8002eb4:	4401      	add	r1, r0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	460d      	mov	r5, r1
 8002eba:	9303      	str	r3, [sp, #12]
 8002ebc:	9b02      	ldr	r3, [sp, #8]
 8002ebe:	f013 0303 	ands.w	r3, r3, #3
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	d071      	beq.n	8002faa <arm_correlate_f32+0x3e6>
 8002ec6:	9903      	ldr	r1, [sp, #12]
 8002ec8:	9205      	str	r2, [sp, #20]
 8002eca:	f007 0403 	and.w	r4, r7, #3
 8002ece:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8002ed2:	1c4f      	adds	r7, r1, #1
 8002ed4:	1859      	adds	r1, r3, r1
 8002ed6:	1d03      	adds	r3, r0, #4
 8002ed8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002edc:	9400      	str	r4, [sp, #0]
 8002ede:	f102 0110 	add.w	r1, r2, #16
 8002ee2:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8002ee6:	3c01      	subs	r4, #1
 8002ee8:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8002eec:	eb02 090a 	add.w	r9, r2, sl
 8002ef0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002ef4:	46e0      	mov	r8, ip
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	460e      	mov	r6, r1
 8002efa:	4622      	mov	r2, r4
 8002efc:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8002d44 <arm_correlate_f32+0x180>
 8002f00:	f105 0110 	add.w	r1, r5, #16
 8002f04:	4633      	mov	r3, r6
 8002f06:	465c      	mov	r4, fp
 8002f08:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002f0c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002f10:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002f14:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002f18:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002f1c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002f20:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002f24:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002f28:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002f2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002f38:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f3c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	3c01      	subs	r4, #1
 8002f46:	f101 0110 	add.w	r1, r1, #16
 8002f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f4e:	f103 0310 	add.w	r3, r3, #16
 8002f52:	d1d9      	bne.n	8002f08 <arm_correlate_f32+0x344>
 8002f54:	9b00      	ldr	r3, [sp, #0]
 8002f56:	4455      	add	r5, sl
 8002f58:	b1d3      	cbz	r3, 8002f90 <arm_correlate_f32+0x3cc>
 8002f5a:	ed99 7a00 	vldr	s14, [r9]
 8002f5e:	edd5 6a00 	vldr	s13, [r5]
 8002f62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f6a:	b18a      	cbz	r2, 8002f90 <arm_correlate_f32+0x3cc>
 8002f6c:	ed99 7a01 	vldr	s14, [r9, #4]
 8002f70:	edd5 6a01 	vldr	s13, [r5, #4]
 8002f74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f78:	2a01      	cmp	r2, #1
 8002f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7e:	d007      	beq.n	8002f90 <arm_correlate_f32+0x3cc>
 8002f80:	ed95 7a02 	vldr	s14, [r5, #8]
 8002f84:	edd9 6a02 	vldr	s13, [r9, #8]
 8002f88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f90:	463d      	mov	r5, r7
 8002f92:	3704      	adds	r7, #4
 8002f94:	42b8      	cmp	r0, r7
 8002f96:	edc8 7a00 	vstr	s15, [r8]
 8002f9a:	44f0      	add	r8, lr
 8002f9c:	d1ae      	bne.n	8002efc <arm_correlate_f32+0x338>
 8002f9e:	9b01      	ldr	r3, [sp, #4]
 8002fa0:	9a05      	ldr	r2, [sp, #20]
 8002fa2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8002fa6:	fb0e cc03 	mla	ip, lr, r3, ip
 8002faa:	9b02      	ldr	r3, [sp, #8]
 8002fac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002fb0:	08b5      	lsrs	r5, r6, #2
 8002fb2:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8002d44 <arm_correlate_f32+0x180>
 8002fb6:	f000 80ac 	beq.w	8003112 <arm_correlate_f32+0x54e>
 8002fba:	f100 0110 	add.w	r1, r0, #16
 8002fbe:	f102 0310 	add.w	r3, r2, #16
 8002fc2:	462c      	mov	r4, r5
 8002fc4:	ed51 6a04 	vldr	s13, [r1, #-16]
 8002fc8:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002fcc:	ed11 7a03 	vldr	s14, [r1, #-12]
 8002fd0:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002fd4:	ed51 7a02 	vldr	s15, [r1, #-8]
 8002fd8:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002fdc:	ed11 6a01 	vldr	s12, [r1, #-4]
 8002fe0:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002fe4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002fe8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002fec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002ff0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002ff4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002ff8:	ee66 6a05 	vmul.f32	s13, s12, s10
 8002ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003000:	3c01      	subs	r4, #1
 8003002:	f101 0110 	add.w	r1, r1, #16
 8003006:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800300a:	f103 0310 	add.w	r3, r3, #16
 800300e:	d1d9      	bne.n	8002fc4 <arm_correlate_f32+0x400>
 8003010:	012d      	lsls	r5, r5, #4
 8003012:	1941      	adds	r1, r0, r5
 8003014:	4415      	add	r5, r2
 8003016:	f016 0303 	ands.w	r3, r6, #3
 800301a:	d01b      	beq.n	8003054 <arm_correlate_f32+0x490>
 800301c:	edd5 7a00 	vldr	s15, [r5]
 8003020:	ed91 7a00 	vldr	s14, [r1]
 8003024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003028:	3b01      	subs	r3, #1
 800302a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800302e:	d011      	beq.n	8003054 <arm_correlate_f32+0x490>
 8003030:	edd5 7a01 	vldr	s15, [r5, #4]
 8003034:	ed91 7a01 	vldr	s14, [r1, #4]
 8003038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303c:	2b01      	cmp	r3, #1
 800303e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003042:	d007      	beq.n	8003054 <arm_correlate_f32+0x490>
 8003044:	edd1 7a02 	vldr	s15, [r1, #8]
 8003048:	ed95 7a02 	vldr	s14, [r5, #8]
 800304c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003050:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003054:	3e01      	subs	r6, #1
 8003056:	edcc 5a00 	vstr	s11, [ip]
 800305a:	f100 0004 	add.w	r0, r0, #4
 800305e:	44f4      	add	ip, lr
 8003060:	d1a6      	bne.n	8002fb0 <arm_correlate_f32+0x3ec>
 8003062:	b00d      	add	sp, #52	; 0x34
 8003064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003068:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800306c:	4606      	mov	r6, r0
 800306e:	3c02      	subs	r4, #2
 8003070:	4610      	mov	r0, r2
 8003072:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003074:	440c      	add	r4, r1
 8003076:	460d      	mov	r5, r1
 8003078:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800307c:	4619      	mov	r1, r3
 800307e:	4632      	mov	r2, r6
 8003080:	f06f 0e03 	mvn.w	lr, #3
 8003084:	462b      	mov	r3, r5
 8003086:	e5aa      	b.n	8002bde <arm_correlate_f32+0x1a>
 8003088:	9902      	ldr	r1, [sp, #8]
 800308a:	2900      	cmp	r1, #0
 800308c:	d090      	beq.n	8002fb0 <arm_correlate_f32+0x3ec>
 800308e:	9902      	ldr	r1, [sp, #8]
 8003090:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8002d44 <arm_correlate_f32+0x180>
 8003094:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8003098:	eb00 0708 	add.w	r7, r0, r8
 800309c:	4601      	mov	r1, r0
 800309e:	4665      	mov	r5, ip
 80030a0:	e020      	b.n	80030e4 <arm_correlate_f32+0x520>
 80030a2:	edd2 7a00 	vldr	s15, [r2]
 80030a6:	ecb4 7a01 	vldmia	r4!, {s14}
 80030aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80030b2:	b18e      	cbz	r6, 80030d8 <arm_correlate_f32+0x514>
 80030b4:	ed92 7a01 	vldr	s14, [r2, #4]
 80030b8:	edd1 6a01 	vldr	s13, [r1, #4]
 80030bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030c6:	d007      	beq.n	80030d8 <arm_correlate_f32+0x514>
 80030c8:	ed91 7a02 	vldr	s14, [r1, #8]
 80030cc:	edd2 6a02 	vldr	s13, [r2, #8]
 80030d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80030d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030d8:	42bc      	cmp	r4, r7
 80030da:	edc5 7a00 	vstr	s15, [r5]
 80030de:	4621      	mov	r1, r4
 80030e0:	4475      	add	r5, lr
 80030e2:	d00b      	beq.n	80030fc <arm_correlate_f32+0x538>
 80030e4:	460c      	mov	r4, r1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1db      	bne.n	80030a2 <arm_correlate_f32+0x4de>
 80030ea:	1d0c      	adds	r4, r1, #4
 80030ec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800312c <arm_correlate_f32+0x568>
 80030f0:	42bc      	cmp	r4, r7
 80030f2:	edc5 7a00 	vstr	s15, [r5]
 80030f6:	4621      	mov	r1, r4
 80030f8:	4475      	add	r5, lr
 80030fa:	d1f3      	bne.n	80030e4 <arm_correlate_f32+0x520>
 80030fc:	9b02      	ldr	r3, [sp, #8]
 80030fe:	4440      	add	r0, r8
 8003100:	fb0e cc03 	mla	ip, lr, r3, ip
 8003104:	2e00      	cmp	r6, #0
 8003106:	d0ac      	beq.n	8003062 <arm_correlate_f32+0x49e>
 8003108:	08b5      	lsrs	r5, r6, #2
 800310a:	eddf 5a08 	vldr	s11, [pc, #32]	; 800312c <arm_correlate_f32+0x568>
 800310e:	f47f af54 	bne.w	8002fba <arm_correlate_f32+0x3f6>
 8003112:	4615      	mov	r5, r2
 8003114:	4601      	mov	r1, r0
 8003116:	e77e      	b.n	8003016 <arm_correlate_f32+0x452>
 8003118:	4605      	mov	r5, r0
 800311a:	e6cf      	b.n	8002ebc <arm_correlate_f32+0x2f8>
 800311c:	9902      	ldr	r1, [sp, #8]
 800311e:	2900      	cmp	r1, #0
 8003120:	d1b5      	bne.n	800308e <arm_correlate_f32+0x4ca>
 8003122:	e79e      	b.n	8003062 <arm_correlate_f32+0x49e>
 8003124:	eddf 7a01 	vldr	s15, [pc, #4]	; 800312c <arm_correlate_f32+0x568>
 8003128:	4605      	mov	r5, r0
 800312a:	e5c7      	b.n	8002cbc <arm_correlate_f32+0xf8>
 800312c:	00000000 	.word	0x00000000

08003130 <arm_conv_f32>:
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	b08b      	sub	sp, #44	; 0x2c
 8003136:	4299      	cmp	r1, r3
 8003138:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800313a:	d205      	bcs.n	8003148 <arm_conv_f32+0x18>
 800313c:	4606      	mov	r6, r0
 800313e:	460c      	mov	r4, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	4632      	mov	r2, r6
 8003146:	4623      	mov	r3, r4
 8003148:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800314c:	3101      	adds	r1, #1
 800314e:	1ac9      	subs	r1, r1, r3
 8003150:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003154:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003158:	9101      	str	r1, [sp, #4]
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	eb02 070b 	add.w	r7, r2, fp
 8003160:	f000 8277 	beq.w	8003652 <arm_conv_f32+0x522>
 8003164:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003424 <arm_conv_f32+0x2f4>
 8003168:	f102 0904 	add.w	r9, r2, #4
 800316c:	46aa      	mov	sl, r5
 800316e:	4680      	mov	r8, r0
 8003170:	2401      	movs	r4, #1
 8003172:	f014 0603 	ands.w	r6, r4, #3
 8003176:	d01b      	beq.n	80031b0 <arm_conv_f32+0x80>
 8003178:	ed92 7a00 	vldr	s14, [r2]
 800317c:	edd8 6a00 	vldr	s13, [r8]
 8003180:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003184:	3e01      	subs	r6, #1
 8003186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800318a:	d011      	beq.n	80031b0 <arm_conv_f32+0x80>
 800318c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003190:	edd8 6a01 	vldr	s13, [r8, #4]
 8003194:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003198:	2e01      	cmp	r6, #1
 800319a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319e:	d007      	beq.n	80031b0 <arm_conv_f32+0x80>
 80031a0:	ed98 7a02 	vldr	s14, [r8, #8]
 80031a4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80031a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b0:	3401      	adds	r4, #1
 80031b2:	42a3      	cmp	r3, r4
 80031b4:	ecea 7a01 	vstmia	sl!, {s15}
 80031b8:	464a      	mov	r2, r9
 80031ba:	d03a      	beq.n	8003232 <arm_conv_f32+0x102>
 80031bc:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80031c0:	f000 824c 	beq.w	800365c <arm_conv_f32+0x52c>
 80031c4:	f100 0210 	add.w	r2, r0, #16
 80031c8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80031cc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003424 <arm_conv_f32+0x2f4>
 80031d0:	eb02 0c08 	add.w	ip, r2, r8
 80031d4:	f1a9 0610 	sub.w	r6, r9, #16
 80031d8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80031dc:	edd6 3a04 	vldr	s7, [r6, #16]
 80031e0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80031e4:	ed96 4a03 	vldr	s8, [r6, #12]
 80031e8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80031ec:	edd6 4a02 	vldr	s9, [r6, #8]
 80031f0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80031f4:	ed96 5a01 	vldr	s10, [r6, #4]
 80031f8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80031fc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003208:	ee76 7a27 	vadd.f32	s15, s12, s15
 800320c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003214:	3210      	adds	r2, #16
 8003216:	4594      	cmp	ip, r2
 8003218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321c:	f1a6 0610 	sub.w	r6, r6, #16
 8003220:	d1da      	bne.n	80031d8 <arm_conv_f32+0xa8>
 8003222:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8003226:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800322a:	4480      	add	r8, r0
 800322c:	f109 0904 	add.w	r9, r9, #4
 8003230:	e79f      	b.n	8003172 <arm_conv_f32+0x42>
 8003232:	2b03      	cmp	r3, #3
 8003234:	445d      	add	r5, fp
 8003236:	f240 80e9 	bls.w	800340c <arm_conv_f32+0x2dc>
 800323a:	9b01      	ldr	r3, [sp, #4]
 800323c:	089a      	lsrs	r2, r3, #2
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	f000 8203 	beq.w	800364a <arm_conv_f32+0x51a>
 8003244:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003248:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	f004 0603 	and.w	r6, r4, #3
 8003252:	9203      	str	r2, [sp, #12]
 8003254:	f1a3 0a10 	sub.w	sl, r3, #16
 8003258:	f1a3 020c 	sub.w	r2, r3, #12
 800325c:	3b08      	subs	r3, #8
 800325e:	9204      	str	r2, [sp, #16]
 8003260:	9305      	str	r3, [sp, #20]
 8003262:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8003266:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800326a:	9a03      	ldr	r2, [sp, #12]
 800326c:	f100 0c1c 	add.w	ip, r0, #28
 8003270:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8003274:	464c      	mov	r4, r9
 8003276:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800327a:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800327e:	f1a7 0310 	sub.w	r3, r7, #16
 8003282:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8003286:	eb05 0b02 	add.w	fp, r5, r2
 800328a:	461f      	mov	r7, r3
 800328c:	3510      	adds	r5, #16
 800328e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003424 <arm_conv_f32+0x2f4>
 8003292:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8003296:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 800329a:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800329e:	eeb0 5a46 	vmov.f32	s10, s12
 80032a2:	eef0 4a46 	vmov.f32	s9, s12
 80032a6:	eef0 5a46 	vmov.f32	s11, s12
 80032aa:	463a      	mov	r2, r7
 80032ac:	4663      	mov	r3, ip
 80032ae:	4641      	mov	r1, r8
 80032b0:	edd2 6a04 	vldr	s13, [r2, #16]
 80032b4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80032b8:	ed92 7a03 	vldr	s14, [r2, #12]
 80032bc:	edd2 7a02 	vldr	s15, [r2, #8]
 80032c0:	edd2 0a01 	vldr	s1, [r2, #4]
 80032c4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80032c8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80032cc:	ee61 2a26 	vmul.f32	s5, s2, s13
 80032d0:	ed13 1a03 	vldr	s2, [r3, #-12]
 80032d4:	ee66 6a80 	vmul.f32	s13, s13, s0
 80032d8:	ee21 4a87 	vmul.f32	s8, s3, s14
 80032dc:	ee73 4a24 	vadd.f32	s9, s6, s9
 80032e0:	ee33 5a85 	vadd.f32	s10, s7, s10
 80032e4:	ee22 3a07 	vmul.f32	s6, s4, s14
 80032e8:	ed53 1a02 	vldr	s3, [r3, #-8]
 80032ec:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80032f0:	ee36 6a86 	vadd.f32	s12, s13, s12
 80032f4:	ee60 3a07 	vmul.f32	s7, s0, s14
 80032f8:	ee27 7a01 	vmul.f32	s14, s14, s2
 80032fc:	ee33 3a24 	vadd.f32	s6, s6, s9
 8003300:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003304:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003308:	ee60 4a27 	vmul.f32	s9, s0, s15
 800330c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8003310:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003314:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003318:	ee21 5a27 	vmul.f32	s10, s2, s15
 800331c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8003320:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003328:	ee34 4a22 	vadd.f32	s8, s8, s5
 800332c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8003330:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003334:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003338:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800333c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8003340:	3901      	subs	r1, #1
 8003342:	f1a2 0210 	sub.w	r2, r2, #16
 8003346:	ee75 5a84 	vadd.f32	s11, s11, s8
 800334a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800334e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8003352:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003356:	f103 0310 	add.w	r3, r3, #16
 800335a:	d1a9      	bne.n	80032b0 <arm_conv_f32+0x180>
 800335c:	eb0a 030c 	add.w	r3, sl, ip
 8003360:	2e00      	cmp	r6, #0
 8003362:	d042      	beq.n	80033ea <arm_conv_f32+0x2ba>
 8003364:	edde 7a00 	vldr	s15, [lr]
 8003368:	ed93 4a00 	vldr	s8, [r3]
 800336c:	ee61 6a27 	vmul.f32	s13, s2, s15
 8003370:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8003374:	ee22 7a27 	vmul.f32	s14, s4, s15
 8003378:	ee64 7a27 	vmul.f32	s15, s8, s15
 800337c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8003380:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8003384:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003388:	ee36 6a27 	vadd.f32	s12, s12, s15
 800338c:	eb09 030c 	add.w	r3, r9, ip
 8003390:	b35c      	cbz	r4, 80033ea <arm_conv_f32+0x2ba>
 8003392:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8003396:	edd3 6a00 	vldr	s13, [r3]
 800339a:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800339e:	ee22 3a27 	vmul.f32	s6, s4, s15
 80033a2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80033a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033aa:	2c01      	cmp	r4, #1
 80033ac:	ee75 5a87 	vadd.f32	s11, s11, s14
 80033b0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80033b4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80033b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033bc:	eb00 030c 	add.w	r3, r0, ip
 80033c0:	d013      	beq.n	80033ea <arm_conv_f32+0x2ba>
 80033c2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80033c6:	edd3 3a00 	vldr	s7, [r3]
 80033ca:	ee62 7a07 	vmul.f32	s15, s4, s14
 80033ce:	ee27 4a04 	vmul.f32	s8, s14, s8
 80033d2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80033d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80033da:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80033de:	ee74 4a84 	vadd.f32	s9, s9, s8
 80033e2:	ee35 5a26 	vadd.f32	s10, s10, s13
 80033e6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80033ea:	45ab      	cmp	fp, r5
 80033ec:	ed45 5a04 	vstr	s11, [r5, #-16]
 80033f0:	ed45 4a03 	vstr	s9, [r5, #-12]
 80033f4:	ed05 5a02 	vstr	s10, [r5, #-8]
 80033f8:	ed05 6a01 	vstr	s12, [r5, #-4]
 80033fc:	f10c 0c10 	add.w	ip, ip, #16
 8003400:	f105 0310 	add.w	r3, r5, #16
 8003404:	f000 809e 	beq.w	8003544 <arm_conv_f32+0x414>
 8003408:	461d      	mov	r5, r3
 800340a:	e740      	b.n	800328e <arm_conv_f32+0x15e>
 800340c:	9a01      	ldr	r2, [sp, #4]
 800340e:	46ac      	mov	ip, r5
 8003410:	2a00      	cmp	r2, #0
 8003412:	d037      	beq.n	8003484 <arm_conv_f32+0x354>
 8003414:	9a01      	ldr	r2, [sp, #4]
 8003416:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003424 <arm_conv_f32+0x2f4>
 800341a:	0096      	lsls	r6, r2, #2
 800341c:	eb05 0c06 	add.w	ip, r5, r6
 8003420:	4604      	mov	r4, r0
 8003422:	e021      	b.n	8003468 <arm_conv_f32+0x338>
 8003424:	00000000 	.word	0x00000000
 8003428:	edd7 7a00 	vldr	s15, [r7]
 800342c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003434:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003438:	b189      	cbz	r1, 800345e <arm_conv_f32+0x32e>
 800343a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800343e:	edd4 6a01 	vldr	s13, [r4, #4]
 8003442:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003446:	2b02      	cmp	r3, #2
 8003448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800344c:	d007      	beq.n	800345e <arm_conv_f32+0x32e>
 800344e:	ed94 7a02 	vldr	s14, [r4, #8]
 8003452:	ed57 6a02 	vldr	s13, [r7, #-8]
 8003456:	ee27 7a26 	vmul.f32	s14, s14, s13
 800345a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800345e:	ece5 7a01 	vstmia	r5!, {s15}
 8003462:	4565      	cmp	r5, ip
 8003464:	4614      	mov	r4, r2
 8003466:	d00a      	beq.n	800347e <arm_conv_f32+0x34e>
 8003468:	4622      	mov	r2, r4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1dc      	bne.n	8003428 <arm_conv_f32+0x2f8>
 800346e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003424 <arm_conv_f32+0x2f4>
 8003472:	ece5 7a01 	vstmia	r5!, {s15}
 8003476:	1d22      	adds	r2, r4, #4
 8003478:	4565      	cmp	r5, ip
 800347a:	4614      	mov	r4, r2
 800347c:	d1f4      	bne.n	8003468 <arm_conv_f32+0x338>
 800347e:	4430      	add	r0, r6
 8003480:	2900      	cmp	r1, #0
 8003482:	d059      	beq.n	8003538 <arm_conv_f32+0x408>
 8003484:	088d      	lsrs	r5, r1, #2
 8003486:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003424 <arm_conv_f32+0x2f4>
 800348a:	d058      	beq.n	800353e <arm_conv_f32+0x40e>
 800348c:	f100 0210 	add.w	r2, r0, #16
 8003490:	f1a7 0310 	sub.w	r3, r7, #16
 8003494:	462c      	mov	r4, r5
 8003496:	ed52 6a04 	vldr	s13, [r2, #-16]
 800349a:	edd3 3a04 	vldr	s7, [r3, #16]
 800349e:	ed12 7a03 	vldr	s14, [r2, #-12]
 80034a2:	ed93 4a03 	vldr	s8, [r3, #12]
 80034a6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80034aa:	edd3 4a02 	vldr	s9, [r3, #8]
 80034ae:	ed12 6a01 	vldr	s12, [r2, #-4]
 80034b2:	ed93 5a01 	vldr	s10, [r3, #4]
 80034b6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80034ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80034be:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80034c2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80034c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80034ca:	ee66 6a05 	vmul.f32	s13, s12, s10
 80034ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034d2:	3c01      	subs	r4, #1
 80034d4:	f102 0210 	add.w	r2, r2, #16
 80034d8:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80034dc:	f1a3 0310 	sub.w	r3, r3, #16
 80034e0:	d1d9      	bne.n	8003496 <arm_conv_f32+0x366>
 80034e2:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80034e6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80034ea:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80034ee:	f011 0203 	ands.w	r2, r1, #3
 80034f2:	d01b      	beq.n	800352c <arm_conv_f32+0x3fc>
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ed95 7a00 	vldr	s14, [r5]
 80034fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003500:	3a01      	subs	r2, #1
 8003502:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003506:	d011      	beq.n	800352c <arm_conv_f32+0x3fc>
 8003508:	ed53 7a01 	vldr	s15, [r3, #-4]
 800350c:	ed95 7a01 	vldr	s14, [r5, #4]
 8003510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003514:	2a01      	cmp	r2, #1
 8003516:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800351a:	d007      	beq.n	800352c <arm_conv_f32+0x3fc>
 800351c:	edd5 7a02 	vldr	s15, [r5, #8]
 8003520:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003528:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800352c:	3901      	subs	r1, #1
 800352e:	ecec 5a01 	vstmia	ip!, {s11}
 8003532:	f100 0004 	add.w	r0, r0, #4
 8003536:	d1a5      	bne.n	8003484 <arm_conv_f32+0x354>
 8003538:	b00b      	add	sp, #44	; 0x2c
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353e:	463b      	mov	r3, r7
 8003540:	4605      	mov	r5, r0
 8003542:	e7d4      	b.n	80034ee <arm_conv_f32+0x3be>
 8003544:	9b02      	ldr	r3, [sp, #8]
 8003546:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	9302      	str	r3, [sp, #8]
 800354e:	9b03      	ldr	r3, [sp, #12]
 8003550:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8003554:	4403      	add	r3, r0
 8003556:	465d      	mov	r5, fp
 8003558:	469e      	mov	lr, r3
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	f013 0c03 	ands.w	ip, r3, #3
 8003560:	d075      	beq.n	800364e <arm_conv_f32+0x51e>
 8003562:	9b02      	ldr	r3, [sp, #8]
 8003564:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8003568:	f004 0403 	and.w	r4, r4, #3
 800356c:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8003570:	f103 0801 	add.w	r8, r3, #1
 8003574:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8003578:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800357c:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8003580:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003584:	f1a7 0210 	sub.w	r2, r7, #16
 8003588:	4618      	mov	r0, r3
 800358a:	465b      	mov	r3, fp
 800358c:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8003590:	468b      	mov	fp, r1
 8003592:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8003596:	4621      	mov	r1, r4
 8003598:	4617      	mov	r7, r2
 800359a:	461c      	mov	r4, r3
 800359c:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003424 <arm_conv_f32+0x2f4>
 80035a0:	f10e 0210 	add.w	r2, lr, #16
 80035a4:	463b      	mov	r3, r7
 80035a6:	4656      	mov	r6, sl
 80035a8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80035ac:	edd3 3a04 	vldr	s7, [r3, #16]
 80035b0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80035b4:	ed93 4a03 	vldr	s8, [r3, #12]
 80035b8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80035bc:	edd3 4a02 	vldr	s9, [r3, #8]
 80035c0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80035c4:	ed93 5a01 	vldr	s10, [r3, #4]
 80035c8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80035cc:	ee26 6a04 	vmul.f32	s12, s12, s8
 80035d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d4:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80035d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80035dc:	ee65 6a85 	vmul.f32	s13, s11, s10
 80035e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e4:	3e01      	subs	r6, #1
 80035e6:	f102 0210 	add.w	r2, r2, #16
 80035ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ee:	f1a3 0310 	sub.w	r3, r3, #16
 80035f2:	d1d9      	bne.n	80035a8 <arm_conv_f32+0x478>
 80035f4:	4486      	add	lr, r0
 80035f6:	b1d1      	cbz	r1, 800362e <arm_conv_f32+0x4fe>
 80035f8:	ed99 7a00 	vldr	s14, [r9]
 80035fc:	edde 6a00 	vldr	s13, [lr]
 8003600:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003608:	b18c      	cbz	r4, 800362e <arm_conv_f32+0x4fe>
 800360a:	ed19 7a01 	vldr	s14, [r9, #-4]
 800360e:	edde 6a01 	vldr	s13, [lr, #4]
 8003612:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003616:	2c01      	cmp	r4, #1
 8003618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800361c:	d007      	beq.n	800362e <arm_conv_f32+0x4fe>
 800361e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8003622:	ed59 6a02 	vldr	s13, [r9, #-8]
 8003626:	ee27 7a26 	vmul.f32	s14, s14, s13
 800362a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800362e:	ece5 7a01 	vstmia	r5!, {s15}
 8003632:	4565      	cmp	r5, ip
 8003634:	46c6      	mov	lr, r8
 8003636:	f108 0804 	add.w	r8, r8, #4
 800363a:	d1af      	bne.n	800359c <arm_conv_f32+0x46c>
 800363c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8003640:	4659      	mov	r1, fp
 8003642:	9b01      	ldr	r3, [sp, #4]
 8003644:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003648:	e71c      	b.n	8003484 <arm_conv_f32+0x354>
 800364a:	4686      	mov	lr, r0
 800364c:	e785      	b.n	800355a <arm_conv_f32+0x42a>
 800364e:	46ac      	mov	ip, r5
 8003650:	e7f7      	b.n	8003642 <arm_conv_f32+0x512>
 8003652:	9a01      	ldr	r2, [sp, #4]
 8003654:	2a00      	cmp	r2, #0
 8003656:	f47f aedd 	bne.w	8003414 <arm_conv_f32+0x2e4>
 800365a:	e76d      	b.n	8003538 <arm_conv_f32+0x408>
 800365c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003424 <arm_conv_f32+0x2f4>
 8003660:	4680      	mov	r8, r0
 8003662:	e5e3      	b.n	800322c <arm_conv_f32+0xfc>

08003664 <arm_sub_f32>:
 8003664:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003668:	b4f0      	push	{r4, r5, r6, r7}
 800366a:	d033      	beq.n	80036d4 <arm_sub_f32+0x70>
 800366c:	f100 0610 	add.w	r6, r0, #16
 8003670:	f101 0510 	add.w	r5, r1, #16
 8003674:	f102 0410 	add.w	r4, r2, #16
 8003678:	4667      	mov	r7, ip
 800367a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800367e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003682:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003686:	3f01      	subs	r7, #1
 8003688:	ed44 7a04 	vstr	s15, [r4, #-16]
 800368c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003690:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003698:	f106 0610 	add.w	r6, r6, #16
 800369c:	ed44 7a03 	vstr	s15, [r4, #-12]
 80036a0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80036a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80036a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036ac:	f105 0510 	add.w	r5, r5, #16
 80036b0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80036b4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80036b8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80036bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036c0:	f104 0410 	add.w	r4, r4, #16
 80036c4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80036c8:	d1d7      	bne.n	800367a <arm_sub_f32+0x16>
 80036ca:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80036ce:	4420      	add	r0, r4
 80036d0:	4421      	add	r1, r4
 80036d2:	4422      	add	r2, r4
 80036d4:	f013 0303 	ands.w	r3, r3, #3
 80036d8:	d01b      	beq.n	8003712 <arm_sub_f32+0xae>
 80036da:	edd0 7a00 	vldr	s15, [r0]
 80036de:	ed91 7a00 	vldr	s14, [r1]
 80036e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e6:	3b01      	subs	r3, #1
 80036e8:	edc2 7a00 	vstr	s15, [r2]
 80036ec:	d011      	beq.n	8003712 <arm_sub_f32+0xae>
 80036ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80036f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80036f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	edc2 7a01 	vstr	s15, [r2, #4]
 8003700:	d007      	beq.n	8003712 <arm_sub_f32+0xae>
 8003702:	edd0 7a02 	vldr	s15, [r0, #8]
 8003706:	ed91 7a02 	vldr	s14, [r1, #8]
 800370a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800370e:	edc2 7a02 	vstr	s15, [r2, #8]
 8003712:	bcf0      	pop	{r4, r5, r6, r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <clock>:
 8003718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <clock+0x24>)
 800371c:	4669      	mov	r1, sp
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	f001 fd60 	bl	80051e4 <_times_r>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d006      	beq.n	8003736 <clock+0x1e>
 8003728:	e9dd 0300 	ldrd	r0, r3, [sp]
 800372c:	4418      	add	r0, r3
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	4418      	add	r0, r3
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	4418      	add	r0, r3
 8003736:	b005      	add	sp, #20
 8003738:	f85d fb04 	ldr.w	pc, [sp], #4
 800373c:	2000000c 	.word	0x2000000c

08003740 <__errno>:
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <__errno+0x8>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	2000000c 	.word	0x2000000c

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4e0d      	ldr	r6, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1ba4      	subs	r4, r4, r6
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2500      	movs	r5, #0
 8003758:	42a5      	cmp	r5, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4e0b      	ldr	r6, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f004 fe60 	bl	8008424 <_init>
 8003764:	1ba4      	subs	r4, r4, r6
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2500      	movs	r5, #0
 800376a:	42a5      	cmp	r5, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003774:	4798      	blx	r3
 8003776:	3501      	adds	r5, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377e:	4798      	blx	r3
 8003780:	3501      	adds	r5, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08008930 	.word	0x08008930
 8003788:	08008930 	.word	0x08008930
 800378c:	08008930 	.word	0x08008930
 8003790:	08008934 	.word	0x08008934

08003794 <memcpy>:
 8003794:	b510      	push	{r4, lr}
 8003796:	1e43      	subs	r3, r0, #1
 8003798:	440a      	add	r2, r1
 800379a:	4291      	cmp	r1, r2
 800379c:	d100      	bne.n	80037a0 <memcpy+0xc>
 800379e:	bd10      	pop	{r4, pc}
 80037a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037a8:	e7f7      	b.n	800379a <memcpy+0x6>

080037aa <memset>:
 80037aa:	4402      	add	r2, r0
 80037ac:	4603      	mov	r3, r0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d100      	bne.n	80037b4 <memset+0xa>
 80037b2:	4770      	bx	lr
 80037b4:	f803 1b01 	strb.w	r1, [r3], #1
 80037b8:	e7f9      	b.n	80037ae <memset+0x4>

080037ba <__cvt>:
 80037ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037be:	ec55 4b10 	vmov	r4, r5, d0
 80037c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80037c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	460e      	mov	r6, r1
 80037cc:	4691      	mov	r9, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	bfb8      	it	lt
 80037d2:	4622      	movlt	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f027 0720 	bic.w	r7, r7, #32
 80037da:	bfbb      	ittet	lt
 80037dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037e0:	461d      	movlt	r5, r3
 80037e2:	2300      	movge	r3, #0
 80037e4:	232d      	movlt	r3, #45	; 0x2d
 80037e6:	bfb8      	it	lt
 80037e8:	4614      	movlt	r4, r2
 80037ea:	2f46      	cmp	r7, #70	; 0x46
 80037ec:	700b      	strb	r3, [r1, #0]
 80037ee:	d004      	beq.n	80037fa <__cvt+0x40>
 80037f0:	2f45      	cmp	r7, #69	; 0x45
 80037f2:	d100      	bne.n	80037f6 <__cvt+0x3c>
 80037f4:	3601      	adds	r6, #1
 80037f6:	2102      	movs	r1, #2
 80037f8:	e000      	b.n	80037fc <__cvt+0x42>
 80037fa:	2103      	movs	r1, #3
 80037fc:	ab03      	add	r3, sp, #12
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	ab02      	add	r3, sp, #8
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4632      	mov	r2, r6
 8003806:	4653      	mov	r3, sl
 8003808:	ec45 4b10 	vmov	d0, r4, r5
 800380c:	f001 fd7c 	bl	8005308 <_dtoa_r>
 8003810:	2f47      	cmp	r7, #71	; 0x47
 8003812:	4680      	mov	r8, r0
 8003814:	d102      	bne.n	800381c <__cvt+0x62>
 8003816:	f019 0f01 	tst.w	r9, #1
 800381a:	d026      	beq.n	800386a <__cvt+0xb0>
 800381c:	2f46      	cmp	r7, #70	; 0x46
 800381e:	eb08 0906 	add.w	r9, r8, r6
 8003822:	d111      	bne.n	8003848 <__cvt+0x8e>
 8003824:	f898 3000 	ldrb.w	r3, [r8]
 8003828:	2b30      	cmp	r3, #48	; 0x30
 800382a:	d10a      	bne.n	8003842 <__cvt+0x88>
 800382c:	2200      	movs	r2, #0
 800382e:	2300      	movs	r3, #0
 8003830:	4620      	mov	r0, r4
 8003832:	4629      	mov	r1, r5
 8003834:	f7fd f998 	bl	8000b68 <__aeabi_dcmpeq>
 8003838:	b918      	cbnz	r0, 8003842 <__cvt+0x88>
 800383a:	f1c6 0601 	rsb	r6, r6, #1
 800383e:	f8ca 6000 	str.w	r6, [sl]
 8003842:	f8da 3000 	ldr.w	r3, [sl]
 8003846:	4499      	add	r9, r3
 8003848:	2200      	movs	r2, #0
 800384a:	2300      	movs	r3, #0
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7fd f98a 	bl	8000b68 <__aeabi_dcmpeq>
 8003854:	b938      	cbnz	r0, 8003866 <__cvt+0xac>
 8003856:	2230      	movs	r2, #48	; 0x30
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	454b      	cmp	r3, r9
 800385c:	d205      	bcs.n	800386a <__cvt+0xb0>
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	9103      	str	r1, [sp, #12]
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e7f8      	b.n	8003858 <__cvt+0x9e>
 8003866:	f8cd 900c 	str.w	r9, [sp, #12]
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800386e:	eba3 0308 	sub.w	r3, r3, r8
 8003872:	4640      	mov	r0, r8
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	b004      	add	sp, #16
 8003878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800387c <__exponent>:
 800387c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800387e:	2900      	cmp	r1, #0
 8003880:	4604      	mov	r4, r0
 8003882:	bfba      	itte	lt
 8003884:	4249      	neglt	r1, r1
 8003886:	232d      	movlt	r3, #45	; 0x2d
 8003888:	232b      	movge	r3, #43	; 0x2b
 800388a:	2909      	cmp	r1, #9
 800388c:	f804 2b02 	strb.w	r2, [r4], #2
 8003890:	7043      	strb	r3, [r0, #1]
 8003892:	dd20      	ble.n	80038d6 <__exponent+0x5a>
 8003894:	f10d 0307 	add.w	r3, sp, #7
 8003898:	461f      	mov	r7, r3
 800389a:	260a      	movs	r6, #10
 800389c:	fb91 f5f6 	sdiv	r5, r1, r6
 80038a0:	fb06 1115 	mls	r1, r6, r5, r1
 80038a4:	3130      	adds	r1, #48	; 0x30
 80038a6:	2d09      	cmp	r5, #9
 80038a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80038ac:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80038b0:	4629      	mov	r1, r5
 80038b2:	dc09      	bgt.n	80038c8 <__exponent+0x4c>
 80038b4:	3130      	adds	r1, #48	; 0x30
 80038b6:	3b02      	subs	r3, #2
 80038b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80038bc:	42bb      	cmp	r3, r7
 80038be:	4622      	mov	r2, r4
 80038c0:	d304      	bcc.n	80038cc <__exponent+0x50>
 80038c2:	1a10      	subs	r0, r2, r0
 80038c4:	b003      	add	sp, #12
 80038c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c8:	4613      	mov	r3, r2
 80038ca:	e7e7      	b.n	800389c <__exponent+0x20>
 80038cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d0:	f804 2b01 	strb.w	r2, [r4], #1
 80038d4:	e7f2      	b.n	80038bc <__exponent+0x40>
 80038d6:	2330      	movs	r3, #48	; 0x30
 80038d8:	4419      	add	r1, r3
 80038da:	7083      	strb	r3, [r0, #2]
 80038dc:	1d02      	adds	r2, r0, #4
 80038de:	70c1      	strb	r1, [r0, #3]
 80038e0:	e7ef      	b.n	80038c2 <__exponent+0x46>
	...

080038e4 <_printf_float>:
 80038e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e8:	b08d      	sub	sp, #52	; 0x34
 80038ea:	460c      	mov	r4, r1
 80038ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80038f0:	4616      	mov	r6, r2
 80038f2:	461f      	mov	r7, r3
 80038f4:	4605      	mov	r5, r0
 80038f6:	f002 fdeb 	bl	80064d0 <_localeconv_r>
 80038fa:	6803      	ldr	r3, [r0, #0]
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fcb2 	bl	8000268 <strlen>
 8003904:	2300      	movs	r3, #0
 8003906:	930a      	str	r3, [sp, #40]	; 0x28
 8003908:	f8d8 3000 	ldr.w	r3, [r8]
 800390c:	9005      	str	r0, [sp, #20]
 800390e:	3307      	adds	r3, #7
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	f103 0208 	add.w	r2, r3, #8
 8003918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800391c:	f8d4 b000 	ldr.w	fp, [r4]
 8003920:	f8c8 2000 	str.w	r2, [r8]
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800392c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003934:	9307      	str	r3, [sp, #28]
 8003936:	f8cd 8018 	str.w	r8, [sp, #24]
 800393a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393e:	4ba7      	ldr	r3, [pc, #668]	; (8003bdc <_printf_float+0x2f8>)
 8003940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003944:	f7fd f942 	bl	8000bcc <__aeabi_dcmpun>
 8003948:	bb70      	cbnz	r0, 80039a8 <_printf_float+0xc4>
 800394a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800394e:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <_printf_float+0x2f8>)
 8003950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003954:	f7fd f91c 	bl	8000b90 <__aeabi_dcmple>
 8003958:	bb30      	cbnz	r0, 80039a8 <_printf_float+0xc4>
 800395a:	2200      	movs	r2, #0
 800395c:	2300      	movs	r3, #0
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	f7fd f90b 	bl	8000b7c <__aeabi_dcmplt>
 8003966:	b110      	cbz	r0, 800396e <_printf_float+0x8a>
 8003968:	232d      	movs	r3, #45	; 0x2d
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396e:	4a9c      	ldr	r2, [pc, #624]	; (8003be0 <_printf_float+0x2fc>)
 8003970:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <_printf_float+0x300>)
 8003972:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003976:	bf8c      	ite	hi
 8003978:	4690      	movhi	r8, r2
 800397a:	4698      	movls	r8, r3
 800397c:	2303      	movs	r3, #3
 800397e:	f02b 0204 	bic.w	r2, fp, #4
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	f04f 0900 	mov.w	r9, #0
 800398a:	9700      	str	r7, [sp, #0]
 800398c:	4633      	mov	r3, r6
 800398e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f9e6 	bl	8003d64 <_printf_common>
 8003998:	3001      	adds	r0, #1
 800399a:	f040 808d 	bne.w	8003ab8 <_printf_float+0x1d4>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a2:	b00d      	add	sp, #52	; 0x34
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	4640      	mov	r0, r8
 80039ae:	4649      	mov	r1, r9
 80039b0:	f7fd f90c 	bl	8000bcc <__aeabi_dcmpun>
 80039b4:	b110      	cbz	r0, 80039bc <_printf_float+0xd8>
 80039b6:	4a8c      	ldr	r2, [pc, #560]	; (8003be8 <_printf_float+0x304>)
 80039b8:	4b8c      	ldr	r3, [pc, #560]	; (8003bec <_printf_float+0x308>)
 80039ba:	e7da      	b.n	8003972 <_printf_float+0x8e>
 80039bc:	6861      	ldr	r1, [r4, #4]
 80039be:	1c4b      	adds	r3, r1, #1
 80039c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80039c4:	a80a      	add	r0, sp, #40	; 0x28
 80039c6:	d13e      	bne.n	8003a46 <_printf_float+0x162>
 80039c8:	2306      	movs	r3, #6
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	2300      	movs	r3, #0
 80039ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80039d2:	ab09      	add	r3, sp, #36	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	ec49 8b10 	vmov	d0, r8, r9
 80039da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	f8cd a004 	str.w	sl, [sp, #4]
 80039e4:	6861      	ldr	r1, [r4, #4]
 80039e6:	4628      	mov	r0, r5
 80039e8:	f7ff fee7 	bl	80037ba <__cvt>
 80039ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80039f0:	2b47      	cmp	r3, #71	; 0x47
 80039f2:	4680      	mov	r8, r0
 80039f4:	d109      	bne.n	8003a0a <_printf_float+0x126>
 80039f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f8:	1cd8      	adds	r0, r3, #3
 80039fa:	db02      	blt.n	8003a02 <_printf_float+0x11e>
 80039fc:	6862      	ldr	r2, [r4, #4]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	dd47      	ble.n	8003a92 <_printf_float+0x1ae>
 8003a02:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a06:	fa5f fa8a 	uxtb.w	sl, sl
 8003a0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a10:	d824      	bhi.n	8003a5c <_printf_float+0x178>
 8003a12:	3901      	subs	r1, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a1a:	9109      	str	r1, [sp, #36]	; 0x24
 8003a1c:	f7ff ff2e 	bl	800387c <__exponent>
 8003a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a22:	1813      	adds	r3, r2, r0
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	4681      	mov	r9, r0
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	dc02      	bgt.n	8003a32 <_printf_float+0x14e>
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	07d1      	lsls	r1, r2, #31
 8003a30:	d501      	bpl.n	8003a36 <_printf_float+0x152>
 8003a32:	3301      	adds	r3, #1
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0a5      	beq.n	800398a <_printf_float+0xa6>
 8003a3e:	232d      	movs	r3, #45	; 0x2d
 8003a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a44:	e7a1      	b.n	800398a <_printf_float+0xa6>
 8003a46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003a4a:	f000 8177 	beq.w	8003d3c <_printf_float+0x458>
 8003a4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003a52:	d1bb      	bne.n	80039cc <_printf_float+0xe8>
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d1b9      	bne.n	80039cc <_printf_float+0xe8>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e7b6      	b.n	80039ca <_printf_float+0xe6>
 8003a5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003a60:	d119      	bne.n	8003a96 <_printf_float+0x1b2>
 8003a62:	2900      	cmp	r1, #0
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	dd0c      	ble.n	8003a82 <_printf_float+0x19e>
 8003a68:	6121      	str	r1, [r4, #16]
 8003a6a:	b913      	cbnz	r3, 8003a72 <_printf_float+0x18e>
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	07d2      	lsls	r2, r2, #31
 8003a70:	d502      	bpl.n	8003a78 <_printf_float+0x194>
 8003a72:	3301      	adds	r3, #1
 8003a74:	440b      	add	r3, r1
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a7c:	f04f 0900 	mov.w	r9, #0
 8003a80:	e7d9      	b.n	8003a36 <_printf_float+0x152>
 8003a82:	b913      	cbnz	r3, 8003a8a <_printf_float+0x1a6>
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	07d0      	lsls	r0, r2, #31
 8003a88:	d501      	bpl.n	8003a8e <_printf_float+0x1aa>
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	e7f3      	b.n	8003a76 <_printf_float+0x192>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e7f1      	b.n	8003a76 <_printf_float+0x192>
 8003a92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003a96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	db05      	blt.n	8003aaa <_printf_float+0x1c6>
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6123      	str	r3, [r4, #16]
 8003aa2:	07d1      	lsls	r1, r2, #31
 8003aa4:	d5e8      	bpl.n	8003a78 <_printf_float+0x194>
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	e7e5      	b.n	8003a76 <_printf_float+0x192>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfd4      	ite	le
 8003aae:	f1c3 0302 	rsble	r3, r3, #2
 8003ab2:	2301      	movgt	r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	e7de      	b.n	8003a76 <_printf_float+0x192>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	055a      	lsls	r2, r3, #21
 8003abc:	d407      	bmi.n	8003ace <_printf_float+0x1ea>
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d12b      	bne.n	8003b24 <_printf_float+0x240>
 8003acc:	e767      	b.n	800399e <_printf_float+0xba>
 8003ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ad2:	f240 80dc 	bls.w	8003c8e <_printf_float+0x3aa>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ade:	f7fd f843 	bl	8000b68 <__aeabi_dcmpeq>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d033      	beq.n	8003b4e <_printf_float+0x26a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <_printf_float+0x30c>)
 8003aea:	4631      	mov	r1, r6
 8003aec:	4628      	mov	r0, r5
 8003aee:	47b8      	blx	r7
 8003af0:	3001      	adds	r0, #1
 8003af2:	f43f af54 	beq.w	800399e <_printf_float+0xba>
 8003af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003afa:	429a      	cmp	r2, r3
 8003afc:	db02      	blt.n	8003b04 <_printf_float+0x220>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	07d8      	lsls	r0, r3, #31
 8003b02:	d50f      	bpl.n	8003b24 <_printf_float+0x240>
 8003b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	47b8      	blx	r7
 8003b0e:	3001      	adds	r0, #1
 8003b10:	f43f af45 	beq.w	800399e <_printf_float+0xba>
 8003b14:	f04f 0800 	mov.w	r8, #0
 8003b18:	f104 091a 	add.w	r9, r4, #26
 8003b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	4543      	cmp	r3, r8
 8003b22:	dc09      	bgt.n	8003b38 <_printf_float+0x254>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	079b      	lsls	r3, r3, #30
 8003b28:	f100 8103 	bmi.w	8003d32 <_printf_float+0x44e>
 8003b2c:	68e0      	ldr	r0, [r4, #12]
 8003b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b30:	4298      	cmp	r0, r3
 8003b32:	bfb8      	it	lt
 8003b34:	4618      	movlt	r0, r3
 8003b36:	e734      	b.n	80039a2 <_printf_float+0xbe>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	464a      	mov	r2, r9
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b8      	blx	r7
 8003b42:	3001      	adds	r0, #1
 8003b44:	f43f af2b 	beq.w	800399e <_printf_float+0xba>
 8003b48:	f108 0801 	add.w	r8, r8, #1
 8003b4c:	e7e6      	b.n	8003b1c <_printf_float+0x238>
 8003b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dc2b      	bgt.n	8003bac <_printf_float+0x2c8>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <_printf_float+0x30c>)
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f43f af1d 	beq.w	800399e <_printf_float+0xba>
 8003b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b66:	b923      	cbnz	r3, 8003b72 <_printf_float+0x28e>
 8003b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b6a:	b913      	cbnz	r3, 8003b72 <_printf_float+0x28e>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	d5d8      	bpl.n	8003b24 <_printf_float+0x240>
 8003b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	f43f af0e 	beq.w	800399e <_printf_float+0xba>
 8003b82:	f04f 0900 	mov.w	r9, #0
 8003b86:	f104 0a1a 	add.w	sl, r4, #26
 8003b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8c:	425b      	negs	r3, r3
 8003b8e:	454b      	cmp	r3, r9
 8003b90:	dc01      	bgt.n	8003b96 <_printf_float+0x2b2>
 8003b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b94:	e794      	b.n	8003ac0 <_printf_float+0x1dc>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4652      	mov	r2, sl
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	47b8      	blx	r7
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f43f aefc 	beq.w	800399e <_printf_float+0xba>
 8003ba6:	f109 0901 	add.w	r9, r9, #1
 8003baa:	e7ee      	b.n	8003b8a <_printf_float+0x2a6>
 8003bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bfa8      	it	ge
 8003bb4:	461a      	movge	r2, r3
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	4691      	mov	r9, r2
 8003bba:	dd07      	ble.n	8003bcc <_printf_float+0x2e8>
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b8      	blx	r7
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f aee9 	beq.w	800399e <_printf_float+0xba>
 8003bcc:	f104 031a 	add.w	r3, r4, #26
 8003bd0:	f04f 0b00 	mov.w	fp, #0
 8003bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bd8:	9306      	str	r3, [sp, #24]
 8003bda:	e015      	b.n	8003c08 <_printf_float+0x324>
 8003bdc:	7fefffff 	.word	0x7fefffff
 8003be0:	0800862c 	.word	0x0800862c
 8003be4:	08008628 	.word	0x08008628
 8003be8:	08008634 	.word	0x08008634
 8003bec:	08008630 	.word	0x08008630
 8003bf0:	08008638 	.word	0x08008638
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9a06      	ldr	r2, [sp, #24]
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	47b8      	blx	r7
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f43f aecd 	beq.w	800399e <_printf_float+0xba>
 8003c04:	f10b 0b01 	add.w	fp, fp, #1
 8003c08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c0c:	ebaa 0309 	sub.w	r3, sl, r9
 8003c10:	455b      	cmp	r3, fp
 8003c12:	dcef      	bgt.n	8003bf4 <_printf_float+0x310>
 8003c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	44d0      	add	r8, sl
 8003c1c:	db15      	blt.n	8003c4a <_printf_float+0x366>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	07da      	lsls	r2, r3, #31
 8003c22:	d412      	bmi.n	8003c4a <_printf_float+0x366>
 8003c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c28:	eba3 020a 	sub.w	r2, r3, sl
 8003c2c:	eba3 0a01 	sub.w	sl, r3, r1
 8003c30:	4592      	cmp	sl, r2
 8003c32:	bfa8      	it	ge
 8003c34:	4692      	movge	sl, r2
 8003c36:	f1ba 0f00 	cmp.w	sl, #0
 8003c3a:	dc0e      	bgt.n	8003c5a <_printf_float+0x376>
 8003c3c:	f04f 0800 	mov.w	r8, #0
 8003c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c44:	f104 091a 	add.w	r9, r4, #26
 8003c48:	e019      	b.n	8003c7e <_printf_float+0x39a>
 8003c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	d1e5      	bne.n	8003c24 <_printf_float+0x340>
 8003c58:	e6a1      	b.n	800399e <_printf_float+0xba>
 8003c5a:	4653      	mov	r3, sl
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4628      	mov	r0, r5
 8003c62:	47b8      	blx	r7
 8003c64:	3001      	adds	r0, #1
 8003c66:	d1e9      	bne.n	8003c3c <_printf_float+0x358>
 8003c68:	e699      	b.n	800399e <_printf_float+0xba>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	464a      	mov	r2, r9
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4628      	mov	r0, r5
 8003c72:	47b8      	blx	r7
 8003c74:	3001      	adds	r0, #1
 8003c76:	f43f ae92 	beq.w	800399e <_printf_float+0xba>
 8003c7a:	f108 0801 	add.w	r8, r8, #1
 8003c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	eba3 030a 	sub.w	r3, r3, sl
 8003c88:	4543      	cmp	r3, r8
 8003c8a:	dcee      	bgt.n	8003c6a <_printf_float+0x386>
 8003c8c:	e74a      	b.n	8003b24 <_printf_float+0x240>
 8003c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c90:	2a01      	cmp	r2, #1
 8003c92:	dc01      	bgt.n	8003c98 <_printf_float+0x3b4>
 8003c94:	07db      	lsls	r3, r3, #31
 8003c96:	d53a      	bpl.n	8003d0e <_printf_float+0x42a>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4642      	mov	r2, r8
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f43f ae7b 	beq.w	800399e <_printf_float+0xba>
 8003ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cac:	4631      	mov	r1, r6
 8003cae:	4628      	mov	r0, r5
 8003cb0:	47b8      	blx	r7
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	f108 0801 	add.w	r8, r8, #1
 8003cb8:	f43f ae71 	beq.w	800399e <_printf_float+0xba>
 8003cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8003cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f7fc ff4d 	bl	8000b68 <__aeabi_dcmpeq>
 8003cce:	b9c8      	cbnz	r0, 8003d04 <_printf_float+0x420>
 8003cd0:	4653      	mov	r3, sl
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	47b8      	blx	r7
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d10e      	bne.n	8003cfc <_printf_float+0x418>
 8003cde:	e65e      	b.n	800399e <_printf_float+0xba>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4652      	mov	r2, sl
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	f43f ae57 	beq.w	800399e <_printf_float+0xba>
 8003cf0:	f108 0801 	add.w	r8, r8, #1
 8003cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4543      	cmp	r3, r8
 8003cfa:	dcf1      	bgt.n	8003ce0 <_printf_float+0x3fc>
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d02:	e6de      	b.n	8003ac2 <_printf_float+0x1de>
 8003d04:	f04f 0800 	mov.w	r8, #0
 8003d08:	f104 0a1a 	add.w	sl, r4, #26
 8003d0c:	e7f2      	b.n	8003cf4 <_printf_float+0x410>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e7df      	b.n	8003cd2 <_printf_float+0x3ee>
 8003d12:	2301      	movs	r3, #1
 8003d14:	464a      	mov	r2, r9
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f43f ae3e 	beq.w	800399e <_printf_float+0xba>
 8003d22:	f108 0801 	add.w	r8, r8, #1
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	4543      	cmp	r3, r8
 8003d2e:	dcf0      	bgt.n	8003d12 <_printf_float+0x42e>
 8003d30:	e6fc      	b.n	8003b2c <_printf_float+0x248>
 8003d32:	f04f 0800 	mov.w	r8, #0
 8003d36:	f104 0919 	add.w	r9, r4, #25
 8003d3a:	e7f4      	b.n	8003d26 <_printf_float+0x442>
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	f43f ae8b 	beq.w	8003a58 <_printf_float+0x174>
 8003d42:	2300      	movs	r3, #0
 8003d44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003d48:	ab09      	add	r3, sp, #36	; 0x24
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	ec49 8b10 	vmov	d0, r8, r9
 8003d50:	6022      	str	r2, [r4, #0]
 8003d52:	f8cd a004 	str.w	sl, [sp, #4]
 8003d56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7ff fd2d 	bl	80037ba <__cvt>
 8003d60:	4680      	mov	r8, r0
 8003d62:	e648      	b.n	80039f6 <_printf_float+0x112>

08003d64 <_printf_common>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	4691      	mov	r9, r2
 8003d6a:	461f      	mov	r7, r3
 8003d6c:	688a      	ldr	r2, [r1, #8]
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfb8      	it	lt
 8003d78:	4613      	movlt	r3, r2
 8003d7a:	f8c9 3000 	str.w	r3, [r9]
 8003d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d82:	4606      	mov	r6, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	b112      	cbz	r2, 8003d8e <_printf_common+0x2a>
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f8c9 3000 	str.w	r3, [r9]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	0699      	lsls	r1, r3, #26
 8003d92:	bf42      	ittt	mi
 8003d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d98:	3302      	addmi	r3, #2
 8003d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	f015 0506 	ands.w	r5, r5, #6
 8003da4:	d107      	bne.n	8003db6 <_printf_common+0x52>
 8003da6:	f104 0a19 	add.w	sl, r4, #25
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	f8d9 2000 	ldr.w	r2, [r9]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	42ab      	cmp	r3, r5
 8003db4:	dc28      	bgt.n	8003e08 <_printf_common+0xa4>
 8003db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	3300      	adds	r3, #0
 8003dbe:	bf18      	it	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	0692      	lsls	r2, r2, #26
 8003dc4:	d42d      	bmi.n	8003e22 <_printf_common+0xbe>
 8003dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4630      	mov	r0, r6
 8003dce:	47c0      	blx	r8
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d020      	beq.n	8003e16 <_printf_common+0xb2>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	68e5      	ldr	r5, [r4, #12]
 8003dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8003ddc:	f003 0306 	and.w	r3, r3, #6
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	bf08      	it	eq
 8003de4:	1aad      	subeq	r5, r5, r2
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	6922      	ldr	r2, [r4, #16]
 8003dea:	bf0c      	ite	eq
 8003dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df0:	2500      	movne	r5, #0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	bfc4      	itt	gt
 8003df6:	1a9b      	subgt	r3, r3, r2
 8003df8:	18ed      	addgt	r5, r5, r3
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	341a      	adds	r4, #26
 8003e00:	454d      	cmp	r5, r9
 8003e02:	d11a      	bne.n	8003e3a <_printf_common+0xd6>
 8003e04:	2000      	movs	r0, #0
 8003e06:	e008      	b.n	8003e1a <_printf_common+0xb6>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	4630      	mov	r0, r6
 8003e10:	47c0      	blx	r8
 8003e12:	3001      	adds	r0, #1
 8003e14:	d103      	bne.n	8003e1e <_printf_common+0xba>
 8003e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	3501      	adds	r5, #1
 8003e20:	e7c3      	b.n	8003daa <_printf_common+0x46>
 8003e22:	18e1      	adds	r1, r4, r3
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	2030      	movs	r0, #48	; 0x30
 8003e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e2c:	4422      	add	r2, r4
 8003e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e36:	3302      	adds	r3, #2
 8003e38:	e7c5      	b.n	8003dc6 <_printf_common+0x62>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	4639      	mov	r1, r7
 8003e40:	4630      	mov	r0, r6
 8003e42:	47c0      	blx	r8
 8003e44:	3001      	adds	r0, #1
 8003e46:	d0e6      	beq.n	8003e16 <_printf_common+0xb2>
 8003e48:	f109 0901 	add.w	r9, r9, #1
 8003e4c:	e7d8      	b.n	8003e00 <_printf_common+0x9c>
	...

08003e50 <_printf_i>:
 8003e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e58:	460c      	mov	r4, r1
 8003e5a:	7e09      	ldrb	r1, [r1, #24]
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	296e      	cmp	r1, #110	; 0x6e
 8003e60:	4617      	mov	r7, r2
 8003e62:	4606      	mov	r6, r0
 8003e64:	4698      	mov	r8, r3
 8003e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e68:	f000 80b3 	beq.w	8003fd2 <_printf_i+0x182>
 8003e6c:	d822      	bhi.n	8003eb4 <_printf_i+0x64>
 8003e6e:	2963      	cmp	r1, #99	; 0x63
 8003e70:	d036      	beq.n	8003ee0 <_printf_i+0x90>
 8003e72:	d80a      	bhi.n	8003e8a <_printf_i+0x3a>
 8003e74:	2900      	cmp	r1, #0
 8003e76:	f000 80b9 	beq.w	8003fec <_printf_i+0x19c>
 8003e7a:	2958      	cmp	r1, #88	; 0x58
 8003e7c:	f000 8083 	beq.w	8003f86 <_printf_i+0x136>
 8003e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e88:	e032      	b.n	8003ef0 <_printf_i+0xa0>
 8003e8a:	2964      	cmp	r1, #100	; 0x64
 8003e8c:	d001      	beq.n	8003e92 <_printf_i+0x42>
 8003e8e:	2969      	cmp	r1, #105	; 0x69
 8003e90:	d1f6      	bne.n	8003e80 <_printf_i+0x30>
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	0605      	lsls	r5, r0, #24
 8003e98:	f103 0104 	add.w	r1, r3, #4
 8003e9c:	d52a      	bpl.n	8003ef4 <_printf_i+0xa4>
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da03      	bge.n	8003eae <_printf_i+0x5e>
 8003ea6:	222d      	movs	r2, #45	; 0x2d
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003eae:	486f      	ldr	r0, [pc, #444]	; (800406c <_printf_i+0x21c>)
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	e039      	b.n	8003f28 <_printf_i+0xd8>
 8003eb4:	2973      	cmp	r1, #115	; 0x73
 8003eb6:	f000 809d 	beq.w	8003ff4 <_printf_i+0x1a4>
 8003eba:	d808      	bhi.n	8003ece <_printf_i+0x7e>
 8003ebc:	296f      	cmp	r1, #111	; 0x6f
 8003ebe:	d020      	beq.n	8003f02 <_printf_i+0xb2>
 8003ec0:	2970      	cmp	r1, #112	; 0x70
 8003ec2:	d1dd      	bne.n	8003e80 <_printf_i+0x30>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f043 0320 	orr.w	r3, r3, #32
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	e003      	b.n	8003ed6 <_printf_i+0x86>
 8003ece:	2975      	cmp	r1, #117	; 0x75
 8003ed0:	d017      	beq.n	8003f02 <_printf_i+0xb2>
 8003ed2:	2978      	cmp	r1, #120	; 0x78
 8003ed4:	d1d4      	bne.n	8003e80 <_printf_i+0x30>
 8003ed6:	2378      	movs	r3, #120	; 0x78
 8003ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003edc:	4864      	ldr	r0, [pc, #400]	; (8004070 <_printf_i+0x220>)
 8003ede:	e055      	b.n	8003f8c <_printf_i+0x13c>
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	1d19      	adds	r1, r3, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6011      	str	r1, [r2, #0]
 8003ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e08c      	b.n	800400e <_printf_i+0x1be>
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6011      	str	r1, [r2, #0]
 8003ef8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003efc:	bf18      	it	ne
 8003efe:	b21b      	sxthne	r3, r3
 8003f00:	e7cf      	b.n	8003ea2 <_printf_i+0x52>
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	6825      	ldr	r5, [r4, #0]
 8003f06:	1d18      	adds	r0, r3, #4
 8003f08:	6010      	str	r0, [r2, #0]
 8003f0a:	0628      	lsls	r0, r5, #24
 8003f0c:	d501      	bpl.n	8003f12 <_printf_i+0xc2>
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	e002      	b.n	8003f18 <_printf_i+0xc8>
 8003f12:	0668      	lsls	r0, r5, #25
 8003f14:	d5fb      	bpl.n	8003f0e <_printf_i+0xbe>
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	4854      	ldr	r0, [pc, #336]	; (800406c <_printf_i+0x21c>)
 8003f1a:	296f      	cmp	r1, #111	; 0x6f
 8003f1c:	bf14      	ite	ne
 8003f1e:	220a      	movne	r2, #10
 8003f20:	2208      	moveq	r2, #8
 8003f22:	2100      	movs	r1, #0
 8003f24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f28:	6865      	ldr	r5, [r4, #4]
 8003f2a:	60a5      	str	r5, [r4, #8]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	f2c0 8095 	blt.w	800405c <_printf_i+0x20c>
 8003f32:	6821      	ldr	r1, [r4, #0]
 8003f34:	f021 0104 	bic.w	r1, r1, #4
 8003f38:	6021      	str	r1, [r4, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d13d      	bne.n	8003fba <_printf_i+0x16a>
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	f040 808e 	bne.w	8004060 <_printf_i+0x210>
 8003f44:	4665      	mov	r5, ip
 8003f46:	2a08      	cmp	r2, #8
 8003f48:	d10b      	bne.n	8003f62 <_printf_i+0x112>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	07db      	lsls	r3, r3, #31
 8003f4e:	d508      	bpl.n	8003f62 <_printf_i+0x112>
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	6862      	ldr	r2, [r4, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	bfde      	ittt	le
 8003f58:	2330      	movle	r3, #48	; 0x30
 8003f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f62:	ebac 0305 	sub.w	r3, ip, r5
 8003f66:	6123      	str	r3, [r4, #16]
 8003f68:	f8cd 8000 	str.w	r8, [sp]
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	aa03      	add	r2, sp, #12
 8003f70:	4621      	mov	r1, r4
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7ff fef6 	bl	8003d64 <_printf_common>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d14d      	bne.n	8004018 <_printf_i+0x1c8>
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f80:	b005      	add	sp, #20
 8003f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f86:	4839      	ldr	r0, [pc, #228]	; (800406c <_printf_i+0x21c>)
 8003f88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f8c:	6813      	ldr	r3, [r2, #0]
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	1d1d      	adds	r5, r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6015      	str	r5, [r2, #0]
 8003f96:	060a      	lsls	r2, r1, #24
 8003f98:	d50b      	bpl.n	8003fb2 <_printf_i+0x162>
 8003f9a:	07ca      	lsls	r2, r1, #31
 8003f9c:	bf44      	itt	mi
 8003f9e:	f041 0120 	orrmi.w	r1, r1, #32
 8003fa2:	6021      	strmi	r1, [r4, #0]
 8003fa4:	b91b      	cbnz	r3, 8003fae <_printf_i+0x15e>
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	f022 0220 	bic.w	r2, r2, #32
 8003fac:	6022      	str	r2, [r4, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	e7b7      	b.n	8003f22 <_printf_i+0xd2>
 8003fb2:	064d      	lsls	r5, r1, #25
 8003fb4:	bf48      	it	mi
 8003fb6:	b29b      	uxthmi	r3, r3
 8003fb8:	e7ef      	b.n	8003f9a <_printf_i+0x14a>
 8003fba:	4665      	mov	r5, ip
 8003fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fc0:	fb02 3311 	mls	r3, r2, r1, r3
 8003fc4:	5cc3      	ldrb	r3, [r0, r3]
 8003fc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fca:	460b      	mov	r3, r1
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d1f5      	bne.n	8003fbc <_printf_i+0x16c>
 8003fd0:	e7b9      	b.n	8003f46 <_printf_i+0xf6>
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	6825      	ldr	r5, [r4, #0]
 8003fd6:	6961      	ldr	r1, [r4, #20]
 8003fd8:	1d18      	adds	r0, r3, #4
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	0628      	lsls	r0, r5, #24
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	d501      	bpl.n	8003fe6 <_printf_i+0x196>
 8003fe2:	6019      	str	r1, [r3, #0]
 8003fe4:	e002      	b.n	8003fec <_printf_i+0x19c>
 8003fe6:	066a      	lsls	r2, r5, #25
 8003fe8:	d5fb      	bpl.n	8003fe2 <_printf_i+0x192>
 8003fea:	8019      	strh	r1, [r3, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	6123      	str	r3, [r4, #16]
 8003ff0:	4665      	mov	r5, ip
 8003ff2:	e7b9      	b.n	8003f68 <_printf_i+0x118>
 8003ff4:	6813      	ldr	r3, [r2, #0]
 8003ff6:	1d19      	adds	r1, r3, #4
 8003ff8:	6011      	str	r1, [r2, #0]
 8003ffa:	681d      	ldr	r5, [r3, #0]
 8003ffc:	6862      	ldr	r2, [r4, #4]
 8003ffe:	2100      	movs	r1, #0
 8004000:	4628      	mov	r0, r5
 8004002:	f7fc f93d 	bl	8000280 <memchr>
 8004006:	b108      	cbz	r0, 800400c <_printf_i+0x1bc>
 8004008:	1b40      	subs	r0, r0, r5
 800400a:	6060      	str	r0, [r4, #4]
 800400c:	6863      	ldr	r3, [r4, #4]
 800400e:	6123      	str	r3, [r4, #16]
 8004010:	2300      	movs	r3, #0
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004016:	e7a7      	b.n	8003f68 <_printf_i+0x118>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	462a      	mov	r2, r5
 800401c:	4639      	mov	r1, r7
 800401e:	4630      	mov	r0, r6
 8004020:	47c0      	blx	r8
 8004022:	3001      	adds	r0, #1
 8004024:	d0aa      	beq.n	8003f7c <_printf_i+0x12c>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	079b      	lsls	r3, r3, #30
 800402a:	d413      	bmi.n	8004054 <_printf_i+0x204>
 800402c:	68e0      	ldr	r0, [r4, #12]
 800402e:	9b03      	ldr	r3, [sp, #12]
 8004030:	4298      	cmp	r0, r3
 8004032:	bfb8      	it	lt
 8004034:	4618      	movlt	r0, r3
 8004036:	e7a3      	b.n	8003f80 <_printf_i+0x130>
 8004038:	2301      	movs	r3, #1
 800403a:	464a      	mov	r2, r9
 800403c:	4639      	mov	r1, r7
 800403e:	4630      	mov	r0, r6
 8004040:	47c0      	blx	r8
 8004042:	3001      	adds	r0, #1
 8004044:	d09a      	beq.n	8003f7c <_printf_i+0x12c>
 8004046:	3501      	adds	r5, #1
 8004048:	68e3      	ldr	r3, [r4, #12]
 800404a:	9a03      	ldr	r2, [sp, #12]
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	42ab      	cmp	r3, r5
 8004050:	dcf2      	bgt.n	8004038 <_printf_i+0x1e8>
 8004052:	e7eb      	b.n	800402c <_printf_i+0x1dc>
 8004054:	2500      	movs	r5, #0
 8004056:	f104 0919 	add.w	r9, r4, #25
 800405a:	e7f5      	b.n	8004048 <_printf_i+0x1f8>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ac      	bne.n	8003fba <_printf_i+0x16a>
 8004060:	7803      	ldrb	r3, [r0, #0]
 8004062:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004066:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800406a:	e76c      	b.n	8003f46 <_printf_i+0xf6>
 800406c:	0800863a 	.word	0x0800863a
 8004070:	0800864b 	.word	0x0800864b

08004074 <_scanf_float>:
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	469a      	mov	sl, r3
 800407a:	688b      	ldr	r3, [r1, #8]
 800407c:	4616      	mov	r6, r2
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004084:	b087      	sub	sp, #28
 8004086:	bf83      	ittte	hi
 8004088:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800408c:	189b      	addhi	r3, r3, r2
 800408e:	9301      	strhi	r3, [sp, #4]
 8004090:	2300      	movls	r3, #0
 8004092:	bf86      	itte	hi
 8004094:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004098:	608b      	strhi	r3, [r1, #8]
 800409a:	9301      	strls	r3, [sp, #4]
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	4688      	mov	r8, r1
 80040a0:	f04f 0b00 	mov.w	fp, #0
 80040a4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80040a8:	f848 3b1c 	str.w	r3, [r8], #28
 80040ac:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80040b0:	4607      	mov	r7, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4645      	mov	r5, r8
 80040b6:	465a      	mov	r2, fp
 80040b8:	46d9      	mov	r9, fp
 80040ba:	f8cd b008 	str.w	fp, [sp, #8]
 80040be:	68a1      	ldr	r1, [r4, #8]
 80040c0:	b181      	cbz	r1, 80040e4 <_scanf_float+0x70>
 80040c2:	6833      	ldr	r3, [r6, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b49      	cmp	r3, #73	; 0x49
 80040c8:	d071      	beq.n	80041ae <_scanf_float+0x13a>
 80040ca:	d84d      	bhi.n	8004168 <_scanf_float+0xf4>
 80040cc:	2b39      	cmp	r3, #57	; 0x39
 80040ce:	d840      	bhi.n	8004152 <_scanf_float+0xde>
 80040d0:	2b31      	cmp	r3, #49	; 0x31
 80040d2:	f080 8088 	bcs.w	80041e6 <_scanf_float+0x172>
 80040d6:	2b2d      	cmp	r3, #45	; 0x2d
 80040d8:	f000 8090 	beq.w	80041fc <_scanf_float+0x188>
 80040dc:	d815      	bhi.n	800410a <_scanf_float+0x96>
 80040de:	2b2b      	cmp	r3, #43	; 0x2b
 80040e0:	f000 808c 	beq.w	80041fc <_scanf_float+0x188>
 80040e4:	f1b9 0f00 	cmp.w	r9, #0
 80040e8:	d003      	beq.n	80040f2 <_scanf_float+0x7e>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	3a01      	subs	r2, #1
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	f200 80ea 	bhi.w	80042ce <_scanf_float+0x25a>
 80040fa:	4545      	cmp	r5, r8
 80040fc:	f200 80dc 	bhi.w	80042b8 <_scanf_float+0x244>
 8004100:	2601      	movs	r6, #1
 8004102:	4630      	mov	r0, r6
 8004104:	b007      	add	sp, #28
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	2b2e      	cmp	r3, #46	; 0x2e
 800410c:	f000 809f 	beq.w	800424e <_scanf_float+0x1da>
 8004110:	2b30      	cmp	r3, #48	; 0x30
 8004112:	d1e7      	bne.n	80040e4 <_scanf_float+0x70>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	f410 7f80 	tst.w	r0, #256	; 0x100
 800411a:	d064      	beq.n	80041e6 <_scanf_float+0x172>
 800411c:	9b01      	ldr	r3, [sp, #4]
 800411e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004122:	6020      	str	r0, [r4, #0]
 8004124:	f109 0901 	add.w	r9, r9, #1
 8004128:	b11b      	cbz	r3, 8004132 <_scanf_float+0xbe>
 800412a:	3b01      	subs	r3, #1
 800412c:	3101      	adds	r1, #1
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	60a1      	str	r1, [r4, #8]
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	3b01      	subs	r3, #1
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	3301      	adds	r3, #1
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	6873      	ldr	r3, [r6, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	6073      	str	r3, [r6, #4]
 8004146:	f340 80ac 	ble.w	80042a2 <_scanf_float+0x22e>
 800414a:	6833      	ldr	r3, [r6, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	e7b5      	b.n	80040be <_scanf_float+0x4a>
 8004152:	2b45      	cmp	r3, #69	; 0x45
 8004154:	f000 8085 	beq.w	8004262 <_scanf_float+0x1ee>
 8004158:	2b46      	cmp	r3, #70	; 0x46
 800415a:	d06a      	beq.n	8004232 <_scanf_float+0x1be>
 800415c:	2b41      	cmp	r3, #65	; 0x41
 800415e:	d1c1      	bne.n	80040e4 <_scanf_float+0x70>
 8004160:	2a01      	cmp	r2, #1
 8004162:	d1bf      	bne.n	80040e4 <_scanf_float+0x70>
 8004164:	2202      	movs	r2, #2
 8004166:	e046      	b.n	80041f6 <_scanf_float+0x182>
 8004168:	2b65      	cmp	r3, #101	; 0x65
 800416a:	d07a      	beq.n	8004262 <_scanf_float+0x1ee>
 800416c:	d818      	bhi.n	80041a0 <_scanf_float+0x12c>
 800416e:	2b54      	cmp	r3, #84	; 0x54
 8004170:	d066      	beq.n	8004240 <_scanf_float+0x1cc>
 8004172:	d811      	bhi.n	8004198 <_scanf_float+0x124>
 8004174:	2b4e      	cmp	r3, #78	; 0x4e
 8004176:	d1b5      	bne.n	80040e4 <_scanf_float+0x70>
 8004178:	2a00      	cmp	r2, #0
 800417a:	d146      	bne.n	800420a <_scanf_float+0x196>
 800417c:	f1b9 0f00 	cmp.w	r9, #0
 8004180:	d145      	bne.n	800420e <_scanf_float+0x19a>
 8004182:	6821      	ldr	r1, [r4, #0]
 8004184:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004188:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800418c:	d13f      	bne.n	800420e <_scanf_float+0x19a>
 800418e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004192:	6021      	str	r1, [r4, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	e02e      	b.n	80041f6 <_scanf_float+0x182>
 8004198:	2b59      	cmp	r3, #89	; 0x59
 800419a:	d01e      	beq.n	80041da <_scanf_float+0x166>
 800419c:	2b61      	cmp	r3, #97	; 0x61
 800419e:	e7de      	b.n	800415e <_scanf_float+0xea>
 80041a0:	2b6e      	cmp	r3, #110	; 0x6e
 80041a2:	d0e9      	beq.n	8004178 <_scanf_float+0x104>
 80041a4:	d815      	bhi.n	80041d2 <_scanf_float+0x15e>
 80041a6:	2b66      	cmp	r3, #102	; 0x66
 80041a8:	d043      	beq.n	8004232 <_scanf_float+0x1be>
 80041aa:	2b69      	cmp	r3, #105	; 0x69
 80041ac:	d19a      	bne.n	80040e4 <_scanf_float+0x70>
 80041ae:	f1bb 0f00 	cmp.w	fp, #0
 80041b2:	d138      	bne.n	8004226 <_scanf_float+0x1b2>
 80041b4:	f1b9 0f00 	cmp.w	r9, #0
 80041b8:	d197      	bne.n	80040ea <_scanf_float+0x76>
 80041ba:	6821      	ldr	r1, [r4, #0]
 80041bc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80041c0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80041c4:	d195      	bne.n	80040f2 <_scanf_float+0x7e>
 80041c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80041ca:	6021      	str	r1, [r4, #0]
 80041cc:	f04f 0b01 	mov.w	fp, #1
 80041d0:	e011      	b.n	80041f6 <_scanf_float+0x182>
 80041d2:	2b74      	cmp	r3, #116	; 0x74
 80041d4:	d034      	beq.n	8004240 <_scanf_float+0x1cc>
 80041d6:	2b79      	cmp	r3, #121	; 0x79
 80041d8:	d184      	bne.n	80040e4 <_scanf_float+0x70>
 80041da:	f1bb 0f07 	cmp.w	fp, #7
 80041de:	d181      	bne.n	80040e4 <_scanf_float+0x70>
 80041e0:	f04f 0b08 	mov.w	fp, #8
 80041e4:	e007      	b.n	80041f6 <_scanf_float+0x182>
 80041e6:	eb12 0f0b 	cmn.w	r2, fp
 80041ea:	f47f af7b 	bne.w	80040e4 <_scanf_float+0x70>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80041f4:	6021      	str	r1, [r4, #0]
 80041f6:	702b      	strb	r3, [r5, #0]
 80041f8:	3501      	adds	r5, #1
 80041fa:	e79a      	b.n	8004132 <_scanf_float+0xbe>
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	0608      	lsls	r0, r1, #24
 8004200:	f57f af70 	bpl.w	80040e4 <_scanf_float+0x70>
 8004204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004208:	e7f4      	b.n	80041f4 <_scanf_float+0x180>
 800420a:	2a02      	cmp	r2, #2
 800420c:	d047      	beq.n	800429e <_scanf_float+0x22a>
 800420e:	f1bb 0f01 	cmp.w	fp, #1
 8004212:	d003      	beq.n	800421c <_scanf_float+0x1a8>
 8004214:	f1bb 0f04 	cmp.w	fp, #4
 8004218:	f47f af64 	bne.w	80040e4 <_scanf_float+0x70>
 800421c:	f10b 0b01 	add.w	fp, fp, #1
 8004220:	fa5f fb8b 	uxtb.w	fp, fp
 8004224:	e7e7      	b.n	80041f6 <_scanf_float+0x182>
 8004226:	f1bb 0f03 	cmp.w	fp, #3
 800422a:	d0f7      	beq.n	800421c <_scanf_float+0x1a8>
 800422c:	f1bb 0f05 	cmp.w	fp, #5
 8004230:	e7f2      	b.n	8004218 <_scanf_float+0x1a4>
 8004232:	f1bb 0f02 	cmp.w	fp, #2
 8004236:	f47f af55 	bne.w	80040e4 <_scanf_float+0x70>
 800423a:	f04f 0b03 	mov.w	fp, #3
 800423e:	e7da      	b.n	80041f6 <_scanf_float+0x182>
 8004240:	f1bb 0f06 	cmp.w	fp, #6
 8004244:	f47f af4e 	bne.w	80040e4 <_scanf_float+0x70>
 8004248:	f04f 0b07 	mov.w	fp, #7
 800424c:	e7d3      	b.n	80041f6 <_scanf_float+0x182>
 800424e:	6821      	ldr	r1, [r4, #0]
 8004250:	0588      	lsls	r0, r1, #22
 8004252:	f57f af47 	bpl.w	80040e4 <_scanf_float+0x70>
 8004256:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800425a:	6021      	str	r1, [r4, #0]
 800425c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004260:	e7c9      	b.n	80041f6 <_scanf_float+0x182>
 8004262:	6821      	ldr	r1, [r4, #0]
 8004264:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004268:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800426c:	d006      	beq.n	800427c <_scanf_float+0x208>
 800426e:	0548      	lsls	r0, r1, #21
 8004270:	f57f af38 	bpl.w	80040e4 <_scanf_float+0x70>
 8004274:	f1b9 0f00 	cmp.w	r9, #0
 8004278:	f43f af3b 	beq.w	80040f2 <_scanf_float+0x7e>
 800427c:	0588      	lsls	r0, r1, #22
 800427e:	bf58      	it	pl
 8004280:	9802      	ldrpl	r0, [sp, #8]
 8004282:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004286:	bf58      	it	pl
 8004288:	eba9 0000 	subpl.w	r0, r9, r0
 800428c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004290:	bf58      	it	pl
 8004292:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004296:	6021      	str	r1, [r4, #0]
 8004298:	f04f 0900 	mov.w	r9, #0
 800429c:	e7ab      	b.n	80041f6 <_scanf_float+0x182>
 800429e:	2203      	movs	r2, #3
 80042a0:	e7a9      	b.n	80041f6 <_scanf_float+0x182>
 80042a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042a6:	9205      	str	r2, [sp, #20]
 80042a8:	4631      	mov	r1, r6
 80042aa:	4638      	mov	r0, r7
 80042ac:	4798      	blx	r3
 80042ae:	9a05      	ldr	r2, [sp, #20]
 80042b0:	2800      	cmp	r0, #0
 80042b2:	f43f af04 	beq.w	80040be <_scanf_float+0x4a>
 80042b6:	e715      	b.n	80040e4 <_scanf_float+0x70>
 80042b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042c0:	4632      	mov	r2, r6
 80042c2:	4638      	mov	r0, r7
 80042c4:	4798      	blx	r3
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	e715      	b.n	80040fa <_scanf_float+0x86>
 80042ce:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d80a      	bhi.n	80042ec <_scanf_float+0x278>
 80042d6:	f1bb 0f02 	cmp.w	fp, #2
 80042da:	d968      	bls.n	80043ae <_scanf_float+0x33a>
 80042dc:	f1ab 0b03 	sub.w	fp, fp, #3
 80042e0:	fa5f fb8b 	uxtb.w	fp, fp
 80042e4:	eba5 0b0b 	sub.w	fp, r5, fp
 80042e8:	455d      	cmp	r5, fp
 80042ea:	d14b      	bne.n	8004384 <_scanf_float+0x310>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	05da      	lsls	r2, r3, #23
 80042f0:	d51f      	bpl.n	8004332 <_scanf_float+0x2be>
 80042f2:	055b      	lsls	r3, r3, #21
 80042f4:	d468      	bmi.n	80043c8 <_scanf_float+0x354>
 80042f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	2965      	cmp	r1, #101	; 0x65
 80042fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004302:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	d00d      	beq.n	8004326 <_scanf_float+0x2b2>
 800430a:	2945      	cmp	r1, #69	; 0x45
 800430c:	d00b      	beq.n	8004326 <_scanf_float+0x2b2>
 800430e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004312:	4632      	mov	r2, r6
 8004314:	4638      	mov	r0, r7
 8004316:	4798      	blx	r3
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800431e:	3b01      	subs	r3, #1
 8004320:	f1a5 0b02 	sub.w	fp, r5, #2
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800432a:	4632      	mov	r2, r6
 800432c:	4638      	mov	r0, r7
 800432e:	4798      	blx	r3
 8004330:	465d      	mov	r5, fp
 8004332:	6826      	ldr	r6, [r4, #0]
 8004334:	f016 0610 	ands.w	r6, r6, #16
 8004338:	d17a      	bne.n	8004430 <_scanf_float+0x3bc>
 800433a:	702e      	strb	r6, [r5, #0]
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d142      	bne.n	80043ce <_scanf_float+0x35a>
 8004348:	9b02      	ldr	r3, [sp, #8]
 800434a:	eba9 0303 	sub.w	r3, r9, r3
 800434e:	425a      	negs	r2, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d149      	bne.n	80043e8 <_scanf_float+0x374>
 8004354:	2200      	movs	r2, #0
 8004356:	4641      	mov	r1, r8
 8004358:	4638      	mov	r0, r7
 800435a:	f000 fea5 	bl	80050a8 <_strtod_r>
 800435e:	6825      	ldr	r5, [r4, #0]
 8004360:	f8da 3000 	ldr.w	r3, [sl]
 8004364:	f015 0f02 	tst.w	r5, #2
 8004368:	f103 0204 	add.w	r2, r3, #4
 800436c:	ec59 8b10 	vmov	r8, r9, d0
 8004370:	f8ca 2000 	str.w	r2, [sl]
 8004374:	d043      	beq.n	80043fe <_scanf_float+0x38a>
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	e9c3 8900 	strd	r8, r9, [r3]
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60e3      	str	r3, [r4, #12]
 8004382:	e6be      	b.n	8004102 <_scanf_float+0x8e>
 8004384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004388:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800438c:	4632      	mov	r2, r6
 800438e:	4638      	mov	r0, r7
 8004390:	4798      	blx	r3
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	3b01      	subs	r3, #1
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	e7a6      	b.n	80042e8 <_scanf_float+0x274>
 800439a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800439e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043a2:	4632      	mov	r2, r6
 80043a4:	4638      	mov	r0, r7
 80043a6:	4798      	blx	r3
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	4545      	cmp	r5, r8
 80043b0:	d8f3      	bhi.n	800439a <_scanf_float+0x326>
 80043b2:	e6a5      	b.n	8004100 <_scanf_float+0x8c>
 80043b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043bc:	4632      	mov	r2, r6
 80043be:	4638      	mov	r0, r7
 80043c0:	4798      	blx	r3
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	4545      	cmp	r5, r8
 80043ca:	d8f3      	bhi.n	80043b4 <_scanf_float+0x340>
 80043cc:	e698      	b.n	8004100 <_scanf_float+0x8c>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0bf      	beq.n	8004354 <_scanf_float+0x2e0>
 80043d4:	9904      	ldr	r1, [sp, #16]
 80043d6:	230a      	movs	r3, #10
 80043d8:	4632      	mov	r2, r6
 80043da:	3101      	adds	r1, #1
 80043dc:	4638      	mov	r0, r7
 80043de:	f000 feef 	bl	80051c0 <_strtol_r>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	9d04      	ldr	r5, [sp, #16]
 80043e6:	1ac2      	subs	r2, r0, r3
 80043e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80043ec:	429d      	cmp	r5, r3
 80043ee:	bf28      	it	cs
 80043f0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80043f4:	490f      	ldr	r1, [pc, #60]	; (8004434 <_scanf_float+0x3c0>)
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 f824 	bl	8004444 <siprintf>
 80043fc:	e7aa      	b.n	8004354 <_scanf_float+0x2e0>
 80043fe:	f015 0504 	ands.w	r5, r5, #4
 8004402:	d1b8      	bne.n	8004376 <_scanf_float+0x302>
 8004404:	681f      	ldr	r7, [r3, #0]
 8004406:	ee10 2a10 	vmov	r2, s0
 800440a:	464b      	mov	r3, r9
 800440c:	ee10 0a10 	vmov	r0, s0
 8004410:	4649      	mov	r1, r9
 8004412:	f7fc fbdb 	bl	8000bcc <__aeabi_dcmpun>
 8004416:	b128      	cbz	r0, 8004424 <_scanf_float+0x3b0>
 8004418:	4628      	mov	r0, r5
 800441a:	f000 f80d 	bl	8004438 <nanf>
 800441e:	ed87 0a00 	vstr	s0, [r7]
 8004422:	e7ab      	b.n	800437c <_scanf_float+0x308>
 8004424:	4640      	mov	r0, r8
 8004426:	4649      	mov	r1, r9
 8004428:	f7fc fc2e 	bl	8000c88 <__aeabi_d2f>
 800442c:	6038      	str	r0, [r7, #0]
 800442e:	e7a5      	b.n	800437c <_scanf_float+0x308>
 8004430:	2600      	movs	r6, #0
 8004432:	e666      	b.n	8004102 <_scanf_float+0x8e>
 8004434:	0800865c 	.word	0x0800865c

08004438 <nanf>:
 8004438:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004440 <nanf+0x8>
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	7fc00000 	.word	0x7fc00000

08004444 <siprintf>:
 8004444:	b40e      	push	{r1, r2, r3}
 8004446:	b500      	push	{lr}
 8004448:	b09c      	sub	sp, #112	; 0x70
 800444a:	ab1d      	add	r3, sp, #116	; 0x74
 800444c:	9002      	str	r0, [sp, #8]
 800444e:	9006      	str	r0, [sp, #24]
 8004450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004454:	4809      	ldr	r0, [pc, #36]	; (800447c <siprintf+0x38>)
 8004456:	9107      	str	r1, [sp, #28]
 8004458:	9104      	str	r1, [sp, #16]
 800445a:	4909      	ldr	r1, [pc, #36]	; (8004480 <siprintf+0x3c>)
 800445c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004460:	9105      	str	r1, [sp, #20]
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	a902      	add	r1, sp, #8
 8004468:	f002 fd6a 	bl	8006f40 <_svfiprintf_r>
 800446c:	9b02      	ldr	r3, [sp, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	b01c      	add	sp, #112	; 0x70
 8004474:	f85d eb04 	ldr.w	lr, [sp], #4
 8004478:	b003      	add	sp, #12
 800447a:	4770      	bx	lr
 800447c:	2000000c 	.word	0x2000000c
 8004480:	ffff0208 	.word	0xffff0208

08004484 <sulp>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	460d      	mov	r5, r1
 800448a:	ec45 4b10 	vmov	d0, r4, r5
 800448e:	4616      	mov	r6, r2
 8004490:	f002 fb12 	bl	8006ab8 <__ulp>
 8004494:	ec51 0b10 	vmov	r0, r1, d0
 8004498:	b17e      	cbz	r6, 80044ba <sulp+0x36>
 800449a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800449e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dd09      	ble.n	80044ba <sulp+0x36>
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80044ac:	2400      	movs	r4, #0
 80044ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	f7fc f8ef 	bl	8000698 <__aeabi_dmul>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	0000      	movs	r0, r0
	...

080044c0 <_strtod_l>:
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	461f      	mov	r7, r3
 80044c6:	b0a1      	sub	sp, #132	; 0x84
 80044c8:	2300      	movs	r3, #0
 80044ca:	4681      	mov	r9, r0
 80044cc:	4638      	mov	r0, r7
 80044ce:	460e      	mov	r6, r1
 80044d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80044d2:	931c      	str	r3, [sp, #112]	; 0x70
 80044d4:	f001 fff9 	bl	80064ca <__localeconv_l>
 80044d8:	4680      	mov	r8, r0
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	f7fb fec4 	bl	8000268 <strlen>
 80044e0:	f04f 0a00 	mov.w	sl, #0
 80044e4:	4604      	mov	r4, r0
 80044e6:	f04f 0b00 	mov.w	fp, #0
 80044ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80044ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	2a0d      	cmp	r2, #13
 80044f2:	d832      	bhi.n	800455a <_strtod_l+0x9a>
 80044f4:	2a09      	cmp	r2, #9
 80044f6:	d236      	bcs.n	8004566 <_strtod_l+0xa6>
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d03e      	beq.n	800457a <_strtod_l+0xba>
 80044fc:	2300      	movs	r3, #0
 80044fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004500:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004502:	782b      	ldrb	r3, [r5, #0]
 8004504:	2b30      	cmp	r3, #48	; 0x30
 8004506:	f040 80ac 	bne.w	8004662 <_strtod_l+0x1a2>
 800450a:	786b      	ldrb	r3, [r5, #1]
 800450c:	2b58      	cmp	r3, #88	; 0x58
 800450e:	d001      	beq.n	8004514 <_strtod_l+0x54>
 8004510:	2b78      	cmp	r3, #120	; 0x78
 8004512:	d167      	bne.n	80045e4 <_strtod_l+0x124>
 8004514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	ab1c      	add	r3, sp, #112	; 0x70
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	9702      	str	r7, [sp, #8]
 800451e:	ab1d      	add	r3, sp, #116	; 0x74
 8004520:	4a88      	ldr	r2, [pc, #544]	; (8004744 <_strtod_l+0x284>)
 8004522:	a91b      	add	r1, sp, #108	; 0x6c
 8004524:	4648      	mov	r0, r9
 8004526:	f001 fcf6 	bl	8005f16 <__gethex>
 800452a:	f010 0407 	ands.w	r4, r0, #7
 800452e:	4606      	mov	r6, r0
 8004530:	d005      	beq.n	800453e <_strtod_l+0x7e>
 8004532:	2c06      	cmp	r4, #6
 8004534:	d12b      	bne.n	800458e <_strtod_l+0xce>
 8004536:	3501      	adds	r5, #1
 8004538:	2300      	movs	r3, #0
 800453a:	951b      	str	r5, [sp, #108]	; 0x6c
 800453c:	930d      	str	r3, [sp, #52]	; 0x34
 800453e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 859a 	bne.w	800507a <_strtod_l+0xbba>
 8004546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004548:	b1e3      	cbz	r3, 8004584 <_strtod_l+0xc4>
 800454a:	4652      	mov	r2, sl
 800454c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004550:	ec43 2b10 	vmov	d0, r2, r3
 8004554:	b021      	add	sp, #132	; 0x84
 8004556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455a:	2a2b      	cmp	r2, #43	; 0x2b
 800455c:	d015      	beq.n	800458a <_strtod_l+0xca>
 800455e:	2a2d      	cmp	r2, #45	; 0x2d
 8004560:	d004      	beq.n	800456c <_strtod_l+0xac>
 8004562:	2a20      	cmp	r2, #32
 8004564:	d1ca      	bne.n	80044fc <_strtod_l+0x3c>
 8004566:	3301      	adds	r3, #1
 8004568:	931b      	str	r3, [sp, #108]	; 0x6c
 800456a:	e7bf      	b.n	80044ec <_strtod_l+0x2c>
 800456c:	2201      	movs	r2, #1
 800456e:	920d      	str	r2, [sp, #52]	; 0x34
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	921b      	str	r2, [sp, #108]	; 0x6c
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1c2      	bne.n	8004500 <_strtod_l+0x40>
 800457a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800457c:	961b      	str	r6, [sp, #108]	; 0x6c
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 8579 	bne.w	8005076 <_strtod_l+0xbb6>
 8004584:	4652      	mov	r2, sl
 8004586:	465b      	mov	r3, fp
 8004588:	e7e2      	b.n	8004550 <_strtod_l+0x90>
 800458a:	2200      	movs	r2, #0
 800458c:	e7ef      	b.n	800456e <_strtod_l+0xae>
 800458e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004590:	b13a      	cbz	r2, 80045a2 <_strtod_l+0xe2>
 8004592:	2135      	movs	r1, #53	; 0x35
 8004594:	a81e      	add	r0, sp, #120	; 0x78
 8004596:	f002 fb87 	bl	8006ca8 <__copybits>
 800459a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800459c:	4648      	mov	r0, r9
 800459e:	f001 fff3 	bl	8006588 <_Bfree>
 80045a2:	3c01      	subs	r4, #1
 80045a4:	2c04      	cmp	r4, #4
 80045a6:	d806      	bhi.n	80045b6 <_strtod_l+0xf6>
 80045a8:	e8df f004 	tbb	[pc, r4]
 80045ac:	1714030a 	.word	0x1714030a
 80045b0:	0a          	.byte	0x0a
 80045b1:	00          	.byte	0x00
 80045b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80045b6:	0730      	lsls	r0, r6, #28
 80045b8:	d5c1      	bpl.n	800453e <_strtod_l+0x7e>
 80045ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80045be:	e7be      	b.n	800453e <_strtod_l+0x7e>
 80045c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80045c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80045c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80045ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80045d2:	e7f0      	b.n	80045b6 <_strtod_l+0xf6>
 80045d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004748 <_strtod_l+0x288>
 80045d8:	e7ed      	b.n	80045b6 <_strtod_l+0xf6>
 80045da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80045de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80045e2:	e7e8      	b.n	80045b6 <_strtod_l+0xf6>
 80045e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	2b30      	cmp	r3, #48	; 0x30
 80045ee:	d0f9      	beq.n	80045e4 <_strtod_l+0x124>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0a4      	beq.n	800453e <_strtod_l+0x7e>
 80045f4:	2301      	movs	r3, #1
 80045f6:	2500      	movs	r5, #0
 80045f8:	9306      	str	r3, [sp, #24]
 80045fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045fc:	9308      	str	r3, [sp, #32]
 80045fe:	9507      	str	r5, [sp, #28]
 8004600:	9505      	str	r5, [sp, #20]
 8004602:	220a      	movs	r2, #10
 8004604:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004606:	7807      	ldrb	r7, [r0, #0]
 8004608:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800460c:	b2d9      	uxtb	r1, r3
 800460e:	2909      	cmp	r1, #9
 8004610:	d929      	bls.n	8004666 <_strtod_l+0x1a6>
 8004612:	4622      	mov	r2, r4
 8004614:	f8d8 1000 	ldr.w	r1, [r8]
 8004618:	f002 fd9a 	bl	8007150 <strncmp>
 800461c:	2800      	cmp	r0, #0
 800461e:	d031      	beq.n	8004684 <_strtod_l+0x1c4>
 8004620:	2000      	movs	r0, #0
 8004622:	9c05      	ldr	r4, [sp, #20]
 8004624:	9004      	str	r0, [sp, #16]
 8004626:	463b      	mov	r3, r7
 8004628:	4602      	mov	r2, r0
 800462a:	2b65      	cmp	r3, #101	; 0x65
 800462c:	d001      	beq.n	8004632 <_strtod_l+0x172>
 800462e:	2b45      	cmp	r3, #69	; 0x45
 8004630:	d114      	bne.n	800465c <_strtod_l+0x19c>
 8004632:	b924      	cbnz	r4, 800463e <_strtod_l+0x17e>
 8004634:	b910      	cbnz	r0, 800463c <_strtod_l+0x17c>
 8004636:	9b06      	ldr	r3, [sp, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d09e      	beq.n	800457a <_strtod_l+0xba>
 800463c:	2400      	movs	r4, #0
 800463e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004640:	1c73      	adds	r3, r6, #1
 8004642:	931b      	str	r3, [sp, #108]	; 0x6c
 8004644:	7873      	ldrb	r3, [r6, #1]
 8004646:	2b2b      	cmp	r3, #43	; 0x2b
 8004648:	d078      	beq.n	800473c <_strtod_l+0x27c>
 800464a:	2b2d      	cmp	r3, #45	; 0x2d
 800464c:	d070      	beq.n	8004730 <_strtod_l+0x270>
 800464e:	f04f 0c00 	mov.w	ip, #0
 8004652:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004656:	2f09      	cmp	r7, #9
 8004658:	d97c      	bls.n	8004754 <_strtod_l+0x294>
 800465a:	961b      	str	r6, [sp, #108]	; 0x6c
 800465c:	f04f 0e00 	mov.w	lr, #0
 8004660:	e09a      	b.n	8004798 <_strtod_l+0x2d8>
 8004662:	2300      	movs	r3, #0
 8004664:	e7c7      	b.n	80045f6 <_strtod_l+0x136>
 8004666:	9905      	ldr	r1, [sp, #20]
 8004668:	2908      	cmp	r1, #8
 800466a:	bfdd      	ittte	le
 800466c:	9907      	ldrle	r1, [sp, #28]
 800466e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004672:	9307      	strle	r3, [sp, #28]
 8004674:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004678:	9b05      	ldr	r3, [sp, #20]
 800467a:	3001      	adds	r0, #1
 800467c:	3301      	adds	r3, #1
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	901b      	str	r0, [sp, #108]	; 0x6c
 8004682:	e7bf      	b.n	8004604 <_strtod_l+0x144>
 8004684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004686:	191a      	adds	r2, r3, r4
 8004688:	921b      	str	r2, [sp, #108]	; 0x6c
 800468a:	9a05      	ldr	r2, [sp, #20]
 800468c:	5d1b      	ldrb	r3, [r3, r4]
 800468e:	2a00      	cmp	r2, #0
 8004690:	d037      	beq.n	8004702 <_strtod_l+0x242>
 8004692:	9c05      	ldr	r4, [sp, #20]
 8004694:	4602      	mov	r2, r0
 8004696:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800469a:	2909      	cmp	r1, #9
 800469c:	d913      	bls.n	80046c6 <_strtod_l+0x206>
 800469e:	2101      	movs	r1, #1
 80046a0:	9104      	str	r1, [sp, #16]
 80046a2:	e7c2      	b.n	800462a <_strtod_l+0x16a>
 80046a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	3001      	adds	r0, #1
 80046ae:	2b30      	cmp	r3, #48	; 0x30
 80046b0:	d0f8      	beq.n	80046a4 <_strtod_l+0x1e4>
 80046b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80046b6:	2a08      	cmp	r2, #8
 80046b8:	f200 84e4 	bhi.w	8005084 <_strtod_l+0xbc4>
 80046bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80046be:	9208      	str	r2, [sp, #32]
 80046c0:	4602      	mov	r2, r0
 80046c2:	2000      	movs	r0, #0
 80046c4:	4604      	mov	r4, r0
 80046c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80046ca:	f100 0101 	add.w	r1, r0, #1
 80046ce:	d012      	beq.n	80046f6 <_strtod_l+0x236>
 80046d0:	440a      	add	r2, r1
 80046d2:	eb00 0c04 	add.w	ip, r0, r4
 80046d6:	4621      	mov	r1, r4
 80046d8:	270a      	movs	r7, #10
 80046da:	458c      	cmp	ip, r1
 80046dc:	d113      	bne.n	8004706 <_strtod_l+0x246>
 80046de:	1821      	adds	r1, r4, r0
 80046e0:	2908      	cmp	r1, #8
 80046e2:	f104 0401 	add.w	r4, r4, #1
 80046e6:	4404      	add	r4, r0
 80046e8:	dc19      	bgt.n	800471e <_strtod_l+0x25e>
 80046ea:	9b07      	ldr	r3, [sp, #28]
 80046ec:	210a      	movs	r1, #10
 80046ee:	fb01 e303 	mla	r3, r1, r3, lr
 80046f2:	9307      	str	r3, [sp, #28]
 80046f4:	2100      	movs	r1, #0
 80046f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046f8:	1c58      	adds	r0, r3, #1
 80046fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	4608      	mov	r0, r1
 8004700:	e7c9      	b.n	8004696 <_strtod_l+0x1d6>
 8004702:	9805      	ldr	r0, [sp, #20]
 8004704:	e7d3      	b.n	80046ae <_strtod_l+0x1ee>
 8004706:	2908      	cmp	r1, #8
 8004708:	f101 0101 	add.w	r1, r1, #1
 800470c:	dc03      	bgt.n	8004716 <_strtod_l+0x256>
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	437b      	muls	r3, r7
 8004712:	9307      	str	r3, [sp, #28]
 8004714:	e7e1      	b.n	80046da <_strtod_l+0x21a>
 8004716:	2910      	cmp	r1, #16
 8004718:	bfd8      	it	le
 800471a:	437d      	mulle	r5, r7
 800471c:	e7dd      	b.n	80046da <_strtod_l+0x21a>
 800471e:	2c10      	cmp	r4, #16
 8004720:	bfdc      	itt	le
 8004722:	210a      	movle	r1, #10
 8004724:	fb01 e505 	mlale	r5, r1, r5, lr
 8004728:	e7e4      	b.n	80046f4 <_strtod_l+0x234>
 800472a:	2301      	movs	r3, #1
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	e781      	b.n	8004634 <_strtod_l+0x174>
 8004730:	f04f 0c01 	mov.w	ip, #1
 8004734:	1cb3      	adds	r3, r6, #2
 8004736:	931b      	str	r3, [sp, #108]	; 0x6c
 8004738:	78b3      	ldrb	r3, [r6, #2]
 800473a:	e78a      	b.n	8004652 <_strtod_l+0x192>
 800473c:	f04f 0c00 	mov.w	ip, #0
 8004740:	e7f8      	b.n	8004734 <_strtod_l+0x274>
 8004742:	bf00      	nop
 8004744:	08008664 	.word	0x08008664
 8004748:	7ff00000 	.word	0x7ff00000
 800474c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800474e:	1c5f      	adds	r7, r3, #1
 8004750:	971b      	str	r7, [sp, #108]	; 0x6c
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b30      	cmp	r3, #48	; 0x30
 8004756:	d0f9      	beq.n	800474c <_strtod_l+0x28c>
 8004758:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800475c:	2f08      	cmp	r7, #8
 800475e:	f63f af7d 	bhi.w	800465c <_strtod_l+0x19c>
 8004762:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004768:	930a      	str	r3, [sp, #40]	; 0x28
 800476a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800476c:	1c5f      	adds	r7, r3, #1
 800476e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004776:	f1b8 0f09 	cmp.w	r8, #9
 800477a:	d937      	bls.n	80047ec <_strtod_l+0x32c>
 800477c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800477e:	1a7f      	subs	r7, r7, r1
 8004780:	2f08      	cmp	r7, #8
 8004782:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004786:	dc37      	bgt.n	80047f8 <_strtod_l+0x338>
 8004788:	45be      	cmp	lr, r7
 800478a:	bfa8      	it	ge
 800478c:	46be      	movge	lr, r7
 800478e:	f1bc 0f00 	cmp.w	ip, #0
 8004792:	d001      	beq.n	8004798 <_strtod_l+0x2d8>
 8004794:	f1ce 0e00 	rsb	lr, lr, #0
 8004798:	2c00      	cmp	r4, #0
 800479a:	d151      	bne.n	8004840 <_strtod_l+0x380>
 800479c:	2800      	cmp	r0, #0
 800479e:	f47f aece 	bne.w	800453e <_strtod_l+0x7e>
 80047a2:	9a06      	ldr	r2, [sp, #24]
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	f47f aeca 	bne.w	800453e <_strtod_l+0x7e>
 80047aa:	9a04      	ldr	r2, [sp, #16]
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	f47f aee4 	bne.w	800457a <_strtod_l+0xba>
 80047b2:	2b4e      	cmp	r3, #78	; 0x4e
 80047b4:	d027      	beq.n	8004806 <_strtod_l+0x346>
 80047b6:	dc21      	bgt.n	80047fc <_strtod_l+0x33c>
 80047b8:	2b49      	cmp	r3, #73	; 0x49
 80047ba:	f47f aede 	bne.w	800457a <_strtod_l+0xba>
 80047be:	49a0      	ldr	r1, [pc, #640]	; (8004a40 <_strtod_l+0x580>)
 80047c0:	a81b      	add	r0, sp, #108	; 0x6c
 80047c2:	f001 fddb 	bl	800637c <__match>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43f aed7 	beq.w	800457a <_strtod_l+0xba>
 80047cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047ce:	499d      	ldr	r1, [pc, #628]	; (8004a44 <_strtod_l+0x584>)
 80047d0:	3b01      	subs	r3, #1
 80047d2:	a81b      	add	r0, sp, #108	; 0x6c
 80047d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80047d6:	f001 fdd1 	bl	800637c <__match>
 80047da:	b910      	cbnz	r0, 80047e2 <_strtod_l+0x322>
 80047dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047de:	3301      	adds	r3, #1
 80047e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80047e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004a58 <_strtod_l+0x598>
 80047e6:	f04f 0a00 	mov.w	sl, #0
 80047ea:	e6a8      	b.n	800453e <_strtod_l+0x7e>
 80047ec:	210a      	movs	r1, #10
 80047ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 80047f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80047f6:	e7b8      	b.n	800476a <_strtod_l+0x2aa>
 80047f8:	46be      	mov	lr, r7
 80047fa:	e7c8      	b.n	800478e <_strtod_l+0x2ce>
 80047fc:	2b69      	cmp	r3, #105	; 0x69
 80047fe:	d0de      	beq.n	80047be <_strtod_l+0x2fe>
 8004800:	2b6e      	cmp	r3, #110	; 0x6e
 8004802:	f47f aeba 	bne.w	800457a <_strtod_l+0xba>
 8004806:	4990      	ldr	r1, [pc, #576]	; (8004a48 <_strtod_l+0x588>)
 8004808:	a81b      	add	r0, sp, #108	; 0x6c
 800480a:	f001 fdb7 	bl	800637c <__match>
 800480e:	2800      	cmp	r0, #0
 8004810:	f43f aeb3 	beq.w	800457a <_strtod_l+0xba>
 8004814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b28      	cmp	r3, #40	; 0x28
 800481a:	d10e      	bne.n	800483a <_strtod_l+0x37a>
 800481c:	aa1e      	add	r2, sp, #120	; 0x78
 800481e:	498b      	ldr	r1, [pc, #556]	; (8004a4c <_strtod_l+0x58c>)
 8004820:	a81b      	add	r0, sp, #108	; 0x6c
 8004822:	f001 fdbf 	bl	80063a4 <__hexnan>
 8004826:	2805      	cmp	r0, #5
 8004828:	d107      	bne.n	800483a <_strtod_l+0x37a>
 800482a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800482c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004830:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004834:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004838:	e681      	b.n	800453e <_strtod_l+0x7e>
 800483a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004a60 <_strtod_l+0x5a0>
 800483e:	e7d2      	b.n	80047e6 <_strtod_l+0x326>
 8004840:	ebae 0302 	sub.w	r3, lr, r2
 8004844:	9306      	str	r3, [sp, #24]
 8004846:	9b05      	ldr	r3, [sp, #20]
 8004848:	9807      	ldr	r0, [sp, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf08      	it	eq
 800484e:	4623      	moveq	r3, r4
 8004850:	2c10      	cmp	r4, #16
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	46a0      	mov	r8, r4
 8004856:	bfa8      	it	ge
 8004858:	f04f 0810 	movge.w	r8, #16
 800485c:	f7fb fea2 	bl	80005a4 <__aeabi_ui2d>
 8004860:	2c09      	cmp	r4, #9
 8004862:	4682      	mov	sl, r0
 8004864:	468b      	mov	fp, r1
 8004866:	dc13      	bgt.n	8004890 <_strtod_l+0x3d0>
 8004868:	9b06      	ldr	r3, [sp, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f43f ae67 	beq.w	800453e <_strtod_l+0x7e>
 8004870:	9b06      	ldr	r3, [sp, #24]
 8004872:	dd7a      	ble.n	800496a <_strtod_l+0x4aa>
 8004874:	2b16      	cmp	r3, #22
 8004876:	dc61      	bgt.n	800493c <_strtod_l+0x47c>
 8004878:	4a75      	ldr	r2, [pc, #468]	; (8004a50 <_strtod_l+0x590>)
 800487a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800487e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004882:	4652      	mov	r2, sl
 8004884:	465b      	mov	r3, fp
 8004886:	f7fb ff07 	bl	8000698 <__aeabi_dmul>
 800488a:	4682      	mov	sl, r0
 800488c:	468b      	mov	fp, r1
 800488e:	e656      	b.n	800453e <_strtod_l+0x7e>
 8004890:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <_strtod_l+0x590>)
 8004892:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004896:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800489a:	f7fb fefd 	bl	8000698 <__aeabi_dmul>
 800489e:	4606      	mov	r6, r0
 80048a0:	4628      	mov	r0, r5
 80048a2:	460f      	mov	r7, r1
 80048a4:	f7fb fe7e 	bl	80005a4 <__aeabi_ui2d>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4630      	mov	r0, r6
 80048ae:	4639      	mov	r1, r7
 80048b0:	f7fb fd3c 	bl	800032c <__adddf3>
 80048b4:	2c0f      	cmp	r4, #15
 80048b6:	4682      	mov	sl, r0
 80048b8:	468b      	mov	fp, r1
 80048ba:	ddd5      	ble.n	8004868 <_strtod_l+0x3a8>
 80048bc:	9b06      	ldr	r3, [sp, #24]
 80048be:	eba4 0808 	sub.w	r8, r4, r8
 80048c2:	4498      	add	r8, r3
 80048c4:	f1b8 0f00 	cmp.w	r8, #0
 80048c8:	f340 8096 	ble.w	80049f8 <_strtod_l+0x538>
 80048cc:	f018 030f 	ands.w	r3, r8, #15
 80048d0:	d00a      	beq.n	80048e8 <_strtod_l+0x428>
 80048d2:	495f      	ldr	r1, [pc, #380]	; (8004a50 <_strtod_l+0x590>)
 80048d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048d8:	4652      	mov	r2, sl
 80048da:	465b      	mov	r3, fp
 80048dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e0:	f7fb feda 	bl	8000698 <__aeabi_dmul>
 80048e4:	4682      	mov	sl, r0
 80048e6:	468b      	mov	fp, r1
 80048e8:	f038 080f 	bics.w	r8, r8, #15
 80048ec:	d073      	beq.n	80049d6 <_strtod_l+0x516>
 80048ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80048f2:	dd47      	ble.n	8004984 <_strtod_l+0x4c4>
 80048f4:	2400      	movs	r4, #0
 80048f6:	46a0      	mov	r8, r4
 80048f8:	9407      	str	r4, [sp, #28]
 80048fa:	9405      	str	r4, [sp, #20]
 80048fc:	2322      	movs	r3, #34	; 0x22
 80048fe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004a58 <_strtod_l+0x598>
 8004902:	f8c9 3000 	str.w	r3, [r9]
 8004906:	f04f 0a00 	mov.w	sl, #0
 800490a:	9b07      	ldr	r3, [sp, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f43f ae16 	beq.w	800453e <_strtod_l+0x7e>
 8004912:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004914:	4648      	mov	r0, r9
 8004916:	f001 fe37 	bl	8006588 <_Bfree>
 800491a:	9905      	ldr	r1, [sp, #20]
 800491c:	4648      	mov	r0, r9
 800491e:	f001 fe33 	bl	8006588 <_Bfree>
 8004922:	4641      	mov	r1, r8
 8004924:	4648      	mov	r0, r9
 8004926:	f001 fe2f 	bl	8006588 <_Bfree>
 800492a:	9907      	ldr	r1, [sp, #28]
 800492c:	4648      	mov	r0, r9
 800492e:	f001 fe2b 	bl	8006588 <_Bfree>
 8004932:	4621      	mov	r1, r4
 8004934:	4648      	mov	r0, r9
 8004936:	f001 fe27 	bl	8006588 <_Bfree>
 800493a:	e600      	b.n	800453e <_strtod_l+0x7e>
 800493c:	9a06      	ldr	r2, [sp, #24]
 800493e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004942:	4293      	cmp	r3, r2
 8004944:	dbba      	blt.n	80048bc <_strtod_l+0x3fc>
 8004946:	4d42      	ldr	r5, [pc, #264]	; (8004a50 <_strtod_l+0x590>)
 8004948:	f1c4 040f 	rsb	r4, r4, #15
 800494c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004950:	4652      	mov	r2, sl
 8004952:	465b      	mov	r3, fp
 8004954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004958:	f7fb fe9e 	bl	8000698 <__aeabi_dmul>
 800495c:	9b06      	ldr	r3, [sp, #24]
 800495e:	1b1c      	subs	r4, r3, r4
 8004960:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004964:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004968:	e78d      	b.n	8004886 <_strtod_l+0x3c6>
 800496a:	f113 0f16 	cmn.w	r3, #22
 800496e:	dba5      	blt.n	80048bc <_strtod_l+0x3fc>
 8004970:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <_strtod_l+0x590>)
 8004972:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004976:	e9d2 2300 	ldrd	r2, r3, [r2]
 800497a:	4650      	mov	r0, sl
 800497c:	4659      	mov	r1, fp
 800497e:	f7fb ffb5 	bl	80008ec <__aeabi_ddiv>
 8004982:	e782      	b.n	800488a <_strtod_l+0x3ca>
 8004984:	2300      	movs	r3, #0
 8004986:	4e33      	ldr	r6, [pc, #204]	; (8004a54 <_strtod_l+0x594>)
 8004988:	ea4f 1828 	mov.w	r8, r8, asr #4
 800498c:	4650      	mov	r0, sl
 800498e:	4659      	mov	r1, fp
 8004990:	461d      	mov	r5, r3
 8004992:	f1b8 0f01 	cmp.w	r8, #1
 8004996:	dc21      	bgt.n	80049dc <_strtod_l+0x51c>
 8004998:	b10b      	cbz	r3, 800499e <_strtod_l+0x4de>
 800499a:	4682      	mov	sl, r0
 800499c:	468b      	mov	fp, r1
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <_strtod_l+0x594>)
 80049a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80049a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80049a8:	4652      	mov	r2, sl
 80049aa:	465b      	mov	r3, fp
 80049ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80049b0:	f7fb fe72 	bl	8000698 <__aeabi_dmul>
 80049b4:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <_strtod_l+0x598>)
 80049b6:	460a      	mov	r2, r1
 80049b8:	400b      	ands	r3, r1
 80049ba:	4928      	ldr	r1, [pc, #160]	; (8004a5c <_strtod_l+0x59c>)
 80049bc:	428b      	cmp	r3, r1
 80049be:	4682      	mov	sl, r0
 80049c0:	d898      	bhi.n	80048f4 <_strtod_l+0x434>
 80049c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80049c6:	428b      	cmp	r3, r1
 80049c8:	bf86      	itte	hi
 80049ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004a64 <_strtod_l+0x5a4>
 80049ce:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80049d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80049d6:	2300      	movs	r3, #0
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	e077      	b.n	8004acc <_strtod_l+0x60c>
 80049dc:	f018 0f01 	tst.w	r8, #1
 80049e0:	d006      	beq.n	80049f0 <_strtod_l+0x530>
 80049e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fb fe55 	bl	8000698 <__aeabi_dmul>
 80049ee:	2301      	movs	r3, #1
 80049f0:	3501      	adds	r5, #1
 80049f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80049f6:	e7cc      	b.n	8004992 <_strtod_l+0x4d2>
 80049f8:	d0ed      	beq.n	80049d6 <_strtod_l+0x516>
 80049fa:	f1c8 0800 	rsb	r8, r8, #0
 80049fe:	f018 020f 	ands.w	r2, r8, #15
 8004a02:	d00a      	beq.n	8004a1a <_strtod_l+0x55a>
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <_strtod_l+0x590>)
 8004a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb ff6b 	bl	80008ec <__aeabi_ddiv>
 8004a16:	4682      	mov	sl, r0
 8004a18:	468b      	mov	fp, r1
 8004a1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004a1e:	d0da      	beq.n	80049d6 <_strtod_l+0x516>
 8004a20:	f1b8 0f1f 	cmp.w	r8, #31
 8004a24:	dd20      	ble.n	8004a68 <_strtod_l+0x5a8>
 8004a26:	2400      	movs	r4, #0
 8004a28:	46a0      	mov	r8, r4
 8004a2a:	9407      	str	r4, [sp, #28]
 8004a2c:	9405      	str	r4, [sp, #20]
 8004a2e:	2322      	movs	r3, #34	; 0x22
 8004a30:	f04f 0a00 	mov.w	sl, #0
 8004a34:	f04f 0b00 	mov.w	fp, #0
 8004a38:	f8c9 3000 	str.w	r3, [r9]
 8004a3c:	e765      	b.n	800490a <_strtod_l+0x44a>
 8004a3e:	bf00      	nop
 8004a40:	0800862d 	.word	0x0800862d
 8004a44:	080086bb 	.word	0x080086bb
 8004a48:	08008635 	.word	0x08008635
 8004a4c:	08008678 	.word	0x08008678
 8004a50:	080086f8 	.word	0x080086f8
 8004a54:	080086d0 	.word	0x080086d0
 8004a58:	7ff00000 	.word	0x7ff00000
 8004a5c:	7ca00000 	.word	0x7ca00000
 8004a60:	fff80000 	.word	0xfff80000
 8004a64:	7fefffff 	.word	0x7fefffff
 8004a68:	f018 0310 	ands.w	r3, r8, #16
 8004a6c:	bf18      	it	ne
 8004a6e:	236a      	movne	r3, #106	; 0x6a
 8004a70:	4da0      	ldr	r5, [pc, #640]	; (8004cf4 <_strtod_l+0x834>)
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f1b8 0f00 	cmp.w	r8, #0
 8004a7e:	f300 810a 	bgt.w	8004c96 <_strtod_l+0x7d6>
 8004a82:	b10b      	cbz	r3, 8004a88 <_strtod_l+0x5c8>
 8004a84:	4682      	mov	sl, r0
 8004a86:	468b      	mov	fp, r1
 8004a88:	9b04      	ldr	r3, [sp, #16]
 8004a8a:	b1bb      	cbz	r3, 8004abc <_strtod_l+0x5fc>
 8004a8c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004a90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	4659      	mov	r1, fp
 8004a98:	dd10      	ble.n	8004abc <_strtod_l+0x5fc>
 8004a9a:	2b1f      	cmp	r3, #31
 8004a9c:	f340 8107 	ble.w	8004cae <_strtod_l+0x7ee>
 8004aa0:	2b34      	cmp	r3, #52	; 0x34
 8004aa2:	bfde      	ittt	le
 8004aa4:	3b20      	suble	r3, #32
 8004aa6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004aaa:	fa02 f303 	lslle.w	r3, r2, r3
 8004aae:	f04f 0a00 	mov.w	sl, #0
 8004ab2:	bfcc      	ite	gt
 8004ab4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ab8:	ea03 0b01 	andle.w	fp, r3, r1
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	f7fc f850 	bl	8000b68 <__aeabi_dcmpeq>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d1ac      	bne.n	8004a26 <_strtod_l+0x566>
 8004acc:	9b07      	ldr	r3, [sp, #28]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	9a05      	ldr	r2, [sp, #20]
 8004ad2:	9908      	ldr	r1, [sp, #32]
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	4648      	mov	r0, r9
 8004ad8:	f001 fda8 	bl	800662c <__s2b>
 8004adc:	9007      	str	r0, [sp, #28]
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f43f af08 	beq.w	80048f4 <_strtod_l+0x434>
 8004ae4:	9a06      	ldr	r2, [sp, #24]
 8004ae6:	9b06      	ldr	r3, [sp, #24]
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	f1c3 0300 	rsb	r3, r3, #0
 8004aee:	bfa8      	it	ge
 8004af0:	2300      	movge	r3, #0
 8004af2:	930e      	str	r3, [sp, #56]	; 0x38
 8004af4:	2400      	movs	r4, #0
 8004af6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004afa:	9316      	str	r3, [sp, #88]	; 0x58
 8004afc:	46a0      	mov	r8, r4
 8004afe:	9b07      	ldr	r3, [sp, #28]
 8004b00:	4648      	mov	r0, r9
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	f001 fd0c 	bl	8006520 <_Balloc>
 8004b08:	9005      	str	r0, [sp, #20]
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f43f aef6 	beq.w	80048fc <_strtod_l+0x43c>
 8004b10:	9b07      	ldr	r3, [sp, #28]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	3202      	adds	r2, #2
 8004b16:	f103 010c 	add.w	r1, r3, #12
 8004b1a:	0092      	lsls	r2, r2, #2
 8004b1c:	300c      	adds	r0, #12
 8004b1e:	f7fe fe39 	bl	8003794 <memcpy>
 8004b22:	aa1e      	add	r2, sp, #120	; 0x78
 8004b24:	a91d      	add	r1, sp, #116	; 0x74
 8004b26:	ec4b ab10 	vmov	d0, sl, fp
 8004b2a:	4648      	mov	r0, r9
 8004b2c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b30:	f002 f838 	bl	8006ba4 <__d2b>
 8004b34:	901c      	str	r0, [sp, #112]	; 0x70
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f43f aee0 	beq.w	80048fc <_strtod_l+0x43c>
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4648      	mov	r0, r9
 8004b40:	f001 fe00 	bl	8006744 <__i2b>
 8004b44:	4680      	mov	r8, r0
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f43f aed8 	beq.w	80048fc <_strtod_l+0x43c>
 8004b4c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004b4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b50:	2e00      	cmp	r6, #0
 8004b52:	bfab      	itete	ge
 8004b54:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b56:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b58:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004b5a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004b5c:	bfac      	ite	ge
 8004b5e:	18f7      	addge	r7, r6, r3
 8004b60:	1b9d      	sublt	r5, r3, r6
 8004b62:	9b04      	ldr	r3, [sp, #16]
 8004b64:	1af6      	subs	r6, r6, r3
 8004b66:	4416      	add	r6, r2
 8004b68:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <_strtod_l+0x838>)
 8004b6a:	3e01      	subs	r6, #1
 8004b6c:	429e      	cmp	r6, r3
 8004b6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b72:	f280 80af 	bge.w	8004cd4 <_strtod_l+0x814>
 8004b76:	1b9b      	subs	r3, r3, r6
 8004b78:	2b1f      	cmp	r3, #31
 8004b7a:	eba2 0203 	sub.w	r2, r2, r3
 8004b7e:	f04f 0101 	mov.w	r1, #1
 8004b82:	f300 809b 	bgt.w	8004cbc <_strtod_l+0x7fc>
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b90:	18be      	adds	r6, r7, r2
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	42b7      	cmp	r7, r6
 8004b96:	4415      	add	r5, r2
 8004b98:	441d      	add	r5, r3
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	bfa8      	it	ge
 8004b9e:	4633      	movge	r3, r6
 8004ba0:	42ab      	cmp	r3, r5
 8004ba2:	bfa8      	it	ge
 8004ba4:	462b      	movge	r3, r5
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfc2      	ittt	gt
 8004baa:	1af6      	subgt	r6, r6, r3
 8004bac:	1aed      	subgt	r5, r5, r3
 8004bae:	1aff      	subgt	r7, r7, r3
 8004bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb2:	b1bb      	cbz	r3, 8004be4 <_strtod_l+0x724>
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4648      	mov	r0, r9
 8004bba:	f001 fe63 	bl	8006884 <__pow5mult>
 8004bbe:	4680      	mov	r8, r0
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	f43f ae9b 	beq.w	80048fc <_strtod_l+0x43c>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004bca:	4648      	mov	r0, r9
 8004bcc:	f001 fdc3 	bl	8006756 <__multiply>
 8004bd0:	900c      	str	r0, [sp, #48]	; 0x30
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f43f ae92 	beq.w	80048fc <_strtod_l+0x43c>
 8004bd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004bda:	4648      	mov	r0, r9
 8004bdc:	f001 fcd4 	bl	8006588 <_Bfree>
 8004be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004be2:	931c      	str	r3, [sp, #112]	; 0x70
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	dc7a      	bgt.n	8004cde <_strtod_l+0x81e>
 8004be8:	9b06      	ldr	r3, [sp, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd08      	ble.n	8004c00 <_strtod_l+0x740>
 8004bee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004bf0:	9905      	ldr	r1, [sp, #20]
 8004bf2:	4648      	mov	r0, r9
 8004bf4:	f001 fe46 	bl	8006884 <__pow5mult>
 8004bf8:	9005      	str	r0, [sp, #20]
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f43f ae7e 	beq.w	80048fc <_strtod_l+0x43c>
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	dd08      	ble.n	8004c16 <_strtod_l+0x756>
 8004c04:	462a      	mov	r2, r5
 8004c06:	9905      	ldr	r1, [sp, #20]
 8004c08:	4648      	mov	r0, r9
 8004c0a:	f001 fe89 	bl	8006920 <__lshift>
 8004c0e:	9005      	str	r0, [sp, #20]
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f43f ae73 	beq.w	80048fc <_strtod_l+0x43c>
 8004c16:	2f00      	cmp	r7, #0
 8004c18:	dd08      	ble.n	8004c2c <_strtod_l+0x76c>
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	4648      	mov	r0, r9
 8004c20:	f001 fe7e 	bl	8006920 <__lshift>
 8004c24:	4680      	mov	r8, r0
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f43f ae68 	beq.w	80048fc <_strtod_l+0x43c>
 8004c2c:	9a05      	ldr	r2, [sp, #20]
 8004c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c30:	4648      	mov	r0, r9
 8004c32:	f001 fee3 	bl	80069fc <__mdiff>
 8004c36:	4604      	mov	r4, r0
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f ae5f 	beq.w	80048fc <_strtod_l+0x43c>
 8004c3e:	68c3      	ldr	r3, [r0, #12]
 8004c40:	930c      	str	r3, [sp, #48]	; 0x30
 8004c42:	2300      	movs	r3, #0
 8004c44:	60c3      	str	r3, [r0, #12]
 8004c46:	4641      	mov	r1, r8
 8004c48:	f001 febe 	bl	80069c8 <__mcmp>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	da55      	bge.n	8004cfc <_strtod_l+0x83c>
 8004c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c52:	b9e3      	cbnz	r3, 8004c8e <_strtod_l+0x7ce>
 8004c54:	f1ba 0f00 	cmp.w	sl, #0
 8004c58:	d119      	bne.n	8004c8e <_strtod_l+0x7ce>
 8004c5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c5e:	b9b3      	cbnz	r3, 8004c8e <_strtod_l+0x7ce>
 8004c60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c64:	0d1b      	lsrs	r3, r3, #20
 8004c66:	051b      	lsls	r3, r3, #20
 8004c68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c6c:	d90f      	bls.n	8004c8e <_strtod_l+0x7ce>
 8004c6e:	6963      	ldr	r3, [r4, #20]
 8004c70:	b913      	cbnz	r3, 8004c78 <_strtod_l+0x7b8>
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	dd0a      	ble.n	8004c8e <_strtod_l+0x7ce>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	f001 fe4f 	bl	8006920 <__lshift>
 8004c82:	4641      	mov	r1, r8
 8004c84:	4604      	mov	r4, r0
 8004c86:	f001 fe9f 	bl	80069c8 <__mcmp>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	dc67      	bgt.n	8004d5e <_strtod_l+0x89e>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d171      	bne.n	8004d78 <_strtod_l+0x8b8>
 8004c94:	e63d      	b.n	8004912 <_strtod_l+0x452>
 8004c96:	f018 0f01 	tst.w	r8, #1
 8004c9a:	d004      	beq.n	8004ca6 <_strtod_l+0x7e6>
 8004c9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ca0:	f7fb fcfa 	bl	8000698 <__aeabi_dmul>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004caa:	3508      	adds	r5, #8
 8004cac:	e6e5      	b.n	8004a7a <_strtod_l+0x5ba>
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	ea03 0a0a 	and.w	sl, r3, sl
 8004cba:	e6ff      	b.n	8004abc <_strtod_l+0x5fc>
 8004cbc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004cc0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004cc4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004cc8:	36e2      	adds	r6, #226	; 0xe2
 8004cca:	fa01 f306 	lsl.w	r3, r1, r6
 8004cce:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd0:	910f      	str	r1, [sp, #60]	; 0x3c
 8004cd2:	e75d      	b.n	8004b90 <_strtod_l+0x6d0>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd8:	2301      	movs	r3, #1
 8004cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cdc:	e758      	b.n	8004b90 <_strtod_l+0x6d0>
 8004cde:	4632      	mov	r2, r6
 8004ce0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ce2:	4648      	mov	r0, r9
 8004ce4:	f001 fe1c 	bl	8006920 <__lshift>
 8004ce8:	901c      	str	r0, [sp, #112]	; 0x70
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f47f af7c 	bne.w	8004be8 <_strtod_l+0x728>
 8004cf0:	e604      	b.n	80048fc <_strtod_l+0x43c>
 8004cf2:	bf00      	nop
 8004cf4:	08008690 	.word	0x08008690
 8004cf8:	fffffc02 	.word	0xfffffc02
 8004cfc:	465d      	mov	r5, fp
 8004cfe:	f040 8086 	bne.w	8004e0e <_strtod_l+0x94e>
 8004d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d08:	b32a      	cbz	r2, 8004d56 <_strtod_l+0x896>
 8004d0a:	4aaf      	ldr	r2, [pc, #700]	; (8004fc8 <_strtod_l+0xb08>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d153      	bne.n	8004db8 <_strtod_l+0x8f8>
 8004d10:	9b04      	ldr	r3, [sp, #16]
 8004d12:	4650      	mov	r0, sl
 8004d14:	b1d3      	cbz	r3, 8004d4c <_strtod_l+0x88c>
 8004d16:	4aad      	ldr	r2, [pc, #692]	; (8004fcc <_strtod_l+0xb0c>)
 8004d18:	402a      	ands	r2, r5
 8004d1a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004d1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d22:	d816      	bhi.n	8004d52 <_strtod_l+0x892>
 8004d24:	0d12      	lsrs	r2, r2, #20
 8004d26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	4298      	cmp	r0, r3
 8004d30:	d142      	bne.n	8004db8 <_strtod_l+0x8f8>
 8004d32:	4ba7      	ldr	r3, [pc, #668]	; (8004fd0 <_strtod_l+0xb10>)
 8004d34:	429d      	cmp	r5, r3
 8004d36:	d102      	bne.n	8004d3e <_strtod_l+0x87e>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f addf 	beq.w	80048fc <_strtod_l+0x43c>
 8004d3e:	4ba3      	ldr	r3, [pc, #652]	; (8004fcc <_strtod_l+0xb0c>)
 8004d40:	402b      	ands	r3, r5
 8004d42:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004d46:	f04f 0a00 	mov.w	sl, #0
 8004d4a:	e7a0      	b.n	8004c8e <_strtod_l+0x7ce>
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d50:	e7ed      	b.n	8004d2e <_strtod_l+0x86e>
 8004d52:	460b      	mov	r3, r1
 8004d54:	e7eb      	b.n	8004d2e <_strtod_l+0x86e>
 8004d56:	bb7b      	cbnz	r3, 8004db8 <_strtod_l+0x8f8>
 8004d58:	f1ba 0f00 	cmp.w	sl, #0
 8004d5c:	d12c      	bne.n	8004db8 <_strtod_l+0x8f8>
 8004d5e:	9904      	ldr	r1, [sp, #16]
 8004d60:	4a9a      	ldr	r2, [pc, #616]	; (8004fcc <_strtod_l+0xb0c>)
 8004d62:	465b      	mov	r3, fp
 8004d64:	b1f1      	cbz	r1, 8004da4 <_strtod_l+0x8e4>
 8004d66:	ea02 010b 	and.w	r1, r2, fp
 8004d6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004d6e:	dc19      	bgt.n	8004da4 <_strtod_l+0x8e4>
 8004d70:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004d74:	f77f ae5b 	ble.w	8004a2e <_strtod_l+0x56e>
 8004d78:	4a96      	ldr	r2, [pc, #600]	; (8004fd4 <_strtod_l+0xb14>)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004d80:	4650      	mov	r0, sl
 8004d82:	4659      	mov	r1, fp
 8004d84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004d88:	f7fb fc86 	bl	8000698 <__aeabi_dmul>
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	2900      	cmp	r1, #0
 8004d92:	f47f adbe 	bne.w	8004912 <_strtod_l+0x452>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f47f adbb 	bne.w	8004912 <_strtod_l+0x452>
 8004d9c:	2322      	movs	r3, #34	; 0x22
 8004d9e:	f8c9 3000 	str.w	r3, [r9]
 8004da2:	e5b6      	b.n	8004912 <_strtod_l+0x452>
 8004da4:	4013      	ands	r3, r2
 8004da6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004daa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004dae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004db2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004db6:	e76a      	b.n	8004c8e <_strtod_l+0x7ce>
 8004db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dba:	b193      	cbz	r3, 8004de2 <_strtod_l+0x922>
 8004dbc:	422b      	tst	r3, r5
 8004dbe:	f43f af66 	beq.w	8004c8e <_strtod_l+0x7ce>
 8004dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dc4:	9a04      	ldr	r2, [sp, #16]
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	4659      	mov	r1, fp
 8004dca:	b173      	cbz	r3, 8004dea <_strtod_l+0x92a>
 8004dcc:	f7ff fb5a 	bl	8004484 <sulp>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004dd8:	f7fb faa8 	bl	800032c <__adddf3>
 8004ddc:	4682      	mov	sl, r0
 8004dde:	468b      	mov	fp, r1
 8004de0:	e755      	b.n	8004c8e <_strtod_l+0x7ce>
 8004de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004de4:	ea13 0f0a 	tst.w	r3, sl
 8004de8:	e7e9      	b.n	8004dbe <_strtod_l+0x8fe>
 8004dea:	f7ff fb4b 	bl	8004484 <sulp>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004df6:	f7fb fa97 	bl	8000328 <__aeabi_dsub>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4682      	mov	sl, r0
 8004e00:	468b      	mov	fp, r1
 8004e02:	f7fb feb1 	bl	8000b68 <__aeabi_dcmpeq>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f47f ae11 	bne.w	8004a2e <_strtod_l+0x56e>
 8004e0c:	e73f      	b.n	8004c8e <_strtod_l+0x7ce>
 8004e0e:	4641      	mov	r1, r8
 8004e10:	4620      	mov	r0, r4
 8004e12:	f001 ff16 	bl	8006c42 <__ratio>
 8004e16:	ec57 6b10 	vmov	r6, r7, d0
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e20:	ee10 0a10 	vmov	r0, s0
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb feb3 	bl	8000b90 <__aeabi_dcmple>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d077      	beq.n	8004f1e <_strtod_l+0xa5e>
 8004e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d04a      	beq.n	8004eca <_strtod_l+0xa0a>
 8004e34:	4b68      	ldr	r3, [pc, #416]	; (8004fd8 <_strtod_l+0xb18>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e3c:	4f66      	ldr	r7, [pc, #408]	; (8004fd8 <_strtod_l+0xb18>)
 8004e3e:	2600      	movs	r6, #0
 8004e40:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <_strtod_l+0xb0c>)
 8004e42:	402b      	ands	r3, r5
 8004e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e48:	4b64      	ldr	r3, [pc, #400]	; (8004fdc <_strtod_l+0xb1c>)
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f040 80ce 	bne.w	8004fec <_strtod_l+0xb2c>
 8004e50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e58:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004e5c:	ec4b ab10 	vmov	d0, sl, fp
 8004e60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004e64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e68:	f001 fe26 	bl	8006ab8 <__ulp>
 8004e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e70:	ec53 2b10 	vmov	r2, r3, d0
 8004e74:	f7fb fc10 	bl	8000698 <__aeabi_dmul>
 8004e78:	4652      	mov	r2, sl
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	f7fb fa56 	bl	800032c <__adddf3>
 8004e80:	460b      	mov	r3, r1
 8004e82:	4952      	ldr	r1, [pc, #328]	; (8004fcc <_strtod_l+0xb0c>)
 8004e84:	4a56      	ldr	r2, [pc, #344]	; (8004fe0 <_strtod_l+0xb20>)
 8004e86:	4019      	ands	r1, r3
 8004e88:	4291      	cmp	r1, r2
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	d95b      	bls.n	8004f46 <_strtod_l+0xa86>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <_strtod_l+0x9e0>
 8004e98:	9b08      	ldr	r3, [sp, #32]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f43f ad2e 	beq.w	80048fc <_strtod_l+0x43c>
 8004ea0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004fd0 <_strtod_l+0xb10>
 8004ea4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004ea8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004eaa:	4648      	mov	r0, r9
 8004eac:	f001 fb6c 	bl	8006588 <_Bfree>
 8004eb0:	9905      	ldr	r1, [sp, #20]
 8004eb2:	4648      	mov	r0, r9
 8004eb4:	f001 fb68 	bl	8006588 <_Bfree>
 8004eb8:	4641      	mov	r1, r8
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f001 fb64 	bl	8006588 <_Bfree>
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4648      	mov	r0, r9
 8004ec4:	f001 fb60 	bl	8006588 <_Bfree>
 8004ec8:	e619      	b.n	8004afe <_strtod_l+0x63e>
 8004eca:	f1ba 0f00 	cmp.w	sl, #0
 8004ece:	d11a      	bne.n	8004f06 <_strtod_l+0xa46>
 8004ed0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ed4:	b9eb      	cbnz	r3, 8004f12 <_strtod_l+0xa52>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4b3f      	ldr	r3, [pc, #252]	; (8004fd8 <_strtod_l+0xb18>)
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb fe4d 	bl	8000b7c <__aeabi_dcmplt>
 8004ee2:	b9c8      	cbnz	r0, 8004f18 <_strtod_l+0xa58>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <_strtod_l+0xb24>)
 8004eec:	f7fb fbd4 	bl	8000698 <__aeabi_dmul>
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	460f      	mov	r7, r1
 8004ef4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004ef8:	9618      	str	r6, [sp, #96]	; 0x60
 8004efa:	9319      	str	r3, [sp, #100]	; 0x64
 8004efc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004f00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f04:	e79c      	b.n	8004e40 <_strtod_l+0x980>
 8004f06:	f1ba 0f01 	cmp.w	sl, #1
 8004f0a:	d102      	bne.n	8004f12 <_strtod_l+0xa52>
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	f43f ad8e 	beq.w	8004a2e <_strtod_l+0x56e>
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <_strtod_l+0xb28>)
 8004f16:	e78f      	b.n	8004e38 <_strtod_l+0x978>
 8004f18:	2600      	movs	r6, #0
 8004f1a:	4f32      	ldr	r7, [pc, #200]	; (8004fe4 <_strtod_l+0xb24>)
 8004f1c:	e7ea      	b.n	8004ef4 <_strtod_l+0xa34>
 8004f1e:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <_strtod_l+0xb24>)
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	2200      	movs	r2, #0
 8004f26:	f7fb fbb7 	bl	8000698 <__aeabi_dmul>
 8004f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	460f      	mov	r7, r1
 8004f30:	b933      	cbnz	r3, 8004f40 <_strtod_l+0xa80>
 8004f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f36:	9010      	str	r0, [sp, #64]	; 0x40
 8004f38:	9311      	str	r3, [sp, #68]	; 0x44
 8004f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f3e:	e7df      	b.n	8004f00 <_strtod_l+0xa40>
 8004f40:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004f44:	e7f9      	b.n	8004f3a <_strtod_l+0xa7a>
 8004f46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004f4a:	9b04      	ldr	r3, [sp, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ab      	bne.n	8004ea8 <_strtod_l+0x9e8>
 8004f50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f54:	0d1b      	lsrs	r3, r3, #20
 8004f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f58:	051b      	lsls	r3, r3, #20
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	465d      	mov	r5, fp
 8004f5e:	d1a3      	bne.n	8004ea8 <_strtod_l+0x9e8>
 8004f60:	4639      	mov	r1, r7
 8004f62:	4630      	mov	r0, r6
 8004f64:	f7fb fe48 	bl	8000bf8 <__aeabi_d2iz>
 8004f68:	f7fb fb2c 	bl	80005c4 <__aeabi_i2d>
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4602      	mov	r2, r0
 8004f70:	4639      	mov	r1, r7
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7fb f9d8 	bl	8000328 <__aeabi_dsub>
 8004f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	b933      	cbnz	r3, 8004f8e <_strtod_l+0xace>
 8004f80:	f1ba 0f00 	cmp.w	sl, #0
 8004f84:	d103      	bne.n	8004f8e <_strtod_l+0xace>
 8004f86:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	d06d      	beq.n	800506a <_strtod_l+0xbaa>
 8004f8e:	a30a      	add	r3, pc, #40	; (adr r3, 8004fb8 <_strtod_l+0xaf8>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f7fb fdf0 	bl	8000b7c <__aeabi_dcmplt>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f47f acb8 	bne.w	8004912 <_strtod_l+0x452>
 8004fa2:	a307      	add	r3, pc, #28	; (adr r3, 8004fc0 <_strtod_l+0xb00>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fb fe04 	bl	8000bb8 <__aeabi_dcmpgt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f43f af79 	beq.w	8004ea8 <_strtod_l+0x9e8>
 8004fb6:	e4ac      	b.n	8004912 <_strtod_l+0x452>
 8004fb8:	94a03595 	.word	0x94a03595
 8004fbc:	3fdfffff 	.word	0x3fdfffff
 8004fc0:	35afe535 	.word	0x35afe535
 8004fc4:	3fe00000 	.word	0x3fe00000
 8004fc8:	000fffff 	.word	0x000fffff
 8004fcc:	7ff00000 	.word	0x7ff00000
 8004fd0:	7fefffff 	.word	0x7fefffff
 8004fd4:	39500000 	.word	0x39500000
 8004fd8:	3ff00000 	.word	0x3ff00000
 8004fdc:	7fe00000 	.word	0x7fe00000
 8004fe0:	7c9fffff 	.word	0x7c9fffff
 8004fe4:	3fe00000 	.word	0x3fe00000
 8004fe8:	bff00000 	.word	0xbff00000
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	b333      	cbz	r3, 800503e <_strtod_l+0xb7e>
 8004ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ff2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ff6:	d822      	bhi.n	800503e <_strtod_l+0xb7e>
 8004ff8:	a327      	add	r3, pc, #156	; (adr r3, 8005098 <_strtod_l+0xbd8>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fdc5 	bl	8000b90 <__aeabi_dcmple>
 8005006:	b1a0      	cbz	r0, 8005032 <_strtod_l+0xb72>
 8005008:	4639      	mov	r1, r7
 800500a:	4630      	mov	r0, r6
 800500c:	f7fb fe1c 	bl	8000c48 <__aeabi_d2uiz>
 8005010:	2800      	cmp	r0, #0
 8005012:	bf08      	it	eq
 8005014:	2001      	moveq	r0, #1
 8005016:	f7fb fac5 	bl	80005a4 <__aeabi_ui2d>
 800501a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800501c:	4606      	mov	r6, r0
 800501e:	460f      	mov	r7, r1
 8005020:	bb03      	cbnz	r3, 8005064 <_strtod_l+0xba4>
 8005022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005026:	9012      	str	r0, [sp, #72]	; 0x48
 8005028:	9313      	str	r3, [sp, #76]	; 0x4c
 800502a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800502e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005036:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	930b      	str	r3, [sp, #44]	; 0x2c
 800503e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005042:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005046:	f001 fd37 	bl	8006ab8 <__ulp>
 800504a:	4650      	mov	r0, sl
 800504c:	ec53 2b10 	vmov	r2, r3, d0
 8005050:	4659      	mov	r1, fp
 8005052:	f7fb fb21 	bl	8000698 <__aeabi_dmul>
 8005056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800505a:	f7fb f967 	bl	800032c <__adddf3>
 800505e:	4682      	mov	sl, r0
 8005060:	468b      	mov	fp, r1
 8005062:	e772      	b.n	8004f4a <_strtod_l+0xa8a>
 8005064:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005068:	e7df      	b.n	800502a <_strtod_l+0xb6a>
 800506a:	a30d      	add	r3, pc, #52	; (adr r3, 80050a0 <_strtod_l+0xbe0>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fd84 	bl	8000b7c <__aeabi_dcmplt>
 8005074:	e79c      	b.n	8004fb0 <_strtod_l+0xaf0>
 8005076:	2300      	movs	r3, #0
 8005078:	930d      	str	r3, [sp, #52]	; 0x34
 800507a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800507c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	f7ff ba61 	b.w	8004546 <_strtod_l+0x86>
 8005084:	2b65      	cmp	r3, #101	; 0x65
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f43f ab4e 	beq.w	800472a <_strtod_l+0x26a>
 800508e:	2101      	movs	r1, #1
 8005090:	4614      	mov	r4, r2
 8005092:	9104      	str	r1, [sp, #16]
 8005094:	f7ff bacb 	b.w	800462e <_strtod_l+0x16e>
 8005098:	ffc00000 	.word	0xffc00000
 800509c:	41dfffff 	.word	0x41dfffff
 80050a0:	94a03595 	.word	0x94a03595
 80050a4:	3fcfffff 	.word	0x3fcfffff

080050a8 <_strtod_r>:
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <_strtod_r+0x18>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b410      	push	{r4}
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	4c04      	ldr	r4, [pc, #16]	; (80050c4 <_strtod_r+0x1c>)
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf08      	it	eq
 80050b6:	4623      	moveq	r3, r4
 80050b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050bc:	f7ff ba00 	b.w	80044c0 <_strtod_l>
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	20000070 	.word	0x20000070

080050c8 <_strtol_l.isra.0>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	4680      	mov	r8, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	4692      	mov	sl, r2
 80050d2:	461e      	mov	r6, r3
 80050d4:	460f      	mov	r7, r1
 80050d6:	463d      	mov	r5, r7
 80050d8:	9808      	ldr	r0, [sp, #32]
 80050da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050de:	f001 f9f1 	bl	80064c4 <__locale_ctype_ptr_l>
 80050e2:	4420      	add	r0, r4
 80050e4:	7843      	ldrb	r3, [r0, #1]
 80050e6:	f013 0308 	ands.w	r3, r3, #8
 80050ea:	d132      	bne.n	8005152 <_strtol_l.isra.0+0x8a>
 80050ec:	2c2d      	cmp	r4, #45	; 0x2d
 80050ee:	d132      	bne.n	8005156 <_strtol_l.isra.0+0x8e>
 80050f0:	787c      	ldrb	r4, [r7, #1]
 80050f2:	1cbd      	adds	r5, r7, #2
 80050f4:	2201      	movs	r2, #1
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	d05d      	beq.n	80051b6 <_strtol_l.isra.0+0xee>
 80050fa:	2e10      	cmp	r6, #16
 80050fc:	d109      	bne.n	8005112 <_strtol_l.isra.0+0x4a>
 80050fe:	2c30      	cmp	r4, #48	; 0x30
 8005100:	d107      	bne.n	8005112 <_strtol_l.isra.0+0x4a>
 8005102:	782b      	ldrb	r3, [r5, #0]
 8005104:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005108:	2b58      	cmp	r3, #88	; 0x58
 800510a:	d14f      	bne.n	80051ac <_strtol_l.isra.0+0xe4>
 800510c:	786c      	ldrb	r4, [r5, #1]
 800510e:	2610      	movs	r6, #16
 8005110:	3502      	adds	r5, #2
 8005112:	2a00      	cmp	r2, #0
 8005114:	bf14      	ite	ne
 8005116:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800511a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800511e:	2700      	movs	r7, #0
 8005120:	fbb1 fcf6 	udiv	ip, r1, r6
 8005124:	4638      	mov	r0, r7
 8005126:	fb06 1e1c 	mls	lr, r6, ip, r1
 800512a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800512e:	2b09      	cmp	r3, #9
 8005130:	d817      	bhi.n	8005162 <_strtol_l.isra.0+0x9a>
 8005132:	461c      	mov	r4, r3
 8005134:	42a6      	cmp	r6, r4
 8005136:	dd23      	ble.n	8005180 <_strtol_l.isra.0+0xb8>
 8005138:	1c7b      	adds	r3, r7, #1
 800513a:	d007      	beq.n	800514c <_strtol_l.isra.0+0x84>
 800513c:	4584      	cmp	ip, r0
 800513e:	d31c      	bcc.n	800517a <_strtol_l.isra.0+0xb2>
 8005140:	d101      	bne.n	8005146 <_strtol_l.isra.0+0x7e>
 8005142:	45a6      	cmp	lr, r4
 8005144:	db19      	blt.n	800517a <_strtol_l.isra.0+0xb2>
 8005146:	fb00 4006 	mla	r0, r0, r6, r4
 800514a:	2701      	movs	r7, #1
 800514c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005150:	e7eb      	b.n	800512a <_strtol_l.isra.0+0x62>
 8005152:	462f      	mov	r7, r5
 8005154:	e7bf      	b.n	80050d6 <_strtol_l.isra.0+0xe>
 8005156:	2c2b      	cmp	r4, #43	; 0x2b
 8005158:	bf04      	itt	eq
 800515a:	1cbd      	addeq	r5, r7, #2
 800515c:	787c      	ldrbeq	r4, [r7, #1]
 800515e:	461a      	mov	r2, r3
 8005160:	e7c9      	b.n	80050f6 <_strtol_l.isra.0+0x2e>
 8005162:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005166:	2b19      	cmp	r3, #25
 8005168:	d801      	bhi.n	800516e <_strtol_l.isra.0+0xa6>
 800516a:	3c37      	subs	r4, #55	; 0x37
 800516c:	e7e2      	b.n	8005134 <_strtol_l.isra.0+0x6c>
 800516e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005172:	2b19      	cmp	r3, #25
 8005174:	d804      	bhi.n	8005180 <_strtol_l.isra.0+0xb8>
 8005176:	3c57      	subs	r4, #87	; 0x57
 8005178:	e7dc      	b.n	8005134 <_strtol_l.isra.0+0x6c>
 800517a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800517e:	e7e5      	b.n	800514c <_strtol_l.isra.0+0x84>
 8005180:	1c7b      	adds	r3, r7, #1
 8005182:	d108      	bne.n	8005196 <_strtol_l.isra.0+0xce>
 8005184:	2322      	movs	r3, #34	; 0x22
 8005186:	f8c8 3000 	str.w	r3, [r8]
 800518a:	4608      	mov	r0, r1
 800518c:	f1ba 0f00 	cmp.w	sl, #0
 8005190:	d107      	bne.n	80051a2 <_strtol_l.isra.0+0xda>
 8005192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005196:	b102      	cbz	r2, 800519a <_strtol_l.isra.0+0xd2>
 8005198:	4240      	negs	r0, r0
 800519a:	f1ba 0f00 	cmp.w	sl, #0
 800519e:	d0f8      	beq.n	8005192 <_strtol_l.isra.0+0xca>
 80051a0:	b10f      	cbz	r7, 80051a6 <_strtol_l.isra.0+0xde>
 80051a2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80051a6:	f8ca 9000 	str.w	r9, [sl]
 80051aa:	e7f2      	b.n	8005192 <_strtol_l.isra.0+0xca>
 80051ac:	2430      	movs	r4, #48	; 0x30
 80051ae:	2e00      	cmp	r6, #0
 80051b0:	d1af      	bne.n	8005112 <_strtol_l.isra.0+0x4a>
 80051b2:	2608      	movs	r6, #8
 80051b4:	e7ad      	b.n	8005112 <_strtol_l.isra.0+0x4a>
 80051b6:	2c30      	cmp	r4, #48	; 0x30
 80051b8:	d0a3      	beq.n	8005102 <_strtol_l.isra.0+0x3a>
 80051ba:	260a      	movs	r6, #10
 80051bc:	e7a9      	b.n	8005112 <_strtol_l.isra.0+0x4a>
	...

080051c0 <_strtol_r>:
 80051c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051c2:	4c06      	ldr	r4, [pc, #24]	; (80051dc <_strtol_r+0x1c>)
 80051c4:	4d06      	ldr	r5, [pc, #24]	; (80051e0 <_strtol_r+0x20>)
 80051c6:	6824      	ldr	r4, [r4, #0]
 80051c8:	6a24      	ldr	r4, [r4, #32]
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	bf08      	it	eq
 80051ce:	462c      	moveq	r4, r5
 80051d0:	9400      	str	r4, [sp, #0]
 80051d2:	f7ff ff79 	bl	80050c8 <_strtol_l.isra.0>
 80051d6:	b003      	add	sp, #12
 80051d8:	bd30      	pop	{r4, r5, pc}
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	20000070 	.word	0x20000070

080051e4 <_times_r>:
 80051e4:	4608      	mov	r0, r1
 80051e6:	f7fc bac7 	b.w	8001778 <_times>

080051ea <quorem>:
 80051ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ee:	6903      	ldr	r3, [r0, #16]
 80051f0:	690c      	ldr	r4, [r1, #16]
 80051f2:	42a3      	cmp	r3, r4
 80051f4:	4680      	mov	r8, r0
 80051f6:	f2c0 8082 	blt.w	80052fe <quorem+0x114>
 80051fa:	3c01      	subs	r4, #1
 80051fc:	f101 0714 	add.w	r7, r1, #20
 8005200:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005204:	f100 0614 	add.w	r6, r0, #20
 8005208:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800520c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005210:	eb06 030c 	add.w	r3, r6, ip
 8005214:	3501      	adds	r5, #1
 8005216:	eb07 090c 	add.w	r9, r7, ip
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005220:	b395      	cbz	r5, 8005288 <quorem+0x9e>
 8005222:	f04f 0a00 	mov.w	sl, #0
 8005226:	4638      	mov	r0, r7
 8005228:	46b6      	mov	lr, r6
 800522a:	46d3      	mov	fp, sl
 800522c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005230:	b293      	uxth	r3, r2
 8005232:	fb05 a303 	mla	r3, r5, r3, sl
 8005236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800523a:	b29b      	uxth	r3, r3
 800523c:	ebab 0303 	sub.w	r3, fp, r3
 8005240:	0c12      	lsrs	r2, r2, #16
 8005242:	f8de b000 	ldr.w	fp, [lr]
 8005246:	fb05 a202 	mla	r2, r5, r2, sl
 800524a:	fa13 f38b 	uxtah	r3, r3, fp
 800524e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005252:	fa1f fb82 	uxth.w	fp, r2
 8005256:	f8de 2000 	ldr.w	r2, [lr]
 800525a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800525e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005262:	b29b      	uxth	r3, r3
 8005264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005268:	4581      	cmp	r9, r0
 800526a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800526e:	f84e 3b04 	str.w	r3, [lr], #4
 8005272:	d2db      	bcs.n	800522c <quorem+0x42>
 8005274:	f856 300c 	ldr.w	r3, [r6, ip]
 8005278:	b933      	cbnz	r3, 8005288 <quorem+0x9e>
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	3b04      	subs	r3, #4
 800527e:	429e      	cmp	r6, r3
 8005280:	461a      	mov	r2, r3
 8005282:	d330      	bcc.n	80052e6 <quorem+0xfc>
 8005284:	f8c8 4010 	str.w	r4, [r8, #16]
 8005288:	4640      	mov	r0, r8
 800528a:	f001 fb9d 	bl	80069c8 <__mcmp>
 800528e:	2800      	cmp	r0, #0
 8005290:	db25      	blt.n	80052de <quorem+0xf4>
 8005292:	3501      	adds	r5, #1
 8005294:	4630      	mov	r0, r6
 8005296:	f04f 0c00 	mov.w	ip, #0
 800529a:	f857 2b04 	ldr.w	r2, [r7], #4
 800529e:	f8d0 e000 	ldr.w	lr, [r0]
 80052a2:	b293      	uxth	r3, r2
 80052a4:	ebac 0303 	sub.w	r3, ip, r3
 80052a8:	0c12      	lsrs	r2, r2, #16
 80052aa:	fa13 f38e 	uxtah	r3, r3, lr
 80052ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052bc:	45b9      	cmp	r9, r7
 80052be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052c2:	f840 3b04 	str.w	r3, [r0], #4
 80052c6:	d2e8      	bcs.n	800529a <quorem+0xb0>
 80052c8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80052cc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80052d0:	b92a      	cbnz	r2, 80052de <quorem+0xf4>
 80052d2:	3b04      	subs	r3, #4
 80052d4:	429e      	cmp	r6, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	d30b      	bcc.n	80052f2 <quorem+0x108>
 80052da:	f8c8 4010 	str.w	r4, [r8, #16]
 80052de:	4628      	mov	r0, r5
 80052e0:	b003      	add	sp, #12
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	3b04      	subs	r3, #4
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d1ca      	bne.n	8005284 <quorem+0x9a>
 80052ee:	3c01      	subs	r4, #1
 80052f0:	e7c5      	b.n	800527e <quorem+0x94>
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	3b04      	subs	r3, #4
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	d1ef      	bne.n	80052da <quorem+0xf0>
 80052fa:	3c01      	subs	r4, #1
 80052fc:	e7ea      	b.n	80052d4 <quorem+0xea>
 80052fe:	2000      	movs	r0, #0
 8005300:	e7ee      	b.n	80052e0 <quorem+0xf6>
 8005302:	0000      	movs	r0, r0
 8005304:	0000      	movs	r0, r0
	...

08005308 <_dtoa_r>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	ec57 6b10 	vmov	r6, r7, d0
 8005310:	b097      	sub	sp, #92	; 0x5c
 8005312:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005314:	9106      	str	r1, [sp, #24]
 8005316:	4604      	mov	r4, r0
 8005318:	920b      	str	r2, [sp, #44]	; 0x2c
 800531a:	9312      	str	r3, [sp, #72]	; 0x48
 800531c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005320:	e9cd 6700 	strd	r6, r7, [sp]
 8005324:	b93d      	cbnz	r5, 8005336 <_dtoa_r+0x2e>
 8005326:	2010      	movs	r0, #16
 8005328:	f001 f8e0 	bl	80064ec <malloc>
 800532c:	6260      	str	r0, [r4, #36]	; 0x24
 800532e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005332:	6005      	str	r5, [r0, #0]
 8005334:	60c5      	str	r5, [r0, #12]
 8005336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	b151      	cbz	r1, 8005352 <_dtoa_r+0x4a>
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	604a      	str	r2, [r1, #4]
 8005340:	2301      	movs	r3, #1
 8005342:	4093      	lsls	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
 8005346:	4620      	mov	r0, r4
 8005348:	f001 f91e 	bl	8006588 <_Bfree>
 800534c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	1e3b      	subs	r3, r7, #0
 8005354:	bfbb      	ittet	lt
 8005356:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800535a:	9301      	strlt	r3, [sp, #4]
 800535c:	2300      	movge	r3, #0
 800535e:	2201      	movlt	r2, #1
 8005360:	bfac      	ite	ge
 8005362:	f8c8 3000 	strge.w	r3, [r8]
 8005366:	f8c8 2000 	strlt.w	r2, [r8]
 800536a:	4baf      	ldr	r3, [pc, #700]	; (8005628 <_dtoa_r+0x320>)
 800536c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005370:	ea33 0308 	bics.w	r3, r3, r8
 8005374:	d114      	bne.n	80053a0 <_dtoa_r+0x98>
 8005376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005378:	f242 730f 	movw	r3, #9999	; 0x270f
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	9b00      	ldr	r3, [sp, #0]
 8005380:	b923      	cbnz	r3, 800538c <_dtoa_r+0x84>
 8005382:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005386:	2800      	cmp	r0, #0
 8005388:	f000 8542 	beq.w	8005e10 <_dtoa_r+0xb08>
 800538c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800538e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800563c <_dtoa_r+0x334>
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8544 	beq.w	8005e20 <_dtoa_r+0xb18>
 8005398:	f10b 0303 	add.w	r3, fp, #3
 800539c:	f000 bd3e 	b.w	8005e1c <_dtoa_r+0xb14>
 80053a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb fbdc 	bl	8000b68 <__aeabi_dcmpeq>
 80053b0:	4681      	mov	r9, r0
 80053b2:	b168      	cbz	r0, 80053d0 <_dtoa_r+0xc8>
 80053b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053b6:	2301      	movs	r3, #1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8524 	beq.w	8005e0a <_dtoa_r+0xb02>
 80053c2:	4b9a      	ldr	r3, [pc, #616]	; (800562c <_dtoa_r+0x324>)
 80053c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053c6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	f000 bd28 	b.w	8005e20 <_dtoa_r+0xb18>
 80053d0:	aa14      	add	r2, sp, #80	; 0x50
 80053d2:	a915      	add	r1, sp, #84	; 0x54
 80053d4:	ec47 6b10 	vmov	d0, r6, r7
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 fbe3 	bl	8006ba4 <__d2b>
 80053de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053e2:	9004      	str	r0, [sp, #16]
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d07c      	beq.n	80054e2 <_dtoa_r+0x1da>
 80053e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80053f0:	46b2      	mov	sl, r6
 80053f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80053f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80053fe:	2200      	movs	r2, #0
 8005400:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <_dtoa_r+0x328>)
 8005402:	4650      	mov	r0, sl
 8005404:	4659      	mov	r1, fp
 8005406:	f7fa ff8f 	bl	8000328 <__aeabi_dsub>
 800540a:	a381      	add	r3, pc, #516	; (adr r3, 8005610 <_dtoa_r+0x308>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f942 	bl	8000698 <__aeabi_dmul>
 8005414:	a380      	add	r3, pc, #512	; (adr r3, 8005618 <_dtoa_r+0x310>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa ff87 	bl	800032c <__adddf3>
 800541e:	4606      	mov	r6, r0
 8005420:	4628      	mov	r0, r5
 8005422:	460f      	mov	r7, r1
 8005424:	f7fb f8ce 	bl	80005c4 <__aeabi_i2d>
 8005428:	a37d      	add	r3, pc, #500	; (adr r3, 8005620 <_dtoa_r+0x318>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f933 	bl	8000698 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fa ff77 	bl	800032c <__adddf3>
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	f7fb fbd9 	bl	8000bf8 <__aeabi_d2iz>
 8005446:	2200      	movs	r2, #0
 8005448:	4682      	mov	sl, r0
 800544a:	2300      	movs	r3, #0
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb fb94 	bl	8000b7c <__aeabi_dcmplt>
 8005454:	b148      	cbz	r0, 800546a <_dtoa_r+0x162>
 8005456:	4650      	mov	r0, sl
 8005458:	f7fb f8b4 	bl	80005c4 <__aeabi_i2d>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	f7fb fb82 	bl	8000b68 <__aeabi_dcmpeq>
 8005464:	b908      	cbnz	r0, 800546a <_dtoa_r+0x162>
 8005466:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800546a:	f1ba 0f16 	cmp.w	sl, #22
 800546e:	d859      	bhi.n	8005524 <_dtoa_r+0x21c>
 8005470:	4970      	ldr	r1, [pc, #448]	; (8005634 <_dtoa_r+0x32c>)
 8005472:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800547e:	f7fb fb9b 	bl	8000bb8 <__aeabi_dcmpgt>
 8005482:	2800      	cmp	r0, #0
 8005484:	d050      	beq.n	8005528 <_dtoa_r+0x220>
 8005486:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800548a:	2300      	movs	r3, #0
 800548c:	930f      	str	r3, [sp, #60]	; 0x3c
 800548e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005490:	1b5d      	subs	r5, r3, r5
 8005492:	f1b5 0801 	subs.w	r8, r5, #1
 8005496:	bf49      	itett	mi
 8005498:	f1c5 0301 	rsbmi	r3, r5, #1
 800549c:	2300      	movpl	r3, #0
 800549e:	9305      	strmi	r3, [sp, #20]
 80054a0:	f04f 0800 	movmi.w	r8, #0
 80054a4:	bf58      	it	pl
 80054a6:	9305      	strpl	r3, [sp, #20]
 80054a8:	f1ba 0f00 	cmp.w	sl, #0
 80054ac:	db3e      	blt.n	800552c <_dtoa_r+0x224>
 80054ae:	2300      	movs	r3, #0
 80054b0:	44d0      	add	r8, sl
 80054b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	2b09      	cmp	r3, #9
 80054bc:	f200 8090 	bhi.w	80055e0 <_dtoa_r+0x2d8>
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	bfc4      	itt	gt
 80054c4:	3b04      	subgt	r3, #4
 80054c6:	9306      	strgt	r3, [sp, #24]
 80054c8:	9b06      	ldr	r3, [sp, #24]
 80054ca:	f1a3 0302 	sub.w	r3, r3, #2
 80054ce:	bfcc      	ite	gt
 80054d0:	2500      	movgt	r5, #0
 80054d2:	2501      	movle	r5, #1
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	f200 808f 	bhi.w	80055f8 <_dtoa_r+0x2f0>
 80054da:	e8df f003 	tbb	[pc, r3]
 80054de:	7f7d      	.short	0x7f7d
 80054e0:	7131      	.short	0x7131
 80054e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80054e6:	441d      	add	r5, r3
 80054e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80054ec:	2820      	cmp	r0, #32
 80054ee:	dd13      	ble.n	8005518 <_dtoa_r+0x210>
 80054f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80054f4:	9b00      	ldr	r3, [sp, #0]
 80054f6:	fa08 f800 	lsl.w	r8, r8, r0
 80054fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80054fe:	fa23 f000 	lsr.w	r0, r3, r0
 8005502:	ea48 0000 	orr.w	r0, r8, r0
 8005506:	f7fb f84d 	bl	80005a4 <__aeabi_ui2d>
 800550a:	2301      	movs	r3, #1
 800550c:	4682      	mov	sl, r0
 800550e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005512:	3d01      	subs	r5, #1
 8005514:	9313      	str	r3, [sp, #76]	; 0x4c
 8005516:	e772      	b.n	80053fe <_dtoa_r+0xf6>
 8005518:	9b00      	ldr	r3, [sp, #0]
 800551a:	f1c0 0020 	rsb	r0, r0, #32
 800551e:	fa03 f000 	lsl.w	r0, r3, r0
 8005522:	e7f0      	b.n	8005506 <_dtoa_r+0x1fe>
 8005524:	2301      	movs	r3, #1
 8005526:	e7b1      	b.n	800548c <_dtoa_r+0x184>
 8005528:	900f      	str	r0, [sp, #60]	; 0x3c
 800552a:	e7b0      	b.n	800548e <_dtoa_r+0x186>
 800552c:	9b05      	ldr	r3, [sp, #20]
 800552e:	eba3 030a 	sub.w	r3, r3, sl
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	f1ca 0300 	rsb	r3, sl, #0
 8005538:	9307      	str	r3, [sp, #28]
 800553a:	2300      	movs	r3, #0
 800553c:	930e      	str	r3, [sp, #56]	; 0x38
 800553e:	e7bb      	b.n	80054b8 <_dtoa_r+0x1b0>
 8005540:	2301      	movs	r3, #1
 8005542:	930a      	str	r3, [sp, #40]	; 0x28
 8005544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd59      	ble.n	80055fe <_dtoa_r+0x2f6>
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	4699      	mov	r9, r3
 800554e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	6072      	str	r2, [r6, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	f102 0014 	add.w	r0, r2, #20
 800555a:	4298      	cmp	r0, r3
 800555c:	6871      	ldr	r1, [r6, #4]
 800555e:	d953      	bls.n	8005608 <_dtoa_r+0x300>
 8005560:	4620      	mov	r0, r4
 8005562:	f000 ffdd 	bl	8006520 <_Balloc>
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	6030      	str	r0, [r6, #0]
 800556a:	f1b9 0f0e 	cmp.w	r9, #14
 800556e:	f8d3 b000 	ldr.w	fp, [r3]
 8005572:	f200 80e6 	bhi.w	8005742 <_dtoa_r+0x43a>
 8005576:	2d00      	cmp	r5, #0
 8005578:	f000 80e3 	beq.w	8005742 <_dtoa_r+0x43a>
 800557c:	ed9d 7b00 	vldr	d7, [sp]
 8005580:	f1ba 0f00 	cmp.w	sl, #0
 8005584:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005588:	dd74      	ble.n	8005674 <_dtoa_r+0x36c>
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <_dtoa_r+0x32c>)
 800558c:	f00a 030f 	and.w	r3, sl, #15
 8005590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005594:	ed93 7b00 	vldr	d7, [r3]
 8005598:	ea4f 162a 	mov.w	r6, sl, asr #4
 800559c:	06f0      	lsls	r0, r6, #27
 800559e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055a2:	d565      	bpl.n	8005670 <_dtoa_r+0x368>
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <_dtoa_r+0x330>)
 80055a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055ae:	f7fb f99d 	bl	80008ec <__aeabi_ddiv>
 80055b2:	e9cd 0100 	strd	r0, r1, [sp]
 80055b6:	f006 060f 	and.w	r6, r6, #15
 80055ba:	2503      	movs	r5, #3
 80055bc:	4f1e      	ldr	r7, [pc, #120]	; (8005638 <_dtoa_r+0x330>)
 80055be:	e04c      	b.n	800565a <_dtoa_r+0x352>
 80055c0:	2301      	movs	r3, #1
 80055c2:	930a      	str	r3, [sp, #40]	; 0x28
 80055c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c6:	4453      	add	r3, sl
 80055c8:	f103 0901 	add.w	r9, r3, #1
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	464b      	mov	r3, r9
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	bfb8      	it	lt
 80055d4:	2301      	movlt	r3, #1
 80055d6:	e7ba      	b.n	800554e <_dtoa_r+0x246>
 80055d8:	2300      	movs	r3, #0
 80055da:	e7b2      	b.n	8005542 <_dtoa_r+0x23a>
 80055dc:	2300      	movs	r3, #0
 80055de:	e7f0      	b.n	80055c2 <_dtoa_r+0x2ba>
 80055e0:	2501      	movs	r5, #1
 80055e2:	2300      	movs	r3, #0
 80055e4:	9306      	str	r3, [sp, #24]
 80055e6:	950a      	str	r5, [sp, #40]	; 0x28
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	4699      	mov	r9, r3
 80055f0:	2200      	movs	r2, #0
 80055f2:	2312      	movs	r3, #18
 80055f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80055f6:	e7aa      	b.n	800554e <_dtoa_r+0x246>
 80055f8:	2301      	movs	r3, #1
 80055fa:	930a      	str	r3, [sp, #40]	; 0x28
 80055fc:	e7f4      	b.n	80055e8 <_dtoa_r+0x2e0>
 80055fe:	2301      	movs	r3, #1
 8005600:	9302      	str	r3, [sp, #8]
 8005602:	4699      	mov	r9, r3
 8005604:	461a      	mov	r2, r3
 8005606:	e7f5      	b.n	80055f4 <_dtoa_r+0x2ec>
 8005608:	3101      	adds	r1, #1
 800560a:	6071      	str	r1, [r6, #4]
 800560c:	0052      	lsls	r2, r2, #1
 800560e:	e7a2      	b.n	8005556 <_dtoa_r+0x24e>
 8005610:	636f4361 	.word	0x636f4361
 8005614:	3fd287a7 	.word	0x3fd287a7
 8005618:	8b60c8b3 	.word	0x8b60c8b3
 800561c:	3fc68a28 	.word	0x3fc68a28
 8005620:	509f79fb 	.word	0x509f79fb
 8005624:	3fd34413 	.word	0x3fd34413
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	08008639 	.word	0x08008639
 8005630:	3ff80000 	.word	0x3ff80000
 8005634:	080086f8 	.word	0x080086f8
 8005638:	080086d0 	.word	0x080086d0
 800563c:	080086c1 	.word	0x080086c1
 8005640:	07f1      	lsls	r1, r6, #31
 8005642:	d508      	bpl.n	8005656 <_dtoa_r+0x34e>
 8005644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800564c:	f7fb f824 	bl	8000698 <__aeabi_dmul>
 8005650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005654:	3501      	adds	r5, #1
 8005656:	1076      	asrs	r6, r6, #1
 8005658:	3708      	adds	r7, #8
 800565a:	2e00      	cmp	r6, #0
 800565c:	d1f0      	bne.n	8005640 <_dtoa_r+0x338>
 800565e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005666:	f7fb f941 	bl	80008ec <__aeabi_ddiv>
 800566a:	e9cd 0100 	strd	r0, r1, [sp]
 800566e:	e01a      	b.n	80056a6 <_dtoa_r+0x39e>
 8005670:	2502      	movs	r5, #2
 8005672:	e7a3      	b.n	80055bc <_dtoa_r+0x2b4>
 8005674:	f000 80a0 	beq.w	80057b8 <_dtoa_r+0x4b0>
 8005678:	f1ca 0600 	rsb	r6, sl, #0
 800567c:	4b9f      	ldr	r3, [pc, #636]	; (80058fc <_dtoa_r+0x5f4>)
 800567e:	4fa0      	ldr	r7, [pc, #640]	; (8005900 <_dtoa_r+0x5f8>)
 8005680:	f006 020f 	and.w	r2, r6, #15
 8005684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005690:	f7fb f802 	bl	8000698 <__aeabi_dmul>
 8005694:	e9cd 0100 	strd	r0, r1, [sp]
 8005698:	1136      	asrs	r6, r6, #4
 800569a:	2300      	movs	r3, #0
 800569c:	2502      	movs	r5, #2
 800569e:	2e00      	cmp	r6, #0
 80056a0:	d17f      	bne.n	80057a2 <_dtoa_r+0x49a>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e1      	bne.n	800566a <_dtoa_r+0x362>
 80056a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8087 	beq.w	80057bc <_dtoa_r+0x4b4>
 80056ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056b2:	2200      	movs	r2, #0
 80056b4:	4b93      	ldr	r3, [pc, #588]	; (8005904 <_dtoa_r+0x5fc>)
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fb fa5f 	bl	8000b7c <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d07c      	beq.n	80057bc <_dtoa_r+0x4b4>
 80056c2:	f1b9 0f00 	cmp.w	r9, #0
 80056c6:	d079      	beq.n	80057bc <_dtoa_r+0x4b4>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd35      	ble.n	800573a <_dtoa_r+0x432>
 80056ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80056d2:	9308      	str	r3, [sp, #32]
 80056d4:	4639      	mov	r1, r7
 80056d6:	2200      	movs	r2, #0
 80056d8:	4b8b      	ldr	r3, [pc, #556]	; (8005908 <_dtoa_r+0x600>)
 80056da:	4630      	mov	r0, r6
 80056dc:	f7fa ffdc 	bl	8000698 <__aeabi_dmul>
 80056e0:	e9cd 0100 	strd	r0, r1, [sp]
 80056e4:	9f02      	ldr	r7, [sp, #8]
 80056e6:	3501      	adds	r5, #1
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7fa ff6b 	bl	80005c4 <__aeabi_i2d>
 80056ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056f2:	f7fa ffd1 	bl	8000698 <__aeabi_dmul>
 80056f6:	2200      	movs	r2, #0
 80056f8:	4b84      	ldr	r3, [pc, #528]	; (800590c <_dtoa_r+0x604>)
 80056fa:	f7fa fe17 	bl	800032c <__adddf3>
 80056fe:	4605      	mov	r5, r0
 8005700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005704:	2f00      	cmp	r7, #0
 8005706:	d15d      	bne.n	80057c4 <_dtoa_r+0x4bc>
 8005708:	2200      	movs	r2, #0
 800570a:	4b81      	ldr	r3, [pc, #516]	; (8005910 <_dtoa_r+0x608>)
 800570c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005710:	f7fa fe0a 	bl	8000328 <__aeabi_dsub>
 8005714:	462a      	mov	r2, r5
 8005716:	4633      	mov	r3, r6
 8005718:	e9cd 0100 	strd	r0, r1, [sp]
 800571c:	f7fb fa4c 	bl	8000bb8 <__aeabi_dcmpgt>
 8005720:	2800      	cmp	r0, #0
 8005722:	f040 8288 	bne.w	8005c36 <_dtoa_r+0x92e>
 8005726:	462a      	mov	r2, r5
 8005728:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800572c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005730:	f7fb fa24 	bl	8000b7c <__aeabi_dcmplt>
 8005734:	2800      	cmp	r0, #0
 8005736:	f040 827c 	bne.w	8005c32 <_dtoa_r+0x92a>
 800573a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800573e:	e9cd 2300 	strd	r2, r3, [sp]
 8005742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	f2c0 8150 	blt.w	80059ea <_dtoa_r+0x6e2>
 800574a:	f1ba 0f0e 	cmp.w	sl, #14
 800574e:	f300 814c 	bgt.w	80059ea <_dtoa_r+0x6e2>
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <_dtoa_r+0x5f4>)
 8005754:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005758:	ed93 7b00 	vldr	d7, [r3]
 800575c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575e:	2b00      	cmp	r3, #0
 8005760:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005764:	f280 80d8 	bge.w	8005918 <_dtoa_r+0x610>
 8005768:	f1b9 0f00 	cmp.w	r9, #0
 800576c:	f300 80d4 	bgt.w	8005918 <_dtoa_r+0x610>
 8005770:	f040 825e 	bne.w	8005c30 <_dtoa_r+0x928>
 8005774:	2200      	movs	r2, #0
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <_dtoa_r+0x608>)
 8005778:	ec51 0b17 	vmov	r0, r1, d7
 800577c:	f7fa ff8c 	bl	8000698 <__aeabi_dmul>
 8005780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005784:	f7fb fa0e 	bl	8000ba4 <__aeabi_dcmpge>
 8005788:	464f      	mov	r7, r9
 800578a:	464e      	mov	r6, r9
 800578c:	2800      	cmp	r0, #0
 800578e:	f040 8234 	bne.w	8005bfa <_dtoa_r+0x8f2>
 8005792:	2331      	movs	r3, #49	; 0x31
 8005794:	f10b 0501 	add.w	r5, fp, #1
 8005798:	f88b 3000 	strb.w	r3, [fp]
 800579c:	f10a 0a01 	add.w	sl, sl, #1
 80057a0:	e22f      	b.n	8005c02 <_dtoa_r+0x8fa>
 80057a2:	07f2      	lsls	r2, r6, #31
 80057a4:	d505      	bpl.n	80057b2 <_dtoa_r+0x4aa>
 80057a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057aa:	f7fa ff75 	bl	8000698 <__aeabi_dmul>
 80057ae:	3501      	adds	r5, #1
 80057b0:	2301      	movs	r3, #1
 80057b2:	1076      	asrs	r6, r6, #1
 80057b4:	3708      	adds	r7, #8
 80057b6:	e772      	b.n	800569e <_dtoa_r+0x396>
 80057b8:	2502      	movs	r5, #2
 80057ba:	e774      	b.n	80056a6 <_dtoa_r+0x39e>
 80057bc:	f8cd a020 	str.w	sl, [sp, #32]
 80057c0:	464f      	mov	r7, r9
 80057c2:	e791      	b.n	80056e8 <_dtoa_r+0x3e0>
 80057c4:	4b4d      	ldr	r3, [pc, #308]	; (80058fc <_dtoa_r+0x5f4>)
 80057c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80057ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d047      	beq.n	8005864 <_dtoa_r+0x55c>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	2000      	movs	r0, #0
 80057da:	494e      	ldr	r1, [pc, #312]	; (8005914 <_dtoa_r+0x60c>)
 80057dc:	f7fb f886 	bl	80008ec <__aeabi_ddiv>
 80057e0:	462a      	mov	r2, r5
 80057e2:	4633      	mov	r3, r6
 80057e4:	f7fa fda0 	bl	8000328 <__aeabi_dsub>
 80057e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057ec:	465d      	mov	r5, fp
 80057ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057f2:	f7fb fa01 	bl	8000bf8 <__aeabi_d2iz>
 80057f6:	4606      	mov	r6, r0
 80057f8:	f7fa fee4 	bl	80005c4 <__aeabi_i2d>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005804:	f7fa fd90 	bl	8000328 <__aeabi_dsub>
 8005808:	3630      	adds	r6, #48	; 0x30
 800580a:	f805 6b01 	strb.w	r6, [r5], #1
 800580e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005812:	e9cd 0100 	strd	r0, r1, [sp]
 8005816:	f7fb f9b1 	bl	8000b7c <__aeabi_dcmplt>
 800581a:	2800      	cmp	r0, #0
 800581c:	d163      	bne.n	80058e6 <_dtoa_r+0x5de>
 800581e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005822:	2000      	movs	r0, #0
 8005824:	4937      	ldr	r1, [pc, #220]	; (8005904 <_dtoa_r+0x5fc>)
 8005826:	f7fa fd7f 	bl	8000328 <__aeabi_dsub>
 800582a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800582e:	f7fb f9a5 	bl	8000b7c <__aeabi_dcmplt>
 8005832:	2800      	cmp	r0, #0
 8005834:	f040 80b7 	bne.w	80059a6 <_dtoa_r+0x69e>
 8005838:	eba5 030b 	sub.w	r3, r5, fp
 800583c:	429f      	cmp	r7, r3
 800583e:	f77f af7c 	ble.w	800573a <_dtoa_r+0x432>
 8005842:	2200      	movs	r2, #0
 8005844:	4b30      	ldr	r3, [pc, #192]	; (8005908 <_dtoa_r+0x600>)
 8005846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800584a:	f7fa ff25 	bl	8000698 <__aeabi_dmul>
 800584e:	2200      	movs	r2, #0
 8005850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <_dtoa_r+0x600>)
 8005856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800585a:	f7fa ff1d 	bl	8000698 <__aeabi_dmul>
 800585e:	e9cd 0100 	strd	r0, r1, [sp]
 8005862:	e7c4      	b.n	80057ee <_dtoa_r+0x4e6>
 8005864:	462a      	mov	r2, r5
 8005866:	4633      	mov	r3, r6
 8005868:	f7fa ff16 	bl	8000698 <__aeabi_dmul>
 800586c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005870:	eb0b 0507 	add.w	r5, fp, r7
 8005874:	465e      	mov	r6, fp
 8005876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800587a:	f7fb f9bd 	bl	8000bf8 <__aeabi_d2iz>
 800587e:	4607      	mov	r7, r0
 8005880:	f7fa fea0 	bl	80005c4 <__aeabi_i2d>
 8005884:	3730      	adds	r7, #48	; 0x30
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800588e:	f7fa fd4b 	bl	8000328 <__aeabi_dsub>
 8005892:	f806 7b01 	strb.w	r7, [r6], #1
 8005896:	42ae      	cmp	r6, r5
 8005898:	e9cd 0100 	strd	r0, r1, [sp]
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	d126      	bne.n	80058f0 <_dtoa_r+0x5e8>
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <_dtoa_r+0x60c>)
 80058a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a8:	f7fa fd40 	bl	800032c <__adddf3>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b4:	f7fb f980 	bl	8000bb8 <__aeabi_dcmpgt>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d174      	bne.n	80059a6 <_dtoa_r+0x69e>
 80058bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058c0:	2000      	movs	r0, #0
 80058c2:	4914      	ldr	r1, [pc, #80]	; (8005914 <_dtoa_r+0x60c>)
 80058c4:	f7fa fd30 	bl	8000328 <__aeabi_dsub>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d0:	f7fb f954 	bl	8000b7c <__aeabi_dcmplt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f af30 	beq.w	800573a <_dtoa_r+0x432>
 80058da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058de:	2b30      	cmp	r3, #48	; 0x30
 80058e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80058e4:	d002      	beq.n	80058ec <_dtoa_r+0x5e4>
 80058e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058ea:	e04a      	b.n	8005982 <_dtoa_r+0x67a>
 80058ec:	4615      	mov	r5, r2
 80058ee:	e7f4      	b.n	80058da <_dtoa_r+0x5d2>
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <_dtoa_r+0x600>)
 80058f2:	f7fa fed1 	bl	8000698 <__aeabi_dmul>
 80058f6:	e9cd 0100 	strd	r0, r1, [sp]
 80058fa:	e7bc      	b.n	8005876 <_dtoa_r+0x56e>
 80058fc:	080086f8 	.word	0x080086f8
 8005900:	080086d0 	.word	0x080086d0
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	40240000 	.word	0x40240000
 800590c:	401c0000 	.word	0x401c0000
 8005910:	40140000 	.word	0x40140000
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	e9dd 6700 	ldrd	r6, r7, [sp]
 800591c:	465d      	mov	r5, fp
 800591e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fa ffe1 	bl	80008ec <__aeabi_ddiv>
 800592a:	f7fb f965 	bl	8000bf8 <__aeabi_d2iz>
 800592e:	4680      	mov	r8, r0
 8005930:	f7fa fe48 	bl	80005c4 <__aeabi_i2d>
 8005934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005938:	f7fa feae 	bl	8000698 <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005948:	f7fa fcee 	bl	8000328 <__aeabi_dsub>
 800594c:	f805 6b01 	strb.w	r6, [r5], #1
 8005950:	eba5 060b 	sub.w	r6, r5, fp
 8005954:	45b1      	cmp	r9, r6
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	d139      	bne.n	80059d0 <_dtoa_r+0x6c8>
 800595c:	f7fa fce6 	bl	800032c <__adddf3>
 8005960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005964:	4606      	mov	r6, r0
 8005966:	460f      	mov	r7, r1
 8005968:	f7fb f926 	bl	8000bb8 <__aeabi_dcmpgt>
 800596c:	b9c8      	cbnz	r0, 80059a2 <_dtoa_r+0x69a>
 800596e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005972:	4630      	mov	r0, r6
 8005974:	4639      	mov	r1, r7
 8005976:	f7fb f8f7 	bl	8000b68 <__aeabi_dcmpeq>
 800597a:	b110      	cbz	r0, 8005982 <_dtoa_r+0x67a>
 800597c:	f018 0f01 	tst.w	r8, #1
 8005980:	d10f      	bne.n	80059a2 <_dtoa_r+0x69a>
 8005982:	9904      	ldr	r1, [sp, #16]
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fdff 	bl	8006588 <_Bfree>
 800598a:	2300      	movs	r3, #0
 800598c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800598e:	702b      	strb	r3, [r5, #0]
 8005990:	f10a 0301 	add.w	r3, sl, #1
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8241 	beq.w	8005e20 <_dtoa_r+0xb18>
 800599e:	601d      	str	r5, [r3, #0]
 80059a0:	e23e      	b.n	8005e20 <_dtoa_r+0xb18>
 80059a2:	f8cd a020 	str.w	sl, [sp, #32]
 80059a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059aa:	2a39      	cmp	r2, #57	; 0x39
 80059ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80059b0:	d108      	bne.n	80059c4 <_dtoa_r+0x6bc>
 80059b2:	459b      	cmp	fp, r3
 80059b4:	d10a      	bne.n	80059cc <_dtoa_r+0x6c4>
 80059b6:	9b08      	ldr	r3, [sp, #32]
 80059b8:	3301      	adds	r3, #1
 80059ba:	9308      	str	r3, [sp, #32]
 80059bc:	2330      	movs	r3, #48	; 0x30
 80059be:	f88b 3000 	strb.w	r3, [fp]
 80059c2:	465b      	mov	r3, fp
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	3201      	adds	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e78c      	b.n	80058e6 <_dtoa_r+0x5de>
 80059cc:	461d      	mov	r5, r3
 80059ce:	e7ea      	b.n	80059a6 <_dtoa_r+0x69e>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b9b      	ldr	r3, [pc, #620]	; (8005c40 <_dtoa_r+0x938>)
 80059d4:	f7fa fe60 	bl	8000698 <__aeabi_dmul>
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	f7fb f8c2 	bl	8000b68 <__aeabi_dcmpeq>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d09a      	beq.n	800591e <_dtoa_r+0x616>
 80059e8:	e7cb      	b.n	8005982 <_dtoa_r+0x67a>
 80059ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ec:	2a00      	cmp	r2, #0
 80059ee:	f000 808b 	beq.w	8005b08 <_dtoa_r+0x800>
 80059f2:	9a06      	ldr	r2, [sp, #24]
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	dc6e      	bgt.n	8005ad6 <_dtoa_r+0x7ce>
 80059f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d067      	beq.n	8005ace <_dtoa_r+0x7c6>
 80059fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a02:	9f07      	ldr	r7, [sp, #28]
 8005a04:	9d05      	ldr	r5, [sp, #20]
 8005a06:	9a05      	ldr	r2, [sp, #20]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	441a      	add	r2, r3
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	9205      	str	r2, [sp, #20]
 8005a10:	4498      	add	r8, r3
 8005a12:	f000 fe97 	bl	8006744 <__i2b>
 8005a16:	4606      	mov	r6, r0
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	dd0c      	ble.n	8005a36 <_dtoa_r+0x72e>
 8005a1c:	f1b8 0f00 	cmp.w	r8, #0
 8005a20:	dd09      	ble.n	8005a36 <_dtoa_r+0x72e>
 8005a22:	4545      	cmp	r5, r8
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	462b      	mov	r3, r5
 8005a28:	bfa8      	it	ge
 8005a2a:	4643      	movge	r3, r8
 8005a2c:	1ad2      	subs	r2, r2, r3
 8005a2e:	9205      	str	r2, [sp, #20]
 8005a30:	1aed      	subs	r5, r5, r3
 8005a32:	eba8 0803 	sub.w	r8, r8, r3
 8005a36:	9b07      	ldr	r3, [sp, #28]
 8005a38:	b1eb      	cbz	r3, 8005a76 <_dtoa_r+0x76e>
 8005a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d067      	beq.n	8005b10 <_dtoa_r+0x808>
 8005a40:	b18f      	cbz	r7, 8005a66 <_dtoa_r+0x75e>
 8005a42:	4631      	mov	r1, r6
 8005a44:	463a      	mov	r2, r7
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 ff1c 	bl	8006884 <__pow5mult>
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	4601      	mov	r1, r0
 8005a50:	4606      	mov	r6, r0
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 fe7f 	bl	8006756 <__multiply>
 8005a58:	9904      	ldr	r1, [sp, #16]
 8005a5a:	9008      	str	r0, [sp, #32]
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 fd93 	bl	8006588 <_Bfree>
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	1bda      	subs	r2, r3, r7
 8005a6a:	d004      	beq.n	8005a76 <_dtoa_r+0x76e>
 8005a6c:	9904      	ldr	r1, [sp, #16]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 ff08 	bl	8006884 <__pow5mult>
 8005a74:	9004      	str	r0, [sp, #16]
 8005a76:	2101      	movs	r1, #1
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fe63 	bl	8006744 <__i2b>
 8005a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a80:	4607      	mov	r7, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 81d0 	beq.w	8005e28 <_dtoa_r+0xb20>
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 fef9 	bl	8006884 <__pow5mult>
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	4607      	mov	r7, r0
 8005a98:	dc40      	bgt.n	8005b1c <_dtoa_r+0x814>
 8005a9a:	9b00      	ldr	r3, [sp, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d139      	bne.n	8005b14 <_dtoa_r+0x80c>
 8005aa0:	9b01      	ldr	r3, [sp, #4]
 8005aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d136      	bne.n	8005b18 <_dtoa_r+0x810>
 8005aaa:	9b01      	ldr	r3, [sp, #4]
 8005aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	0d1b      	lsrs	r3, r3, #20
 8005ab2:	051b      	lsls	r3, r3, #20
 8005ab4:	b12b      	cbz	r3, 8005ac2 <_dtoa_r+0x7ba>
 8005ab6:	9b05      	ldr	r3, [sp, #20]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	f108 0801 	add.w	r8, r8, #1
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12a      	bne.n	8005b20 <_dtoa_r+0x818>
 8005aca:	2001      	movs	r0, #1
 8005acc:	e030      	b.n	8005b30 <_dtoa_r+0x828>
 8005ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ad0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ad4:	e795      	b.n	8005a02 <_dtoa_r+0x6fa>
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005adc:	42bb      	cmp	r3, r7
 8005ade:	bfbf      	itttt	lt
 8005ae0:	9b07      	ldrlt	r3, [sp, #28]
 8005ae2:	9707      	strlt	r7, [sp, #28]
 8005ae4:	1afa      	sublt	r2, r7, r3
 8005ae6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ae8:	bfbb      	ittet	lt
 8005aea:	189b      	addlt	r3, r3, r2
 8005aec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005aee:	1bdf      	subge	r7, r3, r7
 8005af0:	2700      	movlt	r7, #0
 8005af2:	f1b9 0f00 	cmp.w	r9, #0
 8005af6:	bfb5      	itete	lt
 8005af8:	9b05      	ldrlt	r3, [sp, #20]
 8005afa:	9d05      	ldrge	r5, [sp, #20]
 8005afc:	eba3 0509 	sublt.w	r5, r3, r9
 8005b00:	464b      	movge	r3, r9
 8005b02:	bfb8      	it	lt
 8005b04:	2300      	movlt	r3, #0
 8005b06:	e77e      	b.n	8005a06 <_dtoa_r+0x6fe>
 8005b08:	9f07      	ldr	r7, [sp, #28]
 8005b0a:	9d05      	ldr	r5, [sp, #20]
 8005b0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b0e:	e783      	b.n	8005a18 <_dtoa_r+0x710>
 8005b10:	9a07      	ldr	r2, [sp, #28]
 8005b12:	e7ab      	b.n	8005a6c <_dtoa_r+0x764>
 8005b14:	2300      	movs	r3, #0
 8005b16:	e7d4      	b.n	8005ac2 <_dtoa_r+0x7ba>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	e7d2      	b.n	8005ac2 <_dtoa_r+0x7ba>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9307      	str	r3, [sp, #28]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b26:	6918      	ldr	r0, [r3, #16]
 8005b28:	f000 fdbe 	bl	80066a8 <__hi0bits>
 8005b2c:	f1c0 0020 	rsb	r0, r0, #32
 8005b30:	4440      	add	r0, r8
 8005b32:	f010 001f 	ands.w	r0, r0, #31
 8005b36:	d047      	beq.n	8005bc8 <_dtoa_r+0x8c0>
 8005b38:	f1c0 0320 	rsb	r3, r0, #32
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	dd3b      	ble.n	8005bb8 <_dtoa_r+0x8b0>
 8005b40:	9b05      	ldr	r3, [sp, #20]
 8005b42:	f1c0 001c 	rsb	r0, r0, #28
 8005b46:	4403      	add	r3, r0
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	4405      	add	r5, r0
 8005b4c:	4480      	add	r8, r0
 8005b4e:	9b05      	ldr	r3, [sp, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dd05      	ble.n	8005b60 <_dtoa_r+0x858>
 8005b54:	461a      	mov	r2, r3
 8005b56:	9904      	ldr	r1, [sp, #16]
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fee1 	bl	8006920 <__lshift>
 8005b5e:	9004      	str	r0, [sp, #16]
 8005b60:	f1b8 0f00 	cmp.w	r8, #0
 8005b64:	dd05      	ble.n	8005b72 <_dtoa_r+0x86a>
 8005b66:	4639      	mov	r1, r7
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 fed8 	bl	8006920 <__lshift>
 8005b70:	4607      	mov	r7, r0
 8005b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b74:	b353      	cbz	r3, 8005bcc <_dtoa_r+0x8c4>
 8005b76:	4639      	mov	r1, r7
 8005b78:	9804      	ldr	r0, [sp, #16]
 8005b7a:	f000 ff25 	bl	80069c8 <__mcmp>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	da24      	bge.n	8005bcc <_dtoa_r+0x8c4>
 8005b82:	2300      	movs	r3, #0
 8005b84:	220a      	movs	r2, #10
 8005b86:	9904      	ldr	r1, [sp, #16]
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fd14 	bl	80065b6 <__multadd>
 8005b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b90:	9004      	str	r0, [sp, #16]
 8005b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 814d 	beq.w	8005e36 <_dtoa_r+0xb2e>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 fd07 	bl	80065b6 <__multadd>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	4606      	mov	r6, r0
 8005bae:	dc4f      	bgt.n	8005c50 <_dtoa_r+0x948>
 8005bb0:	9b06      	ldr	r3, [sp, #24]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	dd4c      	ble.n	8005c50 <_dtoa_r+0x948>
 8005bb6:	e011      	b.n	8005bdc <_dtoa_r+0x8d4>
 8005bb8:	d0c9      	beq.n	8005b4e <_dtoa_r+0x846>
 8005bba:	9a05      	ldr	r2, [sp, #20]
 8005bbc:	331c      	adds	r3, #28
 8005bbe:	441a      	add	r2, r3
 8005bc0:	9205      	str	r2, [sp, #20]
 8005bc2:	441d      	add	r5, r3
 8005bc4:	4498      	add	r8, r3
 8005bc6:	e7c2      	b.n	8005b4e <_dtoa_r+0x846>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	e7f6      	b.n	8005bba <_dtoa_r+0x8b2>
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	dc38      	bgt.n	8005c44 <_dtoa_r+0x93c>
 8005bd2:	9b06      	ldr	r3, [sp, #24]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	dd35      	ble.n	8005c44 <_dtoa_r+0x93c>
 8005bd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	b963      	cbnz	r3, 8005bfa <_dtoa_r+0x8f2>
 8005be0:	4639      	mov	r1, r7
 8005be2:	2205      	movs	r2, #5
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 fce6 	bl	80065b6 <__multadd>
 8005bea:	4601      	mov	r1, r0
 8005bec:	4607      	mov	r7, r0
 8005bee:	9804      	ldr	r0, [sp, #16]
 8005bf0:	f000 feea 	bl	80069c8 <__mcmp>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f73f adcc 	bgt.w	8005792 <_dtoa_r+0x48a>
 8005bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bfc:	465d      	mov	r5, fp
 8005bfe:	ea6f 0a03 	mvn.w	sl, r3
 8005c02:	f04f 0900 	mov.w	r9, #0
 8005c06:	4639      	mov	r1, r7
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fcbd 	bl	8006588 <_Bfree>
 8005c0e:	2e00      	cmp	r6, #0
 8005c10:	f43f aeb7 	beq.w	8005982 <_dtoa_r+0x67a>
 8005c14:	f1b9 0f00 	cmp.w	r9, #0
 8005c18:	d005      	beq.n	8005c26 <_dtoa_r+0x91e>
 8005c1a:	45b1      	cmp	r9, r6
 8005c1c:	d003      	beq.n	8005c26 <_dtoa_r+0x91e>
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fcb1 	bl	8006588 <_Bfree>
 8005c26:	4631      	mov	r1, r6
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fcad 	bl	8006588 <_Bfree>
 8005c2e:	e6a8      	b.n	8005982 <_dtoa_r+0x67a>
 8005c30:	2700      	movs	r7, #0
 8005c32:	463e      	mov	r6, r7
 8005c34:	e7e1      	b.n	8005bfa <_dtoa_r+0x8f2>
 8005c36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c3a:	463e      	mov	r6, r7
 8005c3c:	e5a9      	b.n	8005792 <_dtoa_r+0x48a>
 8005c3e:	bf00      	nop
 8005c40:	40240000 	.word	0x40240000
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80fa 	beq.w	8005e44 <_dtoa_r+0xb3c>
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	dd05      	ble.n	8005c60 <_dtoa_r+0x958>
 8005c54:	4631      	mov	r1, r6
 8005c56:	462a      	mov	r2, r5
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fe61 	bl	8006920 <__lshift>
 8005c5e:	4606      	mov	r6, r0
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04c      	beq.n	8005d00 <_dtoa_r+0x9f8>
 8005c66:	6871      	ldr	r1, [r6, #4]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fc59 	bl	8006520 <_Balloc>
 8005c6e:	6932      	ldr	r2, [r6, #16]
 8005c70:	3202      	adds	r2, #2
 8005c72:	4605      	mov	r5, r0
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	f106 010c 	add.w	r1, r6, #12
 8005c7a:	300c      	adds	r0, #12
 8005c7c:	f7fd fd8a 	bl	8003794 <memcpy>
 8005c80:	2201      	movs	r2, #1
 8005c82:	4629      	mov	r1, r5
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 fe4b 	bl	8006920 <__lshift>
 8005c8a:	9b00      	ldr	r3, [sp, #0]
 8005c8c:	f8cd b014 	str.w	fp, [sp, #20]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	46b1      	mov	r9, r6
 8005c96:	9307      	str	r3, [sp, #28]
 8005c98:	4606      	mov	r6, r0
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	9804      	ldr	r0, [sp, #16]
 8005c9e:	f7ff faa4 	bl	80051ea <quorem>
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005caa:	9804      	ldr	r0, [sp, #16]
 8005cac:	f000 fe8c 	bl	80069c8 <__mcmp>
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	9000      	str	r0, [sp, #0]
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 fea0 	bl	80069fc <__mdiff>
 8005cbc:	68c3      	ldr	r3, [r0, #12]
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	bb03      	cbnz	r3, 8005d04 <_dtoa_r+0x9fc>
 8005cc2:	4601      	mov	r1, r0
 8005cc4:	9008      	str	r0, [sp, #32]
 8005cc6:	9804      	ldr	r0, [sp, #16]
 8005cc8:	f000 fe7e 	bl	80069c8 <__mcmp>
 8005ccc:	9a08      	ldr	r2, [sp, #32]
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	9308      	str	r3, [sp, #32]
 8005cd6:	f000 fc57 	bl	8006588 <_Bfree>
 8005cda:	9b08      	ldr	r3, [sp, #32]
 8005cdc:	b9a3      	cbnz	r3, 8005d08 <_dtoa_r+0xa00>
 8005cde:	9a06      	ldr	r2, [sp, #24]
 8005ce0:	b992      	cbnz	r2, 8005d08 <_dtoa_r+0xa00>
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	b982      	cbnz	r2, 8005d08 <_dtoa_r+0xa00>
 8005ce6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cea:	d029      	beq.n	8005d40 <_dtoa_r+0xa38>
 8005cec:	9b00      	ldr	r3, [sp, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dd01      	ble.n	8005cf6 <_dtoa_r+0x9ee>
 8005cf2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	1c5d      	adds	r5, r3, #1
 8005cfa:	f883 8000 	strb.w	r8, [r3]
 8005cfe:	e782      	b.n	8005c06 <_dtoa_r+0x8fe>
 8005d00:	4630      	mov	r0, r6
 8005d02:	e7c2      	b.n	8005c8a <_dtoa_r+0x982>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e7e3      	b.n	8005cd0 <_dtoa_r+0x9c8>
 8005d08:	9a00      	ldr	r2, [sp, #0]
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	db04      	blt.n	8005d18 <_dtoa_r+0xa10>
 8005d0e:	d125      	bne.n	8005d5c <_dtoa_r+0xa54>
 8005d10:	9a06      	ldr	r2, [sp, #24]
 8005d12:	bb1a      	cbnz	r2, 8005d5c <_dtoa_r+0xa54>
 8005d14:	9a07      	ldr	r2, [sp, #28]
 8005d16:	bb0a      	cbnz	r2, 8005d5c <_dtoa_r+0xa54>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	ddec      	ble.n	8005cf6 <_dtoa_r+0x9ee>
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	9904      	ldr	r1, [sp, #16]
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fdfd 	bl	8006920 <__lshift>
 8005d26:	4639      	mov	r1, r7
 8005d28:	9004      	str	r0, [sp, #16]
 8005d2a:	f000 fe4d 	bl	80069c8 <__mcmp>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	dc03      	bgt.n	8005d3a <_dtoa_r+0xa32>
 8005d32:	d1e0      	bne.n	8005cf6 <_dtoa_r+0x9ee>
 8005d34:	f018 0f01 	tst.w	r8, #1
 8005d38:	d0dd      	beq.n	8005cf6 <_dtoa_r+0x9ee>
 8005d3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d3e:	d1d8      	bne.n	8005cf2 <_dtoa_r+0x9ea>
 8005d40:	9b05      	ldr	r3, [sp, #20]
 8005d42:	9a05      	ldr	r2, [sp, #20]
 8005d44:	1c5d      	adds	r5, r3, #1
 8005d46:	2339      	movs	r3, #57	; 0x39
 8005d48:	7013      	strb	r3, [r2, #0]
 8005d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d4e:	2b39      	cmp	r3, #57	; 0x39
 8005d50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005d54:	d04f      	beq.n	8005df6 <_dtoa_r+0xaee>
 8005d56:	3301      	adds	r3, #1
 8005d58:	7013      	strb	r3, [r2, #0]
 8005d5a:	e754      	b.n	8005c06 <_dtoa_r+0x8fe>
 8005d5c:	9a05      	ldr	r2, [sp, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f102 0501 	add.w	r5, r2, #1
 8005d64:	dd06      	ble.n	8005d74 <_dtoa_r+0xa6c>
 8005d66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d6a:	d0e9      	beq.n	8005d40 <_dtoa_r+0xa38>
 8005d6c:	f108 0801 	add.w	r8, r8, #1
 8005d70:	9b05      	ldr	r3, [sp, #20]
 8005d72:	e7c2      	b.n	8005cfa <_dtoa_r+0x9f2>
 8005d74:	9a02      	ldr	r2, [sp, #8]
 8005d76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005d7a:	eba5 030b 	sub.w	r3, r5, fp
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d021      	beq.n	8005dc6 <_dtoa_r+0xabe>
 8005d82:	2300      	movs	r3, #0
 8005d84:	220a      	movs	r2, #10
 8005d86:	9904      	ldr	r1, [sp, #16]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fc14 	bl	80065b6 <__multadd>
 8005d8e:	45b1      	cmp	r9, r6
 8005d90:	9004      	str	r0, [sp, #16]
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	f04f 020a 	mov.w	r2, #10
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	d105      	bne.n	8005dac <_dtoa_r+0xaa4>
 8005da0:	f000 fc09 	bl	80065b6 <__multadd>
 8005da4:	4681      	mov	r9, r0
 8005da6:	4606      	mov	r6, r0
 8005da8:	9505      	str	r5, [sp, #20]
 8005daa:	e776      	b.n	8005c9a <_dtoa_r+0x992>
 8005dac:	f000 fc03 	bl	80065b6 <__multadd>
 8005db0:	4631      	mov	r1, r6
 8005db2:	4681      	mov	r9, r0
 8005db4:	2300      	movs	r3, #0
 8005db6:	220a      	movs	r2, #10
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 fbfc 	bl	80065b6 <__multadd>
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	e7f2      	b.n	8005da8 <_dtoa_r+0xaa0>
 8005dc2:	f04f 0900 	mov.w	r9, #0
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	9904      	ldr	r1, [sp, #16]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 fda8 	bl	8006920 <__lshift>
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	9004      	str	r0, [sp, #16]
 8005dd4:	f000 fdf8 	bl	80069c8 <__mcmp>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	dcb6      	bgt.n	8005d4a <_dtoa_r+0xa42>
 8005ddc:	d102      	bne.n	8005de4 <_dtoa_r+0xadc>
 8005dde:	f018 0f01 	tst.w	r8, #1
 8005de2:	d1b2      	bne.n	8005d4a <_dtoa_r+0xa42>
 8005de4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005dee:	f47f af0a 	bne.w	8005c06 <_dtoa_r+0x8fe>
 8005df2:	4615      	mov	r5, r2
 8005df4:	e7f6      	b.n	8005de4 <_dtoa_r+0xadc>
 8005df6:	4593      	cmp	fp, r2
 8005df8:	d105      	bne.n	8005e06 <_dtoa_r+0xafe>
 8005dfa:	2331      	movs	r3, #49	; 0x31
 8005dfc:	f10a 0a01 	add.w	sl, sl, #1
 8005e00:	f88b 3000 	strb.w	r3, [fp]
 8005e04:	e6ff      	b.n	8005c06 <_dtoa_r+0x8fe>
 8005e06:	4615      	mov	r5, r2
 8005e08:	e79f      	b.n	8005d4a <_dtoa_r+0xa42>
 8005e0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005e70 <_dtoa_r+0xb68>
 8005e0e:	e007      	b.n	8005e20 <_dtoa_r+0xb18>
 8005e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005e74 <_dtoa_r+0xb6c>
 8005e16:	b11b      	cbz	r3, 8005e20 <_dtoa_r+0xb18>
 8005e18:	f10b 0308 	add.w	r3, fp, #8
 8005e1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4658      	mov	r0, fp
 8005e22:	b017      	add	sp, #92	; 0x5c
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	9b06      	ldr	r3, [sp, #24]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f77f ae35 	ble.w	8005a9a <_dtoa_r+0x792>
 8005e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e32:	9307      	str	r3, [sp, #28]
 8005e34:	e649      	b.n	8005aca <_dtoa_r+0x7c2>
 8005e36:	9b02      	ldr	r3, [sp, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dc03      	bgt.n	8005e44 <_dtoa_r+0xb3c>
 8005e3c:	9b06      	ldr	r3, [sp, #24]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	f73f aecc 	bgt.w	8005bdc <_dtoa_r+0x8d4>
 8005e44:	465d      	mov	r5, fp
 8005e46:	4639      	mov	r1, r7
 8005e48:	9804      	ldr	r0, [sp, #16]
 8005e4a:	f7ff f9ce 	bl	80051ea <quorem>
 8005e4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e52:	f805 8b01 	strb.w	r8, [r5], #1
 8005e56:	9a02      	ldr	r2, [sp, #8]
 8005e58:	eba5 030b 	sub.w	r3, r5, fp
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	ddb0      	ble.n	8005dc2 <_dtoa_r+0xaba>
 8005e60:	2300      	movs	r3, #0
 8005e62:	220a      	movs	r2, #10
 8005e64:	9904      	ldr	r1, [sp, #16]
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fba5 	bl	80065b6 <__multadd>
 8005e6c:	9004      	str	r0, [sp, #16]
 8005e6e:	e7ea      	b.n	8005e46 <_dtoa_r+0xb3e>
 8005e70:	08008638 	.word	0x08008638
 8005e74:	080086b8 	.word	0x080086b8

08005e78 <rshift>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	6906      	ldr	r6, [r0, #16]
 8005e7c:	114b      	asrs	r3, r1, #5
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	f100 0414 	add.w	r4, r0, #20
 8005e84:	dd30      	ble.n	8005ee8 <rshift+0x70>
 8005e86:	f011 011f 	ands.w	r1, r1, #31
 8005e8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005e8e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005e92:	d108      	bne.n	8005ea6 <rshift+0x2e>
 8005e94:	4621      	mov	r1, r4
 8005e96:	42b2      	cmp	r2, r6
 8005e98:	460b      	mov	r3, r1
 8005e9a:	d211      	bcs.n	8005ec0 <rshift+0x48>
 8005e9c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005ea0:	f841 3b04 	str.w	r3, [r1], #4
 8005ea4:	e7f7      	b.n	8005e96 <rshift+0x1e>
 8005ea6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005eaa:	f1c1 0c20 	rsb	ip, r1, #32
 8005eae:	40cd      	lsrs	r5, r1
 8005eb0:	3204      	adds	r2, #4
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	42b2      	cmp	r2, r6
 8005eb6:	4617      	mov	r7, r2
 8005eb8:	d30c      	bcc.n	8005ed4 <rshift+0x5c>
 8005eba:	601d      	str	r5, [r3, #0]
 8005ebc:	b105      	cbz	r5, 8005ec0 <rshift+0x48>
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	1b1a      	subs	r2, r3, r4
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005ec8:	bf08      	it	eq
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	6102      	str	r2, [r0, #16]
 8005ece:	bf08      	it	eq
 8005ed0:	6143      	streq	r3, [r0, #20]
 8005ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed4:	683f      	ldr	r7, [r7, #0]
 8005ed6:	fa07 f70c 	lsl.w	r7, r7, ip
 8005eda:	433d      	orrs	r5, r7
 8005edc:	f843 5b04 	str.w	r5, [r3], #4
 8005ee0:	f852 5b04 	ldr.w	r5, [r2], #4
 8005ee4:	40cd      	lsrs	r5, r1
 8005ee6:	e7e5      	b.n	8005eb4 <rshift+0x3c>
 8005ee8:	4623      	mov	r3, r4
 8005eea:	e7e9      	b.n	8005ec0 <rshift+0x48>

08005eec <__hexdig_fun>:
 8005eec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005ef0:	2b09      	cmp	r3, #9
 8005ef2:	d802      	bhi.n	8005efa <__hexdig_fun+0xe>
 8005ef4:	3820      	subs	r0, #32
 8005ef6:	b2c0      	uxtb	r0, r0
 8005ef8:	4770      	bx	lr
 8005efa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d801      	bhi.n	8005f06 <__hexdig_fun+0x1a>
 8005f02:	3847      	subs	r0, #71	; 0x47
 8005f04:	e7f7      	b.n	8005ef6 <__hexdig_fun+0xa>
 8005f06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d801      	bhi.n	8005f12 <__hexdig_fun+0x26>
 8005f0e:	3827      	subs	r0, #39	; 0x27
 8005f10:	e7f1      	b.n	8005ef6 <__hexdig_fun+0xa>
 8005f12:	2000      	movs	r0, #0
 8005f14:	4770      	bx	lr

08005f16 <__gethex>:
 8005f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	b08b      	sub	sp, #44	; 0x2c
 8005f1c:	468a      	mov	sl, r1
 8005f1e:	9002      	str	r0, [sp, #8]
 8005f20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005f22:	9306      	str	r3, [sp, #24]
 8005f24:	4690      	mov	r8, r2
 8005f26:	f000 fad0 	bl	80064ca <__localeconv_l>
 8005f2a:	6803      	ldr	r3, [r0, #0]
 8005f2c:	9303      	str	r3, [sp, #12]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa f99a 	bl	8000268 <strlen>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	9001      	str	r0, [sp, #4]
 8005f38:	4403      	add	r3, r0
 8005f3a:	f04f 0b00 	mov.w	fp, #0
 8005f3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f42:	9307      	str	r3, [sp, #28]
 8005f44:	f8da 3000 	ldr.w	r3, [sl]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f50:	2830      	cmp	r0, #48	; 0x30
 8005f52:	d06c      	beq.n	800602e <__gethex+0x118>
 8005f54:	f7ff ffca 	bl	8005eec <__hexdig_fun>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d16a      	bne.n	8006034 <__gethex+0x11e>
 8005f5e:	9a01      	ldr	r2, [sp, #4]
 8005f60:	9903      	ldr	r1, [sp, #12]
 8005f62:	4638      	mov	r0, r7
 8005f64:	f001 f8f4 	bl	8007150 <strncmp>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d166      	bne.n	800603a <__gethex+0x124>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	5cf8      	ldrb	r0, [r7, r3]
 8005f70:	18fe      	adds	r6, r7, r3
 8005f72:	f7ff ffbb 	bl	8005eec <__hexdig_fun>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d062      	beq.n	8006040 <__gethex+0x12a>
 8005f7a:	4633      	mov	r3, r6
 8005f7c:	7818      	ldrb	r0, [r3, #0]
 8005f7e:	2830      	cmp	r0, #48	; 0x30
 8005f80:	461f      	mov	r7, r3
 8005f82:	f103 0301 	add.w	r3, r3, #1
 8005f86:	d0f9      	beq.n	8005f7c <__gethex+0x66>
 8005f88:	f7ff ffb0 	bl	8005eec <__hexdig_fun>
 8005f8c:	fab0 f580 	clz	r5, r0
 8005f90:	096d      	lsrs	r5, r5, #5
 8005f92:	4634      	mov	r4, r6
 8005f94:	f04f 0b01 	mov.w	fp, #1
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4616      	mov	r6, r2
 8005f9c:	3201      	adds	r2, #1
 8005f9e:	7830      	ldrb	r0, [r6, #0]
 8005fa0:	f7ff ffa4 	bl	8005eec <__hexdig_fun>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d1f8      	bne.n	8005f9a <__gethex+0x84>
 8005fa8:	9a01      	ldr	r2, [sp, #4]
 8005faa:	9903      	ldr	r1, [sp, #12]
 8005fac:	4630      	mov	r0, r6
 8005fae:	f001 f8cf 	bl	8007150 <strncmp>
 8005fb2:	b950      	cbnz	r0, 8005fca <__gethex+0xb4>
 8005fb4:	b954      	cbnz	r4, 8005fcc <__gethex+0xb6>
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	18f4      	adds	r4, r6, r3
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	3201      	adds	r2, #1
 8005fc0:	7830      	ldrb	r0, [r6, #0]
 8005fc2:	f7ff ff93 	bl	8005eec <__hexdig_fun>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d1f8      	bne.n	8005fbc <__gethex+0xa6>
 8005fca:	b10c      	cbz	r4, 8005fd0 <__gethex+0xba>
 8005fcc:	1ba4      	subs	r4, r4, r6
 8005fce:	00a4      	lsls	r4, r4, #2
 8005fd0:	7833      	ldrb	r3, [r6, #0]
 8005fd2:	2b50      	cmp	r3, #80	; 0x50
 8005fd4:	d001      	beq.n	8005fda <__gethex+0xc4>
 8005fd6:	2b70      	cmp	r3, #112	; 0x70
 8005fd8:	d140      	bne.n	800605c <__gethex+0x146>
 8005fda:	7873      	ldrb	r3, [r6, #1]
 8005fdc:	2b2b      	cmp	r3, #43	; 0x2b
 8005fde:	d031      	beq.n	8006044 <__gethex+0x12e>
 8005fe0:	2b2d      	cmp	r3, #45	; 0x2d
 8005fe2:	d033      	beq.n	800604c <__gethex+0x136>
 8005fe4:	1c71      	adds	r1, r6, #1
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	7808      	ldrb	r0, [r1, #0]
 8005fec:	f7ff ff7e 	bl	8005eec <__hexdig_fun>
 8005ff0:	1e43      	subs	r3, r0, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b18      	cmp	r3, #24
 8005ff6:	d831      	bhi.n	800605c <__gethex+0x146>
 8005ff8:	f1a0 0210 	sub.w	r2, r0, #16
 8005ffc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006000:	f7ff ff74 	bl	8005eec <__hexdig_fun>
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b18      	cmp	r3, #24
 800600a:	d922      	bls.n	8006052 <__gethex+0x13c>
 800600c:	f1b9 0f00 	cmp.w	r9, #0
 8006010:	d000      	beq.n	8006014 <__gethex+0xfe>
 8006012:	4252      	negs	r2, r2
 8006014:	4414      	add	r4, r2
 8006016:	f8ca 1000 	str.w	r1, [sl]
 800601a:	b30d      	cbz	r5, 8006060 <__gethex+0x14a>
 800601c:	f1bb 0f00 	cmp.w	fp, #0
 8006020:	bf0c      	ite	eq
 8006022:	2706      	moveq	r7, #6
 8006024:	2700      	movne	r7, #0
 8006026:	4638      	mov	r0, r7
 8006028:	b00b      	add	sp, #44	; 0x2c
 800602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602e:	f10b 0b01 	add.w	fp, fp, #1
 8006032:	e78a      	b.n	8005f4a <__gethex+0x34>
 8006034:	2500      	movs	r5, #0
 8006036:	462c      	mov	r4, r5
 8006038:	e7ae      	b.n	8005f98 <__gethex+0x82>
 800603a:	463e      	mov	r6, r7
 800603c:	2501      	movs	r5, #1
 800603e:	e7c7      	b.n	8005fd0 <__gethex+0xba>
 8006040:	4604      	mov	r4, r0
 8006042:	e7fb      	b.n	800603c <__gethex+0x126>
 8006044:	f04f 0900 	mov.w	r9, #0
 8006048:	1cb1      	adds	r1, r6, #2
 800604a:	e7ce      	b.n	8005fea <__gethex+0xd4>
 800604c:	f04f 0901 	mov.w	r9, #1
 8006050:	e7fa      	b.n	8006048 <__gethex+0x132>
 8006052:	230a      	movs	r3, #10
 8006054:	fb03 0202 	mla	r2, r3, r2, r0
 8006058:	3a10      	subs	r2, #16
 800605a:	e7cf      	b.n	8005ffc <__gethex+0xe6>
 800605c:	4631      	mov	r1, r6
 800605e:	e7da      	b.n	8006016 <__gethex+0x100>
 8006060:	1bf3      	subs	r3, r6, r7
 8006062:	3b01      	subs	r3, #1
 8006064:	4629      	mov	r1, r5
 8006066:	2b07      	cmp	r3, #7
 8006068:	dc49      	bgt.n	80060fe <__gethex+0x1e8>
 800606a:	9802      	ldr	r0, [sp, #8]
 800606c:	f000 fa58 	bl	8006520 <_Balloc>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	f100 0914 	add.w	r9, r0, #20
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	f1c3 0301 	rsb	r3, r3, #1
 800607e:	4605      	mov	r5, r0
 8006080:	f8cd 9010 	str.w	r9, [sp, #16]
 8006084:	46da      	mov	sl, fp
 8006086:	9308      	str	r3, [sp, #32]
 8006088:	42b7      	cmp	r7, r6
 800608a:	d33b      	bcc.n	8006104 <__gethex+0x1ee>
 800608c:	9804      	ldr	r0, [sp, #16]
 800608e:	f840 ab04 	str.w	sl, [r0], #4
 8006092:	eba0 0009 	sub.w	r0, r0, r9
 8006096:	1080      	asrs	r0, r0, #2
 8006098:	6128      	str	r0, [r5, #16]
 800609a:	0147      	lsls	r7, r0, #5
 800609c:	4650      	mov	r0, sl
 800609e:	f000 fb03 	bl	80066a8 <__hi0bits>
 80060a2:	f8d8 6000 	ldr.w	r6, [r8]
 80060a6:	1a3f      	subs	r7, r7, r0
 80060a8:	42b7      	cmp	r7, r6
 80060aa:	dd64      	ble.n	8006176 <__gethex+0x260>
 80060ac:	1bbf      	subs	r7, r7, r6
 80060ae:	4639      	mov	r1, r7
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 fe13 	bl	8006cdc <__any_on>
 80060b6:	4682      	mov	sl, r0
 80060b8:	b178      	cbz	r0, 80060da <__gethex+0x1c4>
 80060ba:	1e7b      	subs	r3, r7, #1
 80060bc:	1159      	asrs	r1, r3, #5
 80060be:	f003 021f 	and.w	r2, r3, #31
 80060c2:	f04f 0a01 	mov.w	sl, #1
 80060c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80060ca:	fa0a f202 	lsl.w	r2, sl, r2
 80060ce:	420a      	tst	r2, r1
 80060d0:	d003      	beq.n	80060da <__gethex+0x1c4>
 80060d2:	4553      	cmp	r3, sl
 80060d4:	dc46      	bgt.n	8006164 <__gethex+0x24e>
 80060d6:	f04f 0a02 	mov.w	sl, #2
 80060da:	4639      	mov	r1, r7
 80060dc:	4628      	mov	r0, r5
 80060de:	f7ff fecb 	bl	8005e78 <rshift>
 80060e2:	443c      	add	r4, r7
 80060e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	da52      	bge.n	8006192 <__gethex+0x27c>
 80060ec:	4629      	mov	r1, r5
 80060ee:	9802      	ldr	r0, [sp, #8]
 80060f0:	f000 fa4a 	bl	8006588 <_Bfree>
 80060f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060f6:	2300      	movs	r3, #0
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	27a3      	movs	r7, #163	; 0xa3
 80060fc:	e793      	b.n	8006026 <__gethex+0x110>
 80060fe:	3101      	adds	r1, #1
 8006100:	105b      	asrs	r3, r3, #1
 8006102:	e7b0      	b.n	8006066 <__gethex+0x150>
 8006104:	1e73      	subs	r3, r6, #1
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	9a07      	ldr	r2, [sp, #28]
 800610a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <__gethex+0x22e>
 8006112:	f1bb 0f20 	cmp.w	fp, #32
 8006116:	d107      	bne.n	8006128 <__gethex+0x212>
 8006118:	9b04      	ldr	r3, [sp, #16]
 800611a:	f8c3 a000 	str.w	sl, [r3]
 800611e:	3304      	adds	r3, #4
 8006120:	f04f 0a00 	mov.w	sl, #0
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	46d3      	mov	fp, sl
 8006128:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800612c:	f7ff fede 	bl	8005eec <__hexdig_fun>
 8006130:	f000 000f 	and.w	r0, r0, #15
 8006134:	fa00 f00b 	lsl.w	r0, r0, fp
 8006138:	ea4a 0a00 	orr.w	sl, sl, r0
 800613c:	f10b 0b04 	add.w	fp, fp, #4
 8006140:	9b05      	ldr	r3, [sp, #20]
 8006142:	e00d      	b.n	8006160 <__gethex+0x24a>
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	9a08      	ldr	r2, [sp, #32]
 8006148:	4413      	add	r3, r2
 800614a:	42bb      	cmp	r3, r7
 800614c:	d3e1      	bcc.n	8006112 <__gethex+0x1fc>
 800614e:	4618      	mov	r0, r3
 8006150:	9a01      	ldr	r2, [sp, #4]
 8006152:	9903      	ldr	r1, [sp, #12]
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	f000 fffb 	bl	8007150 <strncmp>
 800615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615c:	2800      	cmp	r0, #0
 800615e:	d1d8      	bne.n	8006112 <__gethex+0x1fc>
 8006160:	461e      	mov	r6, r3
 8006162:	e791      	b.n	8006088 <__gethex+0x172>
 8006164:	1eb9      	subs	r1, r7, #2
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fdb8 	bl	8006cdc <__any_on>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0b2      	beq.n	80060d6 <__gethex+0x1c0>
 8006170:	f04f 0a03 	mov.w	sl, #3
 8006174:	e7b1      	b.n	80060da <__gethex+0x1c4>
 8006176:	da09      	bge.n	800618c <__gethex+0x276>
 8006178:	1bf7      	subs	r7, r6, r7
 800617a:	4629      	mov	r1, r5
 800617c:	463a      	mov	r2, r7
 800617e:	9802      	ldr	r0, [sp, #8]
 8006180:	f000 fbce 	bl	8006920 <__lshift>
 8006184:	1be4      	subs	r4, r4, r7
 8006186:	4605      	mov	r5, r0
 8006188:	f100 0914 	add.w	r9, r0, #20
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	e7a8      	b.n	80060e4 <__gethex+0x1ce>
 8006192:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006196:	42a0      	cmp	r0, r4
 8006198:	dd6a      	ble.n	8006270 <__gethex+0x35a>
 800619a:	1b04      	subs	r4, r0, r4
 800619c:	42a6      	cmp	r6, r4
 800619e:	dc2e      	bgt.n	80061fe <__gethex+0x2e8>
 80061a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d022      	beq.n	80061ee <__gethex+0x2d8>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d024      	beq.n	80061f6 <__gethex+0x2e0>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d115      	bne.n	80061dc <__gethex+0x2c6>
 80061b0:	42a6      	cmp	r6, r4
 80061b2:	d113      	bne.n	80061dc <__gethex+0x2c6>
 80061b4:	2e01      	cmp	r6, #1
 80061b6:	dc0b      	bgt.n	80061d0 <__gethex+0x2ba>
 80061b8:	9a06      	ldr	r2, [sp, #24]
 80061ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	2301      	movs	r3, #1
 80061c2:	612b      	str	r3, [r5, #16]
 80061c4:	f8c9 3000 	str.w	r3, [r9]
 80061c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061ca:	2762      	movs	r7, #98	; 0x62
 80061cc:	601d      	str	r5, [r3, #0]
 80061ce:	e72a      	b.n	8006026 <__gethex+0x110>
 80061d0:	1e71      	subs	r1, r6, #1
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 fd82 	bl	8006cdc <__any_on>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1ed      	bne.n	80061b8 <__gethex+0x2a2>
 80061dc:	4629      	mov	r1, r5
 80061de:	9802      	ldr	r0, [sp, #8]
 80061e0:	f000 f9d2 	bl	8006588 <_Bfree>
 80061e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061e6:	2300      	movs	r3, #0
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	2750      	movs	r7, #80	; 0x50
 80061ec:	e71b      	b.n	8006026 <__gethex+0x110>
 80061ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0e1      	beq.n	80061b8 <__gethex+0x2a2>
 80061f4:	e7f2      	b.n	80061dc <__gethex+0x2c6>
 80061f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1dd      	bne.n	80061b8 <__gethex+0x2a2>
 80061fc:	e7ee      	b.n	80061dc <__gethex+0x2c6>
 80061fe:	1e67      	subs	r7, r4, #1
 8006200:	f1ba 0f00 	cmp.w	sl, #0
 8006204:	d131      	bne.n	800626a <__gethex+0x354>
 8006206:	b127      	cbz	r7, 8006212 <__gethex+0x2fc>
 8006208:	4639      	mov	r1, r7
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fd66 	bl	8006cdc <__any_on>
 8006210:	4682      	mov	sl, r0
 8006212:	117a      	asrs	r2, r7, #5
 8006214:	2301      	movs	r3, #1
 8006216:	f007 071f 	and.w	r7, r7, #31
 800621a:	fa03 f707 	lsl.w	r7, r3, r7
 800621e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006222:	4621      	mov	r1, r4
 8006224:	421f      	tst	r7, r3
 8006226:	4628      	mov	r0, r5
 8006228:	bf18      	it	ne
 800622a:	f04a 0a02 	orrne.w	sl, sl, #2
 800622e:	1b36      	subs	r6, r6, r4
 8006230:	f7ff fe22 	bl	8005e78 <rshift>
 8006234:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006238:	2702      	movs	r7, #2
 800623a:	f1ba 0f00 	cmp.w	sl, #0
 800623e:	d048      	beq.n	80062d2 <__gethex+0x3bc>
 8006240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d015      	beq.n	8006274 <__gethex+0x35e>
 8006248:	2b03      	cmp	r3, #3
 800624a:	d017      	beq.n	800627c <__gethex+0x366>
 800624c:	2b01      	cmp	r3, #1
 800624e:	d109      	bne.n	8006264 <__gethex+0x34e>
 8006250:	f01a 0f02 	tst.w	sl, #2
 8006254:	d006      	beq.n	8006264 <__gethex+0x34e>
 8006256:	f8d9 3000 	ldr.w	r3, [r9]
 800625a:	ea4a 0a03 	orr.w	sl, sl, r3
 800625e:	f01a 0f01 	tst.w	sl, #1
 8006262:	d10e      	bne.n	8006282 <__gethex+0x36c>
 8006264:	f047 0710 	orr.w	r7, r7, #16
 8006268:	e033      	b.n	80062d2 <__gethex+0x3bc>
 800626a:	f04f 0a01 	mov.w	sl, #1
 800626e:	e7d0      	b.n	8006212 <__gethex+0x2fc>
 8006270:	2701      	movs	r7, #1
 8006272:	e7e2      	b.n	800623a <__gethex+0x324>
 8006274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006276:	f1c3 0301 	rsb	r3, r3, #1
 800627a:	9315      	str	r3, [sp, #84]	; 0x54
 800627c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <__gethex+0x34e>
 8006282:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006286:	f105 0314 	add.w	r3, r5, #20
 800628a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800628e:	eb03 010a 	add.w	r1, r3, sl
 8006292:	f04f 0c00 	mov.w	ip, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f853 2b04 	ldr.w	r2, [r3], #4
 800629c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80062a0:	d01c      	beq.n	80062dc <__gethex+0x3c6>
 80062a2:	3201      	adds	r2, #1
 80062a4:	6002      	str	r2, [r0, #0]
 80062a6:	2f02      	cmp	r7, #2
 80062a8:	f105 0314 	add.w	r3, r5, #20
 80062ac:	d138      	bne.n	8006320 <__gethex+0x40a>
 80062ae:	f8d8 2000 	ldr.w	r2, [r8]
 80062b2:	3a01      	subs	r2, #1
 80062b4:	42b2      	cmp	r2, r6
 80062b6:	d10a      	bne.n	80062ce <__gethex+0x3b8>
 80062b8:	1171      	asrs	r1, r6, #5
 80062ba:	2201      	movs	r2, #1
 80062bc:	f006 061f 	and.w	r6, r6, #31
 80062c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062c4:	fa02 f606 	lsl.w	r6, r2, r6
 80062c8:	421e      	tst	r6, r3
 80062ca:	bf18      	it	ne
 80062cc:	4617      	movne	r7, r2
 80062ce:	f047 0720 	orr.w	r7, r7, #32
 80062d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062d4:	601d      	str	r5, [r3, #0]
 80062d6:	9b06      	ldr	r3, [sp, #24]
 80062d8:	601c      	str	r4, [r3, #0]
 80062da:	e6a4      	b.n	8006026 <__gethex+0x110>
 80062dc:	4299      	cmp	r1, r3
 80062de:	f843 cc04 	str.w	ip, [r3, #-4]
 80062e2:	d8d8      	bhi.n	8006296 <__gethex+0x380>
 80062e4:	68ab      	ldr	r3, [r5, #8]
 80062e6:	4599      	cmp	r9, r3
 80062e8:	db12      	blt.n	8006310 <__gethex+0x3fa>
 80062ea:	6869      	ldr	r1, [r5, #4]
 80062ec:	9802      	ldr	r0, [sp, #8]
 80062ee:	3101      	adds	r1, #1
 80062f0:	f000 f916 	bl	8006520 <_Balloc>
 80062f4:	692a      	ldr	r2, [r5, #16]
 80062f6:	3202      	adds	r2, #2
 80062f8:	f105 010c 	add.w	r1, r5, #12
 80062fc:	4683      	mov	fp, r0
 80062fe:	0092      	lsls	r2, r2, #2
 8006300:	300c      	adds	r0, #12
 8006302:	f7fd fa47 	bl	8003794 <memcpy>
 8006306:	4629      	mov	r1, r5
 8006308:	9802      	ldr	r0, [sp, #8]
 800630a:	f000 f93d 	bl	8006588 <_Bfree>
 800630e:	465d      	mov	r5, fp
 8006310:	692b      	ldr	r3, [r5, #16]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006318:	612a      	str	r2, [r5, #16]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
 800631e:	e7c2      	b.n	80062a6 <__gethex+0x390>
 8006320:	692a      	ldr	r2, [r5, #16]
 8006322:	454a      	cmp	r2, r9
 8006324:	dd0b      	ble.n	800633e <__gethex+0x428>
 8006326:	2101      	movs	r1, #1
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff fda5 	bl	8005e78 <rshift>
 800632e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006332:	3401      	adds	r4, #1
 8006334:	42a3      	cmp	r3, r4
 8006336:	f6ff aed9 	blt.w	80060ec <__gethex+0x1d6>
 800633a:	2701      	movs	r7, #1
 800633c:	e7c7      	b.n	80062ce <__gethex+0x3b8>
 800633e:	f016 061f 	ands.w	r6, r6, #31
 8006342:	d0fa      	beq.n	800633a <__gethex+0x424>
 8006344:	449a      	add	sl, r3
 8006346:	f1c6 0620 	rsb	r6, r6, #32
 800634a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800634e:	f000 f9ab 	bl	80066a8 <__hi0bits>
 8006352:	42b0      	cmp	r0, r6
 8006354:	dbe7      	blt.n	8006326 <__gethex+0x410>
 8006356:	e7f0      	b.n	800633a <__gethex+0x424>

08006358 <L_shift>:
 8006358:	f1c2 0208 	rsb	r2, r2, #8
 800635c:	0092      	lsls	r2, r2, #2
 800635e:	b570      	push	{r4, r5, r6, lr}
 8006360:	f1c2 0620 	rsb	r6, r2, #32
 8006364:	6843      	ldr	r3, [r0, #4]
 8006366:	6804      	ldr	r4, [r0, #0]
 8006368:	fa03 f506 	lsl.w	r5, r3, r6
 800636c:	432c      	orrs	r4, r5
 800636e:	40d3      	lsrs	r3, r2
 8006370:	6004      	str	r4, [r0, #0]
 8006372:	f840 3f04 	str.w	r3, [r0, #4]!
 8006376:	4288      	cmp	r0, r1
 8006378:	d3f4      	bcc.n	8006364 <L_shift+0xc>
 800637a:	bd70      	pop	{r4, r5, r6, pc}

0800637c <__match>:
 800637c:	b530      	push	{r4, r5, lr}
 800637e:	6803      	ldr	r3, [r0, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006386:	b914      	cbnz	r4, 800638e <__match+0x12>
 8006388:	6003      	str	r3, [r0, #0]
 800638a:	2001      	movs	r0, #1
 800638c:	bd30      	pop	{r4, r5, pc}
 800638e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006396:	2d19      	cmp	r5, #25
 8006398:	bf98      	it	ls
 800639a:	3220      	addls	r2, #32
 800639c:	42a2      	cmp	r2, r4
 800639e:	d0f0      	beq.n	8006382 <__match+0x6>
 80063a0:	2000      	movs	r0, #0
 80063a2:	e7f3      	b.n	800638c <__match+0x10>

080063a4 <__hexnan>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	680b      	ldr	r3, [r1, #0]
 80063aa:	6801      	ldr	r1, [r0, #0]
 80063ac:	115f      	asrs	r7, r3, #5
 80063ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80063b2:	f013 031f 	ands.w	r3, r3, #31
 80063b6:	b087      	sub	sp, #28
 80063b8:	bf18      	it	ne
 80063ba:	3704      	addne	r7, #4
 80063bc:	2500      	movs	r5, #0
 80063be:	1f3e      	subs	r6, r7, #4
 80063c0:	4682      	mov	sl, r0
 80063c2:	4690      	mov	r8, r2
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80063ca:	46b1      	mov	r9, r6
 80063cc:	4634      	mov	r4, r6
 80063ce:	9502      	str	r5, [sp, #8]
 80063d0:	46ab      	mov	fp, r5
 80063d2:	784a      	ldrb	r2, [r1, #1]
 80063d4:	1c4b      	adds	r3, r1, #1
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	b342      	cbz	r2, 800642c <__hexnan+0x88>
 80063da:	4610      	mov	r0, r2
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	9204      	str	r2, [sp, #16]
 80063e0:	f7ff fd84 	bl	8005eec <__hexdig_fun>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d143      	bne.n	8006470 <__hexnan+0xcc>
 80063e8:	9a04      	ldr	r2, [sp, #16]
 80063ea:	9905      	ldr	r1, [sp, #20]
 80063ec:	2a20      	cmp	r2, #32
 80063ee:	d818      	bhi.n	8006422 <__hexnan+0x7e>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	459b      	cmp	fp, r3
 80063f4:	dd13      	ble.n	800641e <__hexnan+0x7a>
 80063f6:	454c      	cmp	r4, r9
 80063f8:	d206      	bcs.n	8006408 <__hexnan+0x64>
 80063fa:	2d07      	cmp	r5, #7
 80063fc:	dc04      	bgt.n	8006408 <__hexnan+0x64>
 80063fe:	462a      	mov	r2, r5
 8006400:	4649      	mov	r1, r9
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff ffa8 	bl	8006358 <L_shift>
 8006408:	4544      	cmp	r4, r8
 800640a:	d944      	bls.n	8006496 <__hexnan+0xf2>
 800640c:	2300      	movs	r3, #0
 800640e:	f1a4 0904 	sub.w	r9, r4, #4
 8006412:	f844 3c04 	str.w	r3, [r4, #-4]
 8006416:	f8cd b008 	str.w	fp, [sp, #8]
 800641a:	464c      	mov	r4, r9
 800641c:	461d      	mov	r5, r3
 800641e:	9903      	ldr	r1, [sp, #12]
 8006420:	e7d7      	b.n	80063d2 <__hexnan+0x2e>
 8006422:	2a29      	cmp	r2, #41	; 0x29
 8006424:	d14a      	bne.n	80064bc <__hexnan+0x118>
 8006426:	3102      	adds	r1, #2
 8006428:	f8ca 1000 	str.w	r1, [sl]
 800642c:	f1bb 0f00 	cmp.w	fp, #0
 8006430:	d044      	beq.n	80064bc <__hexnan+0x118>
 8006432:	454c      	cmp	r4, r9
 8006434:	d206      	bcs.n	8006444 <__hexnan+0xa0>
 8006436:	2d07      	cmp	r5, #7
 8006438:	dc04      	bgt.n	8006444 <__hexnan+0xa0>
 800643a:	462a      	mov	r2, r5
 800643c:	4649      	mov	r1, r9
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ff8a 	bl	8006358 <L_shift>
 8006444:	4544      	cmp	r4, r8
 8006446:	d928      	bls.n	800649a <__hexnan+0xf6>
 8006448:	4643      	mov	r3, r8
 800644a:	f854 2b04 	ldr.w	r2, [r4], #4
 800644e:	f843 2b04 	str.w	r2, [r3], #4
 8006452:	42a6      	cmp	r6, r4
 8006454:	d2f9      	bcs.n	800644a <__hexnan+0xa6>
 8006456:	2200      	movs	r2, #0
 8006458:	f843 2b04 	str.w	r2, [r3], #4
 800645c:	429e      	cmp	r6, r3
 800645e:	d2fb      	bcs.n	8006458 <__hexnan+0xb4>
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	b91b      	cbnz	r3, 800646c <__hexnan+0xc8>
 8006464:	4546      	cmp	r6, r8
 8006466:	d127      	bne.n	80064b8 <__hexnan+0x114>
 8006468:	2301      	movs	r3, #1
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	2005      	movs	r0, #5
 800646e:	e026      	b.n	80064be <__hexnan+0x11a>
 8006470:	3501      	adds	r5, #1
 8006472:	2d08      	cmp	r5, #8
 8006474:	f10b 0b01 	add.w	fp, fp, #1
 8006478:	dd06      	ble.n	8006488 <__hexnan+0xe4>
 800647a:	4544      	cmp	r4, r8
 800647c:	d9cf      	bls.n	800641e <__hexnan+0x7a>
 800647e:	2300      	movs	r3, #0
 8006480:	f844 3c04 	str.w	r3, [r4, #-4]
 8006484:	2501      	movs	r5, #1
 8006486:	3c04      	subs	r4, #4
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	f000 000f 	and.w	r0, r0, #15
 800648e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006492:	6020      	str	r0, [r4, #0]
 8006494:	e7c3      	b.n	800641e <__hexnan+0x7a>
 8006496:	2508      	movs	r5, #8
 8006498:	e7c1      	b.n	800641e <__hexnan+0x7a>
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0df      	beq.n	8006460 <__hexnan+0xbc>
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a4:	f1c3 0320 	rsb	r3, r3, #32
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80064b0:	401a      	ands	r2, r3
 80064b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80064b6:	e7d3      	b.n	8006460 <__hexnan+0xbc>
 80064b8:	3e04      	subs	r6, #4
 80064ba:	e7d1      	b.n	8006460 <__hexnan+0xbc>
 80064bc:	2004      	movs	r0, #4
 80064be:	b007      	add	sp, #28
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064c4 <__locale_ctype_ptr_l>:
 80064c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80064c8:	4770      	bx	lr

080064ca <__localeconv_l>:
 80064ca:	30f0      	adds	r0, #240	; 0xf0
 80064cc:	4770      	bx	lr
	...

080064d0 <_localeconv_r>:
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <_localeconv_r+0x14>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a18      	ldr	r0, [r3, #32]
 80064d6:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <_localeconv_r+0x18>)
 80064d8:	2800      	cmp	r0, #0
 80064da:	bf08      	it	eq
 80064dc:	4618      	moveq	r0, r3
 80064de:	30f0      	adds	r0, #240	; 0xf0
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000000c 	.word	0x2000000c
 80064e8:	20000070 	.word	0x20000070

080064ec <malloc>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <malloc+0xc>)
 80064ee:	4601      	mov	r1, r0
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 bc71 	b.w	8006dd8 <_malloc_r>
 80064f6:	bf00      	nop
 80064f8:	2000000c 	.word	0x2000000c

080064fc <__ascii_mbtowc>:
 80064fc:	b082      	sub	sp, #8
 80064fe:	b901      	cbnz	r1, 8006502 <__ascii_mbtowc+0x6>
 8006500:	a901      	add	r1, sp, #4
 8006502:	b142      	cbz	r2, 8006516 <__ascii_mbtowc+0x1a>
 8006504:	b14b      	cbz	r3, 800651a <__ascii_mbtowc+0x1e>
 8006506:	7813      	ldrb	r3, [r2, #0]
 8006508:	600b      	str	r3, [r1, #0]
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	1c10      	adds	r0, r2, #0
 800650e:	bf18      	it	ne
 8006510:	2001      	movne	r0, #1
 8006512:	b002      	add	sp, #8
 8006514:	4770      	bx	lr
 8006516:	4610      	mov	r0, r2
 8006518:	e7fb      	b.n	8006512 <__ascii_mbtowc+0x16>
 800651a:	f06f 0001 	mvn.w	r0, #1
 800651e:	e7f8      	b.n	8006512 <__ascii_mbtowc+0x16>

08006520 <_Balloc>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006524:	4604      	mov	r4, r0
 8006526:	460e      	mov	r6, r1
 8006528:	b93d      	cbnz	r5, 800653a <_Balloc+0x1a>
 800652a:	2010      	movs	r0, #16
 800652c:	f7ff ffde 	bl	80064ec <malloc>
 8006530:	6260      	str	r0, [r4, #36]	; 0x24
 8006532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006536:	6005      	str	r5, [r0, #0]
 8006538:	60c5      	str	r5, [r0, #12]
 800653a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800653c:	68eb      	ldr	r3, [r5, #12]
 800653e:	b183      	cbz	r3, 8006562 <_Balloc+0x42>
 8006540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006548:	b9b8      	cbnz	r0, 800657a <_Balloc+0x5a>
 800654a:	2101      	movs	r1, #1
 800654c:	fa01 f506 	lsl.w	r5, r1, r6
 8006550:	1d6a      	adds	r2, r5, #5
 8006552:	0092      	lsls	r2, r2, #2
 8006554:	4620      	mov	r0, r4
 8006556:	f000 fbe2 	bl	8006d1e <_calloc_r>
 800655a:	b160      	cbz	r0, 8006576 <_Balloc+0x56>
 800655c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006560:	e00e      	b.n	8006580 <_Balloc+0x60>
 8006562:	2221      	movs	r2, #33	; 0x21
 8006564:	2104      	movs	r1, #4
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fbd9 	bl	8006d1e <_calloc_r>
 800656c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800656e:	60e8      	str	r0, [r5, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e4      	bne.n	8006540 <_Balloc+0x20>
 8006576:	2000      	movs	r0, #0
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	6802      	ldr	r2, [r0, #0]
 800657c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006580:	2300      	movs	r3, #0
 8006582:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006586:	e7f7      	b.n	8006578 <_Balloc+0x58>

08006588 <_Bfree>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800658c:	4606      	mov	r6, r0
 800658e:	460d      	mov	r5, r1
 8006590:	b93c      	cbnz	r4, 80065a2 <_Bfree+0x1a>
 8006592:	2010      	movs	r0, #16
 8006594:	f7ff ffaa 	bl	80064ec <malloc>
 8006598:	6270      	str	r0, [r6, #36]	; 0x24
 800659a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800659e:	6004      	str	r4, [r0, #0]
 80065a0:	60c4      	str	r4, [r0, #12]
 80065a2:	b13d      	cbz	r5, 80065b4 <_Bfree+0x2c>
 80065a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065a6:	686a      	ldr	r2, [r5, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065b4:	bd70      	pop	{r4, r5, r6, pc}

080065b6 <__multadd>:
 80065b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ba:	690d      	ldr	r5, [r1, #16]
 80065bc:	461f      	mov	r7, r3
 80065be:	4606      	mov	r6, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	f101 0c14 	add.w	ip, r1, #20
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8dc 0000 	ldr.w	r0, [ip]
 80065cc:	b281      	uxth	r1, r0
 80065ce:	fb02 7101 	mla	r1, r2, r1, r7
 80065d2:	0c0f      	lsrs	r7, r1, #16
 80065d4:	0c00      	lsrs	r0, r0, #16
 80065d6:	fb02 7000 	mla	r0, r2, r0, r7
 80065da:	b289      	uxth	r1, r1
 80065dc:	3301      	adds	r3, #1
 80065de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80065e2:	429d      	cmp	r5, r3
 80065e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80065e8:	f84c 1b04 	str.w	r1, [ip], #4
 80065ec:	dcec      	bgt.n	80065c8 <__multadd+0x12>
 80065ee:	b1d7      	cbz	r7, 8006626 <__multadd+0x70>
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	42ab      	cmp	r3, r5
 80065f4:	dc12      	bgt.n	800661c <__multadd+0x66>
 80065f6:	6861      	ldr	r1, [r4, #4]
 80065f8:	4630      	mov	r0, r6
 80065fa:	3101      	adds	r1, #1
 80065fc:	f7ff ff90 	bl	8006520 <_Balloc>
 8006600:	6922      	ldr	r2, [r4, #16]
 8006602:	3202      	adds	r2, #2
 8006604:	f104 010c 	add.w	r1, r4, #12
 8006608:	4680      	mov	r8, r0
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	300c      	adds	r0, #12
 800660e:	f7fd f8c1 	bl	8003794 <memcpy>
 8006612:	4621      	mov	r1, r4
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff ffb7 	bl	8006588 <_Bfree>
 800661a:	4644      	mov	r4, r8
 800661c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006620:	3501      	adds	r5, #1
 8006622:	615f      	str	r7, [r3, #20]
 8006624:	6125      	str	r5, [r4, #16]
 8006626:	4620      	mov	r0, r4
 8006628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800662c <__s2b>:
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	4615      	mov	r5, r2
 8006634:	461f      	mov	r7, r3
 8006636:	2209      	movs	r2, #9
 8006638:	3308      	adds	r3, #8
 800663a:	4606      	mov	r6, r0
 800663c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006640:	2100      	movs	r1, #0
 8006642:	2201      	movs	r2, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	db20      	blt.n	800668a <__s2b+0x5e>
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff ff69 	bl	8006520 <_Balloc>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	6143      	str	r3, [r0, #20]
 8006652:	2d09      	cmp	r5, #9
 8006654:	f04f 0301 	mov.w	r3, #1
 8006658:	6103      	str	r3, [r0, #16]
 800665a:	dd19      	ble.n	8006690 <__s2b+0x64>
 800665c:	f104 0809 	add.w	r8, r4, #9
 8006660:	46c1      	mov	r9, r8
 8006662:	442c      	add	r4, r5
 8006664:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006668:	4601      	mov	r1, r0
 800666a:	3b30      	subs	r3, #48	; 0x30
 800666c:	220a      	movs	r2, #10
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ffa1 	bl	80065b6 <__multadd>
 8006674:	45a1      	cmp	r9, r4
 8006676:	d1f5      	bne.n	8006664 <__s2b+0x38>
 8006678:	eb08 0405 	add.w	r4, r8, r5
 800667c:	3c08      	subs	r4, #8
 800667e:	1b2d      	subs	r5, r5, r4
 8006680:	1963      	adds	r3, r4, r5
 8006682:	42bb      	cmp	r3, r7
 8006684:	db07      	blt.n	8006696 <__s2b+0x6a>
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668a:	0052      	lsls	r2, r2, #1
 800668c:	3101      	adds	r1, #1
 800668e:	e7d9      	b.n	8006644 <__s2b+0x18>
 8006690:	340a      	adds	r4, #10
 8006692:	2509      	movs	r5, #9
 8006694:	e7f3      	b.n	800667e <__s2b+0x52>
 8006696:	f814 3b01 	ldrb.w	r3, [r4], #1
 800669a:	4601      	mov	r1, r0
 800669c:	3b30      	subs	r3, #48	; 0x30
 800669e:	220a      	movs	r2, #10
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff ff88 	bl	80065b6 <__multadd>
 80066a6:	e7eb      	b.n	8006680 <__s2b+0x54>

080066a8 <__hi0bits>:
 80066a8:	0c02      	lsrs	r2, r0, #16
 80066aa:	0412      	lsls	r2, r2, #16
 80066ac:	4603      	mov	r3, r0
 80066ae:	b9b2      	cbnz	r2, 80066de <__hi0bits+0x36>
 80066b0:	0403      	lsls	r3, r0, #16
 80066b2:	2010      	movs	r0, #16
 80066b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066b8:	bf04      	itt	eq
 80066ba:	021b      	lsleq	r3, r3, #8
 80066bc:	3008      	addeq	r0, #8
 80066be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066c2:	bf04      	itt	eq
 80066c4:	011b      	lsleq	r3, r3, #4
 80066c6:	3004      	addeq	r0, #4
 80066c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066cc:	bf04      	itt	eq
 80066ce:	009b      	lsleq	r3, r3, #2
 80066d0:	3002      	addeq	r0, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	db06      	blt.n	80066e4 <__hi0bits+0x3c>
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	d503      	bpl.n	80066e2 <__hi0bits+0x3a>
 80066da:	3001      	adds	r0, #1
 80066dc:	4770      	bx	lr
 80066de:	2000      	movs	r0, #0
 80066e0:	e7e8      	b.n	80066b4 <__hi0bits+0xc>
 80066e2:	2020      	movs	r0, #32
 80066e4:	4770      	bx	lr

080066e6 <__lo0bits>:
 80066e6:	6803      	ldr	r3, [r0, #0]
 80066e8:	f013 0207 	ands.w	r2, r3, #7
 80066ec:	4601      	mov	r1, r0
 80066ee:	d00b      	beq.n	8006708 <__lo0bits+0x22>
 80066f0:	07da      	lsls	r2, r3, #31
 80066f2:	d423      	bmi.n	800673c <__lo0bits+0x56>
 80066f4:	0798      	lsls	r0, r3, #30
 80066f6:	bf49      	itett	mi
 80066f8:	085b      	lsrmi	r3, r3, #1
 80066fa:	089b      	lsrpl	r3, r3, #2
 80066fc:	2001      	movmi	r0, #1
 80066fe:	600b      	strmi	r3, [r1, #0]
 8006700:	bf5c      	itt	pl
 8006702:	600b      	strpl	r3, [r1, #0]
 8006704:	2002      	movpl	r0, #2
 8006706:	4770      	bx	lr
 8006708:	b298      	uxth	r0, r3
 800670a:	b9a8      	cbnz	r0, 8006738 <__lo0bits+0x52>
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	2010      	movs	r0, #16
 8006710:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006714:	bf04      	itt	eq
 8006716:	0a1b      	lsreq	r3, r3, #8
 8006718:	3008      	addeq	r0, #8
 800671a:	071a      	lsls	r2, r3, #28
 800671c:	bf04      	itt	eq
 800671e:	091b      	lsreq	r3, r3, #4
 8006720:	3004      	addeq	r0, #4
 8006722:	079a      	lsls	r2, r3, #30
 8006724:	bf04      	itt	eq
 8006726:	089b      	lsreq	r3, r3, #2
 8006728:	3002      	addeq	r0, #2
 800672a:	07da      	lsls	r2, r3, #31
 800672c:	d402      	bmi.n	8006734 <__lo0bits+0x4e>
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	d006      	beq.n	8006740 <__lo0bits+0x5a>
 8006732:	3001      	adds	r0, #1
 8006734:	600b      	str	r3, [r1, #0]
 8006736:	4770      	bx	lr
 8006738:	4610      	mov	r0, r2
 800673a:	e7e9      	b.n	8006710 <__lo0bits+0x2a>
 800673c:	2000      	movs	r0, #0
 800673e:	4770      	bx	lr
 8006740:	2020      	movs	r0, #32
 8006742:	4770      	bx	lr

08006744 <__i2b>:
 8006744:	b510      	push	{r4, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	2101      	movs	r1, #1
 800674a:	f7ff fee9 	bl	8006520 <_Balloc>
 800674e:	2201      	movs	r2, #1
 8006750:	6144      	str	r4, [r0, #20]
 8006752:	6102      	str	r2, [r0, #16]
 8006754:	bd10      	pop	{r4, pc}

08006756 <__multiply>:
 8006756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	4614      	mov	r4, r2
 800675c:	690a      	ldr	r2, [r1, #16]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	bfb8      	it	lt
 8006764:	460b      	movlt	r3, r1
 8006766:	4688      	mov	r8, r1
 8006768:	bfbc      	itt	lt
 800676a:	46a0      	movlt	r8, r4
 800676c:	461c      	movlt	r4, r3
 800676e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006772:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800677a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800677e:	eb07 0609 	add.w	r6, r7, r9
 8006782:	42b3      	cmp	r3, r6
 8006784:	bfb8      	it	lt
 8006786:	3101      	addlt	r1, #1
 8006788:	f7ff feca 	bl	8006520 <_Balloc>
 800678c:	f100 0514 	add.w	r5, r0, #20
 8006790:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006794:	462b      	mov	r3, r5
 8006796:	2200      	movs	r2, #0
 8006798:	4573      	cmp	r3, lr
 800679a:	d316      	bcc.n	80067ca <__multiply+0x74>
 800679c:	f104 0214 	add.w	r2, r4, #20
 80067a0:	f108 0114 	add.w	r1, r8, #20
 80067a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	9b00      	ldr	r3, [sp, #0]
 80067b0:	9201      	str	r2, [sp, #4]
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d80c      	bhi.n	80067d0 <__multiply+0x7a>
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	dd03      	ble.n	80067c2 <__multiply+0x6c>
 80067ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d05d      	beq.n	800687e <__multiply+0x128>
 80067c2:	6106      	str	r6, [r0, #16]
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	f843 2b04 	str.w	r2, [r3], #4
 80067ce:	e7e3      	b.n	8006798 <__multiply+0x42>
 80067d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80067d4:	f1bb 0f00 	cmp.w	fp, #0
 80067d8:	d023      	beq.n	8006822 <__multiply+0xcc>
 80067da:	4689      	mov	r9, r1
 80067dc:	46ac      	mov	ip, r5
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80067e6:	f8dc a000 	ldr.w	sl, [ip]
 80067ea:	b2a3      	uxth	r3, r4
 80067ec:	fa1f fa8a 	uxth.w	sl, sl
 80067f0:	fb0b a303 	mla	r3, fp, r3, sl
 80067f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067f8:	f8dc 4000 	ldr.w	r4, [ip]
 80067fc:	4443      	add	r3, r8
 80067fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006802:	fb0b 840a 	mla	r4, fp, sl, r8
 8006806:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800680a:	46e2      	mov	sl, ip
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006812:	454f      	cmp	r7, r9
 8006814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006818:	f84a 3b04 	str.w	r3, [sl], #4
 800681c:	d82b      	bhi.n	8006876 <__multiply+0x120>
 800681e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006828:	3204      	adds	r2, #4
 800682a:	f1ba 0f00 	cmp.w	sl, #0
 800682e:	d020      	beq.n	8006872 <__multiply+0x11c>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	4689      	mov	r9, r1
 8006834:	46a8      	mov	r8, r5
 8006836:	f04f 0b00 	mov.w	fp, #0
 800683a:	f8b9 c000 	ldrh.w	ip, [r9]
 800683e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006842:	fb0a 440c 	mla	r4, sl, ip, r4
 8006846:	445c      	add	r4, fp
 8006848:	46c4      	mov	ip, r8
 800684a:	b29b      	uxth	r3, r3
 800684c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006850:	f84c 3b04 	str.w	r3, [ip], #4
 8006854:	f859 3b04 	ldr.w	r3, [r9], #4
 8006858:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	fb0a b303 	mla	r3, sl, r3, fp
 8006862:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006866:	454f      	cmp	r7, r9
 8006868:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800686c:	d805      	bhi.n	800687a <__multiply+0x124>
 800686e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006872:	3504      	adds	r5, #4
 8006874:	e79b      	b.n	80067ae <__multiply+0x58>
 8006876:	46d4      	mov	ip, sl
 8006878:	e7b3      	b.n	80067e2 <__multiply+0x8c>
 800687a:	46e0      	mov	r8, ip
 800687c:	e7dd      	b.n	800683a <__multiply+0xe4>
 800687e:	3e01      	subs	r6, #1
 8006880:	e799      	b.n	80067b6 <__multiply+0x60>
	...

08006884 <__pow5mult>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	4615      	mov	r5, r2
 800688a:	f012 0203 	ands.w	r2, r2, #3
 800688e:	4606      	mov	r6, r0
 8006890:	460f      	mov	r7, r1
 8006892:	d007      	beq.n	80068a4 <__pow5mult+0x20>
 8006894:	3a01      	subs	r2, #1
 8006896:	4c21      	ldr	r4, [pc, #132]	; (800691c <__pow5mult+0x98>)
 8006898:	2300      	movs	r3, #0
 800689a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800689e:	f7ff fe8a 	bl	80065b6 <__multadd>
 80068a2:	4607      	mov	r7, r0
 80068a4:	10ad      	asrs	r5, r5, #2
 80068a6:	d035      	beq.n	8006914 <__pow5mult+0x90>
 80068a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068aa:	b93c      	cbnz	r4, 80068bc <__pow5mult+0x38>
 80068ac:	2010      	movs	r0, #16
 80068ae:	f7ff fe1d 	bl	80064ec <malloc>
 80068b2:	6270      	str	r0, [r6, #36]	; 0x24
 80068b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068b8:	6004      	str	r4, [r0, #0]
 80068ba:	60c4      	str	r4, [r0, #12]
 80068bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068c4:	b94c      	cbnz	r4, 80068da <__pow5mult+0x56>
 80068c6:	f240 2171 	movw	r1, #625	; 0x271
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ff3a 	bl	8006744 <__i2b>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d6:	4604      	mov	r4, r0
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	07eb      	lsls	r3, r5, #31
 80068e0:	d50a      	bpl.n	80068f8 <__pow5mult+0x74>
 80068e2:	4639      	mov	r1, r7
 80068e4:	4622      	mov	r2, r4
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ff35 	bl	8006756 <__multiply>
 80068ec:	4639      	mov	r1, r7
 80068ee:	4681      	mov	r9, r0
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7ff fe49 	bl	8006588 <_Bfree>
 80068f6:	464f      	mov	r7, r9
 80068f8:	106d      	asrs	r5, r5, #1
 80068fa:	d00b      	beq.n	8006914 <__pow5mult+0x90>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	b938      	cbnz	r0, 8006910 <__pow5mult+0x8c>
 8006900:	4622      	mov	r2, r4
 8006902:	4621      	mov	r1, r4
 8006904:	4630      	mov	r0, r6
 8006906:	f7ff ff26 	bl	8006756 <__multiply>
 800690a:	6020      	str	r0, [r4, #0]
 800690c:	f8c0 8000 	str.w	r8, [r0]
 8006910:	4604      	mov	r4, r0
 8006912:	e7e4      	b.n	80068de <__pow5mult+0x5a>
 8006914:	4638      	mov	r0, r7
 8006916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691a:	bf00      	nop
 800691c:	080087c0 	.word	0x080087c0

08006920 <__lshift>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	460c      	mov	r4, r1
 8006926:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6849      	ldr	r1, [r1, #4]
 800692e:	eb0a 0903 	add.w	r9, sl, r3
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	4607      	mov	r7, r0
 8006936:	4616      	mov	r6, r2
 8006938:	f109 0501 	add.w	r5, r9, #1
 800693c:	42ab      	cmp	r3, r5
 800693e:	db32      	blt.n	80069a6 <__lshift+0x86>
 8006940:	4638      	mov	r0, r7
 8006942:	f7ff fded 	bl	8006520 <_Balloc>
 8006946:	2300      	movs	r3, #0
 8006948:	4680      	mov	r8, r0
 800694a:	f100 0114 	add.w	r1, r0, #20
 800694e:	461a      	mov	r2, r3
 8006950:	4553      	cmp	r3, sl
 8006952:	db2b      	blt.n	80069ac <__lshift+0x8c>
 8006954:	6920      	ldr	r0, [r4, #16]
 8006956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800695a:	f104 0314 	add.w	r3, r4, #20
 800695e:	f016 021f 	ands.w	r2, r6, #31
 8006962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800696a:	d025      	beq.n	80069b8 <__lshift+0x98>
 800696c:	f1c2 0e20 	rsb	lr, r2, #32
 8006970:	2000      	movs	r0, #0
 8006972:	681e      	ldr	r6, [r3, #0]
 8006974:	468a      	mov	sl, r1
 8006976:	4096      	lsls	r6, r2
 8006978:	4330      	orrs	r0, r6
 800697a:	f84a 0b04 	str.w	r0, [sl], #4
 800697e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006982:	459c      	cmp	ip, r3
 8006984:	fa20 f00e 	lsr.w	r0, r0, lr
 8006988:	d814      	bhi.n	80069b4 <__lshift+0x94>
 800698a:	6048      	str	r0, [r1, #4]
 800698c:	b108      	cbz	r0, 8006992 <__lshift+0x72>
 800698e:	f109 0502 	add.w	r5, r9, #2
 8006992:	3d01      	subs	r5, #1
 8006994:	4638      	mov	r0, r7
 8006996:	f8c8 5010 	str.w	r5, [r8, #16]
 800699a:	4621      	mov	r1, r4
 800699c:	f7ff fdf4 	bl	8006588 <_Bfree>
 80069a0:	4640      	mov	r0, r8
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	3101      	adds	r1, #1
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	e7c7      	b.n	800693c <__lshift+0x1c>
 80069ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069b0:	3301      	adds	r3, #1
 80069b2:	e7cd      	b.n	8006950 <__lshift+0x30>
 80069b4:	4651      	mov	r1, sl
 80069b6:	e7dc      	b.n	8006972 <__lshift+0x52>
 80069b8:	3904      	subs	r1, #4
 80069ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80069be:	f841 2f04 	str.w	r2, [r1, #4]!
 80069c2:	459c      	cmp	ip, r3
 80069c4:	d8f9      	bhi.n	80069ba <__lshift+0x9a>
 80069c6:	e7e4      	b.n	8006992 <__lshift+0x72>

080069c8 <__mcmp>:
 80069c8:	6903      	ldr	r3, [r0, #16]
 80069ca:	690a      	ldr	r2, [r1, #16]
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	b530      	push	{r4, r5, lr}
 80069d0:	d10c      	bne.n	80069ec <__mcmp+0x24>
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	3014      	adds	r0, #20
 80069d6:	3114      	adds	r1, #20
 80069d8:	1884      	adds	r4, r0, r2
 80069da:	4411      	add	r1, r2
 80069dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069e4:	4295      	cmp	r5, r2
 80069e6:	d003      	beq.n	80069f0 <__mcmp+0x28>
 80069e8:	d305      	bcc.n	80069f6 <__mcmp+0x2e>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	bd30      	pop	{r4, r5, pc}
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d3f3      	bcc.n	80069dc <__mcmp+0x14>
 80069f4:	e7fa      	b.n	80069ec <__mcmp+0x24>
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fa:	e7f7      	b.n	80069ec <__mcmp+0x24>

080069fc <__mdiff>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	460d      	mov	r5, r1
 8006a02:	4607      	mov	r7, r0
 8006a04:	4611      	mov	r1, r2
 8006a06:	4628      	mov	r0, r5
 8006a08:	4614      	mov	r4, r2
 8006a0a:	f7ff ffdd 	bl	80069c8 <__mcmp>
 8006a0e:	1e06      	subs	r6, r0, #0
 8006a10:	d108      	bne.n	8006a24 <__mdiff+0x28>
 8006a12:	4631      	mov	r1, r6
 8006a14:	4638      	mov	r0, r7
 8006a16:	f7ff fd83 	bl	8006520 <_Balloc>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a24:	bfa4      	itt	ge
 8006a26:	4623      	movge	r3, r4
 8006a28:	462c      	movge	r4, r5
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	bfa6      	itte	ge
 8006a30:	461d      	movge	r5, r3
 8006a32:	2600      	movge	r6, #0
 8006a34:	2601      	movlt	r6, #1
 8006a36:	f7ff fd73 	bl	8006520 <_Balloc>
 8006a3a:	692b      	ldr	r3, [r5, #16]
 8006a3c:	60c6      	str	r6, [r0, #12]
 8006a3e:	6926      	ldr	r6, [r4, #16]
 8006a40:	f105 0914 	add.w	r9, r5, #20
 8006a44:	f104 0214 	add.w	r2, r4, #20
 8006a48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a50:	f100 0514 	add.w	r5, r0, #20
 8006a54:	f04f 0e00 	mov.w	lr, #0
 8006a58:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a60:	fa1e f18a 	uxtah	r1, lr, sl
 8006a64:	b2a3      	uxth	r3, r4
 8006a66:	1ac9      	subs	r1, r1, r3
 8006a68:	0c23      	lsrs	r3, r4, #16
 8006a6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006a6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a72:	b289      	uxth	r1, r1
 8006a74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a78:	45c8      	cmp	r8, r9
 8006a7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a7e:	4694      	mov	ip, r2
 8006a80:	f845 3b04 	str.w	r3, [r5], #4
 8006a84:	d8e8      	bhi.n	8006a58 <__mdiff+0x5c>
 8006a86:	45bc      	cmp	ip, r7
 8006a88:	d304      	bcc.n	8006a94 <__mdiff+0x98>
 8006a8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006a8e:	b183      	cbz	r3, 8006ab2 <__mdiff+0xb6>
 8006a90:	6106      	str	r6, [r0, #16]
 8006a92:	e7c5      	b.n	8006a20 <__mdiff+0x24>
 8006a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a98:	fa1e f381 	uxtah	r3, lr, r1
 8006a9c:	141a      	asrs	r2, r3, #16
 8006a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006aac:	f845 3b04 	str.w	r3, [r5], #4
 8006ab0:	e7e9      	b.n	8006a86 <__mdiff+0x8a>
 8006ab2:	3e01      	subs	r6, #1
 8006ab4:	e7e9      	b.n	8006a8a <__mdiff+0x8e>
	...

08006ab8 <__ulp>:
 8006ab8:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <__ulp+0x4c>)
 8006aba:	ee10 2a90 	vmov	r2, s1
 8006abe:	401a      	ands	r2, r3
 8006ac0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd04      	ble.n	8006ad2 <__ulp+0x1a>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	4619      	mov	r1, r3
 8006acc:	ec41 0b10 	vmov	d0, r0, r1
 8006ad0:	4770      	bx	lr
 8006ad2:	425b      	negs	r3, r3
 8006ad4:	151b      	asrs	r3, r3, #20
 8006ad6:	2b13      	cmp	r3, #19
 8006ad8:	f04f 0000 	mov.w	r0, #0
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	dc04      	bgt.n	8006aec <__ulp+0x34>
 8006ae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ae6:	fa42 f103 	asr.w	r1, r2, r3
 8006aea:	e7ef      	b.n	8006acc <__ulp+0x14>
 8006aec:	3b14      	subs	r3, #20
 8006aee:	2b1e      	cmp	r3, #30
 8006af0:	f04f 0201 	mov.w	r2, #1
 8006af4:	bfda      	itte	le
 8006af6:	f1c3 031f 	rsble	r3, r3, #31
 8006afa:	fa02 f303 	lslle.w	r3, r2, r3
 8006afe:	4613      	movgt	r3, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	e7e3      	b.n	8006acc <__ulp+0x14>
 8006b04:	7ff00000 	.word	0x7ff00000

08006b08 <__b2d>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	6905      	ldr	r5, [r0, #16]
 8006b0c:	f100 0714 	add.w	r7, r0, #20
 8006b10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006b14:	1f2e      	subs	r6, r5, #4
 8006b16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff fdc4 	bl	80066a8 <__hi0bits>
 8006b20:	f1c0 0320 	rsb	r3, r0, #32
 8006b24:	280a      	cmp	r0, #10
 8006b26:	600b      	str	r3, [r1, #0]
 8006b28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006ba0 <__b2d+0x98>
 8006b2c:	dc14      	bgt.n	8006b58 <__b2d+0x50>
 8006b2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006b32:	fa24 f10e 	lsr.w	r1, r4, lr
 8006b36:	42b7      	cmp	r7, r6
 8006b38:	ea41 030c 	orr.w	r3, r1, ip
 8006b3c:	bf34      	ite	cc
 8006b3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006b42:	2100      	movcs	r1, #0
 8006b44:	3015      	adds	r0, #21
 8006b46:	fa04 f000 	lsl.w	r0, r4, r0
 8006b4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8006b4e:	ea40 0201 	orr.w	r2, r0, r1
 8006b52:	ec43 2b10 	vmov	d0, r2, r3
 8006b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b58:	42b7      	cmp	r7, r6
 8006b5a:	bf3a      	itte	cc
 8006b5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8006b60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006b64:	2100      	movcs	r1, #0
 8006b66:	380b      	subs	r0, #11
 8006b68:	d015      	beq.n	8006b96 <__b2d+0x8e>
 8006b6a:	4084      	lsls	r4, r0
 8006b6c:	f1c0 0520 	rsb	r5, r0, #32
 8006b70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006b74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006b78:	42be      	cmp	r6, r7
 8006b7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8006b7e:	ea44 030c 	orr.w	r3, r4, ip
 8006b82:	bf8c      	ite	hi
 8006b84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006b88:	2400      	movls	r4, #0
 8006b8a:	fa01 f000 	lsl.w	r0, r1, r0
 8006b8e:	40ec      	lsrs	r4, r5
 8006b90:	ea40 0204 	orr.w	r2, r0, r4
 8006b94:	e7dd      	b.n	8006b52 <__b2d+0x4a>
 8006b96:	ea44 030c 	orr.w	r3, r4, ip
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	e7d9      	b.n	8006b52 <__b2d+0x4a>
 8006b9e:	bf00      	nop
 8006ba0:	3ff00000 	.word	0x3ff00000

08006ba4 <__d2b>:
 8006ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	460e      	mov	r6, r1
 8006baa:	2101      	movs	r1, #1
 8006bac:	ec59 8b10 	vmov	r8, r9, d0
 8006bb0:	4615      	mov	r5, r2
 8006bb2:	f7ff fcb5 	bl	8006520 <_Balloc>
 8006bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006bba:	4607      	mov	r7, r0
 8006bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bc0:	bb34      	cbnz	r4, 8006c10 <__d2b+0x6c>
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	f1b8 0300 	subs.w	r3, r8, #0
 8006bc8:	d027      	beq.n	8006c1a <__d2b+0x76>
 8006bca:	a802      	add	r0, sp, #8
 8006bcc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006bd0:	f7ff fd89 	bl	80066e6 <__lo0bits>
 8006bd4:	9900      	ldr	r1, [sp, #0]
 8006bd6:	b1f0      	cbz	r0, 8006c16 <__d2b+0x72>
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	f1c0 0320 	rsb	r3, r0, #32
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	430b      	orrs	r3, r1
 8006be4:	40c2      	lsrs	r2, r0
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	9201      	str	r2, [sp, #4]
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf14      	ite	ne
 8006bf2:	2102      	movne	r1, #2
 8006bf4:	2101      	moveq	r1, #1
 8006bf6:	6139      	str	r1, [r7, #16]
 8006bf8:	b1c4      	cbz	r4, 8006c2c <__d2b+0x88>
 8006bfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006bfe:	4404      	add	r4, r0
 8006c00:	6034      	str	r4, [r6, #0]
 8006c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c06:	6028      	str	r0, [r5, #0]
 8006c08:	4638      	mov	r0, r7
 8006c0a:	b003      	add	sp, #12
 8006c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c14:	e7d5      	b.n	8006bc2 <__d2b+0x1e>
 8006c16:	6179      	str	r1, [r7, #20]
 8006c18:	e7e7      	b.n	8006bea <__d2b+0x46>
 8006c1a:	a801      	add	r0, sp, #4
 8006c1c:	f7ff fd63 	bl	80066e6 <__lo0bits>
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	2101      	movs	r1, #1
 8006c26:	6139      	str	r1, [r7, #16]
 8006c28:	3020      	adds	r0, #32
 8006c2a:	e7e5      	b.n	8006bf8 <__d2b+0x54>
 8006c2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c34:	6030      	str	r0, [r6, #0]
 8006c36:	6918      	ldr	r0, [r3, #16]
 8006c38:	f7ff fd36 	bl	80066a8 <__hi0bits>
 8006c3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c40:	e7e1      	b.n	8006c06 <__d2b+0x62>

08006c42 <__ratio>:
 8006c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	4688      	mov	r8, r1
 8006c48:	4669      	mov	r1, sp
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	f7ff ff5c 	bl	8006b08 <__b2d>
 8006c50:	a901      	add	r1, sp, #4
 8006c52:	4640      	mov	r0, r8
 8006c54:	ec57 6b10 	vmov	r6, r7, d0
 8006c58:	f7ff ff56 	bl	8006b08 <__b2d>
 8006c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006c64:	eba3 0c02 	sub.w	ip, r3, r2
 8006c68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006c72:	ec5b ab10 	vmov	sl, fp, d0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfce      	itee	gt
 8006c7a:	463a      	movgt	r2, r7
 8006c7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c80:	465a      	movle	r2, fp
 8006c82:	4659      	mov	r1, fp
 8006c84:	463d      	mov	r5, r7
 8006c86:	bfd4      	ite	le
 8006c88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006c8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006c90:	4630      	mov	r0, r6
 8006c92:	ee10 2a10 	vmov	r2, s0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fe27 	bl	80008ec <__aeabi_ddiv>
 8006c9e:	ec41 0b10 	vmov	d0, r0, r1
 8006ca2:	b003      	add	sp, #12
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ca8 <__copybits>:
 8006ca8:	3901      	subs	r1, #1
 8006caa:	b510      	push	{r4, lr}
 8006cac:	1149      	asrs	r1, r1, #5
 8006cae:	6914      	ldr	r4, [r2, #16]
 8006cb0:	3101      	adds	r1, #1
 8006cb2:	f102 0314 	add.w	r3, r2, #20
 8006cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	d303      	bcc.n	8006ccc <__copybits+0x24>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	428a      	cmp	r2, r1
 8006cc8:	d305      	bcc.n	8006cd6 <__copybits+0x2e>
 8006cca:	bd10      	pop	{r4, pc}
 8006ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd0:	f840 2b04 	str.w	r2, [r0], #4
 8006cd4:	e7f3      	b.n	8006cbe <__copybits+0x16>
 8006cd6:	f842 3b04 	str.w	r3, [r2], #4
 8006cda:	e7f4      	b.n	8006cc6 <__copybits+0x1e>

08006cdc <__any_on>:
 8006cdc:	f100 0214 	add.w	r2, r0, #20
 8006ce0:	6900      	ldr	r0, [r0, #16]
 8006ce2:	114b      	asrs	r3, r1, #5
 8006ce4:	4298      	cmp	r0, r3
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	db11      	blt.n	8006d0e <__any_on+0x32>
 8006cea:	dd0a      	ble.n	8006d02 <__any_on+0x26>
 8006cec:	f011 011f 	ands.w	r1, r1, #31
 8006cf0:	d007      	beq.n	8006d02 <__any_on+0x26>
 8006cf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006cf6:	fa24 f001 	lsr.w	r0, r4, r1
 8006cfa:	fa00 f101 	lsl.w	r1, r0, r1
 8006cfe:	428c      	cmp	r4, r1
 8006d00:	d10b      	bne.n	8006d1a <__any_on+0x3e>
 8006d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d803      	bhi.n	8006d12 <__any_on+0x36>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	4603      	mov	r3, r0
 8006d10:	e7f7      	b.n	8006d02 <__any_on+0x26>
 8006d12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d16:	2900      	cmp	r1, #0
 8006d18:	d0f5      	beq.n	8006d06 <__any_on+0x2a>
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	e7f6      	b.n	8006d0c <__any_on+0x30>

08006d1e <_calloc_r>:
 8006d1e:	b538      	push	{r3, r4, r5, lr}
 8006d20:	fb02 f401 	mul.w	r4, r2, r1
 8006d24:	4621      	mov	r1, r4
 8006d26:	f000 f857 	bl	8006dd8 <_malloc_r>
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	b118      	cbz	r0, 8006d36 <_calloc_r+0x18>
 8006d2e:	4622      	mov	r2, r4
 8006d30:	2100      	movs	r1, #0
 8006d32:	f7fc fd3a 	bl	80037aa <memset>
 8006d36:	4628      	mov	r0, r5
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
	...

08006d3c <_free_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4605      	mov	r5, r0
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d045      	beq.n	8006dd0 <_free_r+0x94>
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f0c      	subs	r4, r1, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfb8      	it	lt
 8006d4e:	18e4      	addlt	r4, r4, r3
 8006d50:	f000 fa36 	bl	80071c0 <__malloc_lock>
 8006d54:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <_free_r+0x98>)
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	4610      	mov	r0, r2
 8006d5a:	b933      	cbnz	r3, 8006d6a <_free_r+0x2e>
 8006d5c:	6063      	str	r3, [r4, #4]
 8006d5e:	6014      	str	r4, [r2, #0]
 8006d60:	4628      	mov	r0, r5
 8006d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d66:	f000 ba2c 	b.w	80071c2 <__malloc_unlock>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d90c      	bls.n	8006d88 <_free_r+0x4c>
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	1862      	adds	r2, r4, r1
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bf04      	itt	eq
 8006d76:	681a      	ldreq	r2, [r3, #0]
 8006d78:	685b      	ldreq	r3, [r3, #4]
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	bf04      	itt	eq
 8006d7e:	1852      	addeq	r2, r2, r1
 8006d80:	6022      	streq	r2, [r4, #0]
 8006d82:	6004      	str	r4, [r0, #0]
 8006d84:	e7ec      	b.n	8006d60 <_free_r+0x24>
 8006d86:	4613      	mov	r3, r2
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	b10a      	cbz	r2, 8006d90 <_free_r+0x54>
 8006d8c:	42a2      	cmp	r2, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x4a>
 8006d90:	6819      	ldr	r1, [r3, #0]
 8006d92:	1858      	adds	r0, r3, r1
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x74>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	4401      	add	r1, r0
 8006d9c:	1858      	adds	r0, r3, r1
 8006d9e:	4282      	cmp	r2, r0
 8006da0:	6019      	str	r1, [r3, #0]
 8006da2:	d1dd      	bne.n	8006d60 <_free_r+0x24>
 8006da4:	6810      	ldr	r0, [r2, #0]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	4401      	add	r1, r0
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	e7d7      	b.n	8006d60 <_free_r+0x24>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x7c>
 8006db2:	230c      	movs	r3, #12
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	e7d3      	b.n	8006d60 <_free_r+0x24>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6811      	ldreq	r1, [r2, #0]
 8006dc2:	6852      	ldreq	r2, [r2, #4]
 8006dc4:	6062      	str	r2, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1809      	addeq	r1, r1, r0
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	605c      	str	r4, [r3, #4]
 8006dce:	e7c7      	b.n	8006d60 <_free_r+0x24>
 8006dd0:	bd38      	pop	{r3, r4, r5, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000200 	.word	0x20000200

08006dd8 <_malloc_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	1ccd      	adds	r5, r1, #3
 8006ddc:	f025 0503 	bic.w	r5, r5, #3
 8006de0:	3508      	adds	r5, #8
 8006de2:	2d0c      	cmp	r5, #12
 8006de4:	bf38      	it	cc
 8006de6:	250c      	movcc	r5, #12
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	4606      	mov	r6, r0
 8006dec:	db01      	blt.n	8006df2 <_malloc_r+0x1a>
 8006dee:	42a9      	cmp	r1, r5
 8006df0:	d903      	bls.n	8006dfa <_malloc_r+0x22>
 8006df2:	230c      	movs	r3, #12
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	2000      	movs	r0, #0
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	f000 f9e1 	bl	80071c0 <__malloc_lock>
 8006dfe:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <_malloc_r+0xac>)
 8006e00:	6814      	ldr	r4, [r2, #0]
 8006e02:	4621      	mov	r1, r4
 8006e04:	b991      	cbnz	r1, 8006e2c <_malloc_r+0x54>
 8006e06:	4c20      	ldr	r4, [pc, #128]	; (8006e88 <_malloc_r+0xb0>)
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	b91b      	cbnz	r3, 8006e14 <_malloc_r+0x3c>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 f98f 	bl	8007130 <_sbrk_r>
 8006e12:	6020      	str	r0, [r4, #0]
 8006e14:	4629      	mov	r1, r5
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f98a 	bl	8007130 <_sbrk_r>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d124      	bne.n	8006e6a <_malloc_r+0x92>
 8006e20:	230c      	movs	r3, #12
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	4630      	mov	r0, r6
 8006e26:	f000 f9cc 	bl	80071c2 <__malloc_unlock>
 8006e2a:	e7e4      	b.n	8006df6 <_malloc_r+0x1e>
 8006e2c:	680b      	ldr	r3, [r1, #0]
 8006e2e:	1b5b      	subs	r3, r3, r5
 8006e30:	d418      	bmi.n	8006e64 <_malloc_r+0x8c>
 8006e32:	2b0b      	cmp	r3, #11
 8006e34:	d90f      	bls.n	8006e56 <_malloc_r+0x7e>
 8006e36:	600b      	str	r3, [r1, #0]
 8006e38:	50cd      	str	r5, [r1, r3]
 8006e3a:	18cc      	adds	r4, r1, r3
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 f9c0 	bl	80071c2 <__malloc_unlock>
 8006e42:	f104 000b 	add.w	r0, r4, #11
 8006e46:	1d23      	adds	r3, r4, #4
 8006e48:	f020 0007 	bic.w	r0, r0, #7
 8006e4c:	1ac3      	subs	r3, r0, r3
 8006e4e:	d0d3      	beq.n	8006df8 <_malloc_r+0x20>
 8006e50:	425a      	negs	r2, r3
 8006e52:	50e2      	str	r2, [r4, r3]
 8006e54:	e7d0      	b.n	8006df8 <_malloc_r+0x20>
 8006e56:	428c      	cmp	r4, r1
 8006e58:	684b      	ldr	r3, [r1, #4]
 8006e5a:	bf16      	itet	ne
 8006e5c:	6063      	strne	r3, [r4, #4]
 8006e5e:	6013      	streq	r3, [r2, #0]
 8006e60:	460c      	movne	r4, r1
 8006e62:	e7eb      	b.n	8006e3c <_malloc_r+0x64>
 8006e64:	460c      	mov	r4, r1
 8006e66:	6849      	ldr	r1, [r1, #4]
 8006e68:	e7cc      	b.n	8006e04 <_malloc_r+0x2c>
 8006e6a:	1cc4      	adds	r4, r0, #3
 8006e6c:	f024 0403 	bic.w	r4, r4, #3
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d005      	beq.n	8006e80 <_malloc_r+0xa8>
 8006e74:	1a21      	subs	r1, r4, r0
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 f95a 	bl	8007130 <_sbrk_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d0cf      	beq.n	8006e20 <_malloc_r+0x48>
 8006e80:	6025      	str	r5, [r4, #0]
 8006e82:	e7db      	b.n	8006e3c <_malloc_r+0x64>
 8006e84:	20000200 	.word	0x20000200
 8006e88:	20000204 	.word	0x20000204

08006e8c <__ssputs_r>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	688e      	ldr	r6, [r1, #8]
 8006e92:	429e      	cmp	r6, r3
 8006e94:	4682      	mov	sl, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4690      	mov	r8, r2
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	d837      	bhi.n	8006f0e <__ssputs_r+0x82>
 8006e9e:	898a      	ldrh	r2, [r1, #12]
 8006ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ea4:	d031      	beq.n	8006f0a <__ssputs_r+0x7e>
 8006ea6:	6825      	ldr	r5, [r4, #0]
 8006ea8:	6909      	ldr	r1, [r1, #16]
 8006eaa:	1a6f      	subs	r7, r5, r1
 8006eac:	6965      	ldr	r5, [r4, #20]
 8006eae:	2302      	movs	r3, #2
 8006eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006eb8:	f109 0301 	add.w	r3, r9, #1
 8006ebc:	443b      	add	r3, r7
 8006ebe:	429d      	cmp	r5, r3
 8006ec0:	bf38      	it	cc
 8006ec2:	461d      	movcc	r5, r3
 8006ec4:	0553      	lsls	r3, r2, #21
 8006ec6:	d530      	bpl.n	8006f2a <__ssputs_r+0x9e>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7ff ff85 	bl	8006dd8 <_malloc_r>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	b950      	cbnz	r0, 8006ee8 <__ssputs_r+0x5c>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	f8ca 3000 	str.w	r3, [sl]
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	463a      	mov	r2, r7
 8006eea:	6921      	ldr	r1, [r4, #16]
 8006eec:	f7fc fc52 	bl	8003794 <memcpy>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	6126      	str	r6, [r4, #16]
 8006efe:	6165      	str	r5, [r4, #20]
 8006f00:	443e      	add	r6, r7
 8006f02:	1bed      	subs	r5, r5, r7
 8006f04:	6026      	str	r6, [r4, #0]
 8006f06:	60a5      	str	r5, [r4, #8]
 8006f08:	464e      	mov	r6, r9
 8006f0a:	454e      	cmp	r6, r9
 8006f0c:	d900      	bls.n	8006f10 <__ssputs_r+0x84>
 8006f0e:	464e      	mov	r6, r9
 8006f10:	4632      	mov	r2, r6
 8006f12:	4641      	mov	r1, r8
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	f000 f93a 	bl	800718e <memmove>
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	1b9b      	subs	r3, r3, r6
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	441e      	add	r6, r3
 8006f24:	6026      	str	r6, [r4, #0]
 8006f26:	2000      	movs	r0, #0
 8006f28:	e7dc      	b.n	8006ee4 <__ssputs_r+0x58>
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	f000 f94a 	bl	80071c4 <_realloc_r>
 8006f30:	4606      	mov	r6, r0
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d1e2      	bne.n	8006efc <__ssputs_r+0x70>
 8006f36:	6921      	ldr	r1, [r4, #16]
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f7ff feff 	bl	8006d3c <_free_r>
 8006f3e:	e7c8      	b.n	8006ed2 <__ssputs_r+0x46>

08006f40 <_svfiprintf_r>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	461d      	mov	r5, r3
 8006f46:	898b      	ldrh	r3, [r1, #12]
 8006f48:	061f      	lsls	r7, r3, #24
 8006f4a:	b09d      	sub	sp, #116	; 0x74
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4616      	mov	r6, r2
 8006f52:	d50f      	bpl.n	8006f74 <_svfiprintf_r+0x34>
 8006f54:	690b      	ldr	r3, [r1, #16]
 8006f56:	b96b      	cbnz	r3, 8006f74 <_svfiprintf_r+0x34>
 8006f58:	2140      	movs	r1, #64	; 0x40
 8006f5a:	f7ff ff3d 	bl	8006dd8 <_malloc_r>
 8006f5e:	6020      	str	r0, [r4, #0]
 8006f60:	6120      	str	r0, [r4, #16]
 8006f62:	b928      	cbnz	r0, 8006f70 <_svfiprintf_r+0x30>
 8006f64:	230c      	movs	r3, #12
 8006f66:	f8c8 3000 	str.w	r3, [r8]
 8006f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6e:	e0c8      	b.n	8007102 <_svfiprintf_r+0x1c2>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	6163      	str	r3, [r4, #20]
 8006f74:	2300      	movs	r3, #0
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
 8006f78:	2320      	movs	r3, #32
 8006f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f7e:	2330      	movs	r3, #48	; 0x30
 8006f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f84:	9503      	str	r5, [sp, #12]
 8006f86:	f04f 0b01 	mov.w	fp, #1
 8006f8a:	4637      	mov	r7, r6
 8006f8c:	463d      	mov	r5, r7
 8006f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f92:	b10b      	cbz	r3, 8006f98 <_svfiprintf_r+0x58>
 8006f94:	2b25      	cmp	r3, #37	; 0x25
 8006f96:	d13e      	bne.n	8007016 <_svfiprintf_r+0xd6>
 8006f98:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f9c:	d00b      	beq.n	8006fb6 <_svfiprintf_r+0x76>
 8006f9e:	4653      	mov	r3, sl
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	f7ff ff71 	bl	8006e8c <__ssputs_r>
 8006faa:	3001      	adds	r0, #1
 8006fac:	f000 80a4 	beq.w	80070f8 <_svfiprintf_r+0x1b8>
 8006fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb2:	4453      	add	r3, sl
 8006fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb6:	783b      	ldrb	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 809d 	beq.w	80070f8 <_svfiprintf_r+0x1b8>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	9307      	str	r3, [sp, #28]
 8006fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fd2:	462f      	mov	r7, r5
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fda:	4850      	ldr	r0, [pc, #320]	; (800711c <_svfiprintf_r+0x1dc>)
 8006fdc:	f7f9 f950 	bl	8000280 <memchr>
 8006fe0:	9b04      	ldr	r3, [sp, #16]
 8006fe2:	b9d0      	cbnz	r0, 800701a <_svfiprintf_r+0xda>
 8006fe4:	06d9      	lsls	r1, r3, #27
 8006fe6:	bf44      	itt	mi
 8006fe8:	2220      	movmi	r2, #32
 8006fea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fee:	071a      	lsls	r2, r3, #28
 8006ff0:	bf44      	itt	mi
 8006ff2:	222b      	movmi	r2, #43	; 0x2b
 8006ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ff8:	782a      	ldrb	r2, [r5, #0]
 8006ffa:	2a2a      	cmp	r2, #42	; 0x2a
 8006ffc:	d015      	beq.n	800702a <_svfiprintf_r+0xea>
 8006ffe:	9a07      	ldr	r2, [sp, #28]
 8007000:	462f      	mov	r7, r5
 8007002:	2000      	movs	r0, #0
 8007004:	250a      	movs	r5, #10
 8007006:	4639      	mov	r1, r7
 8007008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800700c:	3b30      	subs	r3, #48	; 0x30
 800700e:	2b09      	cmp	r3, #9
 8007010:	d94d      	bls.n	80070ae <_svfiprintf_r+0x16e>
 8007012:	b1b8      	cbz	r0, 8007044 <_svfiprintf_r+0x104>
 8007014:	e00f      	b.n	8007036 <_svfiprintf_r+0xf6>
 8007016:	462f      	mov	r7, r5
 8007018:	e7b8      	b.n	8006f8c <_svfiprintf_r+0x4c>
 800701a:	4a40      	ldr	r2, [pc, #256]	; (800711c <_svfiprintf_r+0x1dc>)
 800701c:	1a80      	subs	r0, r0, r2
 800701e:	fa0b f000 	lsl.w	r0, fp, r0
 8007022:	4318      	orrs	r0, r3
 8007024:	9004      	str	r0, [sp, #16]
 8007026:	463d      	mov	r5, r7
 8007028:	e7d3      	b.n	8006fd2 <_svfiprintf_r+0x92>
 800702a:	9a03      	ldr	r2, [sp, #12]
 800702c:	1d11      	adds	r1, r2, #4
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	9103      	str	r1, [sp, #12]
 8007032:	2a00      	cmp	r2, #0
 8007034:	db01      	blt.n	800703a <_svfiprintf_r+0xfa>
 8007036:	9207      	str	r2, [sp, #28]
 8007038:	e004      	b.n	8007044 <_svfiprintf_r+0x104>
 800703a:	4252      	negs	r2, r2
 800703c:	f043 0302 	orr.w	r3, r3, #2
 8007040:	9207      	str	r2, [sp, #28]
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	783b      	ldrb	r3, [r7, #0]
 8007046:	2b2e      	cmp	r3, #46	; 0x2e
 8007048:	d10c      	bne.n	8007064 <_svfiprintf_r+0x124>
 800704a:	787b      	ldrb	r3, [r7, #1]
 800704c:	2b2a      	cmp	r3, #42	; 0x2a
 800704e:	d133      	bne.n	80070b8 <_svfiprintf_r+0x178>
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	1d1a      	adds	r2, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	9203      	str	r2, [sp, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfb8      	it	lt
 800705c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007060:	3702      	adds	r7, #2
 8007062:	9305      	str	r3, [sp, #20]
 8007064:	4d2e      	ldr	r5, [pc, #184]	; (8007120 <_svfiprintf_r+0x1e0>)
 8007066:	7839      	ldrb	r1, [r7, #0]
 8007068:	2203      	movs	r2, #3
 800706a:	4628      	mov	r0, r5
 800706c:	f7f9 f908 	bl	8000280 <memchr>
 8007070:	b138      	cbz	r0, 8007082 <_svfiprintf_r+0x142>
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	1b40      	subs	r0, r0, r5
 8007076:	fa03 f000 	lsl.w	r0, r3, r0
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	4303      	orrs	r3, r0
 800707e:	3701      	adds	r7, #1
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	7839      	ldrb	r1, [r7, #0]
 8007084:	4827      	ldr	r0, [pc, #156]	; (8007124 <_svfiprintf_r+0x1e4>)
 8007086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800708a:	2206      	movs	r2, #6
 800708c:	1c7e      	adds	r6, r7, #1
 800708e:	f7f9 f8f7 	bl	8000280 <memchr>
 8007092:	2800      	cmp	r0, #0
 8007094:	d038      	beq.n	8007108 <_svfiprintf_r+0x1c8>
 8007096:	4b24      	ldr	r3, [pc, #144]	; (8007128 <_svfiprintf_r+0x1e8>)
 8007098:	bb13      	cbnz	r3, 80070e0 <_svfiprintf_r+0x1a0>
 800709a:	9b03      	ldr	r3, [sp, #12]
 800709c:	3307      	adds	r3, #7
 800709e:	f023 0307 	bic.w	r3, r3, #7
 80070a2:	3308      	adds	r3, #8
 80070a4:	9303      	str	r3, [sp, #12]
 80070a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a8:	444b      	add	r3, r9
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	e76d      	b.n	8006f8a <_svfiprintf_r+0x4a>
 80070ae:	fb05 3202 	mla	r2, r5, r2, r3
 80070b2:	2001      	movs	r0, #1
 80070b4:	460f      	mov	r7, r1
 80070b6:	e7a6      	b.n	8007006 <_svfiprintf_r+0xc6>
 80070b8:	2300      	movs	r3, #0
 80070ba:	3701      	adds	r7, #1
 80070bc:	9305      	str	r3, [sp, #20]
 80070be:	4619      	mov	r1, r3
 80070c0:	250a      	movs	r5, #10
 80070c2:	4638      	mov	r0, r7
 80070c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c8:	3a30      	subs	r2, #48	; 0x30
 80070ca:	2a09      	cmp	r2, #9
 80070cc:	d903      	bls.n	80070d6 <_svfiprintf_r+0x196>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0c8      	beq.n	8007064 <_svfiprintf_r+0x124>
 80070d2:	9105      	str	r1, [sp, #20]
 80070d4:	e7c6      	b.n	8007064 <_svfiprintf_r+0x124>
 80070d6:	fb05 2101 	mla	r1, r5, r1, r2
 80070da:	2301      	movs	r3, #1
 80070dc:	4607      	mov	r7, r0
 80070de:	e7f0      	b.n	80070c2 <_svfiprintf_r+0x182>
 80070e0:	ab03      	add	r3, sp, #12
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4622      	mov	r2, r4
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <_svfiprintf_r+0x1ec>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	4640      	mov	r0, r8
 80070ec:	f7fc fbfa 	bl	80038e4 <_printf_float>
 80070f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80070f4:	4681      	mov	r9, r0
 80070f6:	d1d6      	bne.n	80070a6 <_svfiprintf_r+0x166>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	065b      	lsls	r3, r3, #25
 80070fc:	f53f af35 	bmi.w	8006f6a <_svfiprintf_r+0x2a>
 8007100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007102:	b01d      	add	sp, #116	; 0x74
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007108:	ab03      	add	r3, sp, #12
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4622      	mov	r2, r4
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <_svfiprintf_r+0x1ec>)
 8007110:	a904      	add	r1, sp, #16
 8007112:	4640      	mov	r0, r8
 8007114:	f7fc fe9c 	bl	8003e50 <_printf_i>
 8007118:	e7ea      	b.n	80070f0 <_svfiprintf_r+0x1b0>
 800711a:	bf00      	nop
 800711c:	080087cc 	.word	0x080087cc
 8007120:	080087d2 	.word	0x080087d2
 8007124:	080087d6 	.word	0x080087d6
 8007128:	080038e5 	.word	0x080038e5
 800712c:	08006e8d 	.word	0x08006e8d

08007130 <_sbrk_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4c06      	ldr	r4, [pc, #24]	; (800714c <_sbrk_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4605      	mov	r5, r0
 8007138:	4608      	mov	r0, r1
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	f7fa fb28 	bl	8001790 <_sbrk>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_sbrk_r+0x1a>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	b103      	cbz	r3, 800714a <_sbrk_r+0x1a>
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	2000020c 	.word	0x2000020c

08007150 <strncmp>:
 8007150:	b510      	push	{r4, lr}
 8007152:	b16a      	cbz	r2, 8007170 <strncmp+0x20>
 8007154:	3901      	subs	r1, #1
 8007156:	1884      	adds	r4, r0, r2
 8007158:	f810 3b01 	ldrb.w	r3, [r0], #1
 800715c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007160:	4293      	cmp	r3, r2
 8007162:	d103      	bne.n	800716c <strncmp+0x1c>
 8007164:	42a0      	cmp	r0, r4
 8007166:	d001      	beq.n	800716c <strncmp+0x1c>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f5      	bne.n	8007158 <strncmp+0x8>
 800716c:	1a98      	subs	r0, r3, r2
 800716e:	bd10      	pop	{r4, pc}
 8007170:	4610      	mov	r0, r2
 8007172:	e7fc      	b.n	800716e <strncmp+0x1e>

08007174 <__ascii_wctomb>:
 8007174:	b149      	cbz	r1, 800718a <__ascii_wctomb+0x16>
 8007176:	2aff      	cmp	r2, #255	; 0xff
 8007178:	bf85      	ittet	hi
 800717a:	238a      	movhi	r3, #138	; 0x8a
 800717c:	6003      	strhi	r3, [r0, #0]
 800717e:	700a      	strbls	r2, [r1, #0]
 8007180:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007184:	bf98      	it	ls
 8007186:	2001      	movls	r0, #1
 8007188:	4770      	bx	lr
 800718a:	4608      	mov	r0, r1
 800718c:	4770      	bx	lr

0800718e <memmove>:
 800718e:	4288      	cmp	r0, r1
 8007190:	b510      	push	{r4, lr}
 8007192:	eb01 0302 	add.w	r3, r1, r2
 8007196:	d807      	bhi.n	80071a8 <memmove+0x1a>
 8007198:	1e42      	subs	r2, r0, #1
 800719a:	4299      	cmp	r1, r3
 800719c:	d00a      	beq.n	80071b4 <memmove+0x26>
 800719e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0xc>
 80071a8:	4283      	cmp	r3, r0
 80071aa:	d9f5      	bls.n	8007198 <memmove+0xa>
 80071ac:	1881      	adds	r1, r0, r2
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	42d3      	cmn	r3, r2
 80071b2:	d100      	bne.n	80071b6 <memmove+0x28>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071be:	e7f7      	b.n	80071b0 <memmove+0x22>

080071c0 <__malloc_lock>:
 80071c0:	4770      	bx	lr

080071c2 <__malloc_unlock>:
 80071c2:	4770      	bx	lr

080071c4 <_realloc_r>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	4607      	mov	r7, r0
 80071c8:	4614      	mov	r4, r2
 80071ca:	460e      	mov	r6, r1
 80071cc:	b921      	cbnz	r1, 80071d8 <_realloc_r+0x14>
 80071ce:	4611      	mov	r1, r2
 80071d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071d4:	f7ff be00 	b.w	8006dd8 <_malloc_r>
 80071d8:	b922      	cbnz	r2, 80071e4 <_realloc_r+0x20>
 80071da:	f7ff fdaf 	bl	8006d3c <_free_r>
 80071de:	4625      	mov	r5, r4
 80071e0:	4628      	mov	r0, r5
 80071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e4:	f000 f814 	bl	8007210 <_malloc_usable_size_r>
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d20f      	bcs.n	800720c <_realloc_r+0x48>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff fdf2 	bl	8006dd8 <_malloc_r>
 80071f4:	4605      	mov	r5, r0
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d0f2      	beq.n	80071e0 <_realloc_r+0x1c>
 80071fa:	4631      	mov	r1, r6
 80071fc:	4622      	mov	r2, r4
 80071fe:	f7fc fac9 	bl	8003794 <memcpy>
 8007202:	4631      	mov	r1, r6
 8007204:	4638      	mov	r0, r7
 8007206:	f7ff fd99 	bl	8006d3c <_free_r>
 800720a:	e7e9      	b.n	80071e0 <_realloc_r+0x1c>
 800720c:	4635      	mov	r5, r6
 800720e:	e7e7      	b.n	80071e0 <_realloc_r+0x1c>

08007210 <_malloc_usable_size_r>:
 8007210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007214:	1f18      	subs	r0, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfbc      	itt	lt
 800721a:	580b      	ldrlt	r3, [r1, r0]
 800721c:	18c0      	addlt	r0, r0, r3
 800721e:	4770      	bx	lr

08007220 <pow>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	ed2d 8b04 	vpush	{d8-d9}
 8007228:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80074fc <pow+0x2dc>
 800722c:	b08d      	sub	sp, #52	; 0x34
 800722e:	ec57 6b10 	vmov	r6, r7, d0
 8007232:	ec55 4b11 	vmov	r4, r5, d1
 8007236:	f000 fa0f 	bl	8007658 <__ieee754_pow>
 800723a:	f999 3000 	ldrsb.w	r3, [r9]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	eeb0 8a40 	vmov.f32	s16, s0
 8007246:	eef0 8a60 	vmov.f32	s17, s1
 800724a:	46c8      	mov	r8, r9
 800724c:	d05f      	beq.n	800730e <pow+0xee>
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	4620      	mov	r0, r4
 8007254:	4629      	mov	r1, r5
 8007256:	f7f9 fcb9 	bl	8000bcc <__aeabi_dcmpun>
 800725a:	4683      	mov	fp, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d156      	bne.n	800730e <pow+0xee>
 8007260:	4632      	mov	r2, r6
 8007262:	463b      	mov	r3, r7
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f9 fcb0 	bl	8000bcc <__aeabi_dcmpun>
 800726c:	9001      	str	r0, [sp, #4]
 800726e:	b1e8      	cbz	r0, 80072ac <pow+0x8c>
 8007270:	2200      	movs	r2, #0
 8007272:	2300      	movs	r3, #0
 8007274:	4620      	mov	r0, r4
 8007276:	4629      	mov	r1, r5
 8007278:	f7f9 fc76 	bl	8000b68 <__aeabi_dcmpeq>
 800727c:	2800      	cmp	r0, #0
 800727e:	d046      	beq.n	800730e <pow+0xee>
 8007280:	2301      	movs	r3, #1
 8007282:	9302      	str	r3, [sp, #8]
 8007284:	4b96      	ldr	r3, [pc, #600]	; (80074e0 <pow+0x2c0>)
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	4b96      	ldr	r3, [pc, #600]	; (80074e4 <pow+0x2c4>)
 800728a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800728e:	2200      	movs	r2, #0
 8007290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800729c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80072a0:	d033      	beq.n	800730a <pow+0xea>
 80072a2:	a802      	add	r0, sp, #8
 80072a4:	f000 ffaa 	bl	80081fc <matherr>
 80072a8:	bb48      	cbnz	r0, 80072fe <pow+0xde>
 80072aa:	e05d      	b.n	8007368 <pow+0x148>
 80072ac:	f04f 0a00 	mov.w	sl, #0
 80072b0:	f04f 0b00 	mov.w	fp, #0
 80072b4:	4652      	mov	r2, sl
 80072b6:	465b      	mov	r3, fp
 80072b8:	4630      	mov	r0, r6
 80072ba:	4639      	mov	r1, r7
 80072bc:	f7f9 fc54 	bl	8000b68 <__aeabi_dcmpeq>
 80072c0:	ec4b ab19 	vmov	d9, sl, fp
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d054      	beq.n	8007372 <pow+0x152>
 80072c8:	4652      	mov	r2, sl
 80072ca:	465b      	mov	r3, fp
 80072cc:	4620      	mov	r0, r4
 80072ce:	4629      	mov	r1, r5
 80072d0:	f7f9 fc4a 	bl	8000b68 <__aeabi_dcmpeq>
 80072d4:	4680      	mov	r8, r0
 80072d6:	b318      	cbz	r0, 8007320 <pow+0x100>
 80072d8:	2301      	movs	r3, #1
 80072da:	9302      	str	r3, [sp, #8]
 80072dc:	4b80      	ldr	r3, [pc, #512]	; (80074e0 <pow+0x2c0>)
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	930a      	str	r3, [sp, #40]	; 0x28
 80072e4:	9b00      	ldr	r3, [sp, #0]
 80072e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80072ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0d5      	beq.n	80072a2 <pow+0x82>
 80072f6:	4b7b      	ldr	r3, [pc, #492]	; (80074e4 <pow+0x2c4>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007300:	b11b      	cbz	r3, 800730a <pow+0xea>
 8007302:	f7fc fa1d 	bl	8003740 <__errno>
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	6003      	str	r3, [r0, #0]
 800730a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800730e:	eeb0 0a48 	vmov.f32	s0, s16
 8007312:	eef0 0a68 	vmov.f32	s1, s17
 8007316:	b00d      	add	sp, #52	; 0x34
 8007318:	ecbd 8b04 	vpop	{d8-d9}
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	ec45 4b10 	vmov	d0, r4, r5
 8007324:	f000 ff62 	bl	80081ec <finite>
 8007328:	2800      	cmp	r0, #0
 800732a:	d0f0      	beq.n	800730e <pow+0xee>
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f9 fc22 	bl	8000b7c <__aeabi_dcmplt>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0e8      	beq.n	800730e <pow+0xee>
 800733c:	2301      	movs	r3, #1
 800733e:	9302      	str	r3, [sp, #8]
 8007340:	4b67      	ldr	r3, [pc, #412]	; (80074e0 <pow+0x2c0>)
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	f999 3000 	ldrsb.w	r3, [r9]
 8007348:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800734c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007350:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007354:	b913      	cbnz	r3, 800735c <pow+0x13c>
 8007356:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800735a:	e7a2      	b.n	80072a2 <pow+0x82>
 800735c:	4962      	ldr	r1, [pc, #392]	; (80074e8 <pow+0x2c8>)
 800735e:	2000      	movs	r0, #0
 8007360:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d19c      	bne.n	80072a2 <pow+0x82>
 8007368:	f7fc f9ea 	bl	8003740 <__errno>
 800736c:	2321      	movs	r3, #33	; 0x21
 800736e:	6003      	str	r3, [r0, #0]
 8007370:	e7c5      	b.n	80072fe <pow+0xde>
 8007372:	eeb0 0a48 	vmov.f32	s0, s16
 8007376:	eef0 0a68 	vmov.f32	s1, s17
 800737a:	f000 ff37 	bl	80081ec <finite>
 800737e:	9000      	str	r0, [sp, #0]
 8007380:	2800      	cmp	r0, #0
 8007382:	f040 8081 	bne.w	8007488 <pow+0x268>
 8007386:	ec47 6b10 	vmov	d0, r6, r7
 800738a:	f000 ff2f 	bl	80081ec <finite>
 800738e:	2800      	cmp	r0, #0
 8007390:	d07a      	beq.n	8007488 <pow+0x268>
 8007392:	ec45 4b10 	vmov	d0, r4, r5
 8007396:	f000 ff29 	bl	80081ec <finite>
 800739a:	2800      	cmp	r0, #0
 800739c:	d074      	beq.n	8007488 <pow+0x268>
 800739e:	ec53 2b18 	vmov	r2, r3, d8
 80073a2:	ee18 0a10 	vmov	r0, s16
 80073a6:	4619      	mov	r1, r3
 80073a8:	f7f9 fc10 	bl	8000bcc <__aeabi_dcmpun>
 80073ac:	f999 9000 	ldrsb.w	r9, [r9]
 80073b0:	4b4b      	ldr	r3, [pc, #300]	; (80074e0 <pow+0x2c0>)
 80073b2:	b1b0      	cbz	r0, 80073e2 <pow+0x1c2>
 80073b4:	2201      	movs	r2, #1
 80073b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073ba:	9b00      	ldr	r3, [sp, #0]
 80073bc:	930a      	str	r3, [sp, #40]	; 0x28
 80073be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80073c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80073c6:	f1b9 0f00 	cmp.w	r9, #0
 80073ca:	d0c4      	beq.n	8007356 <pow+0x136>
 80073cc:	4652      	mov	r2, sl
 80073ce:	465b      	mov	r3, fp
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f9 fa8a 	bl	80008ec <__aeabi_ddiv>
 80073d8:	f1b9 0f02 	cmp.w	r9, #2
 80073dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073e0:	e7c1      	b.n	8007366 <pow+0x146>
 80073e2:	2203      	movs	r2, #3
 80073e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073e8:	900a      	str	r0, [sp, #40]	; 0x28
 80073ea:	4629      	mov	r1, r5
 80073ec:	4620      	mov	r0, r4
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b3e      	ldr	r3, [pc, #248]	; (80074ec <pow+0x2cc>)
 80073f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80073f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80073fa:	f7f9 f94d 	bl	8000698 <__aeabi_dmul>
 80073fe:	4604      	mov	r4, r0
 8007400:	460d      	mov	r5, r1
 8007402:	f1b9 0f00 	cmp.w	r9, #0
 8007406:	d124      	bne.n	8007452 <pow+0x232>
 8007408:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <pow+0x2d0>)
 800740a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800740e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007412:	4630      	mov	r0, r6
 8007414:	4652      	mov	r2, sl
 8007416:	465b      	mov	r3, fp
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fbaf 	bl	8000b7c <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d056      	beq.n	80074d0 <pow+0x2b0>
 8007422:	ec45 4b10 	vmov	d0, r4, r5
 8007426:	f000 fef3 	bl	8008210 <rint>
 800742a:	4622      	mov	r2, r4
 800742c:	462b      	mov	r3, r5
 800742e:	ec51 0b10 	vmov	r0, r1, d0
 8007432:	f7f9 fb99 	bl	8000b68 <__aeabi_dcmpeq>
 8007436:	b920      	cbnz	r0, 8007442 <pow+0x222>
 8007438:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <pow+0x2d4>)
 800743a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800743e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007442:	f998 3000 	ldrsb.w	r3, [r8]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d142      	bne.n	80074d0 <pow+0x2b0>
 800744a:	f7fc f979 	bl	8003740 <__errno>
 800744e:	2322      	movs	r3, #34	; 0x22
 8007450:	e78d      	b.n	800736e <pow+0x14e>
 8007452:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <pow+0x2d8>)
 8007454:	2200      	movs	r2, #0
 8007456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800745a:	4630      	mov	r0, r6
 800745c:	4652      	mov	r2, sl
 800745e:	465b      	mov	r3, fp
 8007460:	4639      	mov	r1, r7
 8007462:	f7f9 fb8b 	bl	8000b7c <__aeabi_dcmplt>
 8007466:	2800      	cmp	r0, #0
 8007468:	d0eb      	beq.n	8007442 <pow+0x222>
 800746a:	ec45 4b10 	vmov	d0, r4, r5
 800746e:	f000 fecf 	bl	8008210 <rint>
 8007472:	4622      	mov	r2, r4
 8007474:	462b      	mov	r3, r5
 8007476:	ec51 0b10 	vmov	r0, r1, d0
 800747a:	f7f9 fb75 	bl	8000b68 <__aeabi_dcmpeq>
 800747e:	2800      	cmp	r0, #0
 8007480:	d1df      	bne.n	8007442 <pow+0x222>
 8007482:	2200      	movs	r2, #0
 8007484:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <pow+0x2c8>)
 8007486:	e7da      	b.n	800743e <pow+0x21e>
 8007488:	2200      	movs	r2, #0
 800748a:	2300      	movs	r3, #0
 800748c:	ec51 0b18 	vmov	r0, r1, d8
 8007490:	f7f9 fb6a 	bl	8000b68 <__aeabi_dcmpeq>
 8007494:	2800      	cmp	r0, #0
 8007496:	f43f af3a 	beq.w	800730e <pow+0xee>
 800749a:	ec47 6b10 	vmov	d0, r6, r7
 800749e:	f000 fea5 	bl	80081ec <finite>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f43f af33 	beq.w	800730e <pow+0xee>
 80074a8:	ec45 4b10 	vmov	d0, r4, r5
 80074ac:	f000 fe9e 	bl	80081ec <finite>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f43f af2c 	beq.w	800730e <pow+0xee>
 80074b6:	2304      	movs	r3, #4
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <pow+0x2c0>)
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	930a      	str	r3, [sp, #40]	; 0x28
 80074c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80074c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80074ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 80074ce:	e7b8      	b.n	8007442 <pow+0x222>
 80074d0:	a802      	add	r0, sp, #8
 80074d2:	f000 fe93 	bl	80081fc <matherr>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f47f af11 	bne.w	80072fe <pow+0xde>
 80074dc:	e7b5      	b.n	800744a <pow+0x22a>
 80074de:	bf00      	nop
 80074e0:	080088de 	.word	0x080088de
 80074e4:	3ff00000 	.word	0x3ff00000
 80074e8:	fff00000 	.word	0xfff00000
 80074ec:	3fe00000 	.word	0x3fe00000
 80074f0:	47efffff 	.word	0x47efffff
 80074f4:	c7efffff 	.word	0xc7efffff
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	200001dc 	.word	0x200001dc

08007500 <sqrt>:
 8007500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007504:	ed2d 8b02 	vpush	{d8}
 8007508:	b08b      	sub	sp, #44	; 0x2c
 800750a:	ec55 4b10 	vmov	r4, r5, d0
 800750e:	f000 fdb1 	bl	8008074 <__ieee754_sqrt>
 8007512:	4b26      	ldr	r3, [pc, #152]	; (80075ac <sqrt+0xac>)
 8007514:	eeb0 8a40 	vmov.f32	s16, s0
 8007518:	eef0 8a60 	vmov.f32	s17, s1
 800751c:	f993 6000 	ldrsb.w	r6, [r3]
 8007520:	1c73      	adds	r3, r6, #1
 8007522:	d02a      	beq.n	800757a <sqrt+0x7a>
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	4620      	mov	r0, r4
 800752a:	4629      	mov	r1, r5
 800752c:	f7f9 fb4e 	bl	8000bcc <__aeabi_dcmpun>
 8007530:	4607      	mov	r7, r0
 8007532:	bb10      	cbnz	r0, 800757a <sqrt+0x7a>
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	f04f 0900 	mov.w	r9, #0
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f9 fb1a 	bl	8000b7c <__aeabi_dcmplt>
 8007548:	b1b8      	cbz	r0, 800757a <sqrt+0x7a>
 800754a:	2301      	movs	r3, #1
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	4b18      	ldr	r3, [pc, #96]	; (80075b0 <sqrt+0xb0>)
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	9708      	str	r7, [sp, #32]
 8007554:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007558:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800755c:	b9b6      	cbnz	r6, 800758c <sqrt+0x8c>
 800755e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007562:	4668      	mov	r0, sp
 8007564:	f000 fe4a 	bl	80081fc <matherr>
 8007568:	b1d0      	cbz	r0, 80075a0 <sqrt+0xa0>
 800756a:	9b08      	ldr	r3, [sp, #32]
 800756c:	b11b      	cbz	r3, 8007576 <sqrt+0x76>
 800756e:	f7fc f8e7 	bl	8003740 <__errno>
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	ed9d 8b06 	vldr	d8, [sp, #24]
 800757a:	eeb0 0a48 	vmov.f32	s0, s16
 800757e:	eef0 0a68 	vmov.f32	s1, s17
 8007582:	b00b      	add	sp, #44	; 0x2c
 8007584:	ecbd 8b02 	vpop	{d8}
 8007588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800758c:	4642      	mov	r2, r8
 800758e:	464b      	mov	r3, r9
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f9 f9aa 	bl	80008ec <__aeabi_ddiv>
 8007598:	2e02      	cmp	r6, #2
 800759a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800759e:	d1e0      	bne.n	8007562 <sqrt+0x62>
 80075a0:	f7fc f8ce 	bl	8003740 <__errno>
 80075a4:	2321      	movs	r3, #33	; 0x21
 80075a6:	6003      	str	r3, [r0, #0]
 80075a8:	e7df      	b.n	800756a <sqrt+0x6a>
 80075aa:	bf00      	nop
 80075ac:	200001dc 	.word	0x200001dc
 80075b0:	080088e2 	.word	0x080088e2

080075b4 <sqrtf>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	ed2d 8b02 	vpush	{d8}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	eeb0 8a40 	vmov.f32	s16, s0
 80075c0:	f000 fe08 	bl	80081d4 <__ieee754_sqrtf>
 80075c4:	4b21      	ldr	r3, [pc, #132]	; (800764c <sqrtf+0x98>)
 80075c6:	f993 4000 	ldrsb.w	r4, [r3]
 80075ca:	1c63      	adds	r3, r4, #1
 80075cc:	d02c      	beq.n	8007628 <sqrtf+0x74>
 80075ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80075d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d6:	d627      	bvs.n	8007628 <sqrtf+0x74>
 80075d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d522      	bpl.n	8007628 <sqrtf+0x74>
 80075e2:	2301      	movs	r3, #1
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <sqrtf+0x9c>)
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	ee18 0a10 	vmov	r0, s16
 80075ee:	2300      	movs	r3, #0
 80075f0:	9308      	str	r3, [sp, #32]
 80075f2:	f7f8 fff9 	bl	80005e8 <__aeabi_f2d>
 80075f6:	2200      	movs	r2, #0
 80075f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007600:	2300      	movs	r3, #0
 8007602:	b9ac      	cbnz	r4, 8007630 <sqrtf+0x7c>
 8007604:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007608:	4668      	mov	r0, sp
 800760a:	f000 fdf7 	bl	80081fc <matherr>
 800760e:	b1b8      	cbz	r0, 8007640 <sqrtf+0x8c>
 8007610:	9b08      	ldr	r3, [sp, #32]
 8007612:	b11b      	cbz	r3, 800761c <sqrtf+0x68>
 8007614:	f7fc f894 	bl	8003740 <__errno>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007620:	f7f9 fb32 	bl	8000c88 <__aeabi_d2f>
 8007624:	ee00 0a10 	vmov	s0, r0
 8007628:	b00a      	add	sp, #40	; 0x28
 800762a:	ecbd 8b02 	vpop	{d8}
 800762e:	bd10      	pop	{r4, pc}
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	f7f9 f95a 	bl	80008ec <__aeabi_ddiv>
 8007638:	2c02      	cmp	r4, #2
 800763a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800763e:	d1e3      	bne.n	8007608 <sqrtf+0x54>
 8007640:	f7fc f87e 	bl	8003740 <__errno>
 8007644:	2321      	movs	r3, #33	; 0x21
 8007646:	6003      	str	r3, [r0, #0]
 8007648:	e7e2      	b.n	8007610 <sqrtf+0x5c>
 800764a:	bf00      	nop
 800764c:	200001dc 	.word	0x200001dc
 8007650:	080088e7 	.word	0x080088e7
 8007654:	00000000 	.word	0x00000000

08007658 <__ieee754_pow>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	b091      	sub	sp, #68	; 0x44
 800765e:	ed8d 1b00 	vstr	d1, [sp]
 8007662:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007666:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800766a:	ea58 0302 	orrs.w	r3, r8, r2
 800766e:	ec57 6b10 	vmov	r6, r7, d0
 8007672:	f000 84be 	beq.w	8007ff2 <__ieee754_pow+0x99a>
 8007676:	4b7a      	ldr	r3, [pc, #488]	; (8007860 <__ieee754_pow+0x208>)
 8007678:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800767c:	429c      	cmp	r4, r3
 800767e:	463d      	mov	r5, r7
 8007680:	ee10 aa10 	vmov	sl, s0
 8007684:	dc09      	bgt.n	800769a <__ieee754_pow+0x42>
 8007686:	d103      	bne.n	8007690 <__ieee754_pow+0x38>
 8007688:	b93e      	cbnz	r6, 800769a <__ieee754_pow+0x42>
 800768a:	45a0      	cmp	r8, r4
 800768c:	dc0d      	bgt.n	80076aa <__ieee754_pow+0x52>
 800768e:	e001      	b.n	8007694 <__ieee754_pow+0x3c>
 8007690:	4598      	cmp	r8, r3
 8007692:	dc02      	bgt.n	800769a <__ieee754_pow+0x42>
 8007694:	4598      	cmp	r8, r3
 8007696:	d10e      	bne.n	80076b6 <__ieee754_pow+0x5e>
 8007698:	b16a      	cbz	r2, 80076b6 <__ieee754_pow+0x5e>
 800769a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800769e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076a2:	ea54 030a 	orrs.w	r3, r4, sl
 80076a6:	f000 84a4 	beq.w	8007ff2 <__ieee754_pow+0x99a>
 80076aa:	486e      	ldr	r0, [pc, #440]	; (8007864 <__ieee754_pow+0x20c>)
 80076ac:	b011      	add	sp, #68	; 0x44
 80076ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b2:	f000 bda5 	b.w	8008200 <nan>
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	da53      	bge.n	8007762 <__ieee754_pow+0x10a>
 80076ba:	4b6b      	ldr	r3, [pc, #428]	; (8007868 <__ieee754_pow+0x210>)
 80076bc:	4598      	cmp	r8, r3
 80076be:	dc4d      	bgt.n	800775c <__ieee754_pow+0x104>
 80076c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80076c4:	4598      	cmp	r8, r3
 80076c6:	dd4c      	ble.n	8007762 <__ieee754_pow+0x10a>
 80076c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80076cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076d0:	2b14      	cmp	r3, #20
 80076d2:	dd26      	ble.n	8007722 <__ieee754_pow+0xca>
 80076d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80076d8:	fa22 f103 	lsr.w	r1, r2, r3
 80076dc:	fa01 f303 	lsl.w	r3, r1, r3
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d13e      	bne.n	8007762 <__ieee754_pow+0x10a>
 80076e4:	f001 0101 	and.w	r1, r1, #1
 80076e8:	f1c1 0b02 	rsb	fp, r1, #2
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	d15b      	bne.n	80077a8 <__ieee754_pow+0x150>
 80076f0:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <__ieee754_pow+0x208>)
 80076f2:	4598      	cmp	r8, r3
 80076f4:	d124      	bne.n	8007740 <__ieee754_pow+0xe8>
 80076f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80076fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80076fe:	ea53 030a 	orrs.w	r3, r3, sl
 8007702:	f000 8476 	beq.w	8007ff2 <__ieee754_pow+0x99a>
 8007706:	4b59      	ldr	r3, [pc, #356]	; (800786c <__ieee754_pow+0x214>)
 8007708:	429c      	cmp	r4, r3
 800770a:	dd2d      	ble.n	8007768 <__ieee754_pow+0x110>
 800770c:	f1b9 0f00 	cmp.w	r9, #0
 8007710:	f280 8473 	bge.w	8007ffa <__ieee754_pow+0x9a2>
 8007714:	2000      	movs	r0, #0
 8007716:	2100      	movs	r1, #0
 8007718:	ec41 0b10 	vmov	d0, r0, r1
 800771c:	b011      	add	sp, #68	; 0x44
 800771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007722:	2a00      	cmp	r2, #0
 8007724:	d13e      	bne.n	80077a4 <__ieee754_pow+0x14c>
 8007726:	f1c3 0314 	rsb	r3, r3, #20
 800772a:	fa48 f103 	asr.w	r1, r8, r3
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	4543      	cmp	r3, r8
 8007734:	f040 8469 	bne.w	800800a <__ieee754_pow+0x9b2>
 8007738:	f001 0101 	and.w	r1, r1, #1
 800773c:	f1c1 0b02 	rsb	fp, r1, #2
 8007740:	4b4b      	ldr	r3, [pc, #300]	; (8007870 <__ieee754_pow+0x218>)
 8007742:	4598      	cmp	r8, r3
 8007744:	d118      	bne.n	8007778 <__ieee754_pow+0x120>
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	f280 845a 	bge.w	8008002 <__ieee754_pow+0x9aa>
 800774e:	4948      	ldr	r1, [pc, #288]	; (8007870 <__ieee754_pow+0x218>)
 8007750:	4632      	mov	r2, r6
 8007752:	463b      	mov	r3, r7
 8007754:	2000      	movs	r0, #0
 8007756:	f7f9 f8c9 	bl	80008ec <__aeabi_ddiv>
 800775a:	e7dd      	b.n	8007718 <__ieee754_pow+0xc0>
 800775c:	f04f 0b02 	mov.w	fp, #2
 8007760:	e7c4      	b.n	80076ec <__ieee754_pow+0x94>
 8007762:	f04f 0b00 	mov.w	fp, #0
 8007766:	e7c1      	b.n	80076ec <__ieee754_pow+0x94>
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	dad2      	bge.n	8007714 <__ieee754_pow+0xbc>
 800776e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007772:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007776:	e7cf      	b.n	8007718 <__ieee754_pow+0xc0>
 8007778:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800777c:	d106      	bne.n	800778c <__ieee754_pow+0x134>
 800777e:	4632      	mov	r2, r6
 8007780:	463b      	mov	r3, r7
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	f7f8 ff87 	bl	8000698 <__aeabi_dmul>
 800778a:	e7c5      	b.n	8007718 <__ieee754_pow+0xc0>
 800778c:	4b39      	ldr	r3, [pc, #228]	; (8007874 <__ieee754_pow+0x21c>)
 800778e:	4599      	cmp	r9, r3
 8007790:	d10a      	bne.n	80077a8 <__ieee754_pow+0x150>
 8007792:	2d00      	cmp	r5, #0
 8007794:	db08      	blt.n	80077a8 <__ieee754_pow+0x150>
 8007796:	ec47 6b10 	vmov	d0, r6, r7
 800779a:	b011      	add	sp, #68	; 0x44
 800779c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	f000 bc68 	b.w	8008074 <__ieee754_sqrt>
 80077a4:	f04f 0b00 	mov.w	fp, #0
 80077a8:	ec47 6b10 	vmov	d0, r6, r7
 80077ac:	f000 fd15 	bl	80081da <fabs>
 80077b0:	ec51 0b10 	vmov	r0, r1, d0
 80077b4:	f1ba 0f00 	cmp.w	sl, #0
 80077b8:	d127      	bne.n	800780a <__ieee754_pow+0x1b2>
 80077ba:	b124      	cbz	r4, 80077c6 <__ieee754_pow+0x16e>
 80077bc:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <__ieee754_pow+0x218>)
 80077be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d121      	bne.n	800780a <__ieee754_pow+0x1b2>
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	da05      	bge.n	80077d8 <__ieee754_pow+0x180>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	2000      	movs	r0, #0
 80077d2:	4927      	ldr	r1, [pc, #156]	; (8007870 <__ieee754_pow+0x218>)
 80077d4:	f7f9 f88a 	bl	80008ec <__aeabi_ddiv>
 80077d8:	2d00      	cmp	r5, #0
 80077da:	da9d      	bge.n	8007718 <__ieee754_pow+0xc0>
 80077dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80077e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80077e4:	ea54 030b 	orrs.w	r3, r4, fp
 80077e8:	d108      	bne.n	80077fc <__ieee754_pow+0x1a4>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	f7f8 fd99 	bl	8000328 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e7ac      	b.n	8007756 <__ieee754_pow+0xfe>
 80077fc:	f1bb 0f01 	cmp.w	fp, #1
 8007800:	d18a      	bne.n	8007718 <__ieee754_pow+0xc0>
 8007802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007806:	4619      	mov	r1, r3
 8007808:	e786      	b.n	8007718 <__ieee754_pow+0xc0>
 800780a:	0fed      	lsrs	r5, r5, #31
 800780c:	1e6b      	subs	r3, r5, #1
 800780e:	930d      	str	r3, [sp, #52]	; 0x34
 8007810:	ea5b 0303 	orrs.w	r3, fp, r3
 8007814:	d102      	bne.n	800781c <__ieee754_pow+0x1c4>
 8007816:	4632      	mov	r2, r6
 8007818:	463b      	mov	r3, r7
 800781a:	e7e8      	b.n	80077ee <__ieee754_pow+0x196>
 800781c:	4b16      	ldr	r3, [pc, #88]	; (8007878 <__ieee754_pow+0x220>)
 800781e:	4598      	cmp	r8, r3
 8007820:	f340 80fe 	ble.w	8007a20 <__ieee754_pow+0x3c8>
 8007824:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007828:	4598      	cmp	r8, r3
 800782a:	dd0a      	ble.n	8007842 <__ieee754_pow+0x1ea>
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <__ieee754_pow+0x214>)
 800782e:	429c      	cmp	r4, r3
 8007830:	dc0d      	bgt.n	800784e <__ieee754_pow+0x1f6>
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	f6bf af6d 	bge.w	8007714 <__ieee754_pow+0xbc>
 800783a:	a307      	add	r3, pc, #28	; (adr r3, 8007858 <__ieee754_pow+0x200>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	e79f      	b.n	8007782 <__ieee754_pow+0x12a>
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <__ieee754_pow+0x224>)
 8007844:	429c      	cmp	r4, r3
 8007846:	ddf4      	ble.n	8007832 <__ieee754_pow+0x1da>
 8007848:	4b09      	ldr	r3, [pc, #36]	; (8007870 <__ieee754_pow+0x218>)
 800784a:	429c      	cmp	r4, r3
 800784c:	dd18      	ble.n	8007880 <__ieee754_pow+0x228>
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	dcf2      	bgt.n	800783a <__ieee754_pow+0x1e2>
 8007854:	e75e      	b.n	8007714 <__ieee754_pow+0xbc>
 8007856:	bf00      	nop
 8007858:	8800759c 	.word	0x8800759c
 800785c:	7e37e43c 	.word	0x7e37e43c
 8007860:	7ff00000 	.word	0x7ff00000
 8007864:	080087d1 	.word	0x080087d1
 8007868:	433fffff 	.word	0x433fffff
 800786c:	3fefffff 	.word	0x3fefffff
 8007870:	3ff00000 	.word	0x3ff00000
 8007874:	3fe00000 	.word	0x3fe00000
 8007878:	41e00000 	.word	0x41e00000
 800787c:	3feffffe 	.word	0x3feffffe
 8007880:	2200      	movs	r2, #0
 8007882:	4b63      	ldr	r3, [pc, #396]	; (8007a10 <__ieee754_pow+0x3b8>)
 8007884:	f7f8 fd50 	bl	8000328 <__aeabi_dsub>
 8007888:	a355      	add	r3, pc, #340	; (adr r3, 80079e0 <__ieee754_pow+0x388>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	f7f8 ff01 	bl	8000698 <__aeabi_dmul>
 8007896:	a354      	add	r3, pc, #336	; (adr r3, 80079e8 <__ieee754_pow+0x390>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	4620      	mov	r0, r4
 80078a2:	4629      	mov	r1, r5
 80078a4:	f7f8 fef8 	bl	8000698 <__aeabi_dmul>
 80078a8:	2200      	movs	r2, #0
 80078aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ae:	4b59      	ldr	r3, [pc, #356]	; (8007a14 <__ieee754_pow+0x3bc>)
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fef0 	bl	8000698 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	a14c      	add	r1, pc, #304	; (adr r1, 80079f0 <__ieee754_pow+0x398>)
 80078be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c2:	f7f8 fd31 	bl	8000328 <__aeabi_dsub>
 80078c6:	4622      	mov	r2, r4
 80078c8:	462b      	mov	r3, r5
 80078ca:	f7f8 fee5 	bl	8000698 <__aeabi_dmul>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	2000      	movs	r0, #0
 80078d4:	4950      	ldr	r1, [pc, #320]	; (8007a18 <__ieee754_pow+0x3c0>)
 80078d6:	f7f8 fd27 	bl	8000328 <__aeabi_dsub>
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	4680      	mov	r8, r0
 80078e0:	4689      	mov	r9, r1
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7f8 fed7 	bl	8000698 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	f7f8 fed1 	bl	8000698 <__aeabi_dmul>
 80078f6:	a340      	add	r3, pc, #256	; (adr r3, 80079f8 <__ieee754_pow+0x3a0>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f8 fecc 	bl	8000698 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007908:	f7f8 fd0e 	bl	8000328 <__aeabi_dsub>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4604      	mov	r4, r0
 8007912:	460d      	mov	r5, r1
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	f7f8 fd08 	bl	800032c <__adddf3>
 800791c:	2000      	movs	r0, #0
 800791e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007922:	4632      	mov	r2, r6
 8007924:	463b      	mov	r3, r7
 8007926:	f7f8 fcff 	bl	8000328 <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f8 fcf9 	bl	8000328 <__aeabi_dsub>
 8007936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007938:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800793c:	4313      	orrs	r3, r2
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	f040 81eb 	bne.w	8007d1c <__ieee754_pow+0x6c4>
 8007946:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007a00 <__ieee754_pow+0x3a8>
 800794a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800794e:	2400      	movs	r4, #0
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800795c:	f7f8 fce4 	bl	8000328 <__aeabi_dsub>
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	f7f8 fe98 	bl	8000698 <__aeabi_dmul>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fe90 	bl	8000698 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4640      	mov	r0, r8
 800797e:	4649      	mov	r1, r9
 8007980:	f7f8 fcd4 	bl	800032c <__adddf3>
 8007984:	4622      	mov	r2, r4
 8007986:	462b      	mov	r3, r5
 8007988:	4680      	mov	r8, r0
 800798a:	4689      	mov	r9, r1
 800798c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007990:	f7f8 fe82 	bl	8000698 <__aeabi_dmul>
 8007994:	460b      	mov	r3, r1
 8007996:	4604      	mov	r4, r0
 8007998:	460d      	mov	r5, r1
 800799a:	4602      	mov	r2, r0
 800799c:	4649      	mov	r1, r9
 800799e:	4640      	mov	r0, r8
 80079a0:	e9cd 4500 	strd	r4, r5, [sp]
 80079a4:	f7f8 fcc2 	bl	800032c <__adddf3>
 80079a8:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <__ieee754_pow+0x3c4>)
 80079aa:	4299      	cmp	r1, r3
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	468b      	mov	fp, r1
 80079b2:	f340 82f7 	ble.w	8007fa4 <__ieee754_pow+0x94c>
 80079b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80079ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80079be:	4303      	orrs	r3, r0
 80079c0:	f000 81ea 	beq.w	8007d98 <__ieee754_pow+0x740>
 80079c4:	a310      	add	r3, pc, #64	; (adr r3, 8007a08 <__ieee754_pow+0x3b0>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ce:	f7f8 fe63 	bl	8000698 <__aeabi_dmul>
 80079d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007a08 <__ieee754_pow+0x3b0>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	e6d5      	b.n	8007786 <__ieee754_pow+0x12e>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	60000000 	.word	0x60000000
 80079e4:	3ff71547 	.word	0x3ff71547
 80079e8:	f85ddf44 	.word	0xf85ddf44
 80079ec:	3e54ae0b 	.word	0x3e54ae0b
 80079f0:	55555555 	.word	0x55555555
 80079f4:	3fd55555 	.word	0x3fd55555
 80079f8:	652b82fe 	.word	0x652b82fe
 80079fc:	3ff71547 	.word	0x3ff71547
 8007a00:	00000000 	.word	0x00000000
 8007a04:	bff00000 	.word	0xbff00000
 8007a08:	8800759c 	.word	0x8800759c
 8007a0c:	7e37e43c 	.word	0x7e37e43c
 8007a10:	3ff00000 	.word	0x3ff00000
 8007a14:	3fd00000 	.word	0x3fd00000
 8007a18:	3fe00000 	.word	0x3fe00000
 8007a1c:	408fffff 	.word	0x408fffff
 8007a20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	da05      	bge.n	8007a36 <__ieee754_pow+0x3de>
 8007a2a:	4bd3      	ldr	r3, [pc, #844]	; (8007d78 <__ieee754_pow+0x720>)
 8007a2c:	f7f8 fe34 	bl	8000698 <__aeabi_dmul>
 8007a30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007a34:	460c      	mov	r4, r1
 8007a36:	1523      	asrs	r3, r4, #20
 8007a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a3c:	4413      	add	r3, r2
 8007a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a40:	4bce      	ldr	r3, [pc, #824]	; (8007d7c <__ieee754_pow+0x724>)
 8007a42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007a50:	dd08      	ble.n	8007a64 <__ieee754_pow+0x40c>
 8007a52:	4bcb      	ldr	r3, [pc, #812]	; (8007d80 <__ieee754_pow+0x728>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	f340 815e 	ble.w	8007d16 <__ieee754_pow+0x6be>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007a64:	f04f 0a00 	mov.w	sl, #0
 8007a68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007a6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a70:	4bc4      	ldr	r3, [pc, #784]	; (8007d84 <__ieee754_pow+0x72c>)
 8007a72:	4413      	add	r3, r2
 8007a74:	ed93 7b00 	vldr	d7, [r3]
 8007a78:	4629      	mov	r1, r5
 8007a7a:	ec53 2b17 	vmov	r2, r3, d7
 8007a7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a86:	f7f8 fc4f 	bl	8000328 <__aeabi_dsub>
 8007a8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a96:	f7f8 fc49 	bl	800032c <__adddf3>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	49b9      	ldr	r1, [pc, #740]	; (8007d88 <__ieee754_pow+0x730>)
 8007aa2:	f7f8 ff23 	bl	80008ec <__aeabi_ddiv>
 8007aa6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fdf1 	bl	8000698 <__aeabi_dmul>
 8007ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007aca:	106d      	asrs	r5, r5, #1
 8007acc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007ad0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461d      	mov	r5, r3
 8007ae2:	f7f8 fdd9 	bl	8000698 <__aeabi_dmul>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fc1b 	bl	8000328 <__aeabi_dsub>
 8007af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 fc13 	bl	8000328 <__aeabi_dsub>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b0a:	f7f8 fc0d 	bl	8000328 <__aeabi_dsub>
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	f7f8 fdc1 	bl	8000698 <__aeabi_dmul>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 fc03 	bl	8000328 <__aeabi_dsub>
 8007b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b26:	f7f8 fdb7 	bl	8000698 <__aeabi_dmul>
 8007b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b32:	4610      	mov	r0, r2
 8007b34:	4619      	mov	r1, r3
 8007b36:	f7f8 fdaf 	bl	8000698 <__aeabi_dmul>
 8007b3a:	a37b      	add	r3, pc, #492	; (adr r3, 8007d28 <__ieee754_pow+0x6d0>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	4604      	mov	r4, r0
 8007b42:	460d      	mov	r5, r1
 8007b44:	f7f8 fda8 	bl	8000698 <__aeabi_dmul>
 8007b48:	a379      	add	r3, pc, #484	; (adr r3, 8007d30 <__ieee754_pow+0x6d8>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f7f8 fbed 	bl	800032c <__adddf3>
 8007b52:	4622      	mov	r2, r4
 8007b54:	462b      	mov	r3, r5
 8007b56:	f7f8 fd9f 	bl	8000698 <__aeabi_dmul>
 8007b5a:	a377      	add	r3, pc, #476	; (adr r3, 8007d38 <__ieee754_pow+0x6e0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fbe4 	bl	800032c <__adddf3>
 8007b64:	4622      	mov	r2, r4
 8007b66:	462b      	mov	r3, r5
 8007b68:	f7f8 fd96 	bl	8000698 <__aeabi_dmul>
 8007b6c:	a374      	add	r3, pc, #464	; (adr r3, 8007d40 <__ieee754_pow+0x6e8>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fbdb 	bl	800032c <__adddf3>
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	f7f8 fd8d 	bl	8000698 <__aeabi_dmul>
 8007b7e:	a372      	add	r3, pc, #456	; (adr r3, 8007d48 <__ieee754_pow+0x6f0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fbd2 	bl	800032c <__adddf3>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	f7f8 fd84 	bl	8000698 <__aeabi_dmul>
 8007b90:	a36f      	add	r3, pc, #444	; (adr r3, 8007d50 <__ieee754_pow+0x6f8>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fbc9 	bl	800032c <__adddf3>
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fd77 	bl	8000698 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fd71 	bl	8000698 <__aeabi_dmul>
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc2:	f7f8 fbb3 	bl	800032c <__adddf3>
 8007bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bca:	f7f8 fd65 	bl	8000698 <__aeabi_dmul>
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	f7f8 fbab 	bl	800032c <__adddf3>
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460f      	mov	r7, r1
 8007bdc:	464b      	mov	r3, r9
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 fd59 	bl	8000698 <__aeabi_dmul>
 8007be6:	2200      	movs	r2, #0
 8007be8:	4b68      	ldr	r3, [pc, #416]	; (8007d8c <__ieee754_pow+0x734>)
 8007bea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007bee:	f7f8 fb9d 	bl	800032c <__adddf3>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fb99 	bl	800032c <__adddf3>
 8007bfa:	9802      	ldr	r0, [sp, #8]
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4640      	mov	r0, r8
 8007c06:	4649      	mov	r1, r9
 8007c08:	f7f8 fd46 	bl	8000698 <__aeabi_dmul>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4680      	mov	r8, r0
 8007c10:	4689      	mov	r9, r1
 8007c12:	4b5e      	ldr	r3, [pc, #376]	; (8007d8c <__ieee754_pow+0x734>)
 8007c14:	4620      	mov	r0, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	f7f8 fb86 	bl	8000328 <__aeabi_dsub>
 8007c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c20:	f7f8 fb82 	bl	8000328 <__aeabi_dsub>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4630      	mov	r0, r6
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 fb7c 	bl	8000328 <__aeabi_dsub>
 8007c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c34:	f7f8 fd30 	bl	8000698 <__aeabi_dmul>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	462b      	mov	r3, r5
 8007c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c44:	f7f8 fd28 	bl	8000698 <__aeabi_dmul>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 fb6c 	bl	800032c <__adddf3>
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 fb64 	bl	800032c <__adddf3>
 8007c64:	9802      	ldr	r0, [sp, #8]
 8007c66:	a33c      	add	r3, pc, #240	; (adr r3, 8007d58 <__ieee754_pow+0x700>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	f7f8 fd12 	bl	8000698 <__aeabi_dmul>
 8007c74:	4642      	mov	r2, r8
 8007c76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fb52 	bl	8000328 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4630      	mov	r0, r6
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7f8 fb4c 	bl	8000328 <__aeabi_dsub>
 8007c90:	a333      	add	r3, pc, #204	; (adr r3, 8007d60 <__ieee754_pow+0x708>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fcff 	bl	8000698 <__aeabi_dmul>
 8007c9a:	a333      	add	r3, pc, #204	; (adr r3, 8007d68 <__ieee754_pow+0x710>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 fcf6 	bl	8000698 <__aeabi_dmul>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 fb3a 	bl	800032c <__adddf3>
 8007cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cba:	4b35      	ldr	r3, [pc, #212]	; (8007d90 <__ieee754_pow+0x738>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fb33 	bl	800032c <__adddf3>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	460d      	mov	r5, r1
 8007ccc:	f7f8 fc7a 	bl	80005c4 <__aeabi_i2d>
 8007cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cd2:	4b30      	ldr	r3, [pc, #192]	; (8007d94 <__ieee754_pow+0x73c>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	4622      	mov	r2, r4
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce6:	f7f8 fb21 	bl	800032c <__adddf3>
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	f7f8 fb1d 	bl	800032c <__adddf3>
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	f7f8 fb19 	bl	800032c <__adddf3>
 8007cfa:	9802      	ldr	r0, [sp, #8]
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d04:	f7f8 fb10 	bl	8000328 <__aeabi_dsub>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fb0c 	bl	8000328 <__aeabi_dsub>
 8007d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d14:	e607      	b.n	8007926 <__ieee754_pow+0x2ce>
 8007d16:	f04f 0a01 	mov.w	sl, #1
 8007d1a:	e6a5      	b.n	8007a68 <__ieee754_pow+0x410>
 8007d1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007d70 <__ieee754_pow+0x718>
 8007d20:	e613      	b.n	800794a <__ieee754_pow+0x2f2>
 8007d22:	bf00      	nop
 8007d24:	f3af 8000 	nop.w
 8007d28:	4a454eef 	.word	0x4a454eef
 8007d2c:	3fca7e28 	.word	0x3fca7e28
 8007d30:	93c9db65 	.word	0x93c9db65
 8007d34:	3fcd864a 	.word	0x3fcd864a
 8007d38:	a91d4101 	.word	0xa91d4101
 8007d3c:	3fd17460 	.word	0x3fd17460
 8007d40:	518f264d 	.word	0x518f264d
 8007d44:	3fd55555 	.word	0x3fd55555
 8007d48:	db6fabff 	.word	0xdb6fabff
 8007d4c:	3fdb6db6 	.word	0x3fdb6db6
 8007d50:	33333303 	.word	0x33333303
 8007d54:	3fe33333 	.word	0x3fe33333
 8007d58:	e0000000 	.word	0xe0000000
 8007d5c:	3feec709 	.word	0x3feec709
 8007d60:	dc3a03fd 	.word	0xdc3a03fd
 8007d64:	3feec709 	.word	0x3feec709
 8007d68:	145b01f5 	.word	0x145b01f5
 8007d6c:	be3e2fe0 	.word	0xbe3e2fe0
 8007d70:	00000000 	.word	0x00000000
 8007d74:	3ff00000 	.word	0x3ff00000
 8007d78:	43400000 	.word	0x43400000
 8007d7c:	0003988e 	.word	0x0003988e
 8007d80:	000bb679 	.word	0x000bb679
 8007d84:	080088f0 	.word	0x080088f0
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	40080000 	.word	0x40080000
 8007d90:	08008910 	.word	0x08008910
 8007d94:	08008900 	.word	0x08008900
 8007d98:	a3b4      	add	r3, pc, #720	; (adr r3, 800806c <__ieee754_pow+0xa14>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fac3 	bl	800032c <__adddf3>
 8007da6:	4622      	mov	r2, r4
 8007da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dac:	462b      	mov	r3, r5
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fab9 	bl	8000328 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbe:	f7f8 fefb 	bl	8000bb8 <__aeabi_dcmpgt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f47f adfe 	bne.w	80079c4 <__ieee754_pow+0x36c>
 8007dc8:	4aa3      	ldr	r2, [pc, #652]	; (8008058 <__ieee754_pow+0xa00>)
 8007dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f340 810a 	ble.w	8007fe8 <__ieee754_pow+0x990>
 8007dd4:	151b      	asrs	r3, r3, #20
 8007dd6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007dda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007dde:	fa4a f303 	asr.w	r3, sl, r3
 8007de2:	445b      	add	r3, fp
 8007de4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007de8:	4e9c      	ldr	r6, [pc, #624]	; (800805c <__ieee754_pow+0xa04>)
 8007dea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007dee:	4116      	asrs	r6, r2
 8007df0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007df4:	2000      	movs	r0, #0
 8007df6:	ea23 0106 	bic.w	r1, r3, r6
 8007dfa:	f1c2 0214 	rsb	r2, r2, #20
 8007dfe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007e02:	fa4a fa02 	asr.w	sl, sl, r2
 8007e06:	f1bb 0f00 	cmp.w	fp, #0
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	bfb8      	it	lt
 8007e14:	f1ca 0a00 	rsblt	sl, sl, #0
 8007e18:	f7f8 fa86 	bl	8000328 <__aeabi_dsub>
 8007e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e28:	f7f8 fa80 	bl	800032c <__adddf3>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	a378      	add	r3, pc, #480	; (adr r3, 8008010 <__ieee754_pow+0x9b8>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	4604      	mov	r4, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	f7f8 fc2e 	bl	8000698 <__aeabi_dmul>
 8007e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e40:	4606      	mov	r6, r0
 8007e42:	460f      	mov	r7, r1
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f8 fa6e 	bl	8000328 <__aeabi_dsub>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7f8 fa68 	bl	8000328 <__aeabi_dsub>
 8007e58:	a36f      	add	r3, pc, #444	; (adr r3, 8008018 <__ieee754_pow+0x9c0>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fc1b 	bl	8000698 <__aeabi_dmul>
 8007e62:	a36f      	add	r3, pc, #444	; (adr r3, 8008020 <__ieee754_pow+0x9c8>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	4680      	mov	r8, r0
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7f8 fc12 	bl	8000698 <__aeabi_dmul>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 fa56 	bl	800032c <__adddf3>
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4630      	mov	r0, r6
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	f7f8 fa4e 	bl	800032c <__adddf3>
 8007e90:	4632      	mov	r2, r6
 8007e92:	463b      	mov	r3, r7
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	f7f8 fa46 	bl	8000328 <__aeabi_dsub>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 fa40 	bl	8000328 <__aeabi_dsub>
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	464b      	mov	r3, r9
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	f7f8 fbf0 	bl	8000698 <__aeabi_dmul>
 8007eb8:	a35b      	add	r3, pc, #364	; (adr r3, 8008028 <__ieee754_pow+0x9d0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	f7f8 fbe9 	bl	8000698 <__aeabi_dmul>
 8007ec6:	a35a      	add	r3, pc, #360	; (adr r3, 8008030 <__ieee754_pow+0x9d8>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 fa2c 	bl	8000328 <__aeabi_dsub>
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	f7f8 fbe0 	bl	8000698 <__aeabi_dmul>
 8007ed8:	a357      	add	r3, pc, #348	; (adr r3, 8008038 <__ieee754_pow+0x9e0>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fa25 	bl	800032c <__adddf3>
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	f7f8 fbd7 	bl	8000698 <__aeabi_dmul>
 8007eea:	a355      	add	r3, pc, #340	; (adr r3, 8008040 <__ieee754_pow+0x9e8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 fa1a 	bl	8000328 <__aeabi_dsub>
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	462b      	mov	r3, r5
 8007ef8:	f7f8 fbce 	bl	8000698 <__aeabi_dmul>
 8007efc:	a352      	add	r3, pc, #328	; (adr r3, 8008048 <__ieee754_pow+0x9f0>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 fa13 	bl	800032c <__adddf3>
 8007f06:	4622      	mov	r2, r4
 8007f08:	462b      	mov	r3, r5
 8007f0a:	f7f8 fbc5 	bl	8000698 <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 fa07 	bl	8000328 <__aeabi_dsub>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 fbb7 	bl	8000698 <__aeabi_dmul>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8007f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 f9f6 	bl	8000328 <__aeabi_dsub>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f44:	f7f8 fcd2 	bl	80008ec <__aeabi_ddiv>
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	463b      	mov	r3, r7
 8007f50:	4640      	mov	r0, r8
 8007f52:	4649      	mov	r1, r9
 8007f54:	f7f8 fba0 	bl	8000698 <__aeabi_dmul>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	f7f8 f9e6 	bl	800032c <__adddf3>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4620      	mov	r0, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 f9de 	bl	8000328 <__aeabi_dsub>
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	f7f8 f9da 	bl	8000328 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4939      	ldr	r1, [pc, #228]	; (8008060 <__ieee754_pow+0xa08>)
 8007f7c:	f7f8 f9d4 	bl	8000328 <__aeabi_dsub>
 8007f80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007f84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	da2f      	bge.n	8007fee <__ieee754_pow+0x996>
 8007f8e:	4650      	mov	r0, sl
 8007f90:	ec43 2b10 	vmov	d0, r2, r3
 8007f94:	f000 f9c0 	bl	8008318 <scalbn>
 8007f98:	ec51 0b10 	vmov	r0, r1, d0
 8007f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa0:	f7ff bbf1 	b.w	8007786 <__ieee754_pow+0x12e>
 8007fa4:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <__ieee754_pow+0xa0c>)
 8007fa6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007faa:	429e      	cmp	r6, r3
 8007fac:	f77f af0c 	ble.w	8007dc8 <__ieee754_pow+0x770>
 8007fb0:	4b2d      	ldr	r3, [pc, #180]	; (8008068 <__ieee754_pow+0xa10>)
 8007fb2:	440b      	add	r3, r1
 8007fb4:	4303      	orrs	r3, r0
 8007fb6:	d00b      	beq.n	8007fd0 <__ieee754_pow+0x978>
 8007fb8:	a325      	add	r3, pc, #148	; (adr r3, 8008050 <__ieee754_pow+0x9f8>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fb69 	bl	8000698 <__aeabi_dmul>
 8007fc6:	a322      	add	r3, pc, #136	; (adr r3, 8008050 <__ieee754_pow+0x9f8>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7ff bbdb 	b.w	8007786 <__ieee754_pow+0x12e>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	f7f8 f9a8 	bl	8000328 <__aeabi_dsub>
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	f7f8 fde2 	bl	8000ba4 <__aeabi_dcmpge>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f43f aef1 	beq.w	8007dc8 <__ieee754_pow+0x770>
 8007fe6:	e7e7      	b.n	8007fb8 <__ieee754_pow+0x960>
 8007fe8:	f04f 0a00 	mov.w	sl, #0
 8007fec:	e718      	b.n	8007e20 <__ieee754_pow+0x7c8>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	e7d4      	b.n	8007f9c <__ieee754_pow+0x944>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	491a      	ldr	r1, [pc, #104]	; (8008060 <__ieee754_pow+0xa08>)
 8007ff6:	f7ff bb8f 	b.w	8007718 <__ieee754_pow+0xc0>
 8007ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ffe:	f7ff bb8b 	b.w	8007718 <__ieee754_pow+0xc0>
 8008002:	4630      	mov	r0, r6
 8008004:	4639      	mov	r1, r7
 8008006:	f7ff bb87 	b.w	8007718 <__ieee754_pow+0xc0>
 800800a:	4693      	mov	fp, r2
 800800c:	f7ff bb98 	b.w	8007740 <__ieee754_pow+0xe8>
 8008010:	00000000 	.word	0x00000000
 8008014:	3fe62e43 	.word	0x3fe62e43
 8008018:	fefa39ef 	.word	0xfefa39ef
 800801c:	3fe62e42 	.word	0x3fe62e42
 8008020:	0ca86c39 	.word	0x0ca86c39
 8008024:	be205c61 	.word	0xbe205c61
 8008028:	72bea4d0 	.word	0x72bea4d0
 800802c:	3e663769 	.word	0x3e663769
 8008030:	c5d26bf1 	.word	0xc5d26bf1
 8008034:	3ebbbd41 	.word	0x3ebbbd41
 8008038:	af25de2c 	.word	0xaf25de2c
 800803c:	3f11566a 	.word	0x3f11566a
 8008040:	16bebd93 	.word	0x16bebd93
 8008044:	3f66c16c 	.word	0x3f66c16c
 8008048:	5555553e 	.word	0x5555553e
 800804c:	3fc55555 	.word	0x3fc55555
 8008050:	c2f8f359 	.word	0xc2f8f359
 8008054:	01a56e1f 	.word	0x01a56e1f
 8008058:	3fe00000 	.word	0x3fe00000
 800805c:	000fffff 	.word	0x000fffff
 8008060:	3ff00000 	.word	0x3ff00000
 8008064:	4090cbff 	.word	0x4090cbff
 8008068:	3f6f3400 	.word	0x3f6f3400
 800806c:	652b82fe 	.word	0x652b82fe
 8008070:	3c971547 	.word	0x3c971547

08008074 <__ieee754_sqrt>:
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	4955      	ldr	r1, [pc, #340]	; (80081d0 <__ieee754_sqrt+0x15c>)
 800807a:	ec55 4b10 	vmov	r4, r5, d0
 800807e:	43a9      	bics	r1, r5
 8008080:	462b      	mov	r3, r5
 8008082:	462a      	mov	r2, r5
 8008084:	d112      	bne.n	80080ac <__ieee754_sqrt+0x38>
 8008086:	ee10 2a10 	vmov	r2, s0
 800808a:	ee10 0a10 	vmov	r0, s0
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fb02 	bl	8000698 <__aeabi_dmul>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f946 	bl	800032c <__adddf3>
 80080a0:	4604      	mov	r4, r0
 80080a2:	460d      	mov	r5, r1
 80080a4:	ec45 4b10 	vmov	d0, r4, r5
 80080a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	ee10 0a10 	vmov	r0, s0
 80080b2:	4621      	mov	r1, r4
 80080b4:	dc0f      	bgt.n	80080d6 <__ieee754_sqrt+0x62>
 80080b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80080ba:	4330      	orrs	r0, r6
 80080bc:	d0f2      	beq.n	80080a4 <__ieee754_sqrt+0x30>
 80080be:	b155      	cbz	r5, 80080d6 <__ieee754_sqrt+0x62>
 80080c0:	ee10 2a10 	vmov	r2, s0
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f92e 	bl	8000328 <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	f7f8 fc0c 	bl	80008ec <__aeabi_ddiv>
 80080d4:	e7e4      	b.n	80080a0 <__ieee754_sqrt+0x2c>
 80080d6:	151b      	asrs	r3, r3, #20
 80080d8:	d073      	beq.n	80081c2 <__ieee754_sqrt+0x14e>
 80080da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080de:	07dd      	lsls	r5, r3, #31
 80080e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80080e4:	bf48      	it	mi
 80080e6:	0fc8      	lsrmi	r0, r1, #31
 80080e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080ec:	bf44      	itt	mi
 80080ee:	0049      	lslmi	r1, r1, #1
 80080f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80080f4:	2500      	movs	r5, #0
 80080f6:	1058      	asrs	r0, r3, #1
 80080f8:	0fcb      	lsrs	r3, r1, #31
 80080fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80080fe:	0049      	lsls	r1, r1, #1
 8008100:	2316      	movs	r3, #22
 8008102:	462c      	mov	r4, r5
 8008104:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008108:	19a7      	adds	r7, r4, r6
 800810a:	4297      	cmp	r7, r2
 800810c:	bfde      	ittt	le
 800810e:	19bc      	addle	r4, r7, r6
 8008110:	1bd2      	suble	r2, r2, r7
 8008112:	19ad      	addle	r5, r5, r6
 8008114:	0fcf      	lsrs	r7, r1, #31
 8008116:	3b01      	subs	r3, #1
 8008118:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800811c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008120:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008124:	d1f0      	bne.n	8008108 <__ieee754_sqrt+0x94>
 8008126:	f04f 0c20 	mov.w	ip, #32
 800812a:	469e      	mov	lr, r3
 800812c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008130:	42a2      	cmp	r2, r4
 8008132:	eb06 070e 	add.w	r7, r6, lr
 8008136:	dc02      	bgt.n	800813e <__ieee754_sqrt+0xca>
 8008138:	d112      	bne.n	8008160 <__ieee754_sqrt+0xec>
 800813a:	428f      	cmp	r7, r1
 800813c:	d810      	bhi.n	8008160 <__ieee754_sqrt+0xec>
 800813e:	2f00      	cmp	r7, #0
 8008140:	eb07 0e06 	add.w	lr, r7, r6
 8008144:	da42      	bge.n	80081cc <__ieee754_sqrt+0x158>
 8008146:	f1be 0f00 	cmp.w	lr, #0
 800814a:	db3f      	blt.n	80081cc <__ieee754_sqrt+0x158>
 800814c:	f104 0801 	add.w	r8, r4, #1
 8008150:	1b12      	subs	r2, r2, r4
 8008152:	428f      	cmp	r7, r1
 8008154:	bf88      	it	hi
 8008156:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800815a:	1bc9      	subs	r1, r1, r7
 800815c:	4433      	add	r3, r6
 800815e:	4644      	mov	r4, r8
 8008160:	0052      	lsls	r2, r2, #1
 8008162:	f1bc 0c01 	subs.w	ip, ip, #1
 8008166:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800816a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800816e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008172:	d1dd      	bne.n	8008130 <__ieee754_sqrt+0xbc>
 8008174:	430a      	orrs	r2, r1
 8008176:	d006      	beq.n	8008186 <__ieee754_sqrt+0x112>
 8008178:	1c5c      	adds	r4, r3, #1
 800817a:	bf13      	iteet	ne
 800817c:	3301      	addne	r3, #1
 800817e:	3501      	addeq	r5, #1
 8008180:	4663      	moveq	r3, ip
 8008182:	f023 0301 	bicne.w	r3, r3, #1
 8008186:	106a      	asrs	r2, r5, #1
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	07e9      	lsls	r1, r5, #31
 800818c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008190:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008194:	bf48      	it	mi
 8008196:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800819a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800819e:	461c      	mov	r4, r3
 80081a0:	e780      	b.n	80080a4 <__ieee754_sqrt+0x30>
 80081a2:	0aca      	lsrs	r2, r1, #11
 80081a4:	3815      	subs	r0, #21
 80081a6:	0549      	lsls	r1, r1, #21
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	d0fa      	beq.n	80081a2 <__ieee754_sqrt+0x12e>
 80081ac:	02d6      	lsls	r6, r2, #11
 80081ae:	d50a      	bpl.n	80081c6 <__ieee754_sqrt+0x152>
 80081b0:	f1c3 0420 	rsb	r4, r3, #32
 80081b4:	fa21 f404 	lsr.w	r4, r1, r4
 80081b8:	1e5d      	subs	r5, r3, #1
 80081ba:	4099      	lsls	r1, r3
 80081bc:	4322      	orrs	r2, r4
 80081be:	1b43      	subs	r3, r0, r5
 80081c0:	e78b      	b.n	80080da <__ieee754_sqrt+0x66>
 80081c2:	4618      	mov	r0, r3
 80081c4:	e7f0      	b.n	80081a8 <__ieee754_sqrt+0x134>
 80081c6:	0052      	lsls	r2, r2, #1
 80081c8:	3301      	adds	r3, #1
 80081ca:	e7ef      	b.n	80081ac <__ieee754_sqrt+0x138>
 80081cc:	46a0      	mov	r8, r4
 80081ce:	e7bf      	b.n	8008150 <__ieee754_sqrt+0xdc>
 80081d0:	7ff00000 	.word	0x7ff00000

080081d4 <__ieee754_sqrtf>:
 80081d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80081d8:	4770      	bx	lr

080081da <fabs>:
 80081da:	ec51 0b10 	vmov	r0, r1, d0
 80081de:	ee10 2a10 	vmov	r2, s0
 80081e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081e6:	ec43 2b10 	vmov	d0, r2, r3
 80081ea:	4770      	bx	lr

080081ec <finite>:
 80081ec:	ee10 3a90 	vmov	r3, s1
 80081f0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80081f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80081f8:	0fc0      	lsrs	r0, r0, #31
 80081fa:	4770      	bx	lr

080081fc <matherr>:
 80081fc:	2000      	movs	r0, #0
 80081fe:	4770      	bx	lr

08008200 <nan>:
 8008200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008208 <nan+0x8>
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	00000000 	.word	0x00000000
 800820c:	7ff80000 	.word	0x7ff80000

08008210 <rint>:
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	ec51 0b10 	vmov	r0, r1, d0
 8008216:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800821a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800821e:	2e13      	cmp	r6, #19
 8008220:	460b      	mov	r3, r1
 8008222:	ee10 4a10 	vmov	r4, s0
 8008226:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800822a:	dc56      	bgt.n	80082da <rint+0xca>
 800822c:	2e00      	cmp	r6, #0
 800822e:	da2b      	bge.n	8008288 <rint+0x78>
 8008230:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008234:	4302      	orrs	r2, r0
 8008236:	d023      	beq.n	8008280 <rint+0x70>
 8008238:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800823c:	4302      	orrs	r2, r0
 800823e:	4254      	negs	r4, r2
 8008240:	4314      	orrs	r4, r2
 8008242:	0c4b      	lsrs	r3, r1, #17
 8008244:	0b24      	lsrs	r4, r4, #12
 8008246:	045b      	lsls	r3, r3, #17
 8008248:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800824c:	ea44 0103 	orr.w	r1, r4, r3
 8008250:	460b      	mov	r3, r1
 8008252:	492f      	ldr	r1, [pc, #188]	; (8008310 <rint+0x100>)
 8008254:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008258:	e9d1 6700 	ldrd	r6, r7, [r1]
 800825c:	4602      	mov	r2, r0
 800825e:	4639      	mov	r1, r7
 8008260:	4630      	mov	r0, r6
 8008262:	f7f8 f863 	bl	800032c <__adddf3>
 8008266:	e9cd 0100 	strd	r0, r1, [sp]
 800826a:	463b      	mov	r3, r7
 800826c:	4632      	mov	r2, r6
 800826e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008272:	f7f8 f859 	bl	8000328 <__aeabi_dsub>
 8008276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800827a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800827e:	4639      	mov	r1, r7
 8008280:	ec41 0b10 	vmov	d0, r0, r1
 8008284:	b003      	add	sp, #12
 8008286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008288:	4a22      	ldr	r2, [pc, #136]	; (8008314 <rint+0x104>)
 800828a:	4132      	asrs	r2, r6
 800828c:	ea01 0702 	and.w	r7, r1, r2
 8008290:	4307      	orrs	r7, r0
 8008292:	d0f5      	beq.n	8008280 <rint+0x70>
 8008294:	0852      	lsrs	r2, r2, #1
 8008296:	4011      	ands	r1, r2
 8008298:	430c      	orrs	r4, r1
 800829a:	d00b      	beq.n	80082b4 <rint+0xa4>
 800829c:	ea23 0202 	bic.w	r2, r3, r2
 80082a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082a4:	2e13      	cmp	r6, #19
 80082a6:	fa43 f306 	asr.w	r3, r3, r6
 80082aa:	bf0c      	ite	eq
 80082ac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80082b0:	2400      	movne	r4, #0
 80082b2:	4313      	orrs	r3, r2
 80082b4:	4916      	ldr	r1, [pc, #88]	; (8008310 <rint+0x100>)
 80082b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80082ba:	4622      	mov	r2, r4
 80082bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f8 f832 	bl	800032c <__adddf3>
 80082c8:	e9cd 0100 	strd	r0, r1, [sp]
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082d4:	f7f8 f828 	bl	8000328 <__aeabi_dsub>
 80082d8:	e7d2      	b.n	8008280 <rint+0x70>
 80082da:	2e33      	cmp	r6, #51	; 0x33
 80082dc:	dd07      	ble.n	80082ee <rint+0xde>
 80082de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082e2:	d1cd      	bne.n	8008280 <rint+0x70>
 80082e4:	ee10 2a10 	vmov	r2, s0
 80082e8:	f7f8 f820 	bl	800032c <__adddf3>
 80082ec:	e7c8      	b.n	8008280 <rint+0x70>
 80082ee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082f6:	40f2      	lsrs	r2, r6
 80082f8:	4210      	tst	r0, r2
 80082fa:	d0c1      	beq.n	8008280 <rint+0x70>
 80082fc:	0852      	lsrs	r2, r2, #1
 80082fe:	4210      	tst	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008306:	ea20 0202 	bicne.w	r2, r0, r2
 800830a:	4134      	asrne	r4, r6
 800830c:	4314      	orrne	r4, r2
 800830e:	e7d1      	b.n	80082b4 <rint+0xa4>
 8008310:	08008920 	.word	0x08008920
 8008314:	000fffff 	.word	0x000fffff

08008318 <scalbn>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	ec55 4b10 	vmov	r4, r5, d0
 800831e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008322:	4606      	mov	r6, r0
 8008324:	462b      	mov	r3, r5
 8008326:	b9aa      	cbnz	r2, 8008354 <scalbn+0x3c>
 8008328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800832c:	4323      	orrs	r3, r4
 800832e:	d03b      	beq.n	80083a8 <scalbn+0x90>
 8008330:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <scalbn+0xe0>)
 8008332:	4629      	mov	r1, r5
 8008334:	2200      	movs	r2, #0
 8008336:	ee10 0a10 	vmov	r0, s0
 800833a:	f7f8 f9ad 	bl	8000698 <__aeabi_dmul>
 800833e:	4b2f      	ldr	r3, [pc, #188]	; (80083fc <scalbn+0xe4>)
 8008340:	429e      	cmp	r6, r3
 8008342:	4604      	mov	r4, r0
 8008344:	460d      	mov	r5, r1
 8008346:	da12      	bge.n	800836e <scalbn+0x56>
 8008348:	a327      	add	r3, pc, #156	; (adr r3, 80083e8 <scalbn+0xd0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f9a3 	bl	8000698 <__aeabi_dmul>
 8008352:	e009      	b.n	8008368 <scalbn+0x50>
 8008354:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008358:	428a      	cmp	r2, r1
 800835a:	d10c      	bne.n	8008376 <scalbn+0x5e>
 800835c:	ee10 2a10 	vmov	r2, s0
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	f7f7 ffe2 	bl	800032c <__adddf3>
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	e01c      	b.n	80083a8 <scalbn+0x90>
 800836e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008372:	460b      	mov	r3, r1
 8008374:	3a36      	subs	r2, #54	; 0x36
 8008376:	4432      	add	r2, r6
 8008378:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800837c:	428a      	cmp	r2, r1
 800837e:	dd0b      	ble.n	8008398 <scalbn+0x80>
 8008380:	ec45 4b11 	vmov	d1, r4, r5
 8008384:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80083f0 <scalbn+0xd8>
 8008388:	f000 f83c 	bl	8008404 <copysign>
 800838c:	a318      	add	r3, pc, #96	; (adr r3, 80083f0 <scalbn+0xd8>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	ec51 0b10 	vmov	r0, r1, d0
 8008396:	e7da      	b.n	800834e <scalbn+0x36>
 8008398:	2a00      	cmp	r2, #0
 800839a:	dd08      	ble.n	80083ae <scalbn+0x96>
 800839c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083a8:	ec45 4b10 	vmov	d0, r4, r5
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
 80083ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80083b2:	da0d      	bge.n	80083d0 <scalbn+0xb8>
 80083b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80083b8:	429e      	cmp	r6, r3
 80083ba:	ec45 4b11 	vmov	d1, r4, r5
 80083be:	dce1      	bgt.n	8008384 <scalbn+0x6c>
 80083c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80083e8 <scalbn+0xd0>
 80083c4:	f000 f81e 	bl	8008404 <copysign>
 80083c8:	a307      	add	r3, pc, #28	; (adr r3, 80083e8 <scalbn+0xd0>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	e7e0      	b.n	8008392 <scalbn+0x7a>
 80083d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083d4:	3236      	adds	r2, #54	; 0x36
 80083d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	2200      	movs	r2, #0
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <scalbn+0xe8>)
 80083e6:	e7b2      	b.n	800834e <scalbn+0x36>
 80083e8:	c2f8f359 	.word	0xc2f8f359
 80083ec:	01a56e1f 	.word	0x01a56e1f
 80083f0:	8800759c 	.word	0x8800759c
 80083f4:	7e37e43c 	.word	0x7e37e43c
 80083f8:	43500000 	.word	0x43500000
 80083fc:	ffff3cb0 	.word	0xffff3cb0
 8008400:	3c900000 	.word	0x3c900000

08008404 <copysign>:
 8008404:	ec51 0b10 	vmov	r0, r1, d0
 8008408:	ee11 0a90 	vmov	r0, s3
 800840c:	ee10 2a10 	vmov	r2, s0
 8008410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008414:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008418:	ea41 0300 	orr.w	r3, r1, r0
 800841c:	ec43 2b10 	vmov	d0, r2, r3
 8008420:	4770      	bx	lr
	...

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
