
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008504  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080086c8  080086c8  000186c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb8  08008bb8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008bb8  08008bb8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bb8  08008bb8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200001e0  08008da0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08008da0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ac  00000000  00000000  000298f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  0002b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000560  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000294e6  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000674f  00000000  00000000  0005532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc452  00000000  00000000  0005ba7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00157ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e8  00000000  00000000  00157fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002e7e  00000000  00000000  0015a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080086ac 	.word	0x080086ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080086ac 	.word	0x080086ac

08000200 <kalmanASS>:
	//s4 -> p
	//s5 -> k
	//s6 -> used for intermediate in math

	//CALLEE-SAVE CONVENTION
	vpush {s1-s6}
 8000200:	ed6d 0a06 	vpush	{s1-s6}

	vldr s1, [r0] //q
 8000204:	edd0 0a00 	vldr	s1, [r0]
	vldr s2, [r0, #4] //r
 8000208:	ed90 1a01 	vldr	s2, [r0, #4]
	vldr s3, [r0, #8] //x
 800020c:	edd0 1a02 	vldr	s3, [r0, #8]
	vldr s4, [r0, #12] //p
 8000210:	ed90 2a03 	vldr	s4, [r0, #12]
	vldr s5, [r0, #16] //k
 8000214:	edd0 2a04 	vldr	s5, [r0, #16]

	//p = p + q ---> s4 = s4 + s1
	vadd.f32 s4, s4, s1
 8000218:	ee32 2a20 	vadd.f32	s4, s4, s1

	//k = p/(p+r)
	vadd.f32 s6, s4, s2
 800021c:	ee32 3a01 	vadd.f32	s6, s4, s2
	vdiv.f32 s5, s4, s6
 8000220:	eec2 2a03 	vdiv.f32	s5, s4, s6
	vstr s5, [r0, #16] //Store new k
 8000224:	edc0 2a04 	vstr	s5, [r0, #16]

	//x = x + k(measure - x)
	vsub.f32 s6, s0, s3
 8000228:	ee30 3a61 	vsub.f32	s6, s0, s3
	vmul.f32 s6, s5, s6
 800022c:	ee22 3a83 	vmul.f32	s6, s5, s6
	vadd.f32 s3, s3, s6
 8000230:	ee71 1a83 	vadd.f32	s3, s3, s6
	vstr s3, [r0, #8] //Store new x
 8000234:	edc0 1a02 	vstr	s3, [r0, #8]

	//p = (1-k)p
	vmov s6, #1.0
 8000238:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	vsub.f32 s6, s6, s5
 800023c:	ee33 3a62 	vsub.f32	s6, s6, s5
	vmul.f32 s4, s6, s4
 8000240:	ee23 2a02 	vmul.f32	s4, s6, s4
	vstr s4, [r0, #12] //Store new p
 8000244:	ed80 2a03 	vstr	s4, [r0, #12]

	//Check if errors occurred
	vmrs r1, fpscr
 8000248:	eef1 1a10 	vmrs	r1, fpscr
	and r1, r1, 0x0000000F
 800024c:	f001 010f 	and.w	r1, r1, #15
	cmp r1, #0
 8000250:	2900      	cmp	r1, #0
	bgt error
 8000252:	dc04      	bgt.n	800025e <error>

	//CALLEE-SAVE CONVENTION
	vpop {s1-s6}
 8000254:	ecfd 0a06 	vpop	{s1-s6}
	mov r0, #0
 8000258:	f04f 0000 	mov.w	r0, #0
	bx lr
 800025c:	4770      	bx	lr

0800025e <error>:

error:
	//Return -1
	mov r0, #-1
 800025e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	vpop {s1-s6}
 8000262:	ecfd 0a06 	vpop	{s1-s6}
	bx lr
 8000266:	4770      	bx	lr

08000268 <strlen>:
 8000268:	4603      	mov	r3, r0
 800026a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026e:	2a00      	cmp	r2, #0
 8000270:	d1fb      	bne.n	800026a <strlen+0x2>
 8000272:	1a18      	subs	r0, r3, r0
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800045e:	f1a4 0401 	sub.w	r4, r4, #1
 8000462:	d1e9      	bne.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <Kalmanfilter>:





int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8000d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d2c:	b0bb      	sub	sp, #236	; 0xec
 8000d2e:	af02      	add	r7, sp, #8
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	603b      	str	r3, [r7, #0]
	 *
	 * The time values for each part are saved in time_spent1, time_spent2, time_spent3, and time_spent4
	 */

	//Saving initial kstate for reinitializing later
	float q = kstate->q;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float r = kstate->r;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float x = kstate->x;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float p = kstate->p;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float k = kstate->k;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	/*------------------------------------------------------------------------------------------
	 * Generating outputs with assembly + calculating with C------------------------------------
	 ------------------------------------------------------------------------------------------*/
	int result;
	ITM_Port32(31) = 1;
 8000d60:	4b93      	ldr	r3, [pc, #588]	; (8000fb0 <Kalmanfilter+0x288>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
	// Create the output array with the assembly function
	uint32_t start = HAL_GetTick(); //Measure time
 8000d66:	f000 ffad 	bl	8001cc4 <HAL_GetTick>
 8000d6a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	for(int position = 0; position < Length; position++){
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000d74:	e01a      	b.n	8000dac <Kalmanfilter+0x84>
		result = kalmanASS(kstate, InputArray[position]);
 8000d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eeb0 0a67 	vmov.f32	s0, s15
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fa39 	bl	8000200 <kalmanASS>
 8000d8e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        OutputArray[position] = kstate->x;
 8000d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6892      	ldr	r2, [r2, #8]
 8000da0:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8000da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000da6:	3301      	adds	r3, #1
 8000da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000dac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbdf      	blt.n	8000d76 <Kalmanfilter+0x4e>
    }
	ITM_Port32(31) = 2;
 8000db6:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <Kalmanfilter+0x288>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]

	//NaN detection - if there was a NaN in the output, result will be -1
	if (result == -1) {
 8000dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc4:	d102      	bne.n	8000dcc <Kalmanfilter+0xa4>
		return result;
 8000dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000dca:	e3ae      	b.n	800152a <Kalmanfilter+0x802>
	}

	 // Subtraction
	float differences1[Length];
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	466b      	mov	r3, sp
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	1e43      	subs	r3, r0, #1
 8000dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	f04f 0400 	mov.w	r4, #0
 8000de8:	0154      	lsls	r4, r2, #5
 8000dea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000dee:	014b      	lsls	r3, r1, #5
 8000df0:	4603      	mov	r3, r0
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	f04f 0400 	mov.w	r4, #0
 8000e00:	0154      	lsls	r4, r2, #5
 8000e02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e06:	014b      	lsls	r3, r1, #5
 8000e08:	4603      	mov	r3, r0
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	3307      	adds	r3, #7
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	ebad 0d03 	sub.w	sp, sp, r3
 8000e18:	ab02      	add	r3, sp, #8
 8000e1a:	3303      	adds	r3, #3
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	subtraction(differences1, InputArray, OutputArray, Length);
 8000e24:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	f000 fbf8 	bl	8001622 <subtraction>

	// Standard Deviation
	float stdDev1;
	stdDev1 = standardDeviation(differences1, Length);
 8000e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	ee07 2a90 	vmov	s15, r2
 8000e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e40:	eeb0 0a67 	vmov.f32	s0, s15
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fc1b 	bl	8001680 <standardDeviation>
 8000e4a:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc

	// Correlation
	float corr1[Length];
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	1e43      	subs	r3, r0, #1
 8000e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e56:	4603      	mov	r3, r0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	f04f 0400 	mov.w	r4, #0
 8000e66:	0154      	lsls	r4, r2, #5
 8000e68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e6c:	014b      	lsls	r3, r1, #5
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	f04f 0400 	mov.w	r4, #0
 8000e7e:	0154      	lsls	r4, r2, #5
 8000e80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e84:	014b      	lsls	r3, r1, #5
 8000e86:	4603      	mov	r3, r0
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	ebad 0d03 	sub.w	sp, sp, r3
 8000e96:	ab02      	add	r3, sp, #8
 8000e98:	3303      	adds	r3, #3
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	correlation(corr1, InputArray, OutputArray, Length);
 8000ea2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	f000 fc78 	bl	80017a0 <correlation>

	// Convolution
	float conv1[Length];
 8000eb0:	6838      	ldr	r0, [r7, #0]
 8000eb2:	1e43      	subs	r3, r0, #1
 8000eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	f04f 0400 	mov.w	r4, #0
 8000ec8:	0154      	lsls	r4, r2, #5
 8000eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ece:	014b      	lsls	r3, r1, #5
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	f04f 0400 	mov.w	r4, #0
 8000ee0:	0154      	lsls	r4, r2, #5
 8000ee2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ee6:	014b      	lsls	r3, r1, #5
 8000ee8:	4603      	mov	r3, r0
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	3303      	adds	r3, #3
 8000eee:	3307      	adds	r3, #7
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef8:	ab02      	add	r3, sp, #8
 8000efa:	3303      	adds	r3, #3
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	convolution(conv1, InputArray, OutputArray, Length);
 8000f04:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	68f9      	ldr	r1, [r7, #12]
 8000f0e:	f000 fc82 	bl	8001816 <convolution>

	uint32_t end = HAL_GetTick(); //Measure time
 8000f12:	f000 fed7 	bl	8001cc4 <HAL_GetTick>
 8000f16:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	long time_spent1 = (long)(end - start);
 8000f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	/*------------------------------------------------------------------------------------------
	 * Generating outputs with C + calculating with C-------------------------------------------
	 -------------------------------------------------------------------------------------------*/
	// Create the output array with the assembly function
	kstate->q = q;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000f2e:	601a      	str	r2, [r3, #0]
	kstate->r = r;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f36:	605a      	str	r2, [r3, #4]
	kstate->x = x;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000f3e:	609a      	str	r2, [r3, #8]
	kstate->p = p;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000f46:	60da      	str	r2, [r3, #12]
	kstate->k = k;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f4e:	611a      	str	r2, [r3, #16]
	start = HAL_GetTick(); //Measure time
 8000f50:	f000 feb8 	bl	8001cc4 <HAL_GetTick>
 8000f54:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	for(int position = 0; position < Length; position++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f5e:	e01a      	b.n	8000f96 <Kalmanfilter+0x26e>
		result = kalmanC(kstate, InputArray[position]);
 8000f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fade 	bl	8001534 <kalmanC>
 8000f78:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
		OutputArray[position] = kstate->x;
 8000f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6892      	ldr	r2, [r2, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8000f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f90:	3301      	adds	r3, #1
 8000f92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbdf      	blt.n	8000f60 <Kalmanfilter+0x238>
	}

	//NaN detection - if there was a NaN in the output, result will be -1
	if (result == -1) {
 8000fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa8:	d104      	bne.n	8000fb4 <Kalmanfilter+0x28c>
		return result;
 8000faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000fae:	e2bb      	b.n	8001528 <Kalmanfilter+0x800>
 8000fb0:	e000007c 	.word	0xe000007c
	}

	 // Subtraction
	float differences2[Length];
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	466b      	mov	r3, sp
 8000fb8:	461e      	mov	r6, r3
 8000fba:	1e43      	subs	r3, r0, #1
 8000fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	f04f 0400 	mov.w	r4, #0
 8000fd0:	0154      	lsls	r4, r2, #5
 8000fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fd6:	014b      	lsls	r3, r1, #5
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	f04f 0400 	mov.w	r4, #0
 8000fe8:	0154      	lsls	r4, r2, #5
 8000fea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fee:	014b      	lsls	r3, r1, #5
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	3307      	adds	r3, #7
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	ebad 0d03 	sub.w	sp, sp, r3
 8001000:	ab02      	add	r3, sp, #8
 8001002:	3303      	adds	r3, #3
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	subtraction(differences2, InputArray, OutputArray, Length);
 800100c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	f000 fb04 	bl	8001622 <subtraction>

	// Standard Deviation
	float stdDev2;
	stdDev2 = standardDeviation(differences2, Length);
 800101a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	ee07 2a90 	vmov	s15, r2
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fb27 	bl	8001680 <standardDeviation>
 8001032:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

	// Correlation
	float corr2[Length];
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	1e43      	subs	r3, r0, #1
 800103a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800103e:	4603      	mov	r3, r0
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	f04f 0400 	mov.w	r4, #0
 800104e:	0154      	lsls	r4, r2, #5
 8001050:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001054:	014b      	lsls	r3, r1, #5
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	f04f 0400 	mov.w	r4, #0
 8001066:	0154      	lsls	r4, r2, #5
 8001068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800106c:	014b      	lsls	r3, r1, #5
 800106e:	4603      	mov	r3, r0
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	3303      	adds	r3, #3
 8001074:	3307      	adds	r3, #7
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	ebad 0d03 	sub.w	sp, sp, r3
 800107e:	ab02      	add	r3, sp, #8
 8001080:	3303      	adds	r3, #3
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	67fb      	str	r3, [r7, #124]	; 0x7c
	correlation(corr2, InputArray, OutputArray, Length);
 8001088:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	f000 fb86 	bl	80017a0 <correlation>

	// Convolution
	float conv2[Length];
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	1e43      	subs	r3, r0, #1
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	f04f 0400 	mov.w	r4, #0
 80010aa:	0154      	lsls	r4, r2, #5
 80010ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010b0:	014b      	lsls	r3, r1, #5
 80010b2:	4603      	mov	r3, r0
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f04f 0400 	mov.w	r4, #0
 80010c2:	0154      	lsls	r4, r2, #5
 80010c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010c8:	014b      	lsls	r3, r1, #5
 80010ca:	4603      	mov	r3, r0
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	3303      	adds	r3, #3
 80010d0:	3307      	adds	r3, #7
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	ebad 0d03 	sub.w	sp, sp, r3
 80010da:	ab02      	add	r3, sp, #8
 80010dc:	3303      	adds	r3, #3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	677b      	str	r3, [r7, #116]	; 0x74
	convolution(conv2, InputArray, OutputArray, Length);
 80010e4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	f000 fb93 	bl	8001816 <convolution>

	end = HAL_GetTick(); //Measure time
 80010f0:	f000 fde8 	bl	8001cc4 <HAL_GetTick>
 80010f4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	double time_spent2 = (double)(end - start);
 80010f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80010fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa4e 	bl	80005a4 <__aeabi_ui2d>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68

	/*------------------------------------------------------------------------------------------
	 * Generating outputs with assembly + calculating with CMSIS-DSP----------------------------
	 ------------------------------------------------------------------------------------------*/
	// Create the output array with the assembly function
	kstate->q = q;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001116:	601a      	str	r2, [r3, #0]
	kstate->r = r;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800111e:	605a      	str	r2, [r3, #4]
	kstate->x = x;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001126:	609a      	str	r2, [r3, #8]
	kstate->p = p;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800112e:	60da      	str	r2, [r3, #12]
	kstate->k = k;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001136:	611a      	str	r2, [r3, #16]
	start = HAL_GetTick(); //Measure time
 8001138:	f000 fdc4 	bl	8001cc4 <HAL_GetTick>
 800113c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	for(int position = 0; position < Length; position++){
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001146:	e019      	b.n	800117c <Kalmanfilter+0x454>
		int result = kalmanASS(kstate, InputArray[position]);
 8001148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f850 	bl	8000200 <kalmanASS>
 8001160:	61b8      	str	r0, [r7, #24]
		OutputArray[position] = kstate->x;
 8001162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6892      	ldr	r2, [r2, #8]
 8001170:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8001172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800117c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbe0      	blt.n	8001148 <Kalmanfilter+0x420>
	}

	//NaN detection - if there was a NaN in the output, result will be -1
	if (result == -1) {
 8001186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800118a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800118e:	d102      	bne.n	8001196 <Kalmanfilter+0x46e>
		return result;
 8001190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001194:	e1c7      	b.n	8001526 <Kalmanfilter+0x7fe>
	}

	//Subtraction
	float differences3[Length];
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	466b      	mov	r3, sp
 800119a:	4698      	mov	r8, r3
 800119c:	1e43      	subs	r3, r0, #1
 800119e:	667b      	str	r3, [r7, #100]	; 0x64
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	f04f 0400 	mov.w	r4, #0
 80011b0:	0154      	lsls	r4, r2, #5
 80011b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011b6:	014b      	lsls	r3, r1, #5
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	0154      	lsls	r4, r2, #5
 80011ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ce:	014b      	lsls	r3, r1, #5
 80011d0:	4603      	mov	r3, r0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	3303      	adds	r3, #3
 80011d6:	3307      	adds	r3, #7
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	ebad 0d03 	sub.w	sp, sp, r3
 80011e0:	ab02      	add	r3, sp, #8
 80011e2:	3303      	adds	r3, #3
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	663b      	str	r3, [r7, #96]	; 0x60
	arm_sub_f32(InputArray, OutputArray, differences3, Length);
 80011ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f002 fb95 	bl	8003920 <arm_sub_f32>

	//Standard Deviation
	float stdDev3;
	arm_std_f32(differences3, Length, &stdDev3);
 80011f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	f107 0214 	add.w	r2, r7, #20
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fdb4 	bl	8002d6c <arm_std_f32>

	//Correlation
	float corr3[(2*Length - 1)];
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	1e58      	subs	r0, r3, #1
 800120a:	1e43      	subs	r3, r0, #1
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	f04f 0400 	mov.w	r4, #0
 800121e:	0154      	lsls	r4, r2, #5
 8001220:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001224:	014b      	lsls	r3, r1, #5
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f04f 0400 	mov.w	r4, #0
 8001236:	0154      	lsls	r4, r2, #5
 8001238:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800123c:	014b      	lsls	r3, r1, #5
 800123e:	4603      	mov	r3, r0
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3303      	adds	r3, #3
 8001244:	3307      	adds	r3, #7
 8001246:	08db      	lsrs	r3, r3, #3
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	ebad 0d03 	sub.w	sp, sp, r3
 800124e:	ab02      	add	r3, sp, #8
 8001250:	3303      	adds	r3, #3
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
	arm_correlate_f32(InputArray, Length, OutputArray, Length, &corr3);
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f001 fe0b 	bl	8002e80 <arm_correlate_f32>

	//Convolution
	float conv3[(2*Length - 1)];
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	1e43      	subs	r3, r0, #1
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	f04f 0400 	mov.w	r4, #0
 8001284:	0154      	lsls	r4, r2, #5
 8001286:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800128a:	014b      	lsls	r3, r1, #5
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f04f 0400 	mov.w	r4, #0
 800129c:	0154      	lsls	r4, r2, #5
 800129e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012a2:	014b      	lsls	r3, r1, #5
 80012a4:	4603      	mov	r3, r0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	3303      	adds	r3, #3
 80012aa:	3307      	adds	r3, #7
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	ebad 0d03 	sub.w	sp, sp, r3
 80012b4:	ab02      	add	r3, sp, #8
 80012b6:	3303      	adds	r3, #3
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	653b      	str	r3, [r7, #80]	; 0x50
	arm_conv_f32(InputArray, Length, OutputArray, Length, &conv3);
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f002 f88e 	bl	80033ec <arm_conv_f32>


	end = HAL_GetTick(); //Measure time
 80012d0:	f000 fcf8 	bl	8001cc4 <HAL_GetTick>
 80012d4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	double time_spent3 = (double)(end - start);
 80012d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f95e 	bl	80005a4 <__aeabi_ui2d>
 80012e8:	4603      	mov	r3, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	/*------------------------------------------------------------------------------------------
	 * Generating outputs with C + calculating with CMSIS-DSP----------------------------
	 ------------------------------------------------------------------------------------------*/
	// Create the output array with the assembly function
	kstate->q = q;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80012f6:	601a      	str	r2, [r3, #0]
	kstate->r = r;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012fe:	605a      	str	r2, [r3, #4]
	kstate->x = x;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001306:	609a      	str	r2, [r3, #8]
	kstate->p = p;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800130e:	60da      	str	r2, [r3, #12]
	kstate->k = k;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001316:	611a      	str	r2, [r3, #16]
	start = HAL_GetTick(); //Measure time
 8001318:	f000 fcd4 	bl	8001cc4 <HAL_GetTick>
 800131c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	for(int position = 0; position < Length; position++){
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001326:	e019      	b.n	800135c <Kalmanfilter+0x634>
		int result = kalmanC(kstate, InputArray[position]);
 8001328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8fa 	bl	8001534 <kalmanC>
 8001340:	61f8      	str	r0, [r7, #28]
		OutputArray[position] = kstate->x;
 8001342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6892      	ldr	r2, [r2, #8]
 8001350:	601a      	str	r2, [r3, #0]
	for(int position = 0; position < Length; position++){
 8001352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800135c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbe0      	blt.n	8001328 <Kalmanfilter+0x600>
	}

	//NaN detection - if there was a NaN in the output, result will be -1
	if (result == -1) {
 8001366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800136e:	d102      	bne.n	8001376 <Kalmanfilter+0x64e>
		return result;
 8001370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001374:	e0d6      	b.n	8001524 <Kalmanfilter+0x7fc>
	}

	//Subtraction
	float differences4[Length];
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	466b      	mov	r3, sp
 800137a:	4699      	mov	r9, r3
 800137c:	1e43      	subs	r3, r0, #1
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	f04f 0400 	mov.w	r4, #0
 8001390:	0154      	lsls	r4, r2, #5
 8001392:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001396:	014b      	lsls	r3, r1, #5
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	f04f 0400 	mov.w	r4, #0
 80013a8:	0154      	lsls	r4, r2, #5
 80013aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ae:	014b      	lsls	r3, r1, #5
 80013b0:	4603      	mov	r3, r0
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	3303      	adds	r3, #3
 80013b6:	3307      	adds	r3, #7
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	ebad 0d03 	sub.w	sp, sp, r3
 80013c0:	ab02      	add	r3, sp, #8
 80013c2:	3303      	adds	r3, #3
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	643b      	str	r3, [r7, #64]	; 0x40
	arm_sub_f32(InputArray, OutputArray, differences4, Length);
 80013ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f002 faa5 	bl	8003920 <arm_sub_f32>

	//Standard Deviation
	float stdDev4[Length];
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	1e43      	subs	r3, r0, #1
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	f04f 0400 	mov.w	r4, #0
 80013ec:	0154      	lsls	r4, r2, #5
 80013ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013f2:	014b      	lsls	r3, r1, #5
 80013f4:	4603      	mov	r3, r0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	f04f 0400 	mov.w	r4, #0
 8001404:	0154      	lsls	r4, r2, #5
 8001406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800140a:	014b      	lsls	r3, r1, #5
 800140c:	4603      	mov	r3, r0
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	3303      	adds	r3, #3
 8001412:	3307      	adds	r3, #7
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	ebad 0d03 	sub.w	sp, sp, r3
 800141c:	ab02      	add	r3, sp, #8
 800141e:	3303      	adds	r3, #3
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
	arm_std_f32(differences4, Length, &stdDev4);
 8001426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fc9d 	bl	8002d6c <arm_std_f32>

	//Correlation
	float corr4[(2*Length - 1)];
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	1e43      	subs	r3, r0, #1
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
 800143c:	4603      	mov	r3, r0
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f04f 0400 	mov.w	r4, #0
 800144c:	0154      	lsls	r4, r2, #5
 800144e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001452:	014b      	lsls	r3, r1, #5
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f04f 0400 	mov.w	r4, #0
 8001464:	0154      	lsls	r4, r2, #5
 8001466:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800146a:	014b      	lsls	r3, r1, #5
 800146c:	4603      	mov	r3, r0
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	3303      	adds	r3, #3
 8001472:	3307      	adds	r3, #7
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	ebad 0d03 	sub.w	sp, sp, r3
 800147c:	ab02      	add	r3, sp, #8
 800147e:	3303      	adds	r3, #3
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
	arm_correlate_f32(InputArray, Length, OutputArray, Length, &corr4);
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f001 fcf4 	bl	8002e80 <arm_correlate_f32>

	//Convolution
	float conv4[(2*Length - 1)];
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	1e58      	subs	r0, r3, #1
 800149e:	1e43      	subs	r3, r0, #1
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a2:	4603      	mov	r3, r0
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	f04f 0400 	mov.w	r4, #0
 80014b2:	0154      	lsls	r4, r2, #5
 80014b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014b8:	014b      	lsls	r3, r1, #5
 80014ba:	4603      	mov	r3, r0
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f04f 0400 	mov.w	r4, #0
 80014ca:	0154      	lsls	r4, r2, #5
 80014cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014d0:	014b      	lsls	r3, r1, #5
 80014d2:	4603      	mov	r3, r0
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	3303      	adds	r3, #3
 80014d8:	3307      	adds	r3, #7
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	ebad 0d03 	sub.w	sp, sp, r3
 80014e2:	ab02      	add	r3, sp, #8
 80014e4:	3303      	adds	r3, #3
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_conv_f32(InputArray, Length, OutputArray, Length, &conv4);
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4613      	mov	r3, r2
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f001 ff77 	bl	80033ec <arm_conv_f32>


	end = HAL_GetTick(); //Measure time
 80014fe:	f000 fbe1 	bl	8001cc4 <HAL_GetTick>
 8001502:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	double time_spent4 = (double)(end - start);
 8001506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800150a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f847 	bl	80005a4 <__aeabi_ui2d>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	//------------------------------------------------------------------------------------------



    return result;
 800151e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001522:	46cd      	mov	sp, r9
 8001524:	46c5      	mov	sp, r8
 8001526:	46b5      	mov	sp, r6
 8001528:	46ad      	mov	sp, r5
}
 800152a:	4618      	mov	r0, r3
 800152c:	37e4      	adds	r7, #228	; 0xe4
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001534 <kalmanC>:





int kalmanC(kalman_state* kstate, float measurement){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	ed87 0a00 	vstr	s0, [r7]
	//Typical Kalman Filter update
	kstate->p = kstate->p + kstate->q;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a03 	vldr	s14, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a03 	vstr	s15, [r3, #12]
	kstate->k = kstate->p/(kstate->p + kstate->r);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	edd3 6a03 	vldr	s13, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edd3 7a01 	vldr	s15, [r3, #4]
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edc3 7a04 	vstr	s15, [r3, #16]
	kstate->x = kstate->x + kstate->k * (measurement - kstate->x);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	ed93 7a02 	vldr	s14, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	edd3 7a02 	vldr	s15, [r3, #8]
 8001588:	ed97 6a00 	vldr	s12, [r7]
 800158c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edc3 7a02 	vstr	s15, [r3, #8]
	kstate->p = (1 - kstate->k) * kstate->p;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a03 	vstr	s15, [r3, #12]

	//Checking for NaN's
	if isnan(kstate->p) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	edd3 7a03 	vldr	s15, [r3, #12]
 80015c2:	eef4 7a67 	vcmp.f32	s15, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d702      	bvc.n	80015d2 <kalmanC+0x9e>
		return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d0:	e021      	b.n	8001616 <kalmanC+0xe2>
	}
	else if isnan(kstate->k) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d8:	eef4 7a67 	vcmp.f32	s15, s15
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d702      	bvc.n	80015e8 <kalmanC+0xb4>
		return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e6:	e016      	b.n	8001616 <kalmanC+0xe2>
	}
	else if isnan(kstate->x) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eef4 7a67 	vcmp.f32	s15, s15
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d702      	bvc.n	80015fe <kalmanC+0xca>
		return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fc:	e00b      	b.n	8001616 <kalmanC+0xe2>
	}
	else if isnan(kstate->r) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edd3 7a01 	vldr	s15, [r3, #4]
 8001604:	eef4 7a67 	vcmp.f32	s15, s15
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d702      	bvc.n	8001614 <kalmanC+0xe0>
		return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001612:	e000      	b.n	8001616 <kalmanC+0xe2>
	}
	else {
		return 0;
 8001614:	2300      	movs	r3, #0
	}
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <subtraction>:





float* subtraction(float* differences, float* InputArray, float* OutputArray ,int Length){
 8001622:	b480      	push	{r7}
 8001624:	b087      	sub	sp, #28
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
    for(int position = 0; position < Length; position++){
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e018      	b.n	8001668 <subtraction+0x46>
        float difference = InputArray[position] - OutputArray[position];
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001652:	edc7 7a04 	vstr	s15, [r7, #16]
        differences[position] = difference;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]
    for(int position = 0; position < Length; position++){
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbe2      	blt.n	8001636 <subtraction+0x14>
    }
    return differences;
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <standardDeviation>:

float standardDeviation(float* differences, float Length){
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	ed87 0a00 	vstr	s0, [r7]
    float mean = 0;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    for(int position = 0; position < Length; position++){
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	e012      	b.n	80016be <standardDeviation+0x3e>
        mean += differences[position]/Length;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	edd3 6a00 	vldr	s13, [r3]
 80016a4:	ed97 7a00 	vldr	s14, [r7]
 80016a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int position = 0; position < Length; position++){
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	3301      	adds	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c8:	ed97 7a00 	vldr	s14, [r7]
 80016cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dce0      	bgt.n	8001698 <standardDeviation+0x18>
    }
    float sum = 0;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e02d      	b.n	800173e <standardDeviation+0xbe>
        sum += pow((differences[position] - mean), 2);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	ee17 0a90 	vmov	r0, s15
 80016fa:	f7fe ff75 	bl	80005e8 <__aeabi_f2d>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001798 <standardDeviation+0x118>
 8001706:	ec44 3b10 	vmov	d0, r3, r4
 800170a:	f005 fecd 	bl	80074a8 <pow>
 800170e:	ec56 5b10 	vmov	r5, r6, d0
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7fe ff68 	bl	80005e8 <__aeabi_f2d>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	461a      	mov	r2, r3
 800171e:	4623      	mov	r3, r4
 8001720:	4628      	mov	r0, r5
 8001722:	4631      	mov	r1, r6
 8001724:	f7fe fe02 	bl	800032c <__adddf3>
 8001728:	4603      	mov	r3, r0
 800172a:	460c      	mov	r4, r1
 800172c:	4618      	mov	r0, r3
 800172e:	4621      	mov	r1, r4
 8001730:	f7ff faaa 	bl	8000c88 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3301      	adds	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	ed97 7a00 	vldr	s14, [r7]
 800174c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	dcc5      	bgt.n	80016e2 <standardDeviation+0x62>
    }
    float standardDeviation = sqrt(sum/Length);
 8001756:	ed97 7a05 	vldr	s14, [r7, #20]
 800175a:	edd7 7a00 	vldr	s15, [r7]
 800175e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001762:	ee16 0a90 	vmov	r0, s13
 8001766:	f7fe ff3f 	bl	80005e8 <__aeabi_f2d>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	ec44 3b10 	vmov	d0, r3, r4
 8001772:	f006 f809 	bl	8007788 <sqrt>
 8001776:	ec54 3b10 	vmov	r3, r4, d0
 800177a:	4618      	mov	r0, r3
 800177c:	4621      	mov	r1, r4
 800177e:	f7ff fa83 	bl	8000c88 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	60fb      	str	r3, [r7, #12]
    return standardDeviation;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	ee07 3a90 	vmov	s15, r3
}
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	bf00      	nop
 8001798:	00000000 	.word	0x00000000
 800179c:	40000000 	.word	0x40000000

080017a0 <correlation>:

float correlation(float* correlationArray, float* InputArray, float* OutputArray, int Length){
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
    float correlation = 0;
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e01f      	b.n	80017fa <correlation+0x5a>
    	correlation += InputArray[position]*OutputArray[(Length-1) - position];
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	edc7 7a05 	vstr	s15, [r7, #20]
        correlationArray[position] = correlation;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
    for(int position = 0; position < Length; position++){
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbdb      	blt.n	80017ba <correlation+0x1a>
    }
    return correlation;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	ee07 3a90 	vmov	s15, r3
}
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <convolution>:

float convolution(float* convolutionArray, float* InputArray, float* OutputArray, int Length){
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
    float convolution = 0;
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    for(int position = 0; position < Length; position++){
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e01c      	b.n	800186a <convolution+0x54>
        convolution += InputArray[position]*OutputArray[position];
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a05 	vstr	s15, [r7, #20]
        convolutionArray[position] = convolution;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]
    for(int position = 0; position < Length; position++){
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	3301      	adds	r3, #1
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbde      	blt.n	8001830 <convolution+0x1a>
    }
    return convolution;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	ee07 3a90 	vmov	s15, r3
}
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b0ee      	sub	sp, #440	; 0x1b8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188e:	f000 f9b0 	bl	8001bf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001892:	f000 f851 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001896:	f000 f8a1 	bl	80019dc <MX_GPIO_Init>





  kalman_state  kstate = { 0.1, 0.1, 5, 0.1, 0.0 };
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <main+0xa8>)
 800189c:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 80018a0:	461d      	mov	r5, r3
 80018a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a6:	682b      	ldr	r3, [r5, #0]
 80018a8:	6023      	str	r3, [r4, #0]
  float InputArray[] = TEST_ARRAY;
 80018aa:	463b      	mov	r3, r7
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <main+0xac>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	4611      	mov	r1, r2
 80018b2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80018b6:	461a      	mov	r2, r3
 80018b8:	f002 f8b6 	bl	8003a28 <memcpy>
  int Length = (int)sizeof(InputArray)/sizeof(float);
 80018bc:	2365      	movs	r3, #101	; 0x65
 80018be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  float OutputArray[Length];
 80018c2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80018c6:	1e43      	subs	r3, r0, #1
 80018c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	0154      	lsls	r4, r2, #5
 80018de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e2:	014b      	lsls	r3, r1, #5
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f04f 0400 	mov.w	r4, #0
 80018f4:	0154      	lsls	r4, r2, #5
 80018f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fa:	014b      	lsls	r3, r1, #5
 80018fc:	4603      	mov	r3, r0
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	3303      	adds	r3, #3
 8001902:	3307      	adds	r3, #7
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	ebad 0d03 	sub.w	sp, sp, r3
 800190c:	466b      	mov	r3, sp
 800190e:	3303      	adds	r3, #3
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac


  int result = Kalmanfilter(InputArray, OutputArray, &kstate, Length);
 8001918:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800191c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001920:	4638      	mov	r0, r7
 8001922:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001926:	f7ff f9ff 	bl	8000d28 <Kalmanfilter>
 800192a:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800192e:	e7fe      	b.n	800192e <main+0xa6>
 8001930:	080086c8 	.word	0x080086c8
 8001934:	080086dc 	.word	0x080086dc

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2244      	movs	r2, #68	; 0x44
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f879 	bl	8003a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800195a:	2000      	movs	r0, #0
 800195c:	f000 fac4 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001966:	f000 f85d 	bl	8001a24 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800196a:	2310      	movs	r3, #16
 800196c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001976:	2360      	movs	r3, #96	; 0x60
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800197e:	2301      	movs	r3, #1
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001986:	233c      	movs	r3, #60	; 0x3c
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800198e:	2302      	movs	r3, #2
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001992:	2302      	movs	r3, #2
 8001994:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fb48 	bl	8002030 <HAL_RCC_OscConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019a6:	f000 f83d 	bl	8001a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019aa:	230f      	movs	r3, #15
 80019ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ae:	2303      	movs	r3, #3
 80019b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	2105      	movs	r1, #5
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 ff5a 	bl	800287c <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ce:	f000 f829 	bl	8001a24 <Error_Handler>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3758      	adds	r7, #88	; 0x58
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_GPIO_Init+0x44>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <MX_GPIO_Init+0x44>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_GPIO_Init+0x44>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_GPIO_Init+0x44>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <MX_GPIO_Init+0x44>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_GPIO_Init+0x44>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <Error_Handler+0x6>

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_MspInit+0x44>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_MspInit+0x44>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_MspInit+0x44>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_MspInit+0x44>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x44>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x44>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 f8ec 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f001 ff6c 	bl	80039d4 <__errno>
 8001afc:	4602      	mov	r2, r0
 8001afe:	230c      	movs	r3, #12
 8001b00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200a0000 	.word	0x200a0000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	200001fc 	.word	0x200001fc
 8001b30:	20000210 	.word	0x20000210

08001b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <SystemInit+0x64>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <SystemInit+0x64>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <SystemInit+0x68>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <SystemInit+0x68>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <SystemInit+0x68>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <SystemInit+0x68>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <SystemInit+0x68>)
 8001b60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <SystemInit+0x68>)
 8001b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <SystemInit+0x68>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <SystemInit+0x68>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <SystemInit+0x68>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SystemInit+0x64>)
 8001b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba4:	f7ff ffc6 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ba8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
	ldr	r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <LoopForever+0x16>)
	cmp	r2, r3
 8001bca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f001 ff07 	bl	80039e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd2:	f7ff fe59 	bl	8001888 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001bdc:	08008bc0 	.word	0x08008bc0
	ldr	r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001be4:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001be8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001bec:	20000210 	.word	0x20000210

08001bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_IRQHandler>

08001bf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f91f 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f80e 	bl	8001c24 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	e001      	b.n	8001c18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c14:	f7ff ff0a 	bl	8001a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_InitTick+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d023      	beq.n	8001c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_InitTick+0x70>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_InitTick+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f91d 	bl	8001e8e <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d809      	bhi.n	8001c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c68:	f000 f8f5 	bl	8001e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_InitTick+0x74>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e004      	b.n	8001c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e001      	b.n	8001c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000208 	.word	0x20000208

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000208 	.word	0x20000208

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff47 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff5c 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffb0 	bl	8001dfc <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	e00b      	b.n	8001ed8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ece:	d102      	bne.n	8001ed6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed4:	e000      	b.n	8001ed8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ed6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d141      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	d131      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f0a:	4a46      	ldr	r2, [pc, #280]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f1c:	4a41      	ldr	r2, [pc, #260]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2232      	movs	r2, #50	; 0x32
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3a:	e002      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d102      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f2      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d158      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e057      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f78:	e04d      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d141      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d131      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2232      	movs	r2, #50	; 0x32
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9b      	lsrs	r3, r3, #18
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc6:	e002      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d102      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d112      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e011      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002004:	e007      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002014:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40007000 	.word	0x40007000
 8002028:	20000000 	.word	0x20000000
 800202c:	431bde83 	.word	0x431bde83

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	f000 bc16 	b.w	8002870 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002044:	4ba0      	ldr	r3, [pc, #640]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204e:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80e4 	beq.w	800222e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_RCC_OscConfig+0x4c>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	f040 808b 	bne.w	800218a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b01      	cmp	r3, #1
 8002078:	f040 8087 	bne.w	800218a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_OscConfig+0x64>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e3ed      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_RCC_OscConfig+0x7e>
 80020a4:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ac:	e005      	b.n	80020ba <HAL_RCC_OscConfig+0x8a>
 80020ae:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d223      	bcs.n	8002106 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd90 	bl	8002be8 <RCC_SetFlashLatencyFromMSIRange>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e3ce      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7c      	ldr	r2, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4977      	ldr	r1, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f0:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	4972      	ldr	r1, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	e025      	b.n	8002152 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	496a      	ldr	r1, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fd50 	bl	8002be8 <RCC_SetFlashLatencyFromMSIRange>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e38e      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002152:	f000 fcbf 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x29c>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	fa21 f303 	lsr.w	r3, r1, r3
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x2a0>)
 8002170:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002172:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_RCC_OscConfig+0x2a4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fd54 	bl	8001c24 <HAL_InitTick>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d052      	beq.n	800222c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	e372      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d032      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219e:	f7ff fd91 	bl	8001cc4 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a6:	f7ff fd8d 	bl	8001cc4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e35b      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c4:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3f      	ldr	r2, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	493a      	ldr	r1, [pc, #232]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	e01a      	b.n	800222e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002204:	f7ff fd5e 	bl	8001cc4 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220c:	f7ff fd5a 	bl	8001cc4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e328      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1dc>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d073      	beq.n	8002322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x21c>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d10e      	bne.n	8002264 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d063      	beq.n	8002320 <HAL_RCC_OscConfig+0x2f0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d15f      	bne.n	8002320 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e305      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x24c>
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0x288>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x270>
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0x288>
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff fd00 	bl	8001cc4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c6:	e010      	b.n	80022ea <HAL_RCC_OscConfig+0x2ba>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08008870 	.word	0x08008870
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fcf4 	bl	8001cc4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e2c2      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ea:	4baf      	ldr	r3, [pc, #700]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2a8>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff fce4 	bl	8001cc4 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fce0 	bl	8001cc4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e2ae      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002312:	4ba5      	ldr	r3, [pc, #660]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x2d0>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d060      	beq.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d005      	beq.n	8002340 <HAL_RCC_OscConfig+0x310>
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d119      	bne.n	800236e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d116      	bne.n	800236e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	4b99      	ldr	r3, [pc, #612]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x328>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e28b      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b93      	ldr	r3, [pc, #588]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	4990      	ldr	r1, [pc, #576]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236c:	e040      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d023      	beq.n	80023be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002376:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8b      	ldr	r2, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff fc9f 	bl	8001cc4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238a:	f7ff fc9b 	bl	8001cc4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e269      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	497c      	ldr	r1, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e018      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a79      	ldr	r2, [pc, #484]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff fc7b 	bl	8001cc4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff fc77 	bl	8001cc4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e245      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01c      	beq.n	800243e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff fc56 	bl	8001cc4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fc52 	bl	8001cc4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e220      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242e:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCC_OscConfig+0x3ec>
 800243c:	e01b      	b.n	8002476 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243e:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff fc39 	bl	8001cc4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff fc35 	bl	8001cc4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e203      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80a6 	beq.w	80025d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002488:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCC_OscConfig+0x57c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d118      	bne.n	80024ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x57c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <HAL_RCC_OscConfig+0x57c>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c8:	f7ff fbfc 	bl	8001cc4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7ff fbf8 	bl	8001cc4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1c6      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_RCC_OscConfig+0x57c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_OscConfig+0x4d8>
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	4a2a      	ldr	r2, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002506:	e024      	b.n	8002552 <HAL_RCC_OscConfig+0x522>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d110      	bne.n	8002532 <HAL_RCC_OscConfig+0x502>
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	e00f      	b.n	8002552 <HAL_RCC_OscConfig+0x522>
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7ff fbb3 	bl	8001cc4 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7ff fbaf 	bl	8001cc4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e17b      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x578>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ed      	beq.n	8002562 <HAL_RCC_OscConfig+0x532>
 8002586:	e01a      	b.n	80025be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff fb9c 	bl	8001cc4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258e:	e00f      	b.n	80025b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7ff fb98 	bl	8001cc4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d906      	bls.n	80025b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e164      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b0:	4ba8      	ldr	r3, [pc, #672]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e8      	bne.n	8002590 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025be:	7ffb      	ldrb	r3, [r7, #31]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4ba3      	ldr	r3, [pc, #652]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	4aa2      	ldr	r2, [pc, #648]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03c      	beq.n	8002656 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01c      	beq.n	800261e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e4:	4b9b      	ldr	r3, [pc, #620]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80025e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ea:	4a9a      	ldr	r2, [pc, #616]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff fb66 	bl	8001cc4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fc:	f7ff fb62 	bl	8001cc4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e130      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260e:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCC_OscConfig+0x5cc>
 800261c:	e01b      	b.n	8002656 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261e:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002624:	4a8b      	ldr	r2, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff fb49 	bl	8001cc4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002636:	f7ff fb45 	bl	8001cc4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e113      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002648:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800264a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ef      	bne.n	8002636 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8107 	beq.w	800286e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	2b02      	cmp	r3, #2
 8002666:	f040 80cb 	bne.w	8002800 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800266a:	4b7a      	ldr	r3, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0203 	and.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	429a      	cmp	r2, r3
 800267c:	d12c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	3b01      	subs	r3, #1
 800268a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d123      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d11b      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d113      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	3b01      	subs	r3, #1
 80026be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d109      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	3b01      	subs	r3, #1
 80026d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d06d      	beq.n	80027b4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d068      	beq.n	80027b0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0ba      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002704:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002706:	f7ff fadd 	bl	8001cc4 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fad9 	bl	8001cc4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0a7      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b49      	ldr	r3, [pc, #292]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x828>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800273c:	3a01      	subs	r2, #1
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002746:	0212      	lsls	r2, r2, #8
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0552      	lsls	r2, r2, #21
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0652      	lsls	r2, r2, #25
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002766:	06d2      	lsls	r2, r2, #27
 8002768:	430a      	orrs	r2, r1
 800276a:	493a      	ldr	r1, [pc, #232]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800276c:	4313      	orrs	r3, r2
 800276e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a37      	ldr	r2, [pc, #220]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002786:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002788:	f7ff fa9c 	bl	8001cc4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff fa98 	bl	8001cc4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e066      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ae:	e05e      	b.n	800286e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e05d      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d156      	bne.n	800286e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d8:	f7ff fa74 	bl	8001cc4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff fa70 	bl	8001cc4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e03e      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x7b0>
 80027fe:	e036      	b.n	800286e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d031      	beq.n	800286a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800280c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002810:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002824:	f023 0303 	bic.w	r3, r3, #3
 8002828:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x824>)
 8002830:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7ff fa43 	bl	8001cc4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e00c      	b.n	800285c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7ff fa3f 	bl	8001cc4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d905      	bls.n	800285c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00d      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
 8002854:	40021000 	.word	0x40021000
 8002858:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x848>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ec      	bne.n	8002842 <HAL_RCC_OscConfig+0x812>
 8002868:	e001      	b.n	800286e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e10f      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b86      	ldr	r3, [pc, #536]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 020f 	bic.w	r2, r3, #15
 80028aa:	4984      	ldr	r1, [pc, #528]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0f7      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8089 	beq.w	80029e4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d133      	bne.n	8002942 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b79      	ldr	r3, [pc, #484]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e4      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028ea:	f000 f9d7 	bl	8002c9c <RCC_GetSysClockFreqFromPLLSource>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b74      	ldr	r3, [pc, #464]	; (8002ac4 <HAL_RCC_ClockConfig+0x248>)
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d955      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002902:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290a:	4a6d      	ldr	r2, [pc, #436]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e044      	b.n	80029a2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03e      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x126>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d13a      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800292c:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002934:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e02f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d115      	bne.n	8002982 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0ac      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0a0      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e098      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002982:	f000 f8a7 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_RCC_ClockConfig+0x248>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d909      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002996:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4944      	ldr	r1, [pc, #272]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7ff f986 	bl	8001cc4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7ff f982 	bl	8001cc4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e070      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4930      	ldr	r1, [pc, #192]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b80      	cmp	r3, #128	; 0x80
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a14:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d210      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 020f 	bic.w	r2, r3, #15
 8002a2c:	4923      	ldr	r1, [pc, #140]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_ClockConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e036      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4910      	ldr	r1, [pc, #64]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a84:	f000 f826 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a88:	4601      	mov	r1, r0
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_RCC_ClockConfig+0x24c>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x250>)
 8002aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x254>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f8bb 	bl	8001c24 <HAL_InitTick>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	04c4b400 	.word	0x04c4b400
 8002ac8:	08008870 	.word	0x08008870
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d11e      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e004      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d133      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0xaa>
 8002b76:	e005      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b7a:	617b      	str	r3, [r7, #20]
      break;
 8002b7c:	e005      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b80:	617b      	str	r3, [r7, #20]
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	617b      	str	r3, [r7, #20]
      break;
 8002b88:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	3301      	adds	r3, #1
 8002b96:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	fb02 f203 	mul.w	r2, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0e5b      	lsrs	r3, r3, #25
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bca:	69bb      	ldr	r3, [r7, #24]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3724      	adds	r7, #36	; 0x24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08008880 	.word	0x08008880
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c00:	f7ff f952 	bl	8001ea8 <HAL_PWREx_GetVoltageRange>
 8002c04:	6178      	str	r0, [r7, #20]
 8002c06:	e014      	b.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	; 0x58
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c20:	f7ff f942 	bl	8001ea8 <HAL_PWREx_GetVoltageRange>
 8002c24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d10b      	bne.n	8002c52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d913      	bls.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2ba0      	cmp	r3, #160	; 0xa0
 8002c44:	d902      	bls.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c46:	2302      	movs	r3, #2
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e00d      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	e00a      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d902      	bls.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e004      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d101      	bne.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 020f 	bic.w	r2, r3, #15
 8002c70:	4909      	ldr	r1, [pc, #36]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40022000 	.word	0x40022000

08002c9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d118      	bne.n	8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cbe:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e005      	b.n	8002cda <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d002      	beq.n	8002cfa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002cf8:	e005      	b.n	8002d06 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cfc:	613b      	str	r3, [r7, #16]
    break;
 8002cfe:	e005      	b.n	8002d0c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d02:	613b      	str	r3, [r7, #16]
    break;
 8002d04:	e002      	b.n	8002d0c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	613b      	str	r3, [r7, #16]
    break;
 8002d0a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3301      	adds	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	fb02 f203 	mul.w	r2, r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	0e5b      	lsrs	r3, r3, #25
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d4c:	683b      	ldr	r3, [r7, #0]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08008880 	.word	0x08008880
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <arm_std_f32>:
 8002d6c:	2901      	cmp	r1, #1
 8002d6e:	d97d      	bls.n	8002e6c <arm_std_f32+0x100>
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	ed2d 8b02 	vpush	{d8}
 8002d76:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002e7c <arm_std_f32+0x110>
 8002d7a:	088d      	lsrs	r5, r1, #2
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	eef0 4a47 	vmov.f32	s9, s14
 8002d82:	d028      	beq.n	8002dd6 <arm_std_f32+0x6a>
 8002d84:	f100 0310 	add.w	r3, r0, #16
 8002d88:	462c      	mov	r4, r5
 8002d8a:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002d8e:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002d92:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002d96:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002d9a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002d9e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8002da2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002da6:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002daa:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002dae:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002db2:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8002db6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002dba:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002dbe:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002dc2:	3c01      	subs	r4, #1
 8002dc4:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002dc8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002dcc:	f103 0310 	add.w	r3, r3, #16
 8002dd0:	d1db      	bne.n	8002d8a <arm_std_f32+0x1e>
 8002dd2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002dd6:	f011 0303 	ands.w	r3, r1, #3
 8002dda:	d01b      	beq.n	8002e14 <arm_std_f32+0xa8>
 8002ddc:	edd0 7a00 	vldr	s15, [r0]
 8002de0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002de4:	3b01      	subs	r3, #1
 8002de6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002dea:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002dee:	d011      	beq.n	8002e14 <arm_std_f32+0xa8>
 8002df0:	edd0 7a01 	vldr	s15, [r0, #4]
 8002df4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002dfe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e02:	d007      	beq.n	8002e14 <arm_std_f32+0xa8>
 8002e04:	edd0 7a02 	vldr	s15, [r0, #8]
 8002e08:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002e0c:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002e10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e14:	ee07 1a90 	vmov	s15, r1
 8002e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e20:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e24:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002e28:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002e2c:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002e30:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002e34:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002e38:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002e3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	db0c      	blt.n	8002e60 <arm_std_f32+0xf4>
 8002e46:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002e52:	d40e      	bmi.n	8002e72 <arm_std_f32+0x106>
 8002e54:	ed82 8a00 	vstr	s16, [r2]
 8002e58:	b003      	add	sp, #12
 8002e5a:	ecbd 8b02 	vpop	{d8}
 8002e5e:	bd30      	pop	{r4, r5, pc}
 8002e60:	2300      	movs	r3, #0
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	b003      	add	sp, #12
 8002e66:	ecbd 8b02 	vpop	{d8}
 8002e6a:	bd30      	pop	{r4, r5, pc}
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4770      	bx	lr
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	f004 fce2 	bl	800783c <sqrtf>
 8002e78:	9a01      	ldr	r2, [sp, #4]
 8002e7a:	e7eb      	b.n	8002e54 <arm_std_f32+0xe8>
 8002e7c:	00000000 	.word	0x00000000

08002e80 <arm_correlate_f32>:
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	4299      	cmp	r1, r3
 8002e86:	b08d      	sub	sp, #52	; 0x34
 8002e88:	f0c0 824c 	bcc.w	8003324 <arm_correlate_f32+0x4a4>
 8002e8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002e8e:	eba1 0c03 	sub.w	ip, r1, r3
 8002e92:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8002e96:	f04f 0e04 	mov.w	lr, #4
 8002e9a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002e9e:	3101      	adds	r1, #1
 8002ea0:	1ac9      	subs	r1, r1, r3
 8002ea2:	3c01      	subs	r4, #1
 8002ea4:	1e5e      	subs	r6, r3, #1
 8002ea6:	9102      	str	r1, [sp, #8]
 8002ea8:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8002eac:	f000 8294 	beq.w	80033d8 <arm_correlate_f32+0x558>
 8002eb0:	eddf 7a53 	vldr	s15, [pc, #332]	; 8003000 <arm_correlate_f32+0x180>
 8002eb4:	f1a1 0804 	sub.w	r8, r1, #4
 8002eb8:	46e1      	mov	r9, ip
 8002eba:	4605      	mov	r5, r0
 8002ebc:	2401      	movs	r4, #1
 8002ebe:	f014 0703 	ands.w	r7, r4, #3
 8002ec2:	d01b      	beq.n	8002efc <arm_correlate_f32+0x7c>
 8002ec4:	ed91 7a00 	vldr	s14, [r1]
 8002ec8:	edd5 6a00 	vldr	s13, [r5]
 8002ecc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ed0:	3f01      	subs	r7, #1
 8002ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ed6:	d011      	beq.n	8002efc <arm_correlate_f32+0x7c>
 8002ed8:	ed91 7a01 	vldr	s14, [r1, #4]
 8002edc:	edd5 6a01 	vldr	s13, [r5, #4]
 8002ee0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ee4:	2f01      	cmp	r7, #1
 8002ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eea:	d007      	beq.n	8002efc <arm_correlate_f32+0x7c>
 8002eec:	ed95 7a02 	vldr	s14, [r5, #8]
 8002ef0:	edd1 6a02 	vldr	s13, [r1, #8]
 8002ef4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002efc:	1c67      	adds	r7, r4, #1
 8002efe:	42bb      	cmp	r3, r7
 8002f00:	edc9 7a00 	vstr	s15, [r9]
 8002f04:	4641      	mov	r1, r8
 8002f06:	44f1      	add	r9, lr
 8002f08:	d03a      	beq.n	8002f80 <arm_correlate_f32+0x100>
 8002f0a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8002f0e:	f000 8267 	beq.w	80033e0 <arm_correlate_f32+0x560>
 8002f12:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8002f16:	f100 0110 	add.w	r1, r0, #16
 8002f1a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003000 <arm_correlate_f32+0x180>
 8002f1e:	eb01 050a 	add.w	r5, r1, sl
 8002f22:	f108 0410 	add.w	r4, r8, #16
 8002f26:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002f2a:	ed54 3a04 	vldr	s7, [r4, #-16]
 8002f2e:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002f32:	ed14 4a03 	vldr	s8, [r4, #-12]
 8002f36:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002f3a:	ed54 4a02 	vldr	s9, [r4, #-8]
 8002f3e:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002f42:	ed14 5a01 	vldr	s10, [r4, #-4]
 8002f46:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002f4a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002f56:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f5a:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f62:	3110      	adds	r1, #16
 8002f64:	428d      	cmp	r5, r1
 8002f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6a:	f104 0410 	add.w	r4, r4, #16
 8002f6e:	d1da      	bne.n	8002f26 <arm_correlate_f32+0xa6>
 8002f70:	eb00 050a 	add.w	r5, r0, sl
 8002f74:	eb08 010a 	add.w	r1, r8, sl
 8002f78:	f1a8 0804 	sub.w	r8, r8, #4
 8002f7c:	463c      	mov	r4, r7
 8002f7e:	e79e      	b.n	8002ebe <arm_correlate_f32+0x3e>
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	fb0e cc04 	mla	ip, lr, r4, ip
 8002f86:	f240 81dd 	bls.w	8003344 <arm_correlate_f32+0x4c4>
 8002f8a:	9b02      	ldr	r3, [sp, #8]
 8002f8c:	0899      	lsrs	r1, r3, #2
 8002f8e:	9103      	str	r1, [sp, #12]
 8002f90:	f000 8220 	beq.w	80033d4 <arm_correlate_f32+0x554>
 8002f94:	08bb      	lsrs	r3, r7, #2
 8002f96:	f007 0403 	and.w	r4, r7, #3
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	f103 0b0c 	add.w	fp, r3, #12
 8002fa2:	18d5      	adds	r5, r2, r3
 8002fa4:	1e63      	subs	r3, r4, #1
 8002fa6:	0109      	lsls	r1, r1, #4
 8002fa8:	9306      	str	r3, [sp, #24]
 8002faa:	f100 080c 	add.w	r8, r0, #12
 8002fae:	9401      	str	r4, [sp, #4]
 8002fb0:	9104      	str	r1, [sp, #16]
 8002fb2:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8002fb6:	4441      	add	r1, r8
 8002fb8:	f102 0310 	add.w	r3, r2, #16
 8002fbc:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8002fc0:	9e06      	ldr	r6, [sp, #24]
 8002fc2:	9405      	str	r4, [sp, #20]
 8002fc4:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8002fc8:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8002fcc:	46e1      	mov	r9, ip
 8002fce:	4483      	add	fp, r0
 8002fd0:	460f      	mov	r7, r1
 8002fd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002fd4:	469c      	mov	ip, r3
 8002fd6:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8003000 <arm_correlate_f32+0x180>
 8002fda:	ed58 1a03 	vldr	s3, [r8, #-12]
 8002fde:	ed18 2a02 	vldr	s4, [r8, #-8]
 8002fe2:	ed58 2a01 	vldr	s5, [r8, #-4]
 8002fe6:	ed98 0a00 	vldr	s0, [r8]
 8002fea:	9900      	ldr	r1, [sp, #0]
 8002fec:	eef0 5a46 	vmov.f32	s11, s12
 8002ff0:	eeb0 5a46 	vmov.f32	s10, s12
 8002ff4:	eef0 4a46 	vmov.f32	s9, s12
 8002ff8:	4663      	mov	r3, ip
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	e005      	b.n	800300a <arm_correlate_f32+0x18a>
 8002ffe:	bf00      	nop
 8003000:	00000000 	.word	0x00000000
 8003004:	ed90 0a04 	vldr	s0, [r0, #16]
 8003008:	3210      	adds	r2, #16
 800300a:	ed53 6a04 	vldr	s13, [r3, #-16]
 800300e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003012:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003016:	ed13 1a01 	vldr	s2, [r3, #-4]
 800301a:	ee62 3a26 	vmul.f32	s7, s4, s13
 800301e:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8003022:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8003026:	edd2 1a01 	vldr	s3, [r2, #4]
 800302a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800302e:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003032:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003036:	ee74 5a25 	vadd.f32	s11, s8, s11
 800303a:	ee62 3a87 	vmul.f32	s7, s5, s14
 800303e:	ee20 4a07 	vmul.f32	s8, s0, s14
 8003042:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8003046:	ee36 6a86 	vadd.f32	s12, s13, s12
 800304a:	ed92 2a02 	vldr	s4, [r2, #8]
 800304e:	ee27 7a21 	vmul.f32	s14, s14, s3
 8003052:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003056:	ee37 7a06 	vadd.f32	s14, s14, s12
 800305a:	ee20 5a27 	vmul.f32	s10, s0, s15
 800305e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8003062:	ee34 4a25 	vadd.f32	s8, s8, s11
 8003066:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800306a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800306e:	edd2 2a03 	vldr	s5, [r2, #12]
 8003072:	ee67 7a82 	vmul.f32	s15, s15, s4
 8003076:	ee35 5a23 	vadd.f32	s10, s10, s7
 800307a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003082:	ee20 0a01 	vmul.f32	s0, s0, s2
 8003086:	ee61 3a81 	vmul.f32	s7, s3, s2
 800308a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800308e:	ee22 7a01 	vmul.f32	s14, s4, s2
 8003092:	ee21 6a22 	vmul.f32	s12, s2, s5
 8003096:	3901      	subs	r1, #1
 8003098:	f103 0310 	add.w	r3, r3, #16
 800309c:	ee70 4a24 	vadd.f32	s9, s0, s9
 80030a0:	ee33 5a85 	vadd.f32	s10, s7, s10
 80030a4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80030a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030ac:	4610      	mov	r0, r2
 80030ae:	d1a9      	bne.n	8003004 <arm_correlate_f32+0x184>
 80030b0:	9b01      	ldr	r3, [sp, #4]
 80030b2:	b3f3      	cbz	r3, 8003132 <arm_correlate_f32+0x2b2>
 80030b4:	edd5 7a00 	vldr	s15, [r5]
 80030b8:	ed9b 4a00 	vldr	s8, [fp]
 80030bc:	ee61 6aa7 	vmul.f32	s13, s3, s15
 80030c0:	ee62 3a27 	vmul.f32	s7, s4, s15
 80030c4:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80030c8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80030cc:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80030d0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80030d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80030d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030dc:	b34e      	cbz	r6, 8003132 <arm_correlate_f32+0x2b2>
 80030de:	edd5 7a01 	vldr	s15, [r5, #4]
 80030e2:	eddb 6a01 	vldr	s13, [fp, #4]
 80030e6:	ee22 7a27 	vmul.f32	s14, s4, s15
 80030ea:	ee22 3aa7 	vmul.f32	s6, s5, s15
 80030ee:	ee67 3a84 	vmul.f32	s7, s15, s8
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	2e01      	cmp	r6, #1
 80030f8:	ee74 4a87 	vadd.f32	s9, s9, s14
 80030fc:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003100:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8003104:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003108:	d013      	beq.n	8003132 <arm_correlate_f32+0x2b2>
 800310a:	ed95 7a02 	vldr	s14, [r5, #8]
 800310e:	eddb 3a02 	vldr	s7, [fp, #8]
 8003112:	ee62 7a87 	vmul.f32	s15, s5, s14
 8003116:	ee27 4a04 	vmul.f32	s8, s14, s8
 800311a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800311e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003122:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003126:	ee35 5a04 	vadd.f32	s10, s10, s8
 800312a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800312e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003132:	f108 0810 	add.w	r8, r8, #16
 8003136:	eb09 020e 	add.w	r2, r9, lr
 800313a:	eb0a 030e 	add.w	r3, sl, lr
 800313e:	4547      	cmp	r7, r8
 8003140:	edc9 4a00 	vstr	s9, [r9]
 8003144:	f10b 0b10 	add.w	fp, fp, #16
 8003148:	ed82 5a00 	vstr	s10, [r2]
 800314c:	44a1      	add	r9, r4
 800314e:	edca 5a00 	vstr	s11, [sl]
 8003152:	ed83 6a00 	vstr	s12, [r3]
 8003156:	44a2      	add	sl, r4
 8003158:	f47f af3d 	bne.w	8002fd6 <arm_correlate_f32+0x156>
 800315c:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8003160:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8003164:	9b03      	ldr	r3, [sp, #12]
 8003166:	9c05      	ldr	r4, [sp, #20]
 8003168:	9904      	ldr	r1, [sp, #16]
 800316a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800316c:	fb04 cc03 	mla	ip, r4, r3, ip
 8003170:	4401      	add	r1, r0
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	460d      	mov	r5, r1
 8003176:	9303      	str	r3, [sp, #12]
 8003178:	9b02      	ldr	r3, [sp, #8]
 800317a:	f013 0303 	ands.w	r3, r3, #3
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	d071      	beq.n	8003266 <arm_correlate_f32+0x3e6>
 8003182:	9903      	ldr	r1, [sp, #12]
 8003184:	9205      	str	r2, [sp, #20]
 8003186:	f007 0403 	and.w	r4, r7, #3
 800318a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800318e:	1c4f      	adds	r7, r1, #1
 8003190:	1859      	adds	r1, r3, r1
 8003192:	1d03      	adds	r3, r0, #4
 8003194:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003198:	9400      	str	r4, [sp, #0]
 800319a:	f102 0110 	add.w	r1, r2, #16
 800319e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80031a2:	3c01      	subs	r4, #1
 80031a4:	e9cd 6003 	strd	r6, r0, [sp, #12]
 80031a8:	eb02 090a 	add.w	r9, r2, sl
 80031ac:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80031b0:	46e0      	mov	r8, ip
 80031b2:	4618      	mov	r0, r3
 80031b4:	460e      	mov	r6, r1
 80031b6:	4622      	mov	r2, r4
 80031b8:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8003000 <arm_correlate_f32+0x180>
 80031bc:	f105 0110 	add.w	r1, r5, #16
 80031c0:	4633      	mov	r3, r6
 80031c2:	465c      	mov	r4, fp
 80031c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80031c8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80031cc:	ed11 6a03 	vldr	s12, [r1, #-12]
 80031d0:	ed13 4a03 	vldr	s8, [r3, #-12]
 80031d4:	ed51 6a02 	vldr	s13, [r1, #-8]
 80031d8:	ed53 4a02 	vldr	s9, [r3, #-8]
 80031dc:	ed51 5a01 	vldr	s11, [r1, #-4]
 80031e0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80031e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80031e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80031ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80031f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80031f8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	3c01      	subs	r4, #1
 8003202:	f101 0110 	add.w	r1, r1, #16
 8003206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320a:	f103 0310 	add.w	r3, r3, #16
 800320e:	d1d9      	bne.n	80031c4 <arm_correlate_f32+0x344>
 8003210:	9b00      	ldr	r3, [sp, #0]
 8003212:	4455      	add	r5, sl
 8003214:	b1d3      	cbz	r3, 800324c <arm_correlate_f32+0x3cc>
 8003216:	ed99 7a00 	vldr	s14, [r9]
 800321a:	edd5 6a00 	vldr	s13, [r5]
 800321e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003226:	b18a      	cbz	r2, 800324c <arm_correlate_f32+0x3cc>
 8003228:	ed99 7a01 	vldr	s14, [r9, #4]
 800322c:	edd5 6a01 	vldr	s13, [r5, #4]
 8003230:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003234:	2a01      	cmp	r2, #1
 8003236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800323a:	d007      	beq.n	800324c <arm_correlate_f32+0x3cc>
 800323c:	ed95 7a02 	vldr	s14, [r5, #8]
 8003240:	edd9 6a02 	vldr	s13, [r9, #8]
 8003244:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800324c:	463d      	mov	r5, r7
 800324e:	3704      	adds	r7, #4
 8003250:	42b8      	cmp	r0, r7
 8003252:	edc8 7a00 	vstr	s15, [r8]
 8003256:	44f0      	add	r8, lr
 8003258:	d1ae      	bne.n	80031b8 <arm_correlate_f32+0x338>
 800325a:	9b01      	ldr	r3, [sp, #4]
 800325c:	9a05      	ldr	r2, [sp, #20]
 800325e:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8003262:	fb0e cc03 	mla	ip, lr, r3, ip
 8003266:	9b02      	ldr	r3, [sp, #8]
 8003268:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800326c:	08b5      	lsrs	r5, r6, #2
 800326e:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8003000 <arm_correlate_f32+0x180>
 8003272:	f000 80ac 	beq.w	80033ce <arm_correlate_f32+0x54e>
 8003276:	f100 0110 	add.w	r1, r0, #16
 800327a:	f102 0310 	add.w	r3, r2, #16
 800327e:	462c      	mov	r4, r5
 8003280:	ed51 6a04 	vldr	s13, [r1, #-16]
 8003284:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003288:	ed11 7a03 	vldr	s14, [r1, #-12]
 800328c:	ed13 4a03 	vldr	s8, [r3, #-12]
 8003290:	ed51 7a02 	vldr	s15, [r1, #-8]
 8003294:	ed53 4a02 	vldr	s9, [r3, #-8]
 8003298:	ed11 6a01 	vldr	s12, [r1, #-4]
 800329c:	ed13 5a01 	vldr	s10, [r3, #-4]
 80032a0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80032a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80032a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80032ac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80032b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80032b4:	ee66 6a05 	vmul.f32	s13, s12, s10
 80032b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032bc:	3c01      	subs	r4, #1
 80032be:	f101 0110 	add.w	r1, r1, #16
 80032c2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80032c6:	f103 0310 	add.w	r3, r3, #16
 80032ca:	d1d9      	bne.n	8003280 <arm_correlate_f32+0x400>
 80032cc:	012d      	lsls	r5, r5, #4
 80032ce:	1941      	adds	r1, r0, r5
 80032d0:	4415      	add	r5, r2
 80032d2:	f016 0303 	ands.w	r3, r6, #3
 80032d6:	d01b      	beq.n	8003310 <arm_correlate_f32+0x490>
 80032d8:	edd5 7a00 	vldr	s15, [r5]
 80032dc:	ed91 7a00 	vldr	s14, [r1]
 80032e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e4:	3b01      	subs	r3, #1
 80032e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80032ea:	d011      	beq.n	8003310 <arm_correlate_f32+0x490>
 80032ec:	edd5 7a01 	vldr	s15, [r5, #4]
 80032f0:	ed91 7a01 	vldr	s14, [r1, #4]
 80032f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80032fe:	d007      	beq.n	8003310 <arm_correlate_f32+0x490>
 8003300:	edd1 7a02 	vldr	s15, [r1, #8]
 8003304:	ed95 7a02 	vldr	s14, [r5, #8]
 8003308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003310:	3e01      	subs	r6, #1
 8003312:	edcc 5a00 	vstr	s11, [ip]
 8003316:	f100 0004 	add.w	r0, r0, #4
 800331a:	44f4      	add	ip, lr
 800331c:	d1a6      	bne.n	800326c <arm_correlate_f32+0x3ec>
 800331e:	b00d      	add	sp, #52	; 0x34
 8003320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003324:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8003328:	4606      	mov	r6, r0
 800332a:	3c02      	subs	r4, #2
 800332c:	4610      	mov	r0, r2
 800332e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003330:	440c      	add	r4, r1
 8003332:	460d      	mov	r5, r1
 8003334:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8003338:	4619      	mov	r1, r3
 800333a:	4632      	mov	r2, r6
 800333c:	f06f 0e03 	mvn.w	lr, #3
 8003340:	462b      	mov	r3, r5
 8003342:	e5aa      	b.n	8002e9a <arm_correlate_f32+0x1a>
 8003344:	9902      	ldr	r1, [sp, #8]
 8003346:	2900      	cmp	r1, #0
 8003348:	d090      	beq.n	800326c <arm_correlate_f32+0x3ec>
 800334a:	9902      	ldr	r1, [sp, #8]
 800334c:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8003000 <arm_correlate_f32+0x180>
 8003350:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8003354:	eb00 0708 	add.w	r7, r0, r8
 8003358:	4601      	mov	r1, r0
 800335a:	4665      	mov	r5, ip
 800335c:	e020      	b.n	80033a0 <arm_correlate_f32+0x520>
 800335e:	edd2 7a00 	vldr	s15, [r2]
 8003362:	ecb4 7a01 	vldmia	r4!, {s14}
 8003366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800336a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800336e:	b18e      	cbz	r6, 8003394 <arm_correlate_f32+0x514>
 8003370:	ed92 7a01 	vldr	s14, [r2, #4]
 8003374:	edd1 6a01 	vldr	s13, [r1, #4]
 8003378:	ee27 7a26 	vmul.f32	s14, s14, s13
 800337c:	2b02      	cmp	r3, #2
 800337e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003382:	d007      	beq.n	8003394 <arm_correlate_f32+0x514>
 8003384:	ed91 7a02 	vldr	s14, [r1, #8]
 8003388:	edd2 6a02 	vldr	s13, [r2, #8]
 800338c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003394:	42bc      	cmp	r4, r7
 8003396:	edc5 7a00 	vstr	s15, [r5]
 800339a:	4621      	mov	r1, r4
 800339c:	4475      	add	r5, lr
 800339e:	d00b      	beq.n	80033b8 <arm_correlate_f32+0x538>
 80033a0:	460c      	mov	r4, r1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1db      	bne.n	800335e <arm_correlate_f32+0x4de>
 80033a6:	1d0c      	adds	r4, r1, #4
 80033a8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80033e8 <arm_correlate_f32+0x568>
 80033ac:	42bc      	cmp	r4, r7
 80033ae:	edc5 7a00 	vstr	s15, [r5]
 80033b2:	4621      	mov	r1, r4
 80033b4:	4475      	add	r5, lr
 80033b6:	d1f3      	bne.n	80033a0 <arm_correlate_f32+0x520>
 80033b8:	9b02      	ldr	r3, [sp, #8]
 80033ba:	4440      	add	r0, r8
 80033bc:	fb0e cc03 	mla	ip, lr, r3, ip
 80033c0:	2e00      	cmp	r6, #0
 80033c2:	d0ac      	beq.n	800331e <arm_correlate_f32+0x49e>
 80033c4:	08b5      	lsrs	r5, r6, #2
 80033c6:	eddf 5a08 	vldr	s11, [pc, #32]	; 80033e8 <arm_correlate_f32+0x568>
 80033ca:	f47f af54 	bne.w	8003276 <arm_correlate_f32+0x3f6>
 80033ce:	4615      	mov	r5, r2
 80033d0:	4601      	mov	r1, r0
 80033d2:	e77e      	b.n	80032d2 <arm_correlate_f32+0x452>
 80033d4:	4605      	mov	r5, r0
 80033d6:	e6cf      	b.n	8003178 <arm_correlate_f32+0x2f8>
 80033d8:	9902      	ldr	r1, [sp, #8]
 80033da:	2900      	cmp	r1, #0
 80033dc:	d1b5      	bne.n	800334a <arm_correlate_f32+0x4ca>
 80033de:	e79e      	b.n	800331e <arm_correlate_f32+0x49e>
 80033e0:	eddf 7a01 	vldr	s15, [pc, #4]	; 80033e8 <arm_correlate_f32+0x568>
 80033e4:	4605      	mov	r5, r0
 80033e6:	e5c7      	b.n	8002f78 <arm_correlate_f32+0xf8>
 80033e8:	00000000 	.word	0x00000000

080033ec <arm_conv_f32>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	b08b      	sub	sp, #44	; 0x2c
 80033f2:	4299      	cmp	r1, r3
 80033f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80033f6:	d205      	bcs.n	8003404 <arm_conv_f32+0x18>
 80033f8:	4606      	mov	r6, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	4632      	mov	r2, r6
 8003402:	4623      	mov	r3, r4
 8003404:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8003408:	3101      	adds	r1, #1
 800340a:	1ac9      	subs	r1, r1, r3
 800340c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003410:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003414:	9101      	str	r1, [sp, #4]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	eb02 070b 	add.w	r7, r2, fp
 800341c:	f000 8277 	beq.w	800390e <arm_conv_f32+0x522>
 8003420:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80036e0 <arm_conv_f32+0x2f4>
 8003424:	f102 0904 	add.w	r9, r2, #4
 8003428:	46aa      	mov	sl, r5
 800342a:	4680      	mov	r8, r0
 800342c:	2401      	movs	r4, #1
 800342e:	f014 0603 	ands.w	r6, r4, #3
 8003432:	d01b      	beq.n	800346c <arm_conv_f32+0x80>
 8003434:	ed92 7a00 	vldr	s14, [r2]
 8003438:	edd8 6a00 	vldr	s13, [r8]
 800343c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003440:	3e01      	subs	r6, #1
 8003442:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003446:	d011      	beq.n	800346c <arm_conv_f32+0x80>
 8003448:	ed12 7a01 	vldr	s14, [r2, #-4]
 800344c:	edd8 6a01 	vldr	s13, [r8, #4]
 8003450:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003454:	2e01      	cmp	r6, #1
 8003456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800345a:	d007      	beq.n	800346c <arm_conv_f32+0x80>
 800345c:	ed98 7a02 	vldr	s14, [r8, #8]
 8003460:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003464:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800346c:	3401      	adds	r4, #1
 800346e:	42a3      	cmp	r3, r4
 8003470:	ecea 7a01 	vstmia	sl!, {s15}
 8003474:	464a      	mov	r2, r9
 8003476:	d03a      	beq.n	80034ee <arm_conv_f32+0x102>
 8003478:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800347c:	f000 824c 	beq.w	8003918 <arm_conv_f32+0x52c>
 8003480:	f100 0210 	add.w	r2, r0, #16
 8003484:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8003488:	eddf 7a95 	vldr	s15, [pc, #596]	; 80036e0 <arm_conv_f32+0x2f4>
 800348c:	eb02 0c08 	add.w	ip, r2, r8
 8003490:	f1a9 0610 	sub.w	r6, r9, #16
 8003494:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003498:	edd6 3a04 	vldr	s7, [r6, #16]
 800349c:	ed12 6a03 	vldr	s12, [r2, #-12]
 80034a0:	ed96 4a03 	vldr	s8, [r6, #12]
 80034a4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80034a8:	edd6 4a02 	vldr	s9, [r6, #8]
 80034ac:	ed52 5a01 	vldr	s11, [r2, #-4]
 80034b0:	ed96 5a01 	vldr	s10, [r6, #4]
 80034b4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80034b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80034c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80034c8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	3210      	adds	r2, #16
 80034d2:	4594      	cmp	ip, r2
 80034d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d8:	f1a6 0610 	sub.w	r6, r6, #16
 80034dc:	d1da      	bne.n	8003494 <arm_conv_f32+0xa8>
 80034de:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80034e2:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80034e6:	4480      	add	r8, r0
 80034e8:	f109 0904 	add.w	r9, r9, #4
 80034ec:	e79f      	b.n	800342e <arm_conv_f32+0x42>
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	445d      	add	r5, fp
 80034f2:	f240 80e9 	bls.w	80036c8 <arm_conv_f32+0x2dc>
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	089a      	lsrs	r2, r3, #2
 80034fa:	9202      	str	r2, [sp, #8]
 80034fc:	f000 8203 	beq.w	8003906 <arm_conv_f32+0x51a>
 8003500:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003504:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	f004 0603 	and.w	r6, r4, #3
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	f1a3 0a10 	sub.w	sl, r3, #16
 8003514:	f1a3 020c 	sub.w	r2, r3, #12
 8003518:	3b08      	subs	r3, #8
 800351a:	9204      	str	r2, [sp, #16]
 800351c:	9305      	str	r3, [sp, #20]
 800351e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8003522:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8003526:	9a03      	ldr	r2, [sp, #12]
 8003528:	f100 0c1c 	add.w	ip, r0, #28
 800352c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8003530:	464c      	mov	r4, r9
 8003532:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8003536:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800353a:	f1a7 0310 	sub.w	r3, r7, #16
 800353e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8003542:	eb05 0b02 	add.w	fp, r5, r2
 8003546:	461f      	mov	r7, r3
 8003548:	3510      	adds	r5, #16
 800354a:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80036e0 <arm_conv_f32+0x2f4>
 800354e:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8003552:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8003556:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800355a:	eeb0 5a46 	vmov.f32	s10, s12
 800355e:	eef0 4a46 	vmov.f32	s9, s12
 8003562:	eef0 5a46 	vmov.f32	s11, s12
 8003566:	463a      	mov	r2, r7
 8003568:	4663      	mov	r3, ip
 800356a:	4641      	mov	r1, r8
 800356c:	edd2 6a04 	vldr	s13, [r2, #16]
 8003570:	ed13 0a04 	vldr	s0, [r3, #-16]
 8003574:	ed92 7a03 	vldr	s14, [r2, #12]
 8003578:	edd2 7a02 	vldr	s15, [r2, #8]
 800357c:	edd2 0a01 	vldr	s1, [r2, #4]
 8003580:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8003584:	ee62 3a26 	vmul.f32	s7, s4, s13
 8003588:	ee61 2a26 	vmul.f32	s5, s2, s13
 800358c:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003590:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003594:	ee21 4a87 	vmul.f32	s8, s3, s14
 8003598:	ee73 4a24 	vadd.f32	s9, s6, s9
 800359c:	ee33 5a85 	vadd.f32	s10, s7, s10
 80035a0:	ee22 3a07 	vmul.f32	s6, s4, s14
 80035a4:	ed53 1a02 	vldr	s3, [r3, #-8]
 80035a8:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80035ac:	ee36 6a86 	vadd.f32	s12, s13, s12
 80035b0:	ee60 3a07 	vmul.f32	s7, s0, s14
 80035b4:	ee27 7a01 	vmul.f32	s14, s14, s2
 80035b8:	ee33 3a24 	vadd.f32	s6, s6, s9
 80035bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80035c0:	ee74 2a22 	vadd.f32	s5, s8, s5
 80035c4:	ee60 4a27 	vmul.f32	s9, s0, s15
 80035c8:	ee22 4a27 	vmul.f32	s8, s4, s15
 80035cc:	ee73 3a85 	vadd.f32	s7, s7, s10
 80035d0:	ed13 2a01 	vldr	s4, [r3, #-4]
 80035d4:	ee21 5a27 	vmul.f32	s10, s2, s15
 80035d8:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80035dc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80035e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035e4:	ee34 4a22 	vadd.f32	s8, s8, s5
 80035e8:	ee60 5a20 	vmul.f32	s11, s0, s1
 80035ec:	ee21 3a20 	vmul.f32	s6, s2, s1
 80035f0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80035f4:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80035f8:	ee20 6a82 	vmul.f32	s12, s1, s4
 80035fc:	3901      	subs	r1, #1
 80035fe:	f1a2 0210 	sub.w	r2, r2, #16
 8003602:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003606:	ee73 4a24 	vadd.f32	s9, s6, s9
 800360a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800360e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003612:	f103 0310 	add.w	r3, r3, #16
 8003616:	d1a9      	bne.n	800356c <arm_conv_f32+0x180>
 8003618:	eb0a 030c 	add.w	r3, sl, ip
 800361c:	2e00      	cmp	r6, #0
 800361e:	d042      	beq.n	80036a6 <arm_conv_f32+0x2ba>
 8003620:	edde 7a00 	vldr	s15, [lr]
 8003624:	ed93 4a00 	vldr	s8, [r3]
 8003628:	ee61 6a27 	vmul.f32	s13, s2, s15
 800362c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8003630:	ee22 7a27 	vmul.f32	s14, s4, s15
 8003634:	ee64 7a27 	vmul.f32	s15, s8, s15
 8003638:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800363c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8003640:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003644:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003648:	eb09 030c 	add.w	r3, r9, ip
 800364c:	b35c      	cbz	r4, 80036a6 <arm_conv_f32+0x2ba>
 800364e:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8003652:	edd3 6a00 	vldr	s13, [r3]
 8003656:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800365a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800365e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	2c01      	cmp	r4, #1
 8003668:	ee75 5a87 	vadd.f32	s11, s11, s14
 800366c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003670:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003674:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003678:	eb00 030c 	add.w	r3, r0, ip
 800367c:	d013      	beq.n	80036a6 <arm_conv_f32+0x2ba>
 800367e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8003682:	edd3 3a00 	vldr	s7, [r3]
 8003686:	ee62 7a07 	vmul.f32	s15, s4, s14
 800368a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800368e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003692:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003696:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800369a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800369e:	ee35 5a26 	vadd.f32	s10, s10, s13
 80036a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80036a6:	45ab      	cmp	fp, r5
 80036a8:	ed45 5a04 	vstr	s11, [r5, #-16]
 80036ac:	ed45 4a03 	vstr	s9, [r5, #-12]
 80036b0:	ed05 5a02 	vstr	s10, [r5, #-8]
 80036b4:	ed05 6a01 	vstr	s12, [r5, #-4]
 80036b8:	f10c 0c10 	add.w	ip, ip, #16
 80036bc:	f105 0310 	add.w	r3, r5, #16
 80036c0:	f000 809e 	beq.w	8003800 <arm_conv_f32+0x414>
 80036c4:	461d      	mov	r5, r3
 80036c6:	e740      	b.n	800354a <arm_conv_f32+0x15e>
 80036c8:	9a01      	ldr	r2, [sp, #4]
 80036ca:	46ac      	mov	ip, r5
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	d037      	beq.n	8003740 <arm_conv_f32+0x354>
 80036d0:	9a01      	ldr	r2, [sp, #4]
 80036d2:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80036e0 <arm_conv_f32+0x2f4>
 80036d6:	0096      	lsls	r6, r2, #2
 80036d8:	eb05 0c06 	add.w	ip, r5, r6
 80036dc:	4604      	mov	r4, r0
 80036de:	e021      	b.n	8003724 <arm_conv_f32+0x338>
 80036e0:	00000000 	.word	0x00000000
 80036e4:	edd7 7a00 	vldr	s15, [r7]
 80036e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80036f4:	b189      	cbz	r1, 800371a <arm_conv_f32+0x32e>
 80036f6:	ed17 7a01 	vldr	s14, [r7, #-4]
 80036fa:	edd4 6a01 	vldr	s13, [r4, #4]
 80036fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003702:	2b02      	cmp	r3, #2
 8003704:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003708:	d007      	beq.n	800371a <arm_conv_f32+0x32e>
 800370a:	ed94 7a02 	vldr	s14, [r4, #8]
 800370e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8003712:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800371a:	ece5 7a01 	vstmia	r5!, {s15}
 800371e:	4565      	cmp	r5, ip
 8003720:	4614      	mov	r4, r2
 8003722:	d00a      	beq.n	800373a <arm_conv_f32+0x34e>
 8003724:	4622      	mov	r2, r4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1dc      	bne.n	80036e4 <arm_conv_f32+0x2f8>
 800372a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80036e0 <arm_conv_f32+0x2f4>
 800372e:	ece5 7a01 	vstmia	r5!, {s15}
 8003732:	1d22      	adds	r2, r4, #4
 8003734:	4565      	cmp	r5, ip
 8003736:	4614      	mov	r4, r2
 8003738:	d1f4      	bne.n	8003724 <arm_conv_f32+0x338>
 800373a:	4430      	add	r0, r6
 800373c:	2900      	cmp	r1, #0
 800373e:	d059      	beq.n	80037f4 <arm_conv_f32+0x408>
 8003740:	088d      	lsrs	r5, r1, #2
 8003742:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80036e0 <arm_conv_f32+0x2f4>
 8003746:	d058      	beq.n	80037fa <arm_conv_f32+0x40e>
 8003748:	f100 0210 	add.w	r2, r0, #16
 800374c:	f1a7 0310 	sub.w	r3, r7, #16
 8003750:	462c      	mov	r4, r5
 8003752:	ed52 6a04 	vldr	s13, [r2, #-16]
 8003756:	edd3 3a04 	vldr	s7, [r3, #16]
 800375a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800375e:	ed93 4a03 	vldr	s8, [r3, #12]
 8003762:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003766:	edd3 4a02 	vldr	s9, [r3, #8]
 800376a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800376e:	ed93 5a01 	vldr	s10, [r3, #4]
 8003772:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003776:	ee27 7a04 	vmul.f32	s14, s14, s8
 800377a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800377e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003782:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003786:	ee66 6a05 	vmul.f32	s13, s12, s10
 800378a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800378e:	3c01      	subs	r4, #1
 8003790:	f102 0210 	add.w	r2, r2, #16
 8003794:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003798:	f1a3 0310 	sub.w	r3, r3, #16
 800379c:	d1d9      	bne.n	8003752 <arm_conv_f32+0x366>
 800379e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80037a2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80037a6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80037aa:	f011 0203 	ands.w	r2, r1, #3
 80037ae:	d01b      	beq.n	80037e8 <arm_conv_f32+0x3fc>
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	ed95 7a00 	vldr	s14, [r5]
 80037b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037bc:	3a01      	subs	r2, #1
 80037be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80037c2:	d011      	beq.n	80037e8 <arm_conv_f32+0x3fc>
 80037c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80037c8:	ed95 7a01 	vldr	s14, [r5, #4]
 80037cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d0:	2a01      	cmp	r2, #1
 80037d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80037d6:	d007      	beq.n	80037e8 <arm_conv_f32+0x3fc>
 80037d8:	edd5 7a02 	vldr	s15, [r5, #8]
 80037dc:	ed13 7a02 	vldr	s14, [r3, #-8]
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80037e8:	3901      	subs	r1, #1
 80037ea:	ecec 5a01 	vstmia	ip!, {s11}
 80037ee:	f100 0004 	add.w	r0, r0, #4
 80037f2:	d1a5      	bne.n	8003740 <arm_conv_f32+0x354>
 80037f4:	b00b      	add	sp, #44	; 0x2c
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	463b      	mov	r3, r7
 80037fc:	4605      	mov	r5, r0
 80037fe:	e7d4      	b.n	80037aa <arm_conv_f32+0x3be>
 8003800:	9b02      	ldr	r3, [sp, #8]
 8003802:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8003810:	4403      	add	r3, r0
 8003812:	465d      	mov	r5, fp
 8003814:	469e      	mov	lr, r3
 8003816:	9b01      	ldr	r3, [sp, #4]
 8003818:	f013 0c03 	ands.w	ip, r3, #3
 800381c:	d075      	beq.n	800390a <arm_conv_f32+0x51e>
 800381e:	9b02      	ldr	r3, [sp, #8]
 8003820:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8003824:	f004 0403 	and.w	r4, r4, #3
 8003828:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800382c:	f103 0801 	add.w	r8, r3, #1
 8003830:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8003834:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8003838:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800383c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003840:	f1a7 0210 	sub.w	r2, r7, #16
 8003844:	4618      	mov	r0, r3
 8003846:	465b      	mov	r3, fp
 8003848:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800384c:	468b      	mov	fp, r1
 800384e:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8003852:	4621      	mov	r1, r4
 8003854:	4617      	mov	r7, r2
 8003856:	461c      	mov	r4, r3
 8003858:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80036e0 <arm_conv_f32+0x2f4>
 800385c:	f10e 0210 	add.w	r2, lr, #16
 8003860:	463b      	mov	r3, r7
 8003862:	4656      	mov	r6, sl
 8003864:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003868:	edd3 3a04 	vldr	s7, [r3, #16]
 800386c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003870:	ed93 4a03 	vldr	s8, [r3, #12]
 8003874:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003878:	edd3 4a02 	vldr	s9, [r3, #8]
 800387c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003880:	ed93 5a01 	vldr	s10, [r3, #4]
 8003884:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003888:	ee26 6a04 	vmul.f32	s12, s12, s8
 800388c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003890:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003894:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003898:	ee65 6a85 	vmul.f32	s13, s11, s10
 800389c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a0:	3e01      	subs	r6, #1
 80038a2:	f102 0210 	add.w	r2, r2, #16
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	f1a3 0310 	sub.w	r3, r3, #16
 80038ae:	d1d9      	bne.n	8003864 <arm_conv_f32+0x478>
 80038b0:	4486      	add	lr, r0
 80038b2:	b1d1      	cbz	r1, 80038ea <arm_conv_f32+0x4fe>
 80038b4:	ed99 7a00 	vldr	s14, [r9]
 80038b8:	edde 6a00 	vldr	s13, [lr]
 80038bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80038c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c4:	b18c      	cbz	r4, 80038ea <arm_conv_f32+0x4fe>
 80038c6:	ed19 7a01 	vldr	s14, [r9, #-4]
 80038ca:	edde 6a01 	vldr	s13, [lr, #4]
 80038ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80038d2:	2c01      	cmp	r4, #1
 80038d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d8:	d007      	beq.n	80038ea <arm_conv_f32+0x4fe>
 80038da:	ed9e 7a02 	vldr	s14, [lr, #8]
 80038de:	ed59 6a02 	vldr	s13, [r9, #-8]
 80038e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80038e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ea:	ece5 7a01 	vstmia	r5!, {s15}
 80038ee:	4565      	cmp	r5, ip
 80038f0:	46c6      	mov	lr, r8
 80038f2:	f108 0804 	add.w	r8, r8, #4
 80038f6:	d1af      	bne.n	8003858 <arm_conv_f32+0x46c>
 80038f8:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80038fc:	4659      	mov	r1, fp
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003904:	e71c      	b.n	8003740 <arm_conv_f32+0x354>
 8003906:	4686      	mov	lr, r0
 8003908:	e785      	b.n	8003816 <arm_conv_f32+0x42a>
 800390a:	46ac      	mov	ip, r5
 800390c:	e7f7      	b.n	80038fe <arm_conv_f32+0x512>
 800390e:	9a01      	ldr	r2, [sp, #4]
 8003910:	2a00      	cmp	r2, #0
 8003912:	f47f aedd 	bne.w	80036d0 <arm_conv_f32+0x2e4>
 8003916:	e76d      	b.n	80037f4 <arm_conv_f32+0x408>
 8003918:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80036e0 <arm_conv_f32+0x2f4>
 800391c:	4680      	mov	r8, r0
 800391e:	e5e3      	b.n	80034e8 <arm_conv_f32+0xfc>

08003920 <arm_sub_f32>:
 8003920:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003924:	b4f0      	push	{r4, r5, r6, r7}
 8003926:	d033      	beq.n	8003990 <arm_sub_f32+0x70>
 8003928:	f100 0610 	add.w	r6, r0, #16
 800392c:	f101 0510 	add.w	r5, r1, #16
 8003930:	f102 0410 	add.w	r4, r2, #16
 8003934:	4667      	mov	r7, ip
 8003936:	ed15 7a04 	vldr	s14, [r5, #-16]
 800393a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800393e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003942:	3f01      	subs	r7, #1
 8003944:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003948:	ed15 7a03 	vldr	s14, [r5, #-12]
 800394c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003954:	f106 0610 	add.w	r6, r6, #16
 8003958:	ed44 7a03 	vstr	s15, [r4, #-12]
 800395c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003960:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003968:	f105 0510 	add.w	r5, r5, #16
 800396c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003970:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003974:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800397c:	f104 0410 	add.w	r4, r4, #16
 8003980:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003984:	d1d7      	bne.n	8003936 <arm_sub_f32+0x16>
 8003986:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800398a:	4420      	add	r0, r4
 800398c:	4421      	add	r1, r4
 800398e:	4422      	add	r2, r4
 8003990:	f013 0303 	ands.w	r3, r3, #3
 8003994:	d01b      	beq.n	80039ce <arm_sub_f32+0xae>
 8003996:	edd0 7a00 	vldr	s15, [r0]
 800399a:	ed91 7a00 	vldr	s14, [r1]
 800399e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039a2:	3b01      	subs	r3, #1
 80039a4:	edc2 7a00 	vstr	s15, [r2]
 80039a8:	d011      	beq.n	80039ce <arm_sub_f32+0xae>
 80039aa:	edd0 7a01 	vldr	s15, [r0, #4]
 80039ae:	ed91 7a01 	vldr	s14, [r1, #4]
 80039b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	edc2 7a01 	vstr	s15, [r2, #4]
 80039bc:	d007      	beq.n	80039ce <arm_sub_f32+0xae>
 80039be:	edd0 7a02 	vldr	s15, [r0, #8]
 80039c2:	ed91 7a02 	vldr	s14, [r1, #8]
 80039c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ca:	edc2 7a02 	vstr	s15, [r2, #8]
 80039ce:	bcf0      	pop	{r4, r5, r6, r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop

080039d4 <__errno>:
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <__errno+0x8>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <__libc_init_array>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	4e0d      	ldr	r6, [pc, #52]	; (8003a18 <__libc_init_array+0x38>)
 80039e4:	4c0d      	ldr	r4, [pc, #52]	; (8003a1c <__libc_init_array+0x3c>)
 80039e6:	1ba4      	subs	r4, r4, r6
 80039e8:	10a4      	asrs	r4, r4, #2
 80039ea:	2500      	movs	r5, #0
 80039ec:	42a5      	cmp	r5, r4
 80039ee:	d109      	bne.n	8003a04 <__libc_init_array+0x24>
 80039f0:	4e0b      	ldr	r6, [pc, #44]	; (8003a20 <__libc_init_array+0x40>)
 80039f2:	4c0c      	ldr	r4, [pc, #48]	; (8003a24 <__libc_init_array+0x44>)
 80039f4:	f004 fe5a 	bl	80086ac <_init>
 80039f8:	1ba4      	subs	r4, r4, r6
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	2500      	movs	r5, #0
 80039fe:	42a5      	cmp	r5, r4
 8003a00:	d105      	bne.n	8003a0e <__libc_init_array+0x2e>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a08:	4798      	blx	r3
 8003a0a:	3501      	adds	r5, #1
 8003a0c:	e7ee      	b.n	80039ec <__libc_init_array+0xc>
 8003a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a12:	4798      	blx	r3
 8003a14:	3501      	adds	r5, #1
 8003a16:	e7f2      	b.n	80039fe <__libc_init_array+0x1e>
 8003a18:	08008bb8 	.word	0x08008bb8
 8003a1c:	08008bb8 	.word	0x08008bb8
 8003a20:	08008bb8 	.word	0x08008bb8
 8003a24:	08008bbc 	.word	0x08008bbc

08003a28 <memcpy>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	1e43      	subs	r3, r0, #1
 8003a2c:	440a      	add	r2, r1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	d100      	bne.n	8003a34 <memcpy+0xc>
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a3c:	e7f7      	b.n	8003a2e <memcpy+0x6>

08003a3e <memset>:
 8003a3e:	4402      	add	r2, r0
 8003a40:	4603      	mov	r3, r0
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d100      	bne.n	8003a48 <memset+0xa>
 8003a46:	4770      	bx	lr
 8003a48:	f803 1b01 	strb.w	r1, [r3], #1
 8003a4c:	e7f9      	b.n	8003a42 <memset+0x4>

08003a4e <__cvt>:
 8003a4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a52:	ec55 4b10 	vmov	r4, r5, d0
 8003a56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003a58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	460e      	mov	r6, r1
 8003a60:	4691      	mov	r9, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	bfb8      	it	lt
 8003a66:	4622      	movlt	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f027 0720 	bic.w	r7, r7, #32
 8003a6e:	bfbb      	ittet	lt
 8003a70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a74:	461d      	movlt	r5, r3
 8003a76:	2300      	movge	r3, #0
 8003a78:	232d      	movlt	r3, #45	; 0x2d
 8003a7a:	bfb8      	it	lt
 8003a7c:	4614      	movlt	r4, r2
 8003a7e:	2f46      	cmp	r7, #70	; 0x46
 8003a80:	700b      	strb	r3, [r1, #0]
 8003a82:	d004      	beq.n	8003a8e <__cvt+0x40>
 8003a84:	2f45      	cmp	r7, #69	; 0x45
 8003a86:	d100      	bne.n	8003a8a <__cvt+0x3c>
 8003a88:	3601      	adds	r6, #1
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	e000      	b.n	8003a90 <__cvt+0x42>
 8003a8e:	2103      	movs	r1, #3
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	ab02      	add	r3, sp, #8
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4653      	mov	r3, sl
 8003a9c:	ec45 4b10 	vmov	d0, r4, r5
 8003aa0:	f001 fd76 	bl	8005590 <_dtoa_r>
 8003aa4:	2f47      	cmp	r7, #71	; 0x47
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	d102      	bne.n	8003ab0 <__cvt+0x62>
 8003aaa:	f019 0f01 	tst.w	r9, #1
 8003aae:	d026      	beq.n	8003afe <__cvt+0xb0>
 8003ab0:	2f46      	cmp	r7, #70	; 0x46
 8003ab2:	eb08 0906 	add.w	r9, r8, r6
 8003ab6:	d111      	bne.n	8003adc <__cvt+0x8e>
 8003ab8:	f898 3000 	ldrb.w	r3, [r8]
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d10a      	bne.n	8003ad6 <__cvt+0x88>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fd f84e 	bl	8000b68 <__aeabi_dcmpeq>
 8003acc:	b918      	cbnz	r0, 8003ad6 <__cvt+0x88>
 8003ace:	f1c6 0601 	rsb	r6, r6, #1
 8003ad2:	f8ca 6000 	str.w	r6, [sl]
 8003ad6:	f8da 3000 	ldr.w	r3, [sl]
 8003ada:	4499      	add	r9, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	f7fd f840 	bl	8000b68 <__aeabi_dcmpeq>
 8003ae8:	b938      	cbnz	r0, 8003afa <__cvt+0xac>
 8003aea:	2230      	movs	r2, #48	; 0x30
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	454b      	cmp	r3, r9
 8003af0:	d205      	bcs.n	8003afe <__cvt+0xb0>
 8003af2:	1c59      	adds	r1, r3, #1
 8003af4:	9103      	str	r1, [sp, #12]
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e7f8      	b.n	8003aec <__cvt+0x9e>
 8003afa:	f8cd 900c 	str.w	r9, [sp, #12]
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b02:	eba3 0308 	sub.w	r3, r3, r8
 8003b06:	4640      	mov	r0, r8
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	b004      	add	sp, #16
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b10 <__exponent>:
 8003b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b12:	2900      	cmp	r1, #0
 8003b14:	4604      	mov	r4, r0
 8003b16:	bfba      	itte	lt
 8003b18:	4249      	neglt	r1, r1
 8003b1a:	232d      	movlt	r3, #45	; 0x2d
 8003b1c:	232b      	movge	r3, #43	; 0x2b
 8003b1e:	2909      	cmp	r1, #9
 8003b20:	f804 2b02 	strb.w	r2, [r4], #2
 8003b24:	7043      	strb	r3, [r0, #1]
 8003b26:	dd20      	ble.n	8003b6a <__exponent+0x5a>
 8003b28:	f10d 0307 	add.w	r3, sp, #7
 8003b2c:	461f      	mov	r7, r3
 8003b2e:	260a      	movs	r6, #10
 8003b30:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b34:	fb06 1115 	mls	r1, r6, r5, r1
 8003b38:	3130      	adds	r1, #48	; 0x30
 8003b3a:	2d09      	cmp	r5, #9
 8003b3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b40:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003b44:	4629      	mov	r1, r5
 8003b46:	dc09      	bgt.n	8003b5c <__exponent+0x4c>
 8003b48:	3130      	adds	r1, #48	; 0x30
 8003b4a:	3b02      	subs	r3, #2
 8003b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b50:	42bb      	cmp	r3, r7
 8003b52:	4622      	mov	r2, r4
 8003b54:	d304      	bcc.n	8003b60 <__exponent+0x50>
 8003b56:	1a10      	subs	r0, r2, r0
 8003b58:	b003      	add	sp, #12
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	e7e7      	b.n	8003b30 <__exponent+0x20>
 8003b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b64:	f804 2b01 	strb.w	r2, [r4], #1
 8003b68:	e7f2      	b.n	8003b50 <__exponent+0x40>
 8003b6a:	2330      	movs	r3, #48	; 0x30
 8003b6c:	4419      	add	r1, r3
 8003b6e:	7083      	strb	r3, [r0, #2]
 8003b70:	1d02      	adds	r2, r0, #4
 8003b72:	70c1      	strb	r1, [r0, #3]
 8003b74:	e7ef      	b.n	8003b56 <__exponent+0x46>
	...

08003b78 <_printf_float>:
 8003b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	b08d      	sub	sp, #52	; 0x34
 8003b7e:	460c      	mov	r4, r1
 8003b80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003b84:	4616      	mov	r6, r2
 8003b86:	461f      	mov	r7, r3
 8003b88:	4605      	mov	r5, r0
 8003b8a:	f002 fde5 	bl	8006758 <_localeconv_r>
 8003b8e:	6803      	ldr	r3, [r0, #0]
 8003b90:	9304      	str	r3, [sp, #16]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fb68 	bl	8000268 <strlen>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba0:	9005      	str	r0, [sp, #20]
 8003ba2:	3307      	adds	r3, #7
 8003ba4:	f023 0307 	bic.w	r3, r3, #7
 8003ba8:	f103 0208 	add.w	r2, r3, #8
 8003bac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bb0:	f8d4 b000 	ldr.w	fp, [r4]
 8003bb4:	f8c8 2000 	str.w	r2, [r8]
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bc0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003bc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003bc8:	9307      	str	r3, [sp, #28]
 8003bca:	f8cd 8018 	str.w	r8, [sp, #24]
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd2:	4ba7      	ldr	r3, [pc, #668]	; (8003e70 <_printf_float+0x2f8>)
 8003bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bd8:	f7fc fff8 	bl	8000bcc <__aeabi_dcmpun>
 8003bdc:	bb70      	cbnz	r0, 8003c3c <_printf_float+0xc4>
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be2:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <_printf_float+0x2f8>)
 8003be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003be8:	f7fc ffd2 	bl	8000b90 <__aeabi_dcmple>
 8003bec:	bb30      	cbnz	r0, 8003c3c <_printf_float+0xc4>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	f7fc ffc1 	bl	8000b7c <__aeabi_dcmplt>
 8003bfa:	b110      	cbz	r0, 8003c02 <_printf_float+0x8a>
 8003bfc:	232d      	movs	r3, #45	; 0x2d
 8003bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c02:	4a9c      	ldr	r2, [pc, #624]	; (8003e74 <_printf_float+0x2fc>)
 8003c04:	4b9c      	ldr	r3, [pc, #624]	; (8003e78 <_printf_float+0x300>)
 8003c06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003c0a:	bf8c      	ite	hi
 8003c0c:	4690      	movhi	r8, r2
 8003c0e:	4698      	movls	r8, r3
 8003c10:	2303      	movs	r3, #3
 8003c12:	f02b 0204 	bic.w	r2, fp, #4
 8003c16:	6123      	str	r3, [r4, #16]
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	f04f 0900 	mov.w	r9, #0
 8003c1e:	9700      	str	r7, [sp, #0]
 8003c20:	4633      	mov	r3, r6
 8003c22:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c24:	4621      	mov	r1, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 f9e6 	bl	8003ff8 <_printf_common>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	f040 808d 	bne.w	8003d4c <_printf_float+0x1d4>
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c36:	b00d      	add	sp, #52	; 0x34
 8003c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc ffc2 	bl	8000bcc <__aeabi_dcmpun>
 8003c48:	b110      	cbz	r0, 8003c50 <_printf_float+0xd8>
 8003c4a:	4a8c      	ldr	r2, [pc, #560]	; (8003e7c <_printf_float+0x304>)
 8003c4c:	4b8c      	ldr	r3, [pc, #560]	; (8003e80 <_printf_float+0x308>)
 8003c4e:	e7da      	b.n	8003c06 <_printf_float+0x8e>
 8003c50:	6861      	ldr	r1, [r4, #4]
 8003c52:	1c4b      	adds	r3, r1, #1
 8003c54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003c58:	a80a      	add	r0, sp, #40	; 0x28
 8003c5a:	d13e      	bne.n	8003cda <_printf_float+0x162>
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	6063      	str	r3, [r4, #4]
 8003c60:	2300      	movs	r3, #0
 8003c62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003c66:	ab09      	add	r3, sp, #36	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	ec49 8b10 	vmov	d0, r8, r9
 8003c6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003c72:	6022      	str	r2, [r4, #0]
 8003c74:	f8cd a004 	str.w	sl, [sp, #4]
 8003c78:	6861      	ldr	r1, [r4, #4]
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7ff fee7 	bl	8003a4e <__cvt>
 8003c80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003c84:	2b47      	cmp	r3, #71	; 0x47
 8003c86:	4680      	mov	r8, r0
 8003c88:	d109      	bne.n	8003c9e <_printf_float+0x126>
 8003c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8c:	1cd8      	adds	r0, r3, #3
 8003c8e:	db02      	blt.n	8003c96 <_printf_float+0x11e>
 8003c90:	6862      	ldr	r2, [r4, #4]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	dd47      	ble.n	8003d26 <_printf_float+0x1ae>
 8003c96:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003c9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ca4:	d824      	bhi.n	8003cf0 <_printf_float+0x178>
 8003ca6:	3901      	subs	r1, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cae:	9109      	str	r1, [sp, #36]	; 0x24
 8003cb0:	f7ff ff2e 	bl	8003b10 <__exponent>
 8003cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cb6:	1813      	adds	r3, r2, r0
 8003cb8:	2a01      	cmp	r2, #1
 8003cba:	4681      	mov	r9, r0
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	dc02      	bgt.n	8003cc6 <_printf_float+0x14e>
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	07d1      	lsls	r1, r2, #31
 8003cc4:	d501      	bpl.n	8003cca <_printf_float+0x152>
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0a5      	beq.n	8003c1e <_printf_float+0xa6>
 8003cd2:	232d      	movs	r3, #45	; 0x2d
 8003cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd8:	e7a1      	b.n	8003c1e <_printf_float+0xa6>
 8003cda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003cde:	f000 8177 	beq.w	8003fd0 <_printf_float+0x458>
 8003ce2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ce6:	d1bb      	bne.n	8003c60 <_printf_float+0xe8>
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d1b9      	bne.n	8003c60 <_printf_float+0xe8>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e7b6      	b.n	8003c5e <_printf_float+0xe6>
 8003cf0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003cf4:	d119      	bne.n	8003d2a <_printf_float+0x1b2>
 8003cf6:	2900      	cmp	r1, #0
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	dd0c      	ble.n	8003d16 <_printf_float+0x19e>
 8003cfc:	6121      	str	r1, [r4, #16]
 8003cfe:	b913      	cbnz	r3, 8003d06 <_printf_float+0x18e>
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	07d2      	lsls	r2, r2, #31
 8003d04:	d502      	bpl.n	8003d0c <_printf_float+0x194>
 8003d06:	3301      	adds	r3, #1
 8003d08:	440b      	add	r3, r1
 8003d0a:	6123      	str	r3, [r4, #16]
 8003d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d10:	f04f 0900 	mov.w	r9, #0
 8003d14:	e7d9      	b.n	8003cca <_printf_float+0x152>
 8003d16:	b913      	cbnz	r3, 8003d1e <_printf_float+0x1a6>
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	07d0      	lsls	r0, r2, #31
 8003d1c:	d501      	bpl.n	8003d22 <_printf_float+0x1aa>
 8003d1e:	3302      	adds	r3, #2
 8003d20:	e7f3      	b.n	8003d0a <_printf_float+0x192>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7f1      	b.n	8003d0a <_printf_float+0x192>
 8003d26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003d2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	db05      	blt.n	8003d3e <_printf_float+0x1c6>
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	07d1      	lsls	r1, r2, #31
 8003d38:	d5e8      	bpl.n	8003d0c <_printf_float+0x194>
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	e7e5      	b.n	8003d0a <_printf_float+0x192>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfd4      	ite	le
 8003d42:	f1c3 0302 	rsble	r3, r3, #2
 8003d46:	2301      	movgt	r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	e7de      	b.n	8003d0a <_printf_float+0x192>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	055a      	lsls	r2, r3, #21
 8003d50:	d407      	bmi.n	8003d62 <_printf_float+0x1ea>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	4642      	mov	r2, r8
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d12b      	bne.n	8003db8 <_printf_float+0x240>
 8003d60:	e767      	b.n	8003c32 <_printf_float+0xba>
 8003d62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003d66:	f240 80dc 	bls.w	8003f22 <_printf_float+0x3aa>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d72:	f7fc fef9 	bl	8000b68 <__aeabi_dcmpeq>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d033      	beq.n	8003de2 <_printf_float+0x26a>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <_printf_float+0x30c>)
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f af54 	beq.w	8003c32 <_printf_float+0xba>
 8003d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	db02      	blt.n	8003d98 <_printf_float+0x220>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	07d8      	lsls	r0, r3, #31
 8003d96:	d50f      	bpl.n	8003db8 <_printf_float+0x240>
 8003d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	f43f af45 	beq.w	8003c32 <_printf_float+0xba>
 8003da8:	f04f 0800 	mov.w	r8, #0
 8003dac:	f104 091a 	add.w	r9, r4, #26
 8003db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	4543      	cmp	r3, r8
 8003db6:	dc09      	bgt.n	8003dcc <_printf_float+0x254>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	079b      	lsls	r3, r3, #30
 8003dbc:	f100 8103 	bmi.w	8003fc6 <_printf_float+0x44e>
 8003dc0:	68e0      	ldr	r0, [r4, #12]
 8003dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	bfb8      	it	lt
 8003dc8:	4618      	movlt	r0, r3
 8003dca:	e734      	b.n	8003c36 <_printf_float+0xbe>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	464a      	mov	r2, r9
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	f43f af2b 	beq.w	8003c32 <_printf_float+0xba>
 8003ddc:	f108 0801 	add.w	r8, r8, #1
 8003de0:	e7e6      	b.n	8003db0 <_printf_float+0x238>
 8003de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dc2b      	bgt.n	8003e40 <_printf_float+0x2c8>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <_printf_float+0x30c>)
 8003dec:	4631      	mov	r1, r6
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	f43f af1d 	beq.w	8003c32 <_printf_float+0xba>
 8003df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfa:	b923      	cbnz	r3, 8003e06 <_printf_float+0x28e>
 8003dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dfe:	b913      	cbnz	r3, 8003e06 <_printf_float+0x28e>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	07d9      	lsls	r1, r3, #31
 8003e04:	d5d8      	bpl.n	8003db8 <_printf_float+0x240>
 8003e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f af0e 	beq.w	8003c32 <_printf_float+0xba>
 8003e16:	f04f 0900 	mov.w	r9, #0
 8003e1a:	f104 0a1a 	add.w	sl, r4, #26
 8003e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e20:	425b      	negs	r3, r3
 8003e22:	454b      	cmp	r3, r9
 8003e24:	dc01      	bgt.n	8003e2a <_printf_float+0x2b2>
 8003e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e28:	e794      	b.n	8003d54 <_printf_float+0x1dc>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	f43f aefc 	beq.w	8003c32 <_printf_float+0xba>
 8003e3a:	f109 0901 	add.w	r9, r9, #1
 8003e3e:	e7ee      	b.n	8003e1e <_printf_float+0x2a6>
 8003e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e44:	429a      	cmp	r2, r3
 8003e46:	bfa8      	it	ge
 8003e48:	461a      	movge	r2, r3
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	4691      	mov	r9, r2
 8003e4e:	dd07      	ble.n	8003e60 <_printf_float+0x2e8>
 8003e50:	4613      	mov	r3, r2
 8003e52:	4631      	mov	r1, r6
 8003e54:	4642      	mov	r2, r8
 8003e56:	4628      	mov	r0, r5
 8003e58:	47b8      	blx	r7
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	f43f aee9 	beq.w	8003c32 <_printf_float+0xba>
 8003e60:	f104 031a 	add.w	r3, r4, #26
 8003e64:	f04f 0b00 	mov.w	fp, #0
 8003e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e6c:	9306      	str	r3, [sp, #24]
 8003e6e:	e015      	b.n	8003e9c <_printf_float+0x324>
 8003e70:	7fefffff 	.word	0x7fefffff
 8003e74:	080088b4 	.word	0x080088b4
 8003e78:	080088b0 	.word	0x080088b0
 8003e7c:	080088bc 	.word	0x080088bc
 8003e80:	080088b8 	.word	0x080088b8
 8003e84:	080088c0 	.word	0x080088c0
 8003e88:	2301      	movs	r3, #1
 8003e8a:	9a06      	ldr	r2, [sp, #24]
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f aecd 	beq.w	8003c32 <_printf_float+0xba>
 8003e98:	f10b 0b01 	add.w	fp, fp, #1
 8003e9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003ea0:	ebaa 0309 	sub.w	r3, sl, r9
 8003ea4:	455b      	cmp	r3, fp
 8003ea6:	dcef      	bgt.n	8003e88 <_printf_float+0x310>
 8003ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eac:	429a      	cmp	r2, r3
 8003eae:	44d0      	add	r8, sl
 8003eb0:	db15      	blt.n	8003ede <_printf_float+0x366>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	07da      	lsls	r2, r3, #31
 8003eb6:	d412      	bmi.n	8003ede <_printf_float+0x366>
 8003eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ebc:	eba3 020a 	sub.w	r2, r3, sl
 8003ec0:	eba3 0a01 	sub.w	sl, r3, r1
 8003ec4:	4592      	cmp	sl, r2
 8003ec6:	bfa8      	it	ge
 8003ec8:	4692      	movge	sl, r2
 8003eca:	f1ba 0f00 	cmp.w	sl, #0
 8003ece:	dc0e      	bgt.n	8003eee <_printf_float+0x376>
 8003ed0:	f04f 0800 	mov.w	r8, #0
 8003ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ed8:	f104 091a 	add.w	r9, r4, #26
 8003edc:	e019      	b.n	8003f12 <_printf_float+0x39a>
 8003ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d1e5      	bne.n	8003eb8 <_printf_float+0x340>
 8003eec:	e6a1      	b.n	8003c32 <_printf_float+0xba>
 8003eee:	4653      	mov	r3, sl
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b8      	blx	r7
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d1e9      	bne.n	8003ed0 <_printf_float+0x358>
 8003efc:	e699      	b.n	8003c32 <_printf_float+0xba>
 8003efe:	2301      	movs	r3, #1
 8003f00:	464a      	mov	r2, r9
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f43f ae92 	beq.w	8003c32 <_printf_float+0xba>
 8003f0e:	f108 0801 	add.w	r8, r8, #1
 8003f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	eba3 030a 	sub.w	r3, r3, sl
 8003f1c:	4543      	cmp	r3, r8
 8003f1e:	dcee      	bgt.n	8003efe <_printf_float+0x386>
 8003f20:	e74a      	b.n	8003db8 <_printf_float+0x240>
 8003f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f24:	2a01      	cmp	r2, #1
 8003f26:	dc01      	bgt.n	8003f2c <_printf_float+0x3b4>
 8003f28:	07db      	lsls	r3, r3, #31
 8003f2a:	d53a      	bpl.n	8003fa2 <_printf_float+0x42a>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4642      	mov	r2, r8
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	f43f ae7b 	beq.w	8003c32 <_printf_float+0xba>
 8003f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f108 0801 	add.w	r8, r8, #1
 8003f4c:	f43f ae71 	beq.w	8003c32 <_printf_float+0xba>
 8003f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f52:	2200      	movs	r2, #0
 8003f54:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8003f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f7fc fe03 	bl	8000b68 <__aeabi_dcmpeq>
 8003f62:	b9c8      	cbnz	r0, 8003f98 <_printf_float+0x420>
 8003f64:	4653      	mov	r3, sl
 8003f66:	4642      	mov	r2, r8
 8003f68:	4631      	mov	r1, r6
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	47b8      	blx	r7
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d10e      	bne.n	8003f90 <_printf_float+0x418>
 8003f72:	e65e      	b.n	8003c32 <_printf_float+0xba>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4652      	mov	r2, sl
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	47b8      	blx	r7
 8003f7e:	3001      	adds	r0, #1
 8003f80:	f43f ae57 	beq.w	8003c32 <_printf_float+0xba>
 8003f84:	f108 0801 	add.w	r8, r8, #1
 8003f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4543      	cmp	r3, r8
 8003f8e:	dcf1      	bgt.n	8003f74 <_printf_float+0x3fc>
 8003f90:	464b      	mov	r3, r9
 8003f92:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f96:	e6de      	b.n	8003d56 <_printf_float+0x1de>
 8003f98:	f04f 0800 	mov.w	r8, #0
 8003f9c:	f104 0a1a 	add.w	sl, r4, #26
 8003fa0:	e7f2      	b.n	8003f88 <_printf_float+0x410>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e7df      	b.n	8003f66 <_printf_float+0x3ee>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	464a      	mov	r2, r9
 8003faa:	4631      	mov	r1, r6
 8003fac:	4628      	mov	r0, r5
 8003fae:	47b8      	blx	r7
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	f43f ae3e 	beq.w	8003c32 <_printf_float+0xba>
 8003fb6:	f108 0801 	add.w	r8, r8, #1
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	4543      	cmp	r3, r8
 8003fc2:	dcf0      	bgt.n	8003fa6 <_printf_float+0x42e>
 8003fc4:	e6fc      	b.n	8003dc0 <_printf_float+0x248>
 8003fc6:	f04f 0800 	mov.w	r8, #0
 8003fca:	f104 0919 	add.w	r9, r4, #25
 8003fce:	e7f4      	b.n	8003fba <_printf_float+0x442>
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	f43f ae8b 	beq.w	8003cec <_printf_float+0x174>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003fdc:	ab09      	add	r3, sp, #36	; 0x24
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	ec49 8b10 	vmov	d0, r8, r9
 8003fe4:	6022      	str	r2, [r4, #0]
 8003fe6:	f8cd a004 	str.w	sl, [sp, #4]
 8003fea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7ff fd2d 	bl	8003a4e <__cvt>
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	e648      	b.n	8003c8a <_printf_float+0x112>

08003ff8 <_printf_common>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	4691      	mov	r9, r2
 8003ffe:	461f      	mov	r7, r3
 8004000:	688a      	ldr	r2, [r1, #8]
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004008:	4293      	cmp	r3, r2
 800400a:	bfb8      	it	lt
 800400c:	4613      	movlt	r3, r2
 800400e:	f8c9 3000 	str.w	r3, [r9]
 8004012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	b112      	cbz	r2, 8004022 <_printf_common+0x2a>
 800401c:	3301      	adds	r3, #1
 800401e:	f8c9 3000 	str.w	r3, [r9]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0699      	lsls	r1, r3, #26
 8004026:	bf42      	ittt	mi
 8004028:	f8d9 3000 	ldrmi.w	r3, [r9]
 800402c:	3302      	addmi	r3, #2
 800402e:	f8c9 3000 	strmi.w	r3, [r9]
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	f015 0506 	ands.w	r5, r5, #6
 8004038:	d107      	bne.n	800404a <_printf_common+0x52>
 800403a:	f104 0a19 	add.w	sl, r4, #25
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	f8d9 2000 	ldr.w	r2, [r9]
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	42ab      	cmp	r3, r5
 8004048:	dc28      	bgt.n	800409c <_printf_common+0xa4>
 800404a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	3300      	adds	r3, #0
 8004052:	bf18      	it	ne
 8004054:	2301      	movne	r3, #1
 8004056:	0692      	lsls	r2, r2, #26
 8004058:	d42d      	bmi.n	80040b6 <_printf_common+0xbe>
 800405a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405e:	4639      	mov	r1, r7
 8004060:	4630      	mov	r0, r6
 8004062:	47c0      	blx	r8
 8004064:	3001      	adds	r0, #1
 8004066:	d020      	beq.n	80040aa <_printf_common+0xb2>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	68e5      	ldr	r5, [r4, #12]
 800406c:	f8d9 2000 	ldr.w	r2, [r9]
 8004070:	f003 0306 	and.w	r3, r3, #6
 8004074:	2b04      	cmp	r3, #4
 8004076:	bf08      	it	eq
 8004078:	1aad      	subeq	r5, r5, r2
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	bf0c      	ite	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	2500      	movne	r5, #0
 8004086:	4293      	cmp	r3, r2
 8004088:	bfc4      	itt	gt
 800408a:	1a9b      	subgt	r3, r3, r2
 800408c:	18ed      	addgt	r5, r5, r3
 800408e:	f04f 0900 	mov.w	r9, #0
 8004092:	341a      	adds	r4, #26
 8004094:	454d      	cmp	r5, r9
 8004096:	d11a      	bne.n	80040ce <_printf_common+0xd6>
 8004098:	2000      	movs	r0, #0
 800409a:	e008      	b.n	80040ae <_printf_common+0xb6>
 800409c:	2301      	movs	r3, #1
 800409e:	4652      	mov	r2, sl
 80040a0:	4639      	mov	r1, r7
 80040a2:	4630      	mov	r0, r6
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d103      	bne.n	80040b2 <_printf_common+0xba>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b2:	3501      	adds	r5, #1
 80040b4:	e7c3      	b.n	800403e <_printf_common+0x46>
 80040b6:	18e1      	adds	r1, r4, r3
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	2030      	movs	r0, #48	; 0x30
 80040bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c0:	4422      	add	r2, r4
 80040c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ca:	3302      	adds	r3, #2
 80040cc:	e7c5      	b.n	800405a <_printf_common+0x62>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4622      	mov	r2, r4
 80040d2:	4639      	mov	r1, r7
 80040d4:	4630      	mov	r0, r6
 80040d6:	47c0      	blx	r8
 80040d8:	3001      	adds	r0, #1
 80040da:	d0e6      	beq.n	80040aa <_printf_common+0xb2>
 80040dc:	f109 0901 	add.w	r9, r9, #1
 80040e0:	e7d8      	b.n	8004094 <_printf_common+0x9c>
	...

080040e4 <_printf_i>:
 80040e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040ec:	460c      	mov	r4, r1
 80040ee:	7e09      	ldrb	r1, [r1, #24]
 80040f0:	b085      	sub	sp, #20
 80040f2:	296e      	cmp	r1, #110	; 0x6e
 80040f4:	4617      	mov	r7, r2
 80040f6:	4606      	mov	r6, r0
 80040f8:	4698      	mov	r8, r3
 80040fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040fc:	f000 80b3 	beq.w	8004266 <_printf_i+0x182>
 8004100:	d822      	bhi.n	8004148 <_printf_i+0x64>
 8004102:	2963      	cmp	r1, #99	; 0x63
 8004104:	d036      	beq.n	8004174 <_printf_i+0x90>
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x3a>
 8004108:	2900      	cmp	r1, #0
 800410a:	f000 80b9 	beq.w	8004280 <_printf_i+0x19c>
 800410e:	2958      	cmp	r1, #88	; 0x58
 8004110:	f000 8083 	beq.w	800421a <_printf_i+0x136>
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800411c:	e032      	b.n	8004184 <_printf_i+0xa0>
 800411e:	2964      	cmp	r1, #100	; 0x64
 8004120:	d001      	beq.n	8004126 <_printf_i+0x42>
 8004122:	2969      	cmp	r1, #105	; 0x69
 8004124:	d1f6      	bne.n	8004114 <_printf_i+0x30>
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	0605      	lsls	r5, r0, #24
 800412c:	f103 0104 	add.w	r1, r3, #4
 8004130:	d52a      	bpl.n	8004188 <_printf_i+0xa4>
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da03      	bge.n	8004142 <_printf_i+0x5e>
 800413a:	222d      	movs	r2, #45	; 0x2d
 800413c:	425b      	negs	r3, r3
 800413e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004142:	486f      	ldr	r0, [pc, #444]	; (8004300 <_printf_i+0x21c>)
 8004144:	220a      	movs	r2, #10
 8004146:	e039      	b.n	80041bc <_printf_i+0xd8>
 8004148:	2973      	cmp	r1, #115	; 0x73
 800414a:	f000 809d 	beq.w	8004288 <_printf_i+0x1a4>
 800414e:	d808      	bhi.n	8004162 <_printf_i+0x7e>
 8004150:	296f      	cmp	r1, #111	; 0x6f
 8004152:	d020      	beq.n	8004196 <_printf_i+0xb2>
 8004154:	2970      	cmp	r1, #112	; 0x70
 8004156:	d1dd      	bne.n	8004114 <_printf_i+0x30>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f043 0320 	orr.w	r3, r3, #32
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	e003      	b.n	800416a <_printf_i+0x86>
 8004162:	2975      	cmp	r1, #117	; 0x75
 8004164:	d017      	beq.n	8004196 <_printf_i+0xb2>
 8004166:	2978      	cmp	r1, #120	; 0x78
 8004168:	d1d4      	bne.n	8004114 <_printf_i+0x30>
 800416a:	2378      	movs	r3, #120	; 0x78
 800416c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004170:	4864      	ldr	r0, [pc, #400]	; (8004304 <_printf_i+0x220>)
 8004172:	e055      	b.n	8004220 <_printf_i+0x13c>
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	1d19      	adds	r1, r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6011      	str	r1, [r2, #0]
 800417c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004184:	2301      	movs	r3, #1
 8004186:	e08c      	b.n	80042a2 <_printf_i+0x1be>
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6011      	str	r1, [r2, #0]
 800418c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004190:	bf18      	it	ne
 8004192:	b21b      	sxthne	r3, r3
 8004194:	e7cf      	b.n	8004136 <_printf_i+0x52>
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	6825      	ldr	r5, [r4, #0]
 800419a:	1d18      	adds	r0, r3, #4
 800419c:	6010      	str	r0, [r2, #0]
 800419e:	0628      	lsls	r0, r5, #24
 80041a0:	d501      	bpl.n	80041a6 <_printf_i+0xc2>
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	e002      	b.n	80041ac <_printf_i+0xc8>
 80041a6:	0668      	lsls	r0, r5, #25
 80041a8:	d5fb      	bpl.n	80041a2 <_printf_i+0xbe>
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	4854      	ldr	r0, [pc, #336]	; (8004300 <_printf_i+0x21c>)
 80041ae:	296f      	cmp	r1, #111	; 0x6f
 80041b0:	bf14      	ite	ne
 80041b2:	220a      	movne	r2, #10
 80041b4:	2208      	moveq	r2, #8
 80041b6:	2100      	movs	r1, #0
 80041b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041bc:	6865      	ldr	r5, [r4, #4]
 80041be:	60a5      	str	r5, [r4, #8]
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	f2c0 8095 	blt.w	80042f0 <_printf_i+0x20c>
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	f021 0104 	bic.w	r1, r1, #4
 80041cc:	6021      	str	r1, [r4, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13d      	bne.n	800424e <_printf_i+0x16a>
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	f040 808e 	bne.w	80042f4 <_printf_i+0x210>
 80041d8:	4665      	mov	r5, ip
 80041da:	2a08      	cmp	r2, #8
 80041dc:	d10b      	bne.n	80041f6 <_printf_i+0x112>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	07db      	lsls	r3, r3, #31
 80041e2:	d508      	bpl.n	80041f6 <_printf_i+0x112>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bfde      	ittt	le
 80041ec:	2330      	movle	r3, #48	; 0x30
 80041ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041f6:	ebac 0305 	sub.w	r3, ip, r5
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	f8cd 8000 	str.w	r8, [sp]
 8004200:	463b      	mov	r3, r7
 8004202:	aa03      	add	r2, sp, #12
 8004204:	4621      	mov	r1, r4
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff fef6 	bl	8003ff8 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	d14d      	bne.n	80042ac <_printf_i+0x1c8>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004214:	b005      	add	sp, #20
 8004216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421a:	4839      	ldr	r0, [pc, #228]	; (8004300 <_printf_i+0x21c>)
 800421c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	6821      	ldr	r1, [r4, #0]
 8004224:	1d1d      	adds	r5, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6015      	str	r5, [r2, #0]
 800422a:	060a      	lsls	r2, r1, #24
 800422c:	d50b      	bpl.n	8004246 <_printf_i+0x162>
 800422e:	07ca      	lsls	r2, r1, #31
 8004230:	bf44      	itt	mi
 8004232:	f041 0120 	orrmi.w	r1, r1, #32
 8004236:	6021      	strmi	r1, [r4, #0]
 8004238:	b91b      	cbnz	r3, 8004242 <_printf_i+0x15e>
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	f022 0220 	bic.w	r2, r2, #32
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	e7b7      	b.n	80041b6 <_printf_i+0xd2>
 8004246:	064d      	lsls	r5, r1, #25
 8004248:	bf48      	it	mi
 800424a:	b29b      	uxthmi	r3, r3
 800424c:	e7ef      	b.n	800422e <_printf_i+0x14a>
 800424e:	4665      	mov	r5, ip
 8004250:	fbb3 f1f2 	udiv	r1, r3, r2
 8004254:	fb02 3311 	mls	r3, r2, r1, r3
 8004258:	5cc3      	ldrb	r3, [r0, r3]
 800425a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800425e:	460b      	mov	r3, r1
 8004260:	2900      	cmp	r1, #0
 8004262:	d1f5      	bne.n	8004250 <_printf_i+0x16c>
 8004264:	e7b9      	b.n	80041da <_printf_i+0xf6>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	6961      	ldr	r1, [r4, #20]
 800426c:	1d18      	adds	r0, r3, #4
 800426e:	6010      	str	r0, [r2, #0]
 8004270:	0628      	lsls	r0, r5, #24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0x196>
 8004276:	6019      	str	r1, [r3, #0]
 8004278:	e002      	b.n	8004280 <_printf_i+0x19c>
 800427a:	066a      	lsls	r2, r5, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0x192>
 800427e:	8019      	strh	r1, [r3, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	4665      	mov	r5, ip
 8004286:	e7b9      	b.n	80041fc <_printf_i+0x118>
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	1d19      	adds	r1, r3, #4
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	681d      	ldr	r5, [r3, #0]
 8004290:	6862      	ldr	r2, [r4, #4]
 8004292:	2100      	movs	r1, #0
 8004294:	4628      	mov	r0, r5
 8004296:	f7fb fff3 	bl	8000280 <memchr>
 800429a:	b108      	cbz	r0, 80042a0 <_printf_i+0x1bc>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	6060      	str	r0, [r4, #4]
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	e7a7      	b.n	80041fc <_printf_i+0x118>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	462a      	mov	r2, r5
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0aa      	beq.n	8004210 <_printf_i+0x12c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	079b      	lsls	r3, r3, #30
 80042be:	d413      	bmi.n	80042e8 <_printf_i+0x204>
 80042c0:	68e0      	ldr	r0, [r4, #12]
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	4298      	cmp	r0, r3
 80042c6:	bfb8      	it	lt
 80042c8:	4618      	movlt	r0, r3
 80042ca:	e7a3      	b.n	8004214 <_printf_i+0x130>
 80042cc:	2301      	movs	r3, #1
 80042ce:	464a      	mov	r2, r9
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d09a      	beq.n	8004210 <_printf_i+0x12c>
 80042da:	3501      	adds	r5, #1
 80042dc:	68e3      	ldr	r3, [r4, #12]
 80042de:	9a03      	ldr	r2, [sp, #12]
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	42ab      	cmp	r3, r5
 80042e4:	dcf2      	bgt.n	80042cc <_printf_i+0x1e8>
 80042e6:	e7eb      	b.n	80042c0 <_printf_i+0x1dc>
 80042e8:	2500      	movs	r5, #0
 80042ea:	f104 0919 	add.w	r9, r4, #25
 80042ee:	e7f5      	b.n	80042dc <_printf_i+0x1f8>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ac      	bne.n	800424e <_printf_i+0x16a>
 80042f4:	7803      	ldrb	r3, [r0, #0]
 80042f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042fe:	e76c      	b.n	80041da <_printf_i+0xf6>
 8004300:	080088c2 	.word	0x080088c2
 8004304:	080088d3 	.word	0x080088d3

08004308 <_scanf_float>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	469a      	mov	sl, r3
 800430e:	688b      	ldr	r3, [r1, #8]
 8004310:	4616      	mov	r6, r2
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004318:	b087      	sub	sp, #28
 800431a:	bf83      	ittte	hi
 800431c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004320:	189b      	addhi	r3, r3, r2
 8004322:	9301      	strhi	r3, [sp, #4]
 8004324:	2300      	movls	r3, #0
 8004326:	bf86      	itte	hi
 8004328:	f240 135d 	movwhi	r3, #349	; 0x15d
 800432c:	608b      	strhi	r3, [r1, #8]
 800432e:	9301      	strls	r3, [sp, #4]
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	4688      	mov	r8, r1
 8004334:	f04f 0b00 	mov.w	fp, #0
 8004338:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800433c:	f848 3b1c 	str.w	r3, [r8], #28
 8004340:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004344:	4607      	mov	r7, r0
 8004346:	460c      	mov	r4, r1
 8004348:	4645      	mov	r5, r8
 800434a:	465a      	mov	r2, fp
 800434c:	46d9      	mov	r9, fp
 800434e:	f8cd b008 	str.w	fp, [sp, #8]
 8004352:	68a1      	ldr	r1, [r4, #8]
 8004354:	b181      	cbz	r1, 8004378 <_scanf_float+0x70>
 8004356:	6833      	ldr	r3, [r6, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b49      	cmp	r3, #73	; 0x49
 800435c:	d071      	beq.n	8004442 <_scanf_float+0x13a>
 800435e:	d84d      	bhi.n	80043fc <_scanf_float+0xf4>
 8004360:	2b39      	cmp	r3, #57	; 0x39
 8004362:	d840      	bhi.n	80043e6 <_scanf_float+0xde>
 8004364:	2b31      	cmp	r3, #49	; 0x31
 8004366:	f080 8088 	bcs.w	800447a <_scanf_float+0x172>
 800436a:	2b2d      	cmp	r3, #45	; 0x2d
 800436c:	f000 8090 	beq.w	8004490 <_scanf_float+0x188>
 8004370:	d815      	bhi.n	800439e <_scanf_float+0x96>
 8004372:	2b2b      	cmp	r3, #43	; 0x2b
 8004374:	f000 808c 	beq.w	8004490 <_scanf_float+0x188>
 8004378:	f1b9 0f00 	cmp.w	r9, #0
 800437c:	d003      	beq.n	8004386 <_scanf_float+0x7e>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	3a01      	subs	r2, #1
 8004388:	2a01      	cmp	r2, #1
 800438a:	f200 80ea 	bhi.w	8004562 <_scanf_float+0x25a>
 800438e:	4545      	cmp	r5, r8
 8004390:	f200 80dc 	bhi.w	800454c <_scanf_float+0x244>
 8004394:	2601      	movs	r6, #1
 8004396:	4630      	mov	r0, r6
 8004398:	b007      	add	sp, #28
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	2b2e      	cmp	r3, #46	; 0x2e
 80043a0:	f000 809f 	beq.w	80044e2 <_scanf_float+0x1da>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d1e7      	bne.n	8004378 <_scanf_float+0x70>
 80043a8:	6820      	ldr	r0, [r4, #0]
 80043aa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80043ae:	d064      	beq.n	800447a <_scanf_float+0x172>
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80043b6:	6020      	str	r0, [r4, #0]
 80043b8:	f109 0901 	add.w	r9, r9, #1
 80043bc:	b11b      	cbz	r3, 80043c6 <_scanf_float+0xbe>
 80043be:	3b01      	subs	r3, #1
 80043c0:	3101      	adds	r1, #1
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	60a1      	str	r1, [r4, #8]
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	3301      	adds	r3, #1
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	6873      	ldr	r3, [r6, #4]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	6073      	str	r3, [r6, #4]
 80043da:	f340 80ac 	ble.w	8004536 <_scanf_float+0x22e>
 80043de:	6833      	ldr	r3, [r6, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	6033      	str	r3, [r6, #0]
 80043e4:	e7b5      	b.n	8004352 <_scanf_float+0x4a>
 80043e6:	2b45      	cmp	r3, #69	; 0x45
 80043e8:	f000 8085 	beq.w	80044f6 <_scanf_float+0x1ee>
 80043ec:	2b46      	cmp	r3, #70	; 0x46
 80043ee:	d06a      	beq.n	80044c6 <_scanf_float+0x1be>
 80043f0:	2b41      	cmp	r3, #65	; 0x41
 80043f2:	d1c1      	bne.n	8004378 <_scanf_float+0x70>
 80043f4:	2a01      	cmp	r2, #1
 80043f6:	d1bf      	bne.n	8004378 <_scanf_float+0x70>
 80043f8:	2202      	movs	r2, #2
 80043fa:	e046      	b.n	800448a <_scanf_float+0x182>
 80043fc:	2b65      	cmp	r3, #101	; 0x65
 80043fe:	d07a      	beq.n	80044f6 <_scanf_float+0x1ee>
 8004400:	d818      	bhi.n	8004434 <_scanf_float+0x12c>
 8004402:	2b54      	cmp	r3, #84	; 0x54
 8004404:	d066      	beq.n	80044d4 <_scanf_float+0x1cc>
 8004406:	d811      	bhi.n	800442c <_scanf_float+0x124>
 8004408:	2b4e      	cmp	r3, #78	; 0x4e
 800440a:	d1b5      	bne.n	8004378 <_scanf_float+0x70>
 800440c:	2a00      	cmp	r2, #0
 800440e:	d146      	bne.n	800449e <_scanf_float+0x196>
 8004410:	f1b9 0f00 	cmp.w	r9, #0
 8004414:	d145      	bne.n	80044a2 <_scanf_float+0x19a>
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800441c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004420:	d13f      	bne.n	80044a2 <_scanf_float+0x19a>
 8004422:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004426:	6021      	str	r1, [r4, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	e02e      	b.n	800448a <_scanf_float+0x182>
 800442c:	2b59      	cmp	r3, #89	; 0x59
 800442e:	d01e      	beq.n	800446e <_scanf_float+0x166>
 8004430:	2b61      	cmp	r3, #97	; 0x61
 8004432:	e7de      	b.n	80043f2 <_scanf_float+0xea>
 8004434:	2b6e      	cmp	r3, #110	; 0x6e
 8004436:	d0e9      	beq.n	800440c <_scanf_float+0x104>
 8004438:	d815      	bhi.n	8004466 <_scanf_float+0x15e>
 800443a:	2b66      	cmp	r3, #102	; 0x66
 800443c:	d043      	beq.n	80044c6 <_scanf_float+0x1be>
 800443e:	2b69      	cmp	r3, #105	; 0x69
 8004440:	d19a      	bne.n	8004378 <_scanf_float+0x70>
 8004442:	f1bb 0f00 	cmp.w	fp, #0
 8004446:	d138      	bne.n	80044ba <_scanf_float+0x1b2>
 8004448:	f1b9 0f00 	cmp.w	r9, #0
 800444c:	d197      	bne.n	800437e <_scanf_float+0x76>
 800444e:	6821      	ldr	r1, [r4, #0]
 8004450:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004454:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004458:	d195      	bne.n	8004386 <_scanf_float+0x7e>
 800445a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800445e:	6021      	str	r1, [r4, #0]
 8004460:	f04f 0b01 	mov.w	fp, #1
 8004464:	e011      	b.n	800448a <_scanf_float+0x182>
 8004466:	2b74      	cmp	r3, #116	; 0x74
 8004468:	d034      	beq.n	80044d4 <_scanf_float+0x1cc>
 800446a:	2b79      	cmp	r3, #121	; 0x79
 800446c:	d184      	bne.n	8004378 <_scanf_float+0x70>
 800446e:	f1bb 0f07 	cmp.w	fp, #7
 8004472:	d181      	bne.n	8004378 <_scanf_float+0x70>
 8004474:	f04f 0b08 	mov.w	fp, #8
 8004478:	e007      	b.n	800448a <_scanf_float+0x182>
 800447a:	eb12 0f0b 	cmn.w	r2, fp
 800447e:	f47f af7b 	bne.w	8004378 <_scanf_float+0x70>
 8004482:	6821      	ldr	r1, [r4, #0]
 8004484:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004488:	6021      	str	r1, [r4, #0]
 800448a:	702b      	strb	r3, [r5, #0]
 800448c:	3501      	adds	r5, #1
 800448e:	e79a      	b.n	80043c6 <_scanf_float+0xbe>
 8004490:	6821      	ldr	r1, [r4, #0]
 8004492:	0608      	lsls	r0, r1, #24
 8004494:	f57f af70 	bpl.w	8004378 <_scanf_float+0x70>
 8004498:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800449c:	e7f4      	b.n	8004488 <_scanf_float+0x180>
 800449e:	2a02      	cmp	r2, #2
 80044a0:	d047      	beq.n	8004532 <_scanf_float+0x22a>
 80044a2:	f1bb 0f01 	cmp.w	fp, #1
 80044a6:	d003      	beq.n	80044b0 <_scanf_float+0x1a8>
 80044a8:	f1bb 0f04 	cmp.w	fp, #4
 80044ac:	f47f af64 	bne.w	8004378 <_scanf_float+0x70>
 80044b0:	f10b 0b01 	add.w	fp, fp, #1
 80044b4:	fa5f fb8b 	uxtb.w	fp, fp
 80044b8:	e7e7      	b.n	800448a <_scanf_float+0x182>
 80044ba:	f1bb 0f03 	cmp.w	fp, #3
 80044be:	d0f7      	beq.n	80044b0 <_scanf_float+0x1a8>
 80044c0:	f1bb 0f05 	cmp.w	fp, #5
 80044c4:	e7f2      	b.n	80044ac <_scanf_float+0x1a4>
 80044c6:	f1bb 0f02 	cmp.w	fp, #2
 80044ca:	f47f af55 	bne.w	8004378 <_scanf_float+0x70>
 80044ce:	f04f 0b03 	mov.w	fp, #3
 80044d2:	e7da      	b.n	800448a <_scanf_float+0x182>
 80044d4:	f1bb 0f06 	cmp.w	fp, #6
 80044d8:	f47f af4e 	bne.w	8004378 <_scanf_float+0x70>
 80044dc:	f04f 0b07 	mov.w	fp, #7
 80044e0:	e7d3      	b.n	800448a <_scanf_float+0x182>
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	0588      	lsls	r0, r1, #22
 80044e6:	f57f af47 	bpl.w	8004378 <_scanf_float+0x70>
 80044ea:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80044ee:	6021      	str	r1, [r4, #0]
 80044f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80044f4:	e7c9      	b.n	800448a <_scanf_float+0x182>
 80044f6:	6821      	ldr	r1, [r4, #0]
 80044f8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80044fc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004500:	d006      	beq.n	8004510 <_scanf_float+0x208>
 8004502:	0548      	lsls	r0, r1, #21
 8004504:	f57f af38 	bpl.w	8004378 <_scanf_float+0x70>
 8004508:	f1b9 0f00 	cmp.w	r9, #0
 800450c:	f43f af3b 	beq.w	8004386 <_scanf_float+0x7e>
 8004510:	0588      	lsls	r0, r1, #22
 8004512:	bf58      	it	pl
 8004514:	9802      	ldrpl	r0, [sp, #8]
 8004516:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800451a:	bf58      	it	pl
 800451c:	eba9 0000 	subpl.w	r0, r9, r0
 8004520:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004524:	bf58      	it	pl
 8004526:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800452a:	6021      	str	r1, [r4, #0]
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	e7ab      	b.n	800448a <_scanf_float+0x182>
 8004532:	2203      	movs	r2, #3
 8004534:	e7a9      	b.n	800448a <_scanf_float+0x182>
 8004536:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800453a:	9205      	str	r2, [sp, #20]
 800453c:	4631      	mov	r1, r6
 800453e:	4638      	mov	r0, r7
 8004540:	4798      	blx	r3
 8004542:	9a05      	ldr	r2, [sp, #20]
 8004544:	2800      	cmp	r0, #0
 8004546:	f43f af04 	beq.w	8004352 <_scanf_float+0x4a>
 800454a:	e715      	b.n	8004378 <_scanf_float+0x70>
 800454c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004550:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004554:	4632      	mov	r2, r6
 8004556:	4638      	mov	r0, r7
 8004558:	4798      	blx	r3
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	3b01      	subs	r3, #1
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	e715      	b.n	800438e <_scanf_float+0x86>
 8004562:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004566:	2b06      	cmp	r3, #6
 8004568:	d80a      	bhi.n	8004580 <_scanf_float+0x278>
 800456a:	f1bb 0f02 	cmp.w	fp, #2
 800456e:	d968      	bls.n	8004642 <_scanf_float+0x33a>
 8004570:	f1ab 0b03 	sub.w	fp, fp, #3
 8004574:	fa5f fb8b 	uxtb.w	fp, fp
 8004578:	eba5 0b0b 	sub.w	fp, r5, fp
 800457c:	455d      	cmp	r5, fp
 800457e:	d14b      	bne.n	8004618 <_scanf_float+0x310>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	05da      	lsls	r2, r3, #23
 8004584:	d51f      	bpl.n	80045c6 <_scanf_float+0x2be>
 8004586:	055b      	lsls	r3, r3, #21
 8004588:	d468      	bmi.n	800465c <_scanf_float+0x354>
 800458a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	2965      	cmp	r1, #101	; 0x65
 8004592:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004596:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	d00d      	beq.n	80045ba <_scanf_float+0x2b2>
 800459e:	2945      	cmp	r1, #69	; 0x45
 80045a0:	d00b      	beq.n	80045ba <_scanf_float+0x2b2>
 80045a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045a6:	4632      	mov	r2, r6
 80045a8:	4638      	mov	r0, r7
 80045aa:	4798      	blx	r3
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	f1a5 0b02 	sub.w	fp, r5, #2
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045be:	4632      	mov	r2, r6
 80045c0:	4638      	mov	r0, r7
 80045c2:	4798      	blx	r3
 80045c4:	465d      	mov	r5, fp
 80045c6:	6826      	ldr	r6, [r4, #0]
 80045c8:	f016 0610 	ands.w	r6, r6, #16
 80045cc:	d17a      	bne.n	80046c4 <_scanf_float+0x3bc>
 80045ce:	702e      	strb	r6, [r5, #0]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d142      	bne.n	8004662 <_scanf_float+0x35a>
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	eba9 0303 	sub.w	r3, r9, r3
 80045e2:	425a      	negs	r2, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d149      	bne.n	800467c <_scanf_float+0x374>
 80045e8:	2200      	movs	r2, #0
 80045ea:	4641      	mov	r1, r8
 80045ec:	4638      	mov	r0, r7
 80045ee:	f000 fea3 	bl	8005338 <_strtod_r>
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	f8da 3000 	ldr.w	r3, [sl]
 80045f8:	f015 0f02 	tst.w	r5, #2
 80045fc:	f103 0204 	add.w	r2, r3, #4
 8004600:	ec59 8b10 	vmov	r8, r9, d0
 8004604:	f8ca 2000 	str.w	r2, [sl]
 8004608:	d043      	beq.n	8004692 <_scanf_float+0x38a>
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	e9c3 8900 	strd	r8, r9, [r3]
 8004610:	68e3      	ldr	r3, [r4, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60e3      	str	r3, [r4, #12]
 8004616:	e6be      	b.n	8004396 <_scanf_float+0x8e>
 8004618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800461c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004620:	4632      	mov	r2, r6
 8004622:	4638      	mov	r0, r7
 8004624:	4798      	blx	r3
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	e7a6      	b.n	800457c <_scanf_float+0x274>
 800462e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004632:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004636:	4632      	mov	r2, r6
 8004638:	4638      	mov	r0, r7
 800463a:	4798      	blx	r3
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	3b01      	subs	r3, #1
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	4545      	cmp	r5, r8
 8004644:	d8f3      	bhi.n	800462e <_scanf_float+0x326>
 8004646:	e6a5      	b.n	8004394 <_scanf_float+0x8c>
 8004648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800464c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004650:	4632      	mov	r2, r6
 8004652:	4638      	mov	r0, r7
 8004654:	4798      	blx	r3
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	3b01      	subs	r3, #1
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	4545      	cmp	r5, r8
 800465e:	d8f3      	bhi.n	8004648 <_scanf_float+0x340>
 8004660:	e698      	b.n	8004394 <_scanf_float+0x8c>
 8004662:	9b03      	ldr	r3, [sp, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0bf      	beq.n	80045e8 <_scanf_float+0x2e0>
 8004668:	9904      	ldr	r1, [sp, #16]
 800466a:	230a      	movs	r3, #10
 800466c:	4632      	mov	r2, r6
 800466e:	3101      	adds	r1, #1
 8004670:	4638      	mov	r0, r7
 8004672:	f000 feed 	bl	8005450 <_strtol_r>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	9d04      	ldr	r5, [sp, #16]
 800467a:	1ac2      	subs	r2, r0, r3
 800467c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004680:	429d      	cmp	r5, r3
 8004682:	bf28      	it	cs
 8004684:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004688:	490f      	ldr	r1, [pc, #60]	; (80046c8 <_scanf_float+0x3c0>)
 800468a:	4628      	mov	r0, r5
 800468c:	f000 f824 	bl	80046d8 <siprintf>
 8004690:	e7aa      	b.n	80045e8 <_scanf_float+0x2e0>
 8004692:	f015 0504 	ands.w	r5, r5, #4
 8004696:	d1b8      	bne.n	800460a <_scanf_float+0x302>
 8004698:	681f      	ldr	r7, [r3, #0]
 800469a:	ee10 2a10 	vmov	r2, s0
 800469e:	464b      	mov	r3, r9
 80046a0:	ee10 0a10 	vmov	r0, s0
 80046a4:	4649      	mov	r1, r9
 80046a6:	f7fc fa91 	bl	8000bcc <__aeabi_dcmpun>
 80046aa:	b128      	cbz	r0, 80046b8 <_scanf_float+0x3b0>
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f80d 	bl	80046cc <nanf>
 80046b2:	ed87 0a00 	vstr	s0, [r7]
 80046b6:	e7ab      	b.n	8004610 <_scanf_float+0x308>
 80046b8:	4640      	mov	r0, r8
 80046ba:	4649      	mov	r1, r9
 80046bc:	f7fc fae4 	bl	8000c88 <__aeabi_d2f>
 80046c0:	6038      	str	r0, [r7, #0]
 80046c2:	e7a5      	b.n	8004610 <_scanf_float+0x308>
 80046c4:	2600      	movs	r6, #0
 80046c6:	e666      	b.n	8004396 <_scanf_float+0x8e>
 80046c8:	080088e4 	.word	0x080088e4

080046cc <nanf>:
 80046cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80046d4 <nanf+0x8>
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	7fc00000 	.word	0x7fc00000

080046d8 <siprintf>:
 80046d8:	b40e      	push	{r1, r2, r3}
 80046da:	b500      	push	{lr}
 80046dc:	b09c      	sub	sp, #112	; 0x70
 80046de:	ab1d      	add	r3, sp, #116	; 0x74
 80046e0:	9002      	str	r0, [sp, #8]
 80046e2:	9006      	str	r0, [sp, #24]
 80046e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <siprintf+0x38>)
 80046ea:	9107      	str	r1, [sp, #28]
 80046ec:	9104      	str	r1, [sp, #16]
 80046ee:	4909      	ldr	r1, [pc, #36]	; (8004714 <siprintf+0x3c>)
 80046f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f4:	9105      	str	r1, [sp, #20]
 80046f6:	6800      	ldr	r0, [r0, #0]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	a902      	add	r1, sp, #8
 80046fc:	f002 fd64 	bl	80071c8 <_svfiprintf_r>
 8004700:	9b02      	ldr	r3, [sp, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	b01c      	add	sp, #112	; 0x70
 8004708:	f85d eb04 	ldr.w	lr, [sp], #4
 800470c:	b003      	add	sp, #12
 800470e:	4770      	bx	lr
 8004710:	2000000c 	.word	0x2000000c
 8004714:	ffff0208 	.word	0xffff0208

08004718 <sulp>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	ec45 4b10 	vmov	d0, r4, r5
 8004722:	4616      	mov	r6, r2
 8004724:	f002 fb0c 	bl	8006d40 <__ulp>
 8004728:	ec51 0b10 	vmov	r0, r1, d0
 800472c:	b17e      	cbz	r6, 800474e <sulp+0x36>
 800472e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004736:	2b00      	cmp	r3, #0
 8004738:	dd09      	ble.n	800474e <sulp+0x36>
 800473a:	051b      	lsls	r3, r3, #20
 800473c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004740:	2400      	movs	r4, #0
 8004742:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	f7fb ffa5 	bl	8000698 <__aeabi_dmul>
 800474e:	bd70      	pop	{r4, r5, r6, pc}

08004750 <_strtod_l>:
 8004750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004754:	461f      	mov	r7, r3
 8004756:	b0a1      	sub	sp, #132	; 0x84
 8004758:	2300      	movs	r3, #0
 800475a:	4681      	mov	r9, r0
 800475c:	4638      	mov	r0, r7
 800475e:	460e      	mov	r6, r1
 8004760:	9217      	str	r2, [sp, #92]	; 0x5c
 8004762:	931c      	str	r3, [sp, #112]	; 0x70
 8004764:	f001 fff5 	bl	8006752 <__localeconv_l>
 8004768:	4680      	mov	r8, r0
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f7fb fd7c 	bl	8000268 <strlen>
 8004770:	f04f 0a00 	mov.w	sl, #0
 8004774:	4604      	mov	r4, r0
 8004776:	f04f 0b00 	mov.w	fp, #0
 800477a:	961b      	str	r6, [sp, #108]	; 0x6c
 800477c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	2a0d      	cmp	r2, #13
 8004782:	d832      	bhi.n	80047ea <_strtod_l+0x9a>
 8004784:	2a09      	cmp	r2, #9
 8004786:	d236      	bcs.n	80047f6 <_strtod_l+0xa6>
 8004788:	2a00      	cmp	r2, #0
 800478a:	d03e      	beq.n	800480a <_strtod_l+0xba>
 800478c:	2300      	movs	r3, #0
 800478e:	930d      	str	r3, [sp, #52]	; 0x34
 8004790:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004792:	782b      	ldrb	r3, [r5, #0]
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	f040 80ac 	bne.w	80048f2 <_strtod_l+0x1a2>
 800479a:	786b      	ldrb	r3, [r5, #1]
 800479c:	2b58      	cmp	r3, #88	; 0x58
 800479e:	d001      	beq.n	80047a4 <_strtod_l+0x54>
 80047a0:	2b78      	cmp	r3, #120	; 0x78
 80047a2:	d167      	bne.n	8004874 <_strtod_l+0x124>
 80047a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	ab1c      	add	r3, sp, #112	; 0x70
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	9702      	str	r7, [sp, #8]
 80047ae:	ab1d      	add	r3, sp, #116	; 0x74
 80047b0:	4a88      	ldr	r2, [pc, #544]	; (80049d4 <_strtod_l+0x284>)
 80047b2:	a91b      	add	r1, sp, #108	; 0x6c
 80047b4:	4648      	mov	r0, r9
 80047b6:	f001 fcf2 	bl	800619e <__gethex>
 80047ba:	f010 0407 	ands.w	r4, r0, #7
 80047be:	4606      	mov	r6, r0
 80047c0:	d005      	beq.n	80047ce <_strtod_l+0x7e>
 80047c2:	2c06      	cmp	r4, #6
 80047c4:	d12b      	bne.n	800481e <_strtod_l+0xce>
 80047c6:	3501      	adds	r5, #1
 80047c8:	2300      	movs	r3, #0
 80047ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80047cc:	930d      	str	r3, [sp, #52]	; 0x34
 80047ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 859a 	bne.w	800530a <_strtod_l+0xbba>
 80047d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047d8:	b1e3      	cbz	r3, 8004814 <_strtod_l+0xc4>
 80047da:	4652      	mov	r2, sl
 80047dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80047e0:	ec43 2b10 	vmov	d0, r2, r3
 80047e4:	b021      	add	sp, #132	; 0x84
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	2a2b      	cmp	r2, #43	; 0x2b
 80047ec:	d015      	beq.n	800481a <_strtod_l+0xca>
 80047ee:	2a2d      	cmp	r2, #45	; 0x2d
 80047f0:	d004      	beq.n	80047fc <_strtod_l+0xac>
 80047f2:	2a20      	cmp	r2, #32
 80047f4:	d1ca      	bne.n	800478c <_strtod_l+0x3c>
 80047f6:	3301      	adds	r3, #1
 80047f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80047fa:	e7bf      	b.n	800477c <_strtod_l+0x2c>
 80047fc:	2201      	movs	r2, #1
 80047fe:	920d      	str	r2, [sp, #52]	; 0x34
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	921b      	str	r2, [sp, #108]	; 0x6c
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1c2      	bne.n	8004790 <_strtod_l+0x40>
 800480a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800480c:	961b      	str	r6, [sp, #108]	; 0x6c
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 8579 	bne.w	8005306 <_strtod_l+0xbb6>
 8004814:	4652      	mov	r2, sl
 8004816:	465b      	mov	r3, fp
 8004818:	e7e2      	b.n	80047e0 <_strtod_l+0x90>
 800481a:	2200      	movs	r2, #0
 800481c:	e7ef      	b.n	80047fe <_strtod_l+0xae>
 800481e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004820:	b13a      	cbz	r2, 8004832 <_strtod_l+0xe2>
 8004822:	2135      	movs	r1, #53	; 0x35
 8004824:	a81e      	add	r0, sp, #120	; 0x78
 8004826:	f002 fb83 	bl	8006f30 <__copybits>
 800482a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800482c:	4648      	mov	r0, r9
 800482e:	f001 ffef 	bl	8006810 <_Bfree>
 8004832:	3c01      	subs	r4, #1
 8004834:	2c04      	cmp	r4, #4
 8004836:	d806      	bhi.n	8004846 <_strtod_l+0xf6>
 8004838:	e8df f004 	tbb	[pc, r4]
 800483c:	1714030a 	.word	0x1714030a
 8004840:	0a          	.byte	0x0a
 8004841:	00          	.byte	0x00
 8004842:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004846:	0730      	lsls	r0, r6, #28
 8004848:	d5c1      	bpl.n	80047ce <_strtod_l+0x7e>
 800484a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800484e:	e7be      	b.n	80047ce <_strtod_l+0x7e>
 8004850:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004854:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004856:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800485a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800485e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004862:	e7f0      	b.n	8004846 <_strtod_l+0xf6>
 8004864:	f8df b170 	ldr.w	fp, [pc, #368]	; 80049d8 <_strtod_l+0x288>
 8004868:	e7ed      	b.n	8004846 <_strtod_l+0xf6>
 800486a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800486e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004872:	e7e8      	b.n	8004846 <_strtod_l+0xf6>
 8004874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	921b      	str	r2, [sp, #108]	; 0x6c
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d0f9      	beq.n	8004874 <_strtod_l+0x124>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0a4      	beq.n	80047ce <_strtod_l+0x7e>
 8004884:	2301      	movs	r3, #1
 8004886:	2500      	movs	r5, #0
 8004888:	9306      	str	r3, [sp, #24]
 800488a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800488c:	9308      	str	r3, [sp, #32]
 800488e:	9507      	str	r5, [sp, #28]
 8004890:	9505      	str	r5, [sp, #20]
 8004892:	220a      	movs	r2, #10
 8004894:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004896:	7807      	ldrb	r7, [r0, #0]
 8004898:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800489c:	b2d9      	uxtb	r1, r3
 800489e:	2909      	cmp	r1, #9
 80048a0:	d929      	bls.n	80048f6 <_strtod_l+0x1a6>
 80048a2:	4622      	mov	r2, r4
 80048a4:	f8d8 1000 	ldr.w	r1, [r8]
 80048a8:	f002 fd96 	bl	80073d8 <strncmp>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d031      	beq.n	8004914 <_strtod_l+0x1c4>
 80048b0:	2000      	movs	r0, #0
 80048b2:	9c05      	ldr	r4, [sp, #20]
 80048b4:	9004      	str	r0, [sp, #16]
 80048b6:	463b      	mov	r3, r7
 80048b8:	4602      	mov	r2, r0
 80048ba:	2b65      	cmp	r3, #101	; 0x65
 80048bc:	d001      	beq.n	80048c2 <_strtod_l+0x172>
 80048be:	2b45      	cmp	r3, #69	; 0x45
 80048c0:	d114      	bne.n	80048ec <_strtod_l+0x19c>
 80048c2:	b924      	cbnz	r4, 80048ce <_strtod_l+0x17e>
 80048c4:	b910      	cbnz	r0, 80048cc <_strtod_l+0x17c>
 80048c6:	9b06      	ldr	r3, [sp, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d09e      	beq.n	800480a <_strtod_l+0xba>
 80048cc:	2400      	movs	r4, #0
 80048ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80048d0:	1c73      	adds	r3, r6, #1
 80048d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80048d4:	7873      	ldrb	r3, [r6, #1]
 80048d6:	2b2b      	cmp	r3, #43	; 0x2b
 80048d8:	d078      	beq.n	80049cc <_strtod_l+0x27c>
 80048da:	2b2d      	cmp	r3, #45	; 0x2d
 80048dc:	d070      	beq.n	80049c0 <_strtod_l+0x270>
 80048de:	f04f 0c00 	mov.w	ip, #0
 80048e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80048e6:	2f09      	cmp	r7, #9
 80048e8:	d97c      	bls.n	80049e4 <_strtod_l+0x294>
 80048ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80048ec:	f04f 0e00 	mov.w	lr, #0
 80048f0:	e09a      	b.n	8004a28 <_strtod_l+0x2d8>
 80048f2:	2300      	movs	r3, #0
 80048f4:	e7c7      	b.n	8004886 <_strtod_l+0x136>
 80048f6:	9905      	ldr	r1, [sp, #20]
 80048f8:	2908      	cmp	r1, #8
 80048fa:	bfdd      	ittte	le
 80048fc:	9907      	ldrle	r1, [sp, #28]
 80048fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8004902:	9307      	strle	r3, [sp, #28]
 8004904:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004908:	9b05      	ldr	r3, [sp, #20]
 800490a:	3001      	adds	r0, #1
 800490c:	3301      	adds	r3, #1
 800490e:	9305      	str	r3, [sp, #20]
 8004910:	901b      	str	r0, [sp, #108]	; 0x6c
 8004912:	e7bf      	b.n	8004894 <_strtod_l+0x144>
 8004914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004916:	191a      	adds	r2, r3, r4
 8004918:	921b      	str	r2, [sp, #108]	; 0x6c
 800491a:	9a05      	ldr	r2, [sp, #20]
 800491c:	5d1b      	ldrb	r3, [r3, r4]
 800491e:	2a00      	cmp	r2, #0
 8004920:	d037      	beq.n	8004992 <_strtod_l+0x242>
 8004922:	9c05      	ldr	r4, [sp, #20]
 8004924:	4602      	mov	r2, r0
 8004926:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800492a:	2909      	cmp	r1, #9
 800492c:	d913      	bls.n	8004956 <_strtod_l+0x206>
 800492e:	2101      	movs	r1, #1
 8004930:	9104      	str	r1, [sp, #16]
 8004932:	e7c2      	b.n	80048ba <_strtod_l+0x16a>
 8004934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	921b      	str	r2, [sp, #108]	; 0x6c
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	3001      	adds	r0, #1
 800493e:	2b30      	cmp	r3, #48	; 0x30
 8004940:	d0f8      	beq.n	8004934 <_strtod_l+0x1e4>
 8004942:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004946:	2a08      	cmp	r2, #8
 8004948:	f200 84e4 	bhi.w	8005314 <_strtod_l+0xbc4>
 800494c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800494e:	9208      	str	r2, [sp, #32]
 8004950:	4602      	mov	r2, r0
 8004952:	2000      	movs	r0, #0
 8004954:	4604      	mov	r4, r0
 8004956:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800495a:	f100 0101 	add.w	r1, r0, #1
 800495e:	d012      	beq.n	8004986 <_strtod_l+0x236>
 8004960:	440a      	add	r2, r1
 8004962:	eb00 0c04 	add.w	ip, r0, r4
 8004966:	4621      	mov	r1, r4
 8004968:	270a      	movs	r7, #10
 800496a:	458c      	cmp	ip, r1
 800496c:	d113      	bne.n	8004996 <_strtod_l+0x246>
 800496e:	1821      	adds	r1, r4, r0
 8004970:	2908      	cmp	r1, #8
 8004972:	f104 0401 	add.w	r4, r4, #1
 8004976:	4404      	add	r4, r0
 8004978:	dc19      	bgt.n	80049ae <_strtod_l+0x25e>
 800497a:	9b07      	ldr	r3, [sp, #28]
 800497c:	210a      	movs	r1, #10
 800497e:	fb01 e303 	mla	r3, r1, r3, lr
 8004982:	9307      	str	r3, [sp, #28]
 8004984:	2100      	movs	r1, #0
 8004986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004988:	1c58      	adds	r0, r3, #1
 800498a:	901b      	str	r0, [sp, #108]	; 0x6c
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	4608      	mov	r0, r1
 8004990:	e7c9      	b.n	8004926 <_strtod_l+0x1d6>
 8004992:	9805      	ldr	r0, [sp, #20]
 8004994:	e7d3      	b.n	800493e <_strtod_l+0x1ee>
 8004996:	2908      	cmp	r1, #8
 8004998:	f101 0101 	add.w	r1, r1, #1
 800499c:	dc03      	bgt.n	80049a6 <_strtod_l+0x256>
 800499e:	9b07      	ldr	r3, [sp, #28]
 80049a0:	437b      	muls	r3, r7
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	e7e1      	b.n	800496a <_strtod_l+0x21a>
 80049a6:	2910      	cmp	r1, #16
 80049a8:	bfd8      	it	le
 80049aa:	437d      	mulle	r5, r7
 80049ac:	e7dd      	b.n	800496a <_strtod_l+0x21a>
 80049ae:	2c10      	cmp	r4, #16
 80049b0:	bfdc      	itt	le
 80049b2:	210a      	movle	r1, #10
 80049b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80049b8:	e7e4      	b.n	8004984 <_strtod_l+0x234>
 80049ba:	2301      	movs	r3, #1
 80049bc:	9304      	str	r3, [sp, #16]
 80049be:	e781      	b.n	80048c4 <_strtod_l+0x174>
 80049c0:	f04f 0c01 	mov.w	ip, #1
 80049c4:	1cb3      	adds	r3, r6, #2
 80049c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80049c8:	78b3      	ldrb	r3, [r6, #2]
 80049ca:	e78a      	b.n	80048e2 <_strtod_l+0x192>
 80049cc:	f04f 0c00 	mov.w	ip, #0
 80049d0:	e7f8      	b.n	80049c4 <_strtod_l+0x274>
 80049d2:	bf00      	nop
 80049d4:	080088ec 	.word	0x080088ec
 80049d8:	7ff00000 	.word	0x7ff00000
 80049dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049de:	1c5f      	adds	r7, r3, #1
 80049e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b30      	cmp	r3, #48	; 0x30
 80049e6:	d0f9      	beq.n	80049dc <_strtod_l+0x28c>
 80049e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80049ec:	2f08      	cmp	r7, #8
 80049ee:	f63f af7d 	bhi.w	80048ec <_strtod_l+0x19c>
 80049f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80049f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049f8:	930a      	str	r3, [sp, #40]	; 0x28
 80049fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049fc:	1c5f      	adds	r7, r3, #1
 80049fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004a06:	f1b8 0f09 	cmp.w	r8, #9
 8004a0a:	d937      	bls.n	8004a7c <_strtod_l+0x32c>
 8004a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a0e:	1a7f      	subs	r7, r7, r1
 8004a10:	2f08      	cmp	r7, #8
 8004a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004a16:	dc37      	bgt.n	8004a88 <_strtod_l+0x338>
 8004a18:	45be      	cmp	lr, r7
 8004a1a:	bfa8      	it	ge
 8004a1c:	46be      	movge	lr, r7
 8004a1e:	f1bc 0f00 	cmp.w	ip, #0
 8004a22:	d001      	beq.n	8004a28 <_strtod_l+0x2d8>
 8004a24:	f1ce 0e00 	rsb	lr, lr, #0
 8004a28:	2c00      	cmp	r4, #0
 8004a2a:	d151      	bne.n	8004ad0 <_strtod_l+0x380>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	f47f aece 	bne.w	80047ce <_strtod_l+0x7e>
 8004a32:	9a06      	ldr	r2, [sp, #24]
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	f47f aeca 	bne.w	80047ce <_strtod_l+0x7e>
 8004a3a:	9a04      	ldr	r2, [sp, #16]
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	f47f aee4 	bne.w	800480a <_strtod_l+0xba>
 8004a42:	2b4e      	cmp	r3, #78	; 0x4e
 8004a44:	d027      	beq.n	8004a96 <_strtod_l+0x346>
 8004a46:	dc21      	bgt.n	8004a8c <_strtod_l+0x33c>
 8004a48:	2b49      	cmp	r3, #73	; 0x49
 8004a4a:	f47f aede 	bne.w	800480a <_strtod_l+0xba>
 8004a4e:	49a0      	ldr	r1, [pc, #640]	; (8004cd0 <_strtod_l+0x580>)
 8004a50:	a81b      	add	r0, sp, #108	; 0x6c
 8004a52:	f001 fdd7 	bl	8006604 <__match>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	f43f aed7 	beq.w	800480a <_strtod_l+0xba>
 8004a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a5e:	499d      	ldr	r1, [pc, #628]	; (8004cd4 <_strtod_l+0x584>)
 8004a60:	3b01      	subs	r3, #1
 8004a62:	a81b      	add	r0, sp, #108	; 0x6c
 8004a64:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a66:	f001 fdcd 	bl	8006604 <__match>
 8004a6a:	b910      	cbnz	r0, 8004a72 <_strtod_l+0x322>
 8004a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a6e:	3301      	adds	r3, #1
 8004a70:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004ce8 <_strtod_l+0x598>
 8004a76:	f04f 0a00 	mov.w	sl, #0
 8004a7a:	e6a8      	b.n	80047ce <_strtod_l+0x7e>
 8004a7c:	210a      	movs	r1, #10
 8004a7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004a82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004a86:	e7b8      	b.n	80049fa <_strtod_l+0x2aa>
 8004a88:	46be      	mov	lr, r7
 8004a8a:	e7c8      	b.n	8004a1e <_strtod_l+0x2ce>
 8004a8c:	2b69      	cmp	r3, #105	; 0x69
 8004a8e:	d0de      	beq.n	8004a4e <_strtod_l+0x2fe>
 8004a90:	2b6e      	cmp	r3, #110	; 0x6e
 8004a92:	f47f aeba 	bne.w	800480a <_strtod_l+0xba>
 8004a96:	4990      	ldr	r1, [pc, #576]	; (8004cd8 <_strtod_l+0x588>)
 8004a98:	a81b      	add	r0, sp, #108	; 0x6c
 8004a9a:	f001 fdb3 	bl	8006604 <__match>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f43f aeb3 	beq.w	800480a <_strtod_l+0xba>
 8004aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b28      	cmp	r3, #40	; 0x28
 8004aaa:	d10e      	bne.n	8004aca <_strtod_l+0x37a>
 8004aac:	aa1e      	add	r2, sp, #120	; 0x78
 8004aae:	498b      	ldr	r1, [pc, #556]	; (8004cdc <_strtod_l+0x58c>)
 8004ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8004ab2:	f001 fdbb 	bl	800662c <__hexnan>
 8004ab6:	2805      	cmp	r0, #5
 8004ab8:	d107      	bne.n	8004aca <_strtod_l+0x37a>
 8004aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004abc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004ac0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004ac4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004ac8:	e681      	b.n	80047ce <_strtod_l+0x7e>
 8004aca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004cf0 <_strtod_l+0x5a0>
 8004ace:	e7d2      	b.n	8004a76 <_strtod_l+0x326>
 8004ad0:	ebae 0302 	sub.w	r3, lr, r2
 8004ad4:	9306      	str	r3, [sp, #24]
 8004ad6:	9b05      	ldr	r3, [sp, #20]
 8004ad8:	9807      	ldr	r0, [sp, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf08      	it	eq
 8004ade:	4623      	moveq	r3, r4
 8004ae0:	2c10      	cmp	r4, #16
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	46a0      	mov	r8, r4
 8004ae6:	bfa8      	it	ge
 8004ae8:	f04f 0810 	movge.w	r8, #16
 8004aec:	f7fb fd5a 	bl	80005a4 <__aeabi_ui2d>
 8004af0:	2c09      	cmp	r4, #9
 8004af2:	4682      	mov	sl, r0
 8004af4:	468b      	mov	fp, r1
 8004af6:	dc13      	bgt.n	8004b20 <_strtod_l+0x3d0>
 8004af8:	9b06      	ldr	r3, [sp, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f43f ae67 	beq.w	80047ce <_strtod_l+0x7e>
 8004b00:	9b06      	ldr	r3, [sp, #24]
 8004b02:	dd7a      	ble.n	8004bfa <_strtod_l+0x4aa>
 8004b04:	2b16      	cmp	r3, #22
 8004b06:	dc61      	bgt.n	8004bcc <_strtod_l+0x47c>
 8004b08:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <_strtod_l+0x590>)
 8004b0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004b0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004b12:	4652      	mov	r2, sl
 8004b14:	465b      	mov	r3, fp
 8004b16:	f7fb fdbf 	bl	8000698 <__aeabi_dmul>
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	468b      	mov	fp, r1
 8004b1e:	e656      	b.n	80047ce <_strtod_l+0x7e>
 8004b20:	4b6f      	ldr	r3, [pc, #444]	; (8004ce0 <_strtod_l+0x590>)
 8004b22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004b2a:	f7fb fdb5 	bl	8000698 <__aeabi_dmul>
 8004b2e:	4606      	mov	r6, r0
 8004b30:	4628      	mov	r0, r5
 8004b32:	460f      	mov	r7, r1
 8004b34:	f7fb fd36 	bl	80005a4 <__aeabi_ui2d>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	4639      	mov	r1, r7
 8004b40:	f7fb fbf4 	bl	800032c <__adddf3>
 8004b44:	2c0f      	cmp	r4, #15
 8004b46:	4682      	mov	sl, r0
 8004b48:	468b      	mov	fp, r1
 8004b4a:	ddd5      	ble.n	8004af8 <_strtod_l+0x3a8>
 8004b4c:	9b06      	ldr	r3, [sp, #24]
 8004b4e:	eba4 0808 	sub.w	r8, r4, r8
 8004b52:	4498      	add	r8, r3
 8004b54:	f1b8 0f00 	cmp.w	r8, #0
 8004b58:	f340 8096 	ble.w	8004c88 <_strtod_l+0x538>
 8004b5c:	f018 030f 	ands.w	r3, r8, #15
 8004b60:	d00a      	beq.n	8004b78 <_strtod_l+0x428>
 8004b62:	495f      	ldr	r1, [pc, #380]	; (8004ce0 <_strtod_l+0x590>)
 8004b64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b68:	4652      	mov	r2, sl
 8004b6a:	465b      	mov	r3, fp
 8004b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b70:	f7fb fd92 	bl	8000698 <__aeabi_dmul>
 8004b74:	4682      	mov	sl, r0
 8004b76:	468b      	mov	fp, r1
 8004b78:	f038 080f 	bics.w	r8, r8, #15
 8004b7c:	d073      	beq.n	8004c66 <_strtod_l+0x516>
 8004b7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b82:	dd47      	ble.n	8004c14 <_strtod_l+0x4c4>
 8004b84:	2400      	movs	r4, #0
 8004b86:	46a0      	mov	r8, r4
 8004b88:	9407      	str	r4, [sp, #28]
 8004b8a:	9405      	str	r4, [sp, #20]
 8004b8c:	2322      	movs	r3, #34	; 0x22
 8004b8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004ce8 <_strtod_l+0x598>
 8004b92:	f8c9 3000 	str.w	r3, [r9]
 8004b96:	f04f 0a00 	mov.w	sl, #0
 8004b9a:	9b07      	ldr	r3, [sp, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f43f ae16 	beq.w	80047ce <_strtod_l+0x7e>
 8004ba2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ba4:	4648      	mov	r0, r9
 8004ba6:	f001 fe33 	bl	8006810 <_Bfree>
 8004baa:	9905      	ldr	r1, [sp, #20]
 8004bac:	4648      	mov	r0, r9
 8004bae:	f001 fe2f 	bl	8006810 <_Bfree>
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	4648      	mov	r0, r9
 8004bb6:	f001 fe2b 	bl	8006810 <_Bfree>
 8004bba:	9907      	ldr	r1, [sp, #28]
 8004bbc:	4648      	mov	r0, r9
 8004bbe:	f001 fe27 	bl	8006810 <_Bfree>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4648      	mov	r0, r9
 8004bc6:	f001 fe23 	bl	8006810 <_Bfree>
 8004bca:	e600      	b.n	80047ce <_strtod_l+0x7e>
 8004bcc:	9a06      	ldr	r2, [sp, #24]
 8004bce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	dbba      	blt.n	8004b4c <_strtod_l+0x3fc>
 8004bd6:	4d42      	ldr	r5, [pc, #264]	; (8004ce0 <_strtod_l+0x590>)
 8004bd8:	f1c4 040f 	rsb	r4, r4, #15
 8004bdc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004be0:	4652      	mov	r2, sl
 8004be2:	465b      	mov	r3, fp
 8004be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be8:	f7fb fd56 	bl	8000698 <__aeabi_dmul>
 8004bec:	9b06      	ldr	r3, [sp, #24]
 8004bee:	1b1c      	subs	r4, r3, r4
 8004bf0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004bf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bf8:	e78d      	b.n	8004b16 <_strtod_l+0x3c6>
 8004bfa:	f113 0f16 	cmn.w	r3, #22
 8004bfe:	dba5      	blt.n	8004b4c <_strtod_l+0x3fc>
 8004c00:	4a37      	ldr	r2, [pc, #220]	; (8004ce0 <_strtod_l+0x590>)
 8004c02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004c06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	f7fb fe6d 	bl	80008ec <__aeabi_ddiv>
 8004c12:	e782      	b.n	8004b1a <_strtod_l+0x3ca>
 8004c14:	2300      	movs	r3, #0
 8004c16:	4e33      	ldr	r6, [pc, #204]	; (8004ce4 <_strtod_l+0x594>)
 8004c18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	4659      	mov	r1, fp
 8004c20:	461d      	mov	r5, r3
 8004c22:	f1b8 0f01 	cmp.w	r8, #1
 8004c26:	dc21      	bgt.n	8004c6c <_strtod_l+0x51c>
 8004c28:	b10b      	cbz	r3, 8004c2e <_strtod_l+0x4de>
 8004c2a:	4682      	mov	sl, r0
 8004c2c:	468b      	mov	fp, r1
 8004c2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <_strtod_l+0x594>)
 8004c30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004c34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c38:	4652      	mov	r2, sl
 8004c3a:	465b      	mov	r3, fp
 8004c3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004c40:	f7fb fd2a 	bl	8000698 <__aeabi_dmul>
 8004c44:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <_strtod_l+0x598>)
 8004c46:	460a      	mov	r2, r1
 8004c48:	400b      	ands	r3, r1
 8004c4a:	4928      	ldr	r1, [pc, #160]	; (8004cec <_strtod_l+0x59c>)
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	4682      	mov	sl, r0
 8004c50:	d898      	bhi.n	8004b84 <_strtod_l+0x434>
 8004c52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c56:	428b      	cmp	r3, r1
 8004c58:	bf86      	itte	hi
 8004c5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004cf4 <_strtod_l+0x5a4>
 8004c5e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004c62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004c66:	2300      	movs	r3, #0
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	e077      	b.n	8004d5c <_strtod_l+0x60c>
 8004c6c:	f018 0f01 	tst.w	r8, #1
 8004c70:	d006      	beq.n	8004c80 <_strtod_l+0x530>
 8004c72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f7fb fd0d 	bl	8000698 <__aeabi_dmul>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	3501      	adds	r5, #1
 8004c82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004c86:	e7cc      	b.n	8004c22 <_strtod_l+0x4d2>
 8004c88:	d0ed      	beq.n	8004c66 <_strtod_l+0x516>
 8004c8a:	f1c8 0800 	rsb	r8, r8, #0
 8004c8e:	f018 020f 	ands.w	r2, r8, #15
 8004c92:	d00a      	beq.n	8004caa <_strtod_l+0x55a>
 8004c94:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <_strtod_l+0x590>)
 8004c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fe23 	bl	80008ec <__aeabi_ddiv>
 8004ca6:	4682      	mov	sl, r0
 8004ca8:	468b      	mov	fp, r1
 8004caa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004cae:	d0da      	beq.n	8004c66 <_strtod_l+0x516>
 8004cb0:	f1b8 0f1f 	cmp.w	r8, #31
 8004cb4:	dd20      	ble.n	8004cf8 <_strtod_l+0x5a8>
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	46a0      	mov	r8, r4
 8004cba:	9407      	str	r4, [sp, #28]
 8004cbc:	9405      	str	r4, [sp, #20]
 8004cbe:	2322      	movs	r3, #34	; 0x22
 8004cc0:	f04f 0a00 	mov.w	sl, #0
 8004cc4:	f04f 0b00 	mov.w	fp, #0
 8004cc8:	f8c9 3000 	str.w	r3, [r9]
 8004ccc:	e765      	b.n	8004b9a <_strtod_l+0x44a>
 8004cce:	bf00      	nop
 8004cd0:	080088b5 	.word	0x080088b5
 8004cd4:	08008943 	.word	0x08008943
 8004cd8:	080088bd 	.word	0x080088bd
 8004cdc:	08008900 	.word	0x08008900
 8004ce0:	08008980 	.word	0x08008980
 8004ce4:	08008958 	.word	0x08008958
 8004ce8:	7ff00000 	.word	0x7ff00000
 8004cec:	7ca00000 	.word	0x7ca00000
 8004cf0:	fff80000 	.word	0xfff80000
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	f018 0310 	ands.w	r3, r8, #16
 8004cfc:	bf18      	it	ne
 8004cfe:	236a      	movne	r3, #106	; 0x6a
 8004d00:	4da0      	ldr	r5, [pc, #640]	; (8004f84 <_strtod_l+0x834>)
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	4650      	mov	r0, sl
 8004d06:	4659      	mov	r1, fp
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f1b8 0f00 	cmp.w	r8, #0
 8004d0e:	f300 810a 	bgt.w	8004f26 <_strtod_l+0x7d6>
 8004d12:	b10b      	cbz	r3, 8004d18 <_strtod_l+0x5c8>
 8004d14:	4682      	mov	sl, r0
 8004d16:	468b      	mov	fp, r1
 8004d18:	9b04      	ldr	r3, [sp, #16]
 8004d1a:	b1bb      	cbz	r3, 8004d4c <_strtod_l+0x5fc>
 8004d1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004d20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	4659      	mov	r1, fp
 8004d28:	dd10      	ble.n	8004d4c <_strtod_l+0x5fc>
 8004d2a:	2b1f      	cmp	r3, #31
 8004d2c:	f340 8107 	ble.w	8004f3e <_strtod_l+0x7ee>
 8004d30:	2b34      	cmp	r3, #52	; 0x34
 8004d32:	bfde      	ittt	le
 8004d34:	3b20      	suble	r3, #32
 8004d36:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004d3a:	fa02 f303 	lslle.w	r3, r2, r3
 8004d3e:	f04f 0a00 	mov.w	sl, #0
 8004d42:	bfcc      	ite	gt
 8004d44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004d48:	ea03 0b01 	andle.w	fp, r3, r1
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4650      	mov	r0, sl
 8004d52:	4659      	mov	r1, fp
 8004d54:	f7fb ff08 	bl	8000b68 <__aeabi_dcmpeq>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1ac      	bne.n	8004cb6 <_strtod_l+0x566>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	9a05      	ldr	r2, [sp, #20]
 8004d62:	9908      	ldr	r1, [sp, #32]
 8004d64:	4623      	mov	r3, r4
 8004d66:	4648      	mov	r0, r9
 8004d68:	f001 fda4 	bl	80068b4 <__s2b>
 8004d6c:	9007      	str	r0, [sp, #28]
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f43f af08 	beq.w	8004b84 <_strtod_l+0x434>
 8004d74:	9a06      	ldr	r2, [sp, #24]
 8004d76:	9b06      	ldr	r3, [sp, #24]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	f1c3 0300 	rsb	r3, r3, #0
 8004d7e:	bfa8      	it	ge
 8004d80:	2300      	movge	r3, #0
 8004d82:	930e      	str	r3, [sp, #56]	; 0x38
 8004d84:	2400      	movs	r4, #0
 8004d86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004d8a:	9316      	str	r3, [sp, #88]	; 0x58
 8004d8c:	46a0      	mov	r8, r4
 8004d8e:	9b07      	ldr	r3, [sp, #28]
 8004d90:	4648      	mov	r0, r9
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	f001 fd08 	bl	80067a8 <_Balloc>
 8004d98:	9005      	str	r0, [sp, #20]
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f43f aef6 	beq.w	8004b8c <_strtod_l+0x43c>
 8004da0:	9b07      	ldr	r3, [sp, #28]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	3202      	adds	r2, #2
 8004da6:	f103 010c 	add.w	r1, r3, #12
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	300c      	adds	r0, #12
 8004dae:	f7fe fe3b 	bl	8003a28 <memcpy>
 8004db2:	aa1e      	add	r2, sp, #120	; 0x78
 8004db4:	a91d      	add	r1, sp, #116	; 0x74
 8004db6:	ec4b ab10 	vmov	d0, sl, fp
 8004dba:	4648      	mov	r0, r9
 8004dbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004dc0:	f002 f834 	bl	8006e2c <__d2b>
 8004dc4:	901c      	str	r0, [sp, #112]	; 0x70
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f43f aee0 	beq.w	8004b8c <_strtod_l+0x43c>
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4648      	mov	r0, r9
 8004dd0:	f001 fdfc 	bl	80069cc <__i2b>
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f43f aed8 	beq.w	8004b8c <_strtod_l+0x43c>
 8004ddc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004dde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004de0:	2e00      	cmp	r6, #0
 8004de2:	bfab      	itete	ge
 8004de4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004de6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004de8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004dea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004dec:	bfac      	ite	ge
 8004dee:	18f7      	addge	r7, r6, r3
 8004df0:	1b9d      	sublt	r5, r3, r6
 8004df2:	9b04      	ldr	r3, [sp, #16]
 8004df4:	1af6      	subs	r6, r6, r3
 8004df6:	4416      	add	r6, r2
 8004df8:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <_strtod_l+0x838>)
 8004dfa:	3e01      	subs	r6, #1
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004e02:	f280 80af 	bge.w	8004f64 <_strtod_l+0x814>
 8004e06:	1b9b      	subs	r3, r3, r6
 8004e08:	2b1f      	cmp	r3, #31
 8004e0a:	eba2 0203 	sub.w	r2, r2, r3
 8004e0e:	f04f 0101 	mov.w	r1, #1
 8004e12:	f300 809b 	bgt.w	8004f4c <_strtod_l+0x7fc>
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e20:	18be      	adds	r6, r7, r2
 8004e22:	9b04      	ldr	r3, [sp, #16]
 8004e24:	42b7      	cmp	r7, r6
 8004e26:	4415      	add	r5, r2
 8004e28:	441d      	add	r5, r3
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	bfa8      	it	ge
 8004e2e:	4633      	movge	r3, r6
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	bfa8      	it	ge
 8004e34:	462b      	movge	r3, r5
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfc2      	ittt	gt
 8004e3a:	1af6      	subgt	r6, r6, r3
 8004e3c:	1aed      	subgt	r5, r5, r3
 8004e3e:	1aff      	subgt	r7, r7, r3
 8004e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e42:	b1bb      	cbz	r3, 8004e74 <_strtod_l+0x724>
 8004e44:	4641      	mov	r1, r8
 8004e46:	461a      	mov	r2, r3
 8004e48:	4648      	mov	r0, r9
 8004e4a:	f001 fe5f 	bl	8006b0c <__pow5mult>
 8004e4e:	4680      	mov	r8, r0
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f43f ae9b 	beq.w	8004b8c <_strtod_l+0x43c>
 8004e56:	4601      	mov	r1, r0
 8004e58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004e5a:	4648      	mov	r0, r9
 8004e5c:	f001 fdbf 	bl	80069de <__multiply>
 8004e60:	900c      	str	r0, [sp, #48]	; 0x30
 8004e62:	2800      	cmp	r0, #0
 8004e64:	f43f ae92 	beq.w	8004b8c <_strtod_l+0x43c>
 8004e68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e6a:	4648      	mov	r0, r9
 8004e6c:	f001 fcd0 	bl	8006810 <_Bfree>
 8004e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e72:	931c      	str	r3, [sp, #112]	; 0x70
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	dc7a      	bgt.n	8004f6e <_strtod_l+0x81e>
 8004e78:	9b06      	ldr	r3, [sp, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	dd08      	ble.n	8004e90 <_strtod_l+0x740>
 8004e7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e80:	9905      	ldr	r1, [sp, #20]
 8004e82:	4648      	mov	r0, r9
 8004e84:	f001 fe42 	bl	8006b0c <__pow5mult>
 8004e88:	9005      	str	r0, [sp, #20]
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f43f ae7e 	beq.w	8004b8c <_strtod_l+0x43c>
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	dd08      	ble.n	8004ea6 <_strtod_l+0x756>
 8004e94:	462a      	mov	r2, r5
 8004e96:	9905      	ldr	r1, [sp, #20]
 8004e98:	4648      	mov	r0, r9
 8004e9a:	f001 fe85 	bl	8006ba8 <__lshift>
 8004e9e:	9005      	str	r0, [sp, #20]
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f43f ae73 	beq.w	8004b8c <_strtod_l+0x43c>
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	dd08      	ble.n	8004ebc <_strtod_l+0x76c>
 8004eaa:	4641      	mov	r1, r8
 8004eac:	463a      	mov	r2, r7
 8004eae:	4648      	mov	r0, r9
 8004eb0:	f001 fe7a 	bl	8006ba8 <__lshift>
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f43f ae68 	beq.w	8004b8c <_strtod_l+0x43c>
 8004ebc:	9a05      	ldr	r2, [sp, #20]
 8004ebe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	f001 fedf 	bl	8006c84 <__mdiff>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	f43f ae5f 	beq.w	8004b8c <_strtod_l+0x43c>
 8004ece:	68c3      	ldr	r3, [r0, #12]
 8004ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60c3      	str	r3, [r0, #12]
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	f001 feba 	bl	8006c50 <__mcmp>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	da55      	bge.n	8004f8c <_strtod_l+0x83c>
 8004ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ee2:	b9e3      	cbnz	r3, 8004f1e <_strtod_l+0x7ce>
 8004ee4:	f1ba 0f00 	cmp.w	sl, #0
 8004ee8:	d119      	bne.n	8004f1e <_strtod_l+0x7ce>
 8004eea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004eee:	b9b3      	cbnz	r3, 8004f1e <_strtod_l+0x7ce>
 8004ef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ef4:	0d1b      	lsrs	r3, r3, #20
 8004ef6:	051b      	lsls	r3, r3, #20
 8004ef8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004efc:	d90f      	bls.n	8004f1e <_strtod_l+0x7ce>
 8004efe:	6963      	ldr	r3, [r4, #20]
 8004f00:	b913      	cbnz	r3, 8004f08 <_strtod_l+0x7b8>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	dd0a      	ble.n	8004f1e <_strtod_l+0x7ce>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4648      	mov	r0, r9
 8004f0e:	f001 fe4b 	bl	8006ba8 <__lshift>
 8004f12:	4641      	mov	r1, r8
 8004f14:	4604      	mov	r4, r0
 8004f16:	f001 fe9b 	bl	8006c50 <__mcmp>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	dc67      	bgt.n	8004fee <_strtod_l+0x89e>
 8004f1e:	9b04      	ldr	r3, [sp, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d171      	bne.n	8005008 <_strtod_l+0x8b8>
 8004f24:	e63d      	b.n	8004ba2 <_strtod_l+0x452>
 8004f26:	f018 0f01 	tst.w	r8, #1
 8004f2a:	d004      	beq.n	8004f36 <_strtod_l+0x7e6>
 8004f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f30:	f7fb fbb2 	bl	8000698 <__aeabi_dmul>
 8004f34:	2301      	movs	r3, #1
 8004f36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f3a:	3508      	adds	r5, #8
 8004f3c:	e6e5      	b.n	8004d0a <_strtod_l+0x5ba>
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	ea03 0a0a 	and.w	sl, r3, sl
 8004f4a:	e6ff      	b.n	8004d4c <_strtod_l+0x5fc>
 8004f4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004f50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004f54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004f58:	36e2      	adds	r6, #226	; 0xe2
 8004f5a:	fa01 f306 	lsl.w	r3, r1, r6
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f60:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f62:	e75d      	b.n	8004e20 <_strtod_l+0x6d0>
 8004f64:	2300      	movs	r3, #0
 8004f66:	930a      	str	r3, [sp, #40]	; 0x28
 8004f68:	2301      	movs	r3, #1
 8004f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f6c:	e758      	b.n	8004e20 <_strtod_l+0x6d0>
 8004f6e:	4632      	mov	r2, r6
 8004f70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f72:	4648      	mov	r0, r9
 8004f74:	f001 fe18 	bl	8006ba8 <__lshift>
 8004f78:	901c      	str	r0, [sp, #112]	; 0x70
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f47f af7c 	bne.w	8004e78 <_strtod_l+0x728>
 8004f80:	e604      	b.n	8004b8c <_strtod_l+0x43c>
 8004f82:	bf00      	nop
 8004f84:	08008918 	.word	0x08008918
 8004f88:	fffffc02 	.word	0xfffffc02
 8004f8c:	465d      	mov	r5, fp
 8004f8e:	f040 8086 	bne.w	800509e <_strtod_l+0x94e>
 8004f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f98:	b32a      	cbz	r2, 8004fe6 <_strtod_l+0x896>
 8004f9a:	4aaf      	ldr	r2, [pc, #700]	; (8005258 <_strtod_l+0xb08>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d153      	bne.n	8005048 <_strtod_l+0x8f8>
 8004fa0:	9b04      	ldr	r3, [sp, #16]
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	b1d3      	cbz	r3, 8004fdc <_strtod_l+0x88c>
 8004fa6:	4aad      	ldr	r2, [pc, #692]	; (800525c <_strtod_l+0xb0c>)
 8004fa8:	402a      	ands	r2, r5
 8004faa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004fae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fb2:	d816      	bhi.n	8004fe2 <_strtod_l+0x892>
 8004fb4:	0d12      	lsrs	r2, r2, #20
 8004fb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004fba:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbe:	4298      	cmp	r0, r3
 8004fc0:	d142      	bne.n	8005048 <_strtod_l+0x8f8>
 8004fc2:	4ba7      	ldr	r3, [pc, #668]	; (8005260 <_strtod_l+0xb10>)
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	d102      	bne.n	8004fce <_strtod_l+0x87e>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	f43f addf 	beq.w	8004b8c <_strtod_l+0x43c>
 8004fce:	4ba3      	ldr	r3, [pc, #652]	; (800525c <_strtod_l+0xb0c>)
 8004fd0:	402b      	ands	r3, r5
 8004fd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004fd6:	f04f 0a00 	mov.w	sl, #0
 8004fda:	e7a0      	b.n	8004f1e <_strtod_l+0x7ce>
 8004fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fe0:	e7ed      	b.n	8004fbe <_strtod_l+0x86e>
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	e7eb      	b.n	8004fbe <_strtod_l+0x86e>
 8004fe6:	bb7b      	cbnz	r3, 8005048 <_strtod_l+0x8f8>
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	d12c      	bne.n	8005048 <_strtod_l+0x8f8>
 8004fee:	9904      	ldr	r1, [sp, #16]
 8004ff0:	4a9a      	ldr	r2, [pc, #616]	; (800525c <_strtod_l+0xb0c>)
 8004ff2:	465b      	mov	r3, fp
 8004ff4:	b1f1      	cbz	r1, 8005034 <_strtod_l+0x8e4>
 8004ff6:	ea02 010b 	and.w	r1, r2, fp
 8004ffa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ffe:	dc19      	bgt.n	8005034 <_strtod_l+0x8e4>
 8005000:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005004:	f77f ae5b 	ble.w	8004cbe <_strtod_l+0x56e>
 8005008:	4a96      	ldr	r2, [pc, #600]	; (8005264 <_strtod_l+0xb14>)
 800500a:	2300      	movs	r3, #0
 800500c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005018:	f7fb fb3e 	bl	8000698 <__aeabi_dmul>
 800501c:	4682      	mov	sl, r0
 800501e:	468b      	mov	fp, r1
 8005020:	2900      	cmp	r1, #0
 8005022:	f47f adbe 	bne.w	8004ba2 <_strtod_l+0x452>
 8005026:	2800      	cmp	r0, #0
 8005028:	f47f adbb 	bne.w	8004ba2 <_strtod_l+0x452>
 800502c:	2322      	movs	r3, #34	; 0x22
 800502e:	f8c9 3000 	str.w	r3, [r9]
 8005032:	e5b6      	b.n	8004ba2 <_strtod_l+0x452>
 8005034:	4013      	ands	r3, r2
 8005036:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800503a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800503e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005042:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005046:	e76a      	b.n	8004f1e <_strtod_l+0x7ce>
 8005048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504a:	b193      	cbz	r3, 8005072 <_strtod_l+0x922>
 800504c:	422b      	tst	r3, r5
 800504e:	f43f af66 	beq.w	8004f1e <_strtod_l+0x7ce>
 8005052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	4650      	mov	r0, sl
 8005058:	4659      	mov	r1, fp
 800505a:	b173      	cbz	r3, 800507a <_strtod_l+0x92a>
 800505c:	f7ff fb5c 	bl	8004718 <sulp>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005068:	f7fb f960 	bl	800032c <__adddf3>
 800506c:	4682      	mov	sl, r0
 800506e:	468b      	mov	fp, r1
 8005070:	e755      	b.n	8004f1e <_strtod_l+0x7ce>
 8005072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005074:	ea13 0f0a 	tst.w	r3, sl
 8005078:	e7e9      	b.n	800504e <_strtod_l+0x8fe>
 800507a:	f7ff fb4d 	bl	8004718 <sulp>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005086:	f7fb f94f 	bl	8000328 <__aeabi_dsub>
 800508a:	2200      	movs	r2, #0
 800508c:	2300      	movs	r3, #0
 800508e:	4682      	mov	sl, r0
 8005090:	468b      	mov	fp, r1
 8005092:	f7fb fd69 	bl	8000b68 <__aeabi_dcmpeq>
 8005096:	2800      	cmp	r0, #0
 8005098:	f47f ae11 	bne.w	8004cbe <_strtod_l+0x56e>
 800509c:	e73f      	b.n	8004f1e <_strtod_l+0x7ce>
 800509e:	4641      	mov	r1, r8
 80050a0:	4620      	mov	r0, r4
 80050a2:	f001 ff12 	bl	8006eca <__ratio>
 80050a6:	ec57 6b10 	vmov	r6, r7, d0
 80050aa:	2200      	movs	r2, #0
 80050ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050b0:	ee10 0a10 	vmov	r0, s0
 80050b4:	4639      	mov	r1, r7
 80050b6:	f7fb fd6b 	bl	8000b90 <__aeabi_dcmple>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d077      	beq.n	80051ae <_strtod_l+0xa5e>
 80050be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d04a      	beq.n	800515a <_strtod_l+0xa0a>
 80050c4:	4b68      	ldr	r3, [pc, #416]	; (8005268 <_strtod_l+0xb18>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050cc:	4f66      	ldr	r7, [pc, #408]	; (8005268 <_strtod_l+0xb18>)
 80050ce:	2600      	movs	r6, #0
 80050d0:	4b62      	ldr	r3, [pc, #392]	; (800525c <_strtod_l+0xb0c>)
 80050d2:	402b      	ands	r3, r5
 80050d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050d8:	4b64      	ldr	r3, [pc, #400]	; (800526c <_strtod_l+0xb1c>)
 80050da:	429a      	cmp	r2, r3
 80050dc:	f040 80ce 	bne.w	800527c <_strtod_l+0xb2c>
 80050e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80050ec:	ec4b ab10 	vmov	d0, sl, fp
 80050f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80050f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050f8:	f001 fe22 	bl	8006d40 <__ulp>
 80050fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005100:	ec53 2b10 	vmov	r2, r3, d0
 8005104:	f7fb fac8 	bl	8000698 <__aeabi_dmul>
 8005108:	4652      	mov	r2, sl
 800510a:	465b      	mov	r3, fp
 800510c:	f7fb f90e 	bl	800032c <__adddf3>
 8005110:	460b      	mov	r3, r1
 8005112:	4952      	ldr	r1, [pc, #328]	; (800525c <_strtod_l+0xb0c>)
 8005114:	4a56      	ldr	r2, [pc, #344]	; (8005270 <_strtod_l+0xb20>)
 8005116:	4019      	ands	r1, r3
 8005118:	4291      	cmp	r1, r2
 800511a:	4682      	mov	sl, r0
 800511c:	d95b      	bls.n	80051d6 <_strtod_l+0xa86>
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005124:	4293      	cmp	r3, r2
 8005126:	d103      	bne.n	8005130 <_strtod_l+0x9e0>
 8005128:	9b08      	ldr	r3, [sp, #32]
 800512a:	3301      	adds	r3, #1
 800512c:	f43f ad2e 	beq.w	8004b8c <_strtod_l+0x43c>
 8005130:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005260 <_strtod_l+0xb10>
 8005134:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005138:	991c      	ldr	r1, [sp, #112]	; 0x70
 800513a:	4648      	mov	r0, r9
 800513c:	f001 fb68 	bl	8006810 <_Bfree>
 8005140:	9905      	ldr	r1, [sp, #20]
 8005142:	4648      	mov	r0, r9
 8005144:	f001 fb64 	bl	8006810 <_Bfree>
 8005148:	4641      	mov	r1, r8
 800514a:	4648      	mov	r0, r9
 800514c:	f001 fb60 	bl	8006810 <_Bfree>
 8005150:	4621      	mov	r1, r4
 8005152:	4648      	mov	r0, r9
 8005154:	f001 fb5c 	bl	8006810 <_Bfree>
 8005158:	e619      	b.n	8004d8e <_strtod_l+0x63e>
 800515a:	f1ba 0f00 	cmp.w	sl, #0
 800515e:	d11a      	bne.n	8005196 <_strtod_l+0xa46>
 8005160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005164:	b9eb      	cbnz	r3, 80051a2 <_strtod_l+0xa52>
 8005166:	2200      	movs	r2, #0
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <_strtod_l+0xb18>)
 800516a:	4630      	mov	r0, r6
 800516c:	4639      	mov	r1, r7
 800516e:	f7fb fd05 	bl	8000b7c <__aeabi_dcmplt>
 8005172:	b9c8      	cbnz	r0, 80051a8 <_strtod_l+0xa58>
 8005174:	4630      	mov	r0, r6
 8005176:	4639      	mov	r1, r7
 8005178:	2200      	movs	r2, #0
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <_strtod_l+0xb24>)
 800517c:	f7fb fa8c 	bl	8000698 <__aeabi_dmul>
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005188:	9618      	str	r6, [sp, #96]	; 0x60
 800518a:	9319      	str	r3, [sp, #100]	; 0x64
 800518c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005194:	e79c      	b.n	80050d0 <_strtod_l+0x980>
 8005196:	f1ba 0f01 	cmp.w	sl, #1
 800519a:	d102      	bne.n	80051a2 <_strtod_l+0xa52>
 800519c:	2d00      	cmp	r5, #0
 800519e:	f43f ad8e 	beq.w	8004cbe <_strtod_l+0x56e>
 80051a2:	2200      	movs	r2, #0
 80051a4:	4b34      	ldr	r3, [pc, #208]	; (8005278 <_strtod_l+0xb28>)
 80051a6:	e78f      	b.n	80050c8 <_strtod_l+0x978>
 80051a8:	2600      	movs	r6, #0
 80051aa:	4f32      	ldr	r7, [pc, #200]	; (8005274 <_strtod_l+0xb24>)
 80051ac:	e7ea      	b.n	8005184 <_strtod_l+0xa34>
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <_strtod_l+0xb24>)
 80051b0:	4630      	mov	r0, r6
 80051b2:	4639      	mov	r1, r7
 80051b4:	2200      	movs	r2, #0
 80051b6:	f7fb fa6f 	bl	8000698 <__aeabi_dmul>
 80051ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	b933      	cbnz	r3, 80051d0 <_strtod_l+0xa80>
 80051c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051c6:	9010      	str	r0, [sp, #64]	; 0x40
 80051c8:	9311      	str	r3, [sp, #68]	; 0x44
 80051ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ce:	e7df      	b.n	8005190 <_strtod_l+0xa40>
 80051d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80051d4:	e7f9      	b.n	80051ca <_strtod_l+0xa7a>
 80051d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80051da:	9b04      	ldr	r3, [sp, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ab      	bne.n	8005138 <_strtod_l+0x9e8>
 80051e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051e8:	051b      	lsls	r3, r3, #20
 80051ea:	429a      	cmp	r2, r3
 80051ec:	465d      	mov	r5, fp
 80051ee:	d1a3      	bne.n	8005138 <_strtod_l+0x9e8>
 80051f0:	4639      	mov	r1, r7
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7fb fd00 	bl	8000bf8 <__aeabi_d2iz>
 80051f8:	f7fb f9e4 	bl	80005c4 <__aeabi_i2d>
 80051fc:	460b      	mov	r3, r1
 80051fe:	4602      	mov	r2, r0
 8005200:	4639      	mov	r1, r7
 8005202:	4630      	mov	r0, r6
 8005204:	f7fb f890 	bl	8000328 <__aeabi_dsub>
 8005208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	b933      	cbnz	r3, 800521e <_strtod_l+0xace>
 8005210:	f1ba 0f00 	cmp.w	sl, #0
 8005214:	d103      	bne.n	800521e <_strtod_l+0xace>
 8005216:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800521a:	2d00      	cmp	r5, #0
 800521c:	d06d      	beq.n	80052fa <_strtod_l+0xbaa>
 800521e:	a30a      	add	r3, pc, #40	; (adr r3, 8005248 <_strtod_l+0xaf8>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4630      	mov	r0, r6
 8005226:	4639      	mov	r1, r7
 8005228:	f7fb fca8 	bl	8000b7c <__aeabi_dcmplt>
 800522c:	2800      	cmp	r0, #0
 800522e:	f47f acb8 	bne.w	8004ba2 <_strtod_l+0x452>
 8005232:	a307      	add	r3, pc, #28	; (adr r3, 8005250 <_strtod_l+0xb00>)
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb fcbc 	bl	8000bb8 <__aeabi_dcmpgt>
 8005240:	2800      	cmp	r0, #0
 8005242:	f43f af79 	beq.w	8005138 <_strtod_l+0x9e8>
 8005246:	e4ac      	b.n	8004ba2 <_strtod_l+0x452>
 8005248:	94a03595 	.word	0x94a03595
 800524c:	3fdfffff 	.word	0x3fdfffff
 8005250:	35afe535 	.word	0x35afe535
 8005254:	3fe00000 	.word	0x3fe00000
 8005258:	000fffff 	.word	0x000fffff
 800525c:	7ff00000 	.word	0x7ff00000
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	39500000 	.word	0x39500000
 8005268:	3ff00000 	.word	0x3ff00000
 800526c:	7fe00000 	.word	0x7fe00000
 8005270:	7c9fffff 	.word	0x7c9fffff
 8005274:	3fe00000 	.word	0x3fe00000
 8005278:	bff00000 	.word	0xbff00000
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	b333      	cbz	r3, 80052ce <_strtod_l+0xb7e>
 8005280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005282:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005286:	d822      	bhi.n	80052ce <_strtod_l+0xb7e>
 8005288:	a327      	add	r3, pc, #156	; (adr r3, 8005328 <_strtod_l+0xbd8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	f7fb fc7d 	bl	8000b90 <__aeabi_dcmple>
 8005296:	b1a0      	cbz	r0, 80052c2 <_strtod_l+0xb72>
 8005298:	4639      	mov	r1, r7
 800529a:	4630      	mov	r0, r6
 800529c:	f7fb fcd4 	bl	8000c48 <__aeabi_d2uiz>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bf08      	it	eq
 80052a4:	2001      	moveq	r0, #1
 80052a6:	f7fb f97d 	bl	80005a4 <__aeabi_ui2d>
 80052aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	bb03      	cbnz	r3, 80052f4 <_strtod_l+0xba4>
 80052b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052b6:	9012      	str	r0, [sp, #72]	; 0x48
 80052b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80052ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80052be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80052d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80052d6:	f001 fd33 	bl	8006d40 <__ulp>
 80052da:	4650      	mov	r0, sl
 80052dc:	ec53 2b10 	vmov	r2, r3, d0
 80052e0:	4659      	mov	r1, fp
 80052e2:	f7fb f9d9 	bl	8000698 <__aeabi_dmul>
 80052e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052ea:	f7fb f81f 	bl	800032c <__adddf3>
 80052ee:	4682      	mov	sl, r0
 80052f0:	468b      	mov	fp, r1
 80052f2:	e772      	b.n	80051da <_strtod_l+0xa8a>
 80052f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80052f8:	e7df      	b.n	80052ba <_strtod_l+0xb6a>
 80052fa:	a30d      	add	r3, pc, #52	; (adr r3, 8005330 <_strtod_l+0xbe0>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fb fc3c 	bl	8000b7c <__aeabi_dcmplt>
 8005304:	e79c      	b.n	8005240 <_strtod_l+0xaf0>
 8005306:	2300      	movs	r3, #0
 8005308:	930d      	str	r3, [sp, #52]	; 0x34
 800530a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800530c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	f7ff ba61 	b.w	80047d6 <_strtod_l+0x86>
 8005314:	2b65      	cmp	r3, #101	; 0x65
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f43f ab4e 	beq.w	80049ba <_strtod_l+0x26a>
 800531e:	2101      	movs	r1, #1
 8005320:	4614      	mov	r4, r2
 8005322:	9104      	str	r1, [sp, #16]
 8005324:	f7ff bacb 	b.w	80048be <_strtod_l+0x16e>
 8005328:	ffc00000 	.word	0xffc00000
 800532c:	41dfffff 	.word	0x41dfffff
 8005330:	94a03595 	.word	0x94a03595
 8005334:	3fcfffff 	.word	0x3fcfffff

08005338 <_strtod_r>:
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <_strtod_r+0x18>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b410      	push	{r4}
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4c04      	ldr	r4, [pc, #16]	; (8005354 <_strtod_r+0x1c>)
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf08      	it	eq
 8005346:	4623      	moveq	r3, r4
 8005348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534c:	f7ff ba00 	b.w	8004750 <_strtod_l>
 8005350:	2000000c 	.word	0x2000000c
 8005354:	20000070 	.word	0x20000070

08005358 <_strtol_l.isra.0>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	4680      	mov	r8, r0
 800535e:	4689      	mov	r9, r1
 8005360:	4692      	mov	sl, r2
 8005362:	461e      	mov	r6, r3
 8005364:	460f      	mov	r7, r1
 8005366:	463d      	mov	r5, r7
 8005368:	9808      	ldr	r0, [sp, #32]
 800536a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800536e:	f001 f9ed 	bl	800674c <__locale_ctype_ptr_l>
 8005372:	4420      	add	r0, r4
 8005374:	7843      	ldrb	r3, [r0, #1]
 8005376:	f013 0308 	ands.w	r3, r3, #8
 800537a:	d132      	bne.n	80053e2 <_strtol_l.isra.0+0x8a>
 800537c:	2c2d      	cmp	r4, #45	; 0x2d
 800537e:	d132      	bne.n	80053e6 <_strtol_l.isra.0+0x8e>
 8005380:	787c      	ldrb	r4, [r7, #1]
 8005382:	1cbd      	adds	r5, r7, #2
 8005384:	2201      	movs	r2, #1
 8005386:	2e00      	cmp	r6, #0
 8005388:	d05d      	beq.n	8005446 <_strtol_l.isra.0+0xee>
 800538a:	2e10      	cmp	r6, #16
 800538c:	d109      	bne.n	80053a2 <_strtol_l.isra.0+0x4a>
 800538e:	2c30      	cmp	r4, #48	; 0x30
 8005390:	d107      	bne.n	80053a2 <_strtol_l.isra.0+0x4a>
 8005392:	782b      	ldrb	r3, [r5, #0]
 8005394:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005398:	2b58      	cmp	r3, #88	; 0x58
 800539a:	d14f      	bne.n	800543c <_strtol_l.isra.0+0xe4>
 800539c:	786c      	ldrb	r4, [r5, #1]
 800539e:	2610      	movs	r6, #16
 80053a0:	3502      	adds	r5, #2
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	bf14      	ite	ne
 80053a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80053aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80053ae:	2700      	movs	r7, #0
 80053b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80053b4:	4638      	mov	r0, r7
 80053b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80053ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80053be:	2b09      	cmp	r3, #9
 80053c0:	d817      	bhi.n	80053f2 <_strtol_l.isra.0+0x9a>
 80053c2:	461c      	mov	r4, r3
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	dd23      	ble.n	8005410 <_strtol_l.isra.0+0xb8>
 80053c8:	1c7b      	adds	r3, r7, #1
 80053ca:	d007      	beq.n	80053dc <_strtol_l.isra.0+0x84>
 80053cc:	4584      	cmp	ip, r0
 80053ce:	d31c      	bcc.n	800540a <_strtol_l.isra.0+0xb2>
 80053d0:	d101      	bne.n	80053d6 <_strtol_l.isra.0+0x7e>
 80053d2:	45a6      	cmp	lr, r4
 80053d4:	db19      	blt.n	800540a <_strtol_l.isra.0+0xb2>
 80053d6:	fb00 4006 	mla	r0, r0, r6, r4
 80053da:	2701      	movs	r7, #1
 80053dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053e0:	e7eb      	b.n	80053ba <_strtol_l.isra.0+0x62>
 80053e2:	462f      	mov	r7, r5
 80053e4:	e7bf      	b.n	8005366 <_strtol_l.isra.0+0xe>
 80053e6:	2c2b      	cmp	r4, #43	; 0x2b
 80053e8:	bf04      	itt	eq
 80053ea:	1cbd      	addeq	r5, r7, #2
 80053ec:	787c      	ldrbeq	r4, [r7, #1]
 80053ee:	461a      	mov	r2, r3
 80053f0:	e7c9      	b.n	8005386 <_strtol_l.isra.0+0x2e>
 80053f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80053f6:	2b19      	cmp	r3, #25
 80053f8:	d801      	bhi.n	80053fe <_strtol_l.isra.0+0xa6>
 80053fa:	3c37      	subs	r4, #55	; 0x37
 80053fc:	e7e2      	b.n	80053c4 <_strtol_l.isra.0+0x6c>
 80053fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005402:	2b19      	cmp	r3, #25
 8005404:	d804      	bhi.n	8005410 <_strtol_l.isra.0+0xb8>
 8005406:	3c57      	subs	r4, #87	; 0x57
 8005408:	e7dc      	b.n	80053c4 <_strtol_l.isra.0+0x6c>
 800540a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800540e:	e7e5      	b.n	80053dc <_strtol_l.isra.0+0x84>
 8005410:	1c7b      	adds	r3, r7, #1
 8005412:	d108      	bne.n	8005426 <_strtol_l.isra.0+0xce>
 8005414:	2322      	movs	r3, #34	; 0x22
 8005416:	f8c8 3000 	str.w	r3, [r8]
 800541a:	4608      	mov	r0, r1
 800541c:	f1ba 0f00 	cmp.w	sl, #0
 8005420:	d107      	bne.n	8005432 <_strtol_l.isra.0+0xda>
 8005422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005426:	b102      	cbz	r2, 800542a <_strtol_l.isra.0+0xd2>
 8005428:	4240      	negs	r0, r0
 800542a:	f1ba 0f00 	cmp.w	sl, #0
 800542e:	d0f8      	beq.n	8005422 <_strtol_l.isra.0+0xca>
 8005430:	b10f      	cbz	r7, 8005436 <_strtol_l.isra.0+0xde>
 8005432:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005436:	f8ca 9000 	str.w	r9, [sl]
 800543a:	e7f2      	b.n	8005422 <_strtol_l.isra.0+0xca>
 800543c:	2430      	movs	r4, #48	; 0x30
 800543e:	2e00      	cmp	r6, #0
 8005440:	d1af      	bne.n	80053a2 <_strtol_l.isra.0+0x4a>
 8005442:	2608      	movs	r6, #8
 8005444:	e7ad      	b.n	80053a2 <_strtol_l.isra.0+0x4a>
 8005446:	2c30      	cmp	r4, #48	; 0x30
 8005448:	d0a3      	beq.n	8005392 <_strtol_l.isra.0+0x3a>
 800544a:	260a      	movs	r6, #10
 800544c:	e7a9      	b.n	80053a2 <_strtol_l.isra.0+0x4a>
	...

08005450 <_strtol_r>:
 8005450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005452:	4c06      	ldr	r4, [pc, #24]	; (800546c <_strtol_r+0x1c>)
 8005454:	4d06      	ldr	r5, [pc, #24]	; (8005470 <_strtol_r+0x20>)
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	6a24      	ldr	r4, [r4, #32]
 800545a:	2c00      	cmp	r4, #0
 800545c:	bf08      	it	eq
 800545e:	462c      	moveq	r4, r5
 8005460:	9400      	str	r4, [sp, #0]
 8005462:	f7ff ff79 	bl	8005358 <_strtol_l.isra.0>
 8005466:	b003      	add	sp, #12
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	2000000c 	.word	0x2000000c
 8005470:	20000070 	.word	0x20000070

08005474 <quorem>:
 8005474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	6903      	ldr	r3, [r0, #16]
 800547a:	690c      	ldr	r4, [r1, #16]
 800547c:	42a3      	cmp	r3, r4
 800547e:	4680      	mov	r8, r0
 8005480:	f2c0 8082 	blt.w	8005588 <quorem+0x114>
 8005484:	3c01      	subs	r4, #1
 8005486:	f101 0714 	add.w	r7, r1, #20
 800548a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800548e:	f100 0614 	add.w	r6, r0, #20
 8005492:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005496:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800549a:	eb06 030c 	add.w	r3, r6, ip
 800549e:	3501      	adds	r5, #1
 80054a0:	eb07 090c 	add.w	r9, r7, ip
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80054aa:	b395      	cbz	r5, 8005512 <quorem+0x9e>
 80054ac:	f04f 0a00 	mov.w	sl, #0
 80054b0:	4638      	mov	r0, r7
 80054b2:	46b6      	mov	lr, r6
 80054b4:	46d3      	mov	fp, sl
 80054b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80054ba:	b293      	uxth	r3, r2
 80054bc:	fb05 a303 	mla	r3, r5, r3, sl
 80054c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	ebab 0303 	sub.w	r3, fp, r3
 80054ca:	0c12      	lsrs	r2, r2, #16
 80054cc:	f8de b000 	ldr.w	fp, [lr]
 80054d0:	fb05 a202 	mla	r2, r5, r2, sl
 80054d4:	fa13 f38b 	uxtah	r3, r3, fp
 80054d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80054dc:	fa1f fb82 	uxth.w	fp, r2
 80054e0:	f8de 2000 	ldr.w	r2, [lr]
 80054e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80054e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054f2:	4581      	cmp	r9, r0
 80054f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80054f8:	f84e 3b04 	str.w	r3, [lr], #4
 80054fc:	d2db      	bcs.n	80054b6 <quorem+0x42>
 80054fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8005502:	b933      	cbnz	r3, 8005512 <quorem+0x9e>
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	3b04      	subs	r3, #4
 8005508:	429e      	cmp	r6, r3
 800550a:	461a      	mov	r2, r3
 800550c:	d330      	bcc.n	8005570 <quorem+0xfc>
 800550e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005512:	4640      	mov	r0, r8
 8005514:	f001 fb9c 	bl	8006c50 <__mcmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	db25      	blt.n	8005568 <quorem+0xf4>
 800551c:	3501      	adds	r5, #1
 800551e:	4630      	mov	r0, r6
 8005520:	f04f 0c00 	mov.w	ip, #0
 8005524:	f857 2b04 	ldr.w	r2, [r7], #4
 8005528:	f8d0 e000 	ldr.w	lr, [r0]
 800552c:	b293      	uxth	r3, r2
 800552e:	ebac 0303 	sub.w	r3, ip, r3
 8005532:	0c12      	lsrs	r2, r2, #16
 8005534:	fa13 f38e 	uxtah	r3, r3, lr
 8005538:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800553c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005540:	b29b      	uxth	r3, r3
 8005542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005546:	45b9      	cmp	r9, r7
 8005548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800554c:	f840 3b04 	str.w	r3, [r0], #4
 8005550:	d2e8      	bcs.n	8005524 <quorem+0xb0>
 8005552:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005556:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800555a:	b92a      	cbnz	r2, 8005568 <quorem+0xf4>
 800555c:	3b04      	subs	r3, #4
 800555e:	429e      	cmp	r6, r3
 8005560:	461a      	mov	r2, r3
 8005562:	d30b      	bcc.n	800557c <quorem+0x108>
 8005564:	f8c8 4010 	str.w	r4, [r8, #16]
 8005568:	4628      	mov	r0, r5
 800556a:	b003      	add	sp, #12
 800556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	3b04      	subs	r3, #4
 8005574:	2a00      	cmp	r2, #0
 8005576:	d1ca      	bne.n	800550e <quorem+0x9a>
 8005578:	3c01      	subs	r4, #1
 800557a:	e7c5      	b.n	8005508 <quorem+0x94>
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	3b04      	subs	r3, #4
 8005580:	2a00      	cmp	r2, #0
 8005582:	d1ef      	bne.n	8005564 <quorem+0xf0>
 8005584:	3c01      	subs	r4, #1
 8005586:	e7ea      	b.n	800555e <quorem+0xea>
 8005588:	2000      	movs	r0, #0
 800558a:	e7ee      	b.n	800556a <quorem+0xf6>
 800558c:	0000      	movs	r0, r0
	...

08005590 <_dtoa_r>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	ec57 6b10 	vmov	r6, r7, d0
 8005598:	b097      	sub	sp, #92	; 0x5c
 800559a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800559c:	9106      	str	r1, [sp, #24]
 800559e:	4604      	mov	r4, r0
 80055a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80055a2:	9312      	str	r3, [sp, #72]	; 0x48
 80055a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055a8:	e9cd 6700 	strd	r6, r7, [sp]
 80055ac:	b93d      	cbnz	r5, 80055be <_dtoa_r+0x2e>
 80055ae:	2010      	movs	r0, #16
 80055b0:	f001 f8e0 	bl	8006774 <malloc>
 80055b4:	6260      	str	r0, [r4, #36]	; 0x24
 80055b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055ba:	6005      	str	r5, [r0, #0]
 80055bc:	60c5      	str	r5, [r0, #12]
 80055be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	b151      	cbz	r1, 80055da <_dtoa_r+0x4a>
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	604a      	str	r2, [r1, #4]
 80055c8:	2301      	movs	r3, #1
 80055ca:	4093      	lsls	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 f91e 	bl	8006810 <_Bfree>
 80055d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	1e3b      	subs	r3, r7, #0
 80055dc:	bfbb      	ittet	lt
 80055de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	9301      	strlt	r3, [sp, #4]
 80055e4:	2300      	movge	r3, #0
 80055e6:	2201      	movlt	r2, #1
 80055e8:	bfac      	ite	ge
 80055ea:	f8c8 3000 	strge.w	r3, [r8]
 80055ee:	f8c8 2000 	strlt.w	r2, [r8]
 80055f2:	4baf      	ldr	r3, [pc, #700]	; (80058b0 <_dtoa_r+0x320>)
 80055f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055f8:	ea33 0308 	bics.w	r3, r3, r8
 80055fc:	d114      	bne.n	8005628 <_dtoa_r+0x98>
 80055fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005600:	f242 730f 	movw	r3, #9999	; 0x270f
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	9b00      	ldr	r3, [sp, #0]
 8005608:	b923      	cbnz	r3, 8005614 <_dtoa_r+0x84>
 800560a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 8542 	beq.w	8006098 <_dtoa_r+0xb08>
 8005614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005616:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80058c4 <_dtoa_r+0x334>
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8544 	beq.w	80060a8 <_dtoa_r+0xb18>
 8005620:	f10b 0303 	add.w	r3, fp, #3
 8005624:	f000 bd3e 	b.w	80060a4 <_dtoa_r+0xb14>
 8005628:	e9dd 6700 	ldrd	r6, r7, [sp]
 800562c:	2200      	movs	r2, #0
 800562e:	2300      	movs	r3, #0
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fb fa98 	bl	8000b68 <__aeabi_dcmpeq>
 8005638:	4681      	mov	r9, r0
 800563a:	b168      	cbz	r0, 8005658 <_dtoa_r+0xc8>
 800563c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800563e:	2301      	movs	r3, #1
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8524 	beq.w	8006092 <_dtoa_r+0xb02>
 800564a:	4b9a      	ldr	r3, [pc, #616]	; (80058b4 <_dtoa_r+0x324>)
 800564c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800564e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	f000 bd28 	b.w	80060a8 <_dtoa_r+0xb18>
 8005658:	aa14      	add	r2, sp, #80	; 0x50
 800565a:	a915      	add	r1, sp, #84	; 0x54
 800565c:	ec47 6b10 	vmov	d0, r6, r7
 8005660:	4620      	mov	r0, r4
 8005662:	f001 fbe3 	bl	8006e2c <__d2b>
 8005666:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800566a:	9004      	str	r0, [sp, #16]
 800566c:	2d00      	cmp	r5, #0
 800566e:	d07c      	beq.n	800576a <_dtoa_r+0x1da>
 8005670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005674:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005678:	46b2      	mov	sl, r6
 800567a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800567e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005682:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005686:	2200      	movs	r2, #0
 8005688:	4b8b      	ldr	r3, [pc, #556]	; (80058b8 <_dtoa_r+0x328>)
 800568a:	4650      	mov	r0, sl
 800568c:	4659      	mov	r1, fp
 800568e:	f7fa fe4b 	bl	8000328 <__aeabi_dsub>
 8005692:	a381      	add	r3, pc, #516	; (adr r3, 8005898 <_dtoa_r+0x308>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa fffe 	bl	8000698 <__aeabi_dmul>
 800569c:	a380      	add	r3, pc, #512	; (adr r3, 80058a0 <_dtoa_r+0x310>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa fe43 	bl	800032c <__adddf3>
 80056a6:	4606      	mov	r6, r0
 80056a8:	4628      	mov	r0, r5
 80056aa:	460f      	mov	r7, r1
 80056ac:	f7fa ff8a 	bl	80005c4 <__aeabi_i2d>
 80056b0:	a37d      	add	r3, pc, #500	; (adr r3, 80058a8 <_dtoa_r+0x318>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f7fa ffef 	bl	8000698 <__aeabi_dmul>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4630      	mov	r0, r6
 80056c0:	4639      	mov	r1, r7
 80056c2:	f7fa fe33 	bl	800032c <__adddf3>
 80056c6:	4606      	mov	r6, r0
 80056c8:	460f      	mov	r7, r1
 80056ca:	f7fb fa95 	bl	8000bf8 <__aeabi_d2iz>
 80056ce:	2200      	movs	r2, #0
 80056d0:	4682      	mov	sl, r0
 80056d2:	2300      	movs	r3, #0
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fb fa50 	bl	8000b7c <__aeabi_dcmplt>
 80056dc:	b148      	cbz	r0, 80056f2 <_dtoa_r+0x162>
 80056de:	4650      	mov	r0, sl
 80056e0:	f7fa ff70 	bl	80005c4 <__aeabi_i2d>
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	f7fb fa3e 	bl	8000b68 <__aeabi_dcmpeq>
 80056ec:	b908      	cbnz	r0, 80056f2 <_dtoa_r+0x162>
 80056ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80056f2:	f1ba 0f16 	cmp.w	sl, #22
 80056f6:	d859      	bhi.n	80057ac <_dtoa_r+0x21c>
 80056f8:	4970      	ldr	r1, [pc, #448]	; (80058bc <_dtoa_r+0x32c>)
 80056fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80056fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005706:	f7fb fa57 	bl	8000bb8 <__aeabi_dcmpgt>
 800570a:	2800      	cmp	r0, #0
 800570c:	d050      	beq.n	80057b0 <_dtoa_r+0x220>
 800570e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005712:	2300      	movs	r3, #0
 8005714:	930f      	str	r3, [sp, #60]	; 0x3c
 8005716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005718:	1b5d      	subs	r5, r3, r5
 800571a:	f1b5 0801 	subs.w	r8, r5, #1
 800571e:	bf49      	itett	mi
 8005720:	f1c5 0301 	rsbmi	r3, r5, #1
 8005724:	2300      	movpl	r3, #0
 8005726:	9305      	strmi	r3, [sp, #20]
 8005728:	f04f 0800 	movmi.w	r8, #0
 800572c:	bf58      	it	pl
 800572e:	9305      	strpl	r3, [sp, #20]
 8005730:	f1ba 0f00 	cmp.w	sl, #0
 8005734:	db3e      	blt.n	80057b4 <_dtoa_r+0x224>
 8005736:	2300      	movs	r3, #0
 8005738:	44d0      	add	r8, sl
 800573a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	9b06      	ldr	r3, [sp, #24]
 8005742:	2b09      	cmp	r3, #9
 8005744:	f200 8090 	bhi.w	8005868 <_dtoa_r+0x2d8>
 8005748:	2b05      	cmp	r3, #5
 800574a:	bfc4      	itt	gt
 800574c:	3b04      	subgt	r3, #4
 800574e:	9306      	strgt	r3, [sp, #24]
 8005750:	9b06      	ldr	r3, [sp, #24]
 8005752:	f1a3 0302 	sub.w	r3, r3, #2
 8005756:	bfcc      	ite	gt
 8005758:	2500      	movgt	r5, #0
 800575a:	2501      	movle	r5, #1
 800575c:	2b03      	cmp	r3, #3
 800575e:	f200 808f 	bhi.w	8005880 <_dtoa_r+0x2f0>
 8005762:	e8df f003 	tbb	[pc, r3]
 8005766:	7f7d      	.short	0x7f7d
 8005768:	7131      	.short	0x7131
 800576a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800576e:	441d      	add	r5, r3
 8005770:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005774:	2820      	cmp	r0, #32
 8005776:	dd13      	ble.n	80057a0 <_dtoa_r+0x210>
 8005778:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	fa08 f800 	lsl.w	r8, r8, r0
 8005782:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005786:	fa23 f000 	lsr.w	r0, r3, r0
 800578a:	ea48 0000 	orr.w	r0, r8, r0
 800578e:	f7fa ff09 	bl	80005a4 <__aeabi_ui2d>
 8005792:	2301      	movs	r3, #1
 8005794:	4682      	mov	sl, r0
 8005796:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800579a:	3d01      	subs	r5, #1
 800579c:	9313      	str	r3, [sp, #76]	; 0x4c
 800579e:	e772      	b.n	8005686 <_dtoa_r+0xf6>
 80057a0:	9b00      	ldr	r3, [sp, #0]
 80057a2:	f1c0 0020 	rsb	r0, r0, #32
 80057a6:	fa03 f000 	lsl.w	r0, r3, r0
 80057aa:	e7f0      	b.n	800578e <_dtoa_r+0x1fe>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e7b1      	b.n	8005714 <_dtoa_r+0x184>
 80057b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80057b2:	e7b0      	b.n	8005716 <_dtoa_r+0x186>
 80057b4:	9b05      	ldr	r3, [sp, #20]
 80057b6:	eba3 030a 	sub.w	r3, r3, sl
 80057ba:	9305      	str	r3, [sp, #20]
 80057bc:	f1ca 0300 	rsb	r3, sl, #0
 80057c0:	9307      	str	r3, [sp, #28]
 80057c2:	2300      	movs	r3, #0
 80057c4:	930e      	str	r3, [sp, #56]	; 0x38
 80057c6:	e7bb      	b.n	8005740 <_dtoa_r+0x1b0>
 80057c8:	2301      	movs	r3, #1
 80057ca:	930a      	str	r3, [sp, #40]	; 0x28
 80057cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dd59      	ble.n	8005886 <_dtoa_r+0x2f6>
 80057d2:	9302      	str	r3, [sp, #8]
 80057d4:	4699      	mov	r9, r3
 80057d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057d8:	2200      	movs	r2, #0
 80057da:	6072      	str	r2, [r6, #4]
 80057dc:	2204      	movs	r2, #4
 80057de:	f102 0014 	add.w	r0, r2, #20
 80057e2:	4298      	cmp	r0, r3
 80057e4:	6871      	ldr	r1, [r6, #4]
 80057e6:	d953      	bls.n	8005890 <_dtoa_r+0x300>
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 ffdd 	bl	80067a8 <_Balloc>
 80057ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	f1b9 0f0e 	cmp.w	r9, #14
 80057f6:	f8d3 b000 	ldr.w	fp, [r3]
 80057fa:	f200 80e6 	bhi.w	80059ca <_dtoa_r+0x43a>
 80057fe:	2d00      	cmp	r5, #0
 8005800:	f000 80e3 	beq.w	80059ca <_dtoa_r+0x43a>
 8005804:	ed9d 7b00 	vldr	d7, [sp]
 8005808:	f1ba 0f00 	cmp.w	sl, #0
 800580c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005810:	dd74      	ble.n	80058fc <_dtoa_r+0x36c>
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <_dtoa_r+0x32c>)
 8005814:	f00a 030f 	and.w	r3, sl, #15
 8005818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800581c:	ed93 7b00 	vldr	d7, [r3]
 8005820:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005824:	06f0      	lsls	r0, r6, #27
 8005826:	ed8d 7b08 	vstr	d7, [sp, #32]
 800582a:	d565      	bpl.n	80058f8 <_dtoa_r+0x368>
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <_dtoa_r+0x330>)
 800582e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005832:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005836:	f7fb f859 	bl	80008ec <__aeabi_ddiv>
 800583a:	e9cd 0100 	strd	r0, r1, [sp]
 800583e:	f006 060f 	and.w	r6, r6, #15
 8005842:	2503      	movs	r5, #3
 8005844:	4f1e      	ldr	r7, [pc, #120]	; (80058c0 <_dtoa_r+0x330>)
 8005846:	e04c      	b.n	80058e2 <_dtoa_r+0x352>
 8005848:	2301      	movs	r3, #1
 800584a:	930a      	str	r3, [sp, #40]	; 0x28
 800584c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800584e:	4453      	add	r3, sl
 8005850:	f103 0901 	add.w	r9, r3, #1
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	464b      	mov	r3, r9
 8005858:	2b01      	cmp	r3, #1
 800585a:	bfb8      	it	lt
 800585c:	2301      	movlt	r3, #1
 800585e:	e7ba      	b.n	80057d6 <_dtoa_r+0x246>
 8005860:	2300      	movs	r3, #0
 8005862:	e7b2      	b.n	80057ca <_dtoa_r+0x23a>
 8005864:	2300      	movs	r3, #0
 8005866:	e7f0      	b.n	800584a <_dtoa_r+0x2ba>
 8005868:	2501      	movs	r5, #1
 800586a:	2300      	movs	r3, #0
 800586c:	9306      	str	r3, [sp, #24]
 800586e:	950a      	str	r5, [sp, #40]	; 0x28
 8005870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	4699      	mov	r9, r3
 8005878:	2200      	movs	r2, #0
 800587a:	2312      	movs	r3, #18
 800587c:	920b      	str	r2, [sp, #44]	; 0x2c
 800587e:	e7aa      	b.n	80057d6 <_dtoa_r+0x246>
 8005880:	2301      	movs	r3, #1
 8005882:	930a      	str	r3, [sp, #40]	; 0x28
 8005884:	e7f4      	b.n	8005870 <_dtoa_r+0x2e0>
 8005886:	2301      	movs	r3, #1
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	4699      	mov	r9, r3
 800588c:	461a      	mov	r2, r3
 800588e:	e7f5      	b.n	800587c <_dtoa_r+0x2ec>
 8005890:	3101      	adds	r1, #1
 8005892:	6071      	str	r1, [r6, #4]
 8005894:	0052      	lsls	r2, r2, #1
 8005896:	e7a2      	b.n	80057de <_dtoa_r+0x24e>
 8005898:	636f4361 	.word	0x636f4361
 800589c:	3fd287a7 	.word	0x3fd287a7
 80058a0:	8b60c8b3 	.word	0x8b60c8b3
 80058a4:	3fc68a28 	.word	0x3fc68a28
 80058a8:	509f79fb 	.word	0x509f79fb
 80058ac:	3fd34413 	.word	0x3fd34413
 80058b0:	7ff00000 	.word	0x7ff00000
 80058b4:	080088c1 	.word	0x080088c1
 80058b8:	3ff80000 	.word	0x3ff80000
 80058bc:	08008980 	.word	0x08008980
 80058c0:	08008958 	.word	0x08008958
 80058c4:	08008949 	.word	0x08008949
 80058c8:	07f1      	lsls	r1, r6, #31
 80058ca:	d508      	bpl.n	80058de <_dtoa_r+0x34e>
 80058cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d4:	f7fa fee0 	bl	8000698 <__aeabi_dmul>
 80058d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058dc:	3501      	adds	r5, #1
 80058de:	1076      	asrs	r6, r6, #1
 80058e0:	3708      	adds	r7, #8
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	d1f0      	bne.n	80058c8 <_dtoa_r+0x338>
 80058e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ee:	f7fa fffd 	bl	80008ec <__aeabi_ddiv>
 80058f2:	e9cd 0100 	strd	r0, r1, [sp]
 80058f6:	e01a      	b.n	800592e <_dtoa_r+0x39e>
 80058f8:	2502      	movs	r5, #2
 80058fa:	e7a3      	b.n	8005844 <_dtoa_r+0x2b4>
 80058fc:	f000 80a0 	beq.w	8005a40 <_dtoa_r+0x4b0>
 8005900:	f1ca 0600 	rsb	r6, sl, #0
 8005904:	4b9f      	ldr	r3, [pc, #636]	; (8005b84 <_dtoa_r+0x5f4>)
 8005906:	4fa0      	ldr	r7, [pc, #640]	; (8005b88 <_dtoa_r+0x5f8>)
 8005908:	f006 020f 	and.w	r2, r6, #15
 800590c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005918:	f7fa febe 	bl	8000698 <__aeabi_dmul>
 800591c:	e9cd 0100 	strd	r0, r1, [sp]
 8005920:	1136      	asrs	r6, r6, #4
 8005922:	2300      	movs	r3, #0
 8005924:	2502      	movs	r5, #2
 8005926:	2e00      	cmp	r6, #0
 8005928:	d17f      	bne.n	8005a2a <_dtoa_r+0x49a>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e1      	bne.n	80058f2 <_dtoa_r+0x362>
 800592e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8087 	beq.w	8005a44 <_dtoa_r+0x4b4>
 8005936:	e9dd 6700 	ldrd	r6, r7, [sp]
 800593a:	2200      	movs	r2, #0
 800593c:	4b93      	ldr	r3, [pc, #588]	; (8005b8c <_dtoa_r+0x5fc>)
 800593e:	4630      	mov	r0, r6
 8005940:	4639      	mov	r1, r7
 8005942:	f7fb f91b 	bl	8000b7c <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d07c      	beq.n	8005a44 <_dtoa_r+0x4b4>
 800594a:	f1b9 0f00 	cmp.w	r9, #0
 800594e:	d079      	beq.n	8005a44 <_dtoa_r+0x4b4>
 8005950:	9b02      	ldr	r3, [sp, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	dd35      	ble.n	80059c2 <_dtoa_r+0x432>
 8005956:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800595a:	9308      	str	r3, [sp, #32]
 800595c:	4639      	mov	r1, r7
 800595e:	2200      	movs	r2, #0
 8005960:	4b8b      	ldr	r3, [pc, #556]	; (8005b90 <_dtoa_r+0x600>)
 8005962:	4630      	mov	r0, r6
 8005964:	f7fa fe98 	bl	8000698 <__aeabi_dmul>
 8005968:	e9cd 0100 	strd	r0, r1, [sp]
 800596c:	9f02      	ldr	r7, [sp, #8]
 800596e:	3501      	adds	r5, #1
 8005970:	4628      	mov	r0, r5
 8005972:	f7fa fe27 	bl	80005c4 <__aeabi_i2d>
 8005976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800597a:	f7fa fe8d 	bl	8000698 <__aeabi_dmul>
 800597e:	2200      	movs	r2, #0
 8005980:	4b84      	ldr	r3, [pc, #528]	; (8005b94 <_dtoa_r+0x604>)
 8005982:	f7fa fcd3 	bl	800032c <__adddf3>
 8005986:	4605      	mov	r5, r0
 8005988:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800598c:	2f00      	cmp	r7, #0
 800598e:	d15d      	bne.n	8005a4c <_dtoa_r+0x4bc>
 8005990:	2200      	movs	r2, #0
 8005992:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <_dtoa_r+0x608>)
 8005994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005998:	f7fa fcc6 	bl	8000328 <__aeabi_dsub>
 800599c:	462a      	mov	r2, r5
 800599e:	4633      	mov	r3, r6
 80059a0:	e9cd 0100 	strd	r0, r1, [sp]
 80059a4:	f7fb f908 	bl	8000bb8 <__aeabi_dcmpgt>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	f040 8288 	bne.w	8005ebe <_dtoa_r+0x92e>
 80059ae:	462a      	mov	r2, r5
 80059b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b8:	f7fb f8e0 	bl	8000b7c <__aeabi_dcmplt>
 80059bc:	2800      	cmp	r0, #0
 80059be:	f040 827c 	bne.w	8005eba <_dtoa_r+0x92a>
 80059c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059c6:	e9cd 2300 	strd	r2, r3, [sp]
 80059ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f2c0 8150 	blt.w	8005c72 <_dtoa_r+0x6e2>
 80059d2:	f1ba 0f0e 	cmp.w	sl, #14
 80059d6:	f300 814c 	bgt.w	8005c72 <_dtoa_r+0x6e2>
 80059da:	4b6a      	ldr	r3, [pc, #424]	; (8005b84 <_dtoa_r+0x5f4>)
 80059dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80059e0:	ed93 7b00 	vldr	d7, [r3]
 80059e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059ec:	f280 80d8 	bge.w	8005ba0 <_dtoa_r+0x610>
 80059f0:	f1b9 0f00 	cmp.w	r9, #0
 80059f4:	f300 80d4 	bgt.w	8005ba0 <_dtoa_r+0x610>
 80059f8:	f040 825e 	bne.w	8005eb8 <_dtoa_r+0x928>
 80059fc:	2200      	movs	r2, #0
 80059fe:	4b66      	ldr	r3, [pc, #408]	; (8005b98 <_dtoa_r+0x608>)
 8005a00:	ec51 0b17 	vmov	r0, r1, d7
 8005a04:	f7fa fe48 	bl	8000698 <__aeabi_dmul>
 8005a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a0c:	f7fb f8ca 	bl	8000ba4 <__aeabi_dcmpge>
 8005a10:	464f      	mov	r7, r9
 8005a12:	464e      	mov	r6, r9
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f040 8234 	bne.w	8005e82 <_dtoa_r+0x8f2>
 8005a1a:	2331      	movs	r3, #49	; 0x31
 8005a1c:	f10b 0501 	add.w	r5, fp, #1
 8005a20:	f88b 3000 	strb.w	r3, [fp]
 8005a24:	f10a 0a01 	add.w	sl, sl, #1
 8005a28:	e22f      	b.n	8005e8a <_dtoa_r+0x8fa>
 8005a2a:	07f2      	lsls	r2, r6, #31
 8005a2c:	d505      	bpl.n	8005a3a <_dtoa_r+0x4aa>
 8005a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a32:	f7fa fe31 	bl	8000698 <__aeabi_dmul>
 8005a36:	3501      	adds	r5, #1
 8005a38:	2301      	movs	r3, #1
 8005a3a:	1076      	asrs	r6, r6, #1
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	e772      	b.n	8005926 <_dtoa_r+0x396>
 8005a40:	2502      	movs	r5, #2
 8005a42:	e774      	b.n	800592e <_dtoa_r+0x39e>
 8005a44:	f8cd a020 	str.w	sl, [sp, #32]
 8005a48:	464f      	mov	r7, r9
 8005a4a:	e791      	b.n	8005970 <_dtoa_r+0x3e0>
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <_dtoa_r+0x5f4>)
 8005a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d047      	beq.n	8005aec <_dtoa_r+0x55c>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	2000      	movs	r0, #0
 8005a62:	494e      	ldr	r1, [pc, #312]	; (8005b9c <_dtoa_r+0x60c>)
 8005a64:	f7fa ff42 	bl	80008ec <__aeabi_ddiv>
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4633      	mov	r3, r6
 8005a6c:	f7fa fc5c 	bl	8000328 <__aeabi_dsub>
 8005a70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a74:	465d      	mov	r5, fp
 8005a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a7a:	f7fb f8bd 	bl	8000bf8 <__aeabi_d2iz>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	f7fa fda0 	bl	80005c4 <__aeabi_i2d>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a8c:	f7fa fc4c 	bl	8000328 <__aeabi_dsub>
 8005a90:	3630      	adds	r6, #48	; 0x30
 8005a92:	f805 6b01 	strb.w	r6, [r5], #1
 8005a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8005a9e:	f7fb f86d 	bl	8000b7c <__aeabi_dcmplt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d163      	bne.n	8005b6e <_dtoa_r+0x5de>
 8005aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4937      	ldr	r1, [pc, #220]	; (8005b8c <_dtoa_r+0x5fc>)
 8005aae:	f7fa fc3b 	bl	8000328 <__aeabi_dsub>
 8005ab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ab6:	f7fb f861 	bl	8000b7c <__aeabi_dcmplt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f040 80b7 	bne.w	8005c2e <_dtoa_r+0x69e>
 8005ac0:	eba5 030b 	sub.w	r3, r5, fp
 8005ac4:	429f      	cmp	r7, r3
 8005ac6:	f77f af7c 	ble.w	80059c2 <_dtoa_r+0x432>
 8005aca:	2200      	movs	r2, #0
 8005acc:	4b30      	ldr	r3, [pc, #192]	; (8005b90 <_dtoa_r+0x600>)
 8005ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad2:	f7fa fde1 	bl	8000698 <__aeabi_dmul>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005adc:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <_dtoa_r+0x600>)
 8005ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ae2:	f7fa fdd9 	bl	8000698 <__aeabi_dmul>
 8005ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8005aea:	e7c4      	b.n	8005a76 <_dtoa_r+0x4e6>
 8005aec:	462a      	mov	r2, r5
 8005aee:	4633      	mov	r3, r6
 8005af0:	f7fa fdd2 	bl	8000698 <__aeabi_dmul>
 8005af4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005af8:	eb0b 0507 	add.w	r5, fp, r7
 8005afc:	465e      	mov	r6, fp
 8005afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b02:	f7fb f879 	bl	8000bf8 <__aeabi_d2iz>
 8005b06:	4607      	mov	r7, r0
 8005b08:	f7fa fd5c 	bl	80005c4 <__aeabi_i2d>
 8005b0c:	3730      	adds	r7, #48	; 0x30
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b16:	f7fa fc07 	bl	8000328 <__aeabi_dsub>
 8005b1a:	f806 7b01 	strb.w	r7, [r6], #1
 8005b1e:	42ae      	cmp	r6, r5
 8005b20:	e9cd 0100 	strd	r0, r1, [sp]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	d126      	bne.n	8005b78 <_dtoa_r+0x5e8>
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <_dtoa_r+0x60c>)
 8005b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b30:	f7fa fbfc 	bl	800032c <__adddf3>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b3c:	f7fb f83c 	bl	8000bb8 <__aeabi_dcmpgt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d174      	bne.n	8005c2e <_dtoa_r+0x69e>
 8005b44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b48:	2000      	movs	r0, #0
 8005b4a:	4914      	ldr	r1, [pc, #80]	; (8005b9c <_dtoa_r+0x60c>)
 8005b4c:	f7fa fbec 	bl	8000328 <__aeabi_dsub>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b58:	f7fb f810 	bl	8000b7c <__aeabi_dcmplt>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f43f af30 	beq.w	80059c2 <_dtoa_r+0x432>
 8005b62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b66:	2b30      	cmp	r3, #48	; 0x30
 8005b68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005b6c:	d002      	beq.n	8005b74 <_dtoa_r+0x5e4>
 8005b6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b72:	e04a      	b.n	8005c0a <_dtoa_r+0x67a>
 8005b74:	4615      	mov	r5, r2
 8005b76:	e7f4      	b.n	8005b62 <_dtoa_r+0x5d2>
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <_dtoa_r+0x600>)
 8005b7a:	f7fa fd8d 	bl	8000698 <__aeabi_dmul>
 8005b7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b82:	e7bc      	b.n	8005afe <_dtoa_r+0x56e>
 8005b84:	08008980 	.word	0x08008980
 8005b88:	08008958 	.word	0x08008958
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	40240000 	.word	0x40240000
 8005b94:	401c0000 	.word	0x401c0000
 8005b98:	40140000 	.word	0x40140000
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ba4:	465d      	mov	r5, fp
 8005ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005baa:	4630      	mov	r0, r6
 8005bac:	4639      	mov	r1, r7
 8005bae:	f7fa fe9d 	bl	80008ec <__aeabi_ddiv>
 8005bb2:	f7fb f821 	bl	8000bf8 <__aeabi_d2iz>
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	f7fa fd04 	bl	80005c4 <__aeabi_i2d>
 8005bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc0:	f7fa fd6a 	bl	8000698 <__aeabi_dmul>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005bd0:	f7fa fbaa 	bl	8000328 <__aeabi_dsub>
 8005bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005bd8:	eba5 060b 	sub.w	r6, r5, fp
 8005bdc:	45b1      	cmp	r9, r6
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	d139      	bne.n	8005c58 <_dtoa_r+0x6c8>
 8005be4:	f7fa fba2 	bl	800032c <__adddf3>
 8005be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	f7fa ffe2 	bl	8000bb8 <__aeabi_dcmpgt>
 8005bf4:	b9c8      	cbnz	r0, 8005c2a <_dtoa_r+0x69a>
 8005bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa ffb3 	bl	8000b68 <__aeabi_dcmpeq>
 8005c02:	b110      	cbz	r0, 8005c0a <_dtoa_r+0x67a>
 8005c04:	f018 0f01 	tst.w	r8, #1
 8005c08:	d10f      	bne.n	8005c2a <_dtoa_r+0x69a>
 8005c0a:	9904      	ldr	r1, [sp, #16]
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 fdff 	bl	8006810 <_Bfree>
 8005c12:	2300      	movs	r3, #0
 8005c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c16:	702b      	strb	r3, [r5, #0]
 8005c18:	f10a 0301 	add.w	r3, sl, #1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8241 	beq.w	80060a8 <_dtoa_r+0xb18>
 8005c26:	601d      	str	r5, [r3, #0]
 8005c28:	e23e      	b.n	80060a8 <_dtoa_r+0xb18>
 8005c2a:	f8cd a020 	str.w	sl, [sp, #32]
 8005c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c32:	2a39      	cmp	r2, #57	; 0x39
 8005c34:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005c38:	d108      	bne.n	8005c4c <_dtoa_r+0x6bc>
 8005c3a:	459b      	cmp	fp, r3
 8005c3c:	d10a      	bne.n	8005c54 <_dtoa_r+0x6c4>
 8005c3e:	9b08      	ldr	r3, [sp, #32]
 8005c40:	3301      	adds	r3, #1
 8005c42:	9308      	str	r3, [sp, #32]
 8005c44:	2330      	movs	r3, #48	; 0x30
 8005c46:	f88b 3000 	strb.w	r3, [fp]
 8005c4a:	465b      	mov	r3, fp
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	3201      	adds	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e78c      	b.n	8005b6e <_dtoa_r+0x5de>
 8005c54:	461d      	mov	r5, r3
 8005c56:	e7ea      	b.n	8005c2e <_dtoa_r+0x69e>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4b9b      	ldr	r3, [pc, #620]	; (8005ec8 <_dtoa_r+0x938>)
 8005c5c:	f7fa fd1c 	bl	8000698 <__aeabi_dmul>
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	f7fa ff7e 	bl	8000b68 <__aeabi_dcmpeq>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d09a      	beq.n	8005ba6 <_dtoa_r+0x616>
 8005c70:	e7cb      	b.n	8005c0a <_dtoa_r+0x67a>
 8005c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	f000 808b 	beq.w	8005d90 <_dtoa_r+0x800>
 8005c7a:	9a06      	ldr	r2, [sp, #24]
 8005c7c:	2a01      	cmp	r2, #1
 8005c7e:	dc6e      	bgt.n	8005d5e <_dtoa_r+0x7ce>
 8005c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d067      	beq.n	8005d56 <_dtoa_r+0x7c6>
 8005c86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c8a:	9f07      	ldr	r7, [sp, #28]
 8005c8c:	9d05      	ldr	r5, [sp, #20]
 8005c8e:	9a05      	ldr	r2, [sp, #20]
 8005c90:	2101      	movs	r1, #1
 8005c92:	441a      	add	r2, r3
 8005c94:	4620      	mov	r0, r4
 8005c96:	9205      	str	r2, [sp, #20]
 8005c98:	4498      	add	r8, r3
 8005c9a:	f000 fe97 	bl	80069cc <__i2b>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	dd0c      	ble.n	8005cbe <_dtoa_r+0x72e>
 8005ca4:	f1b8 0f00 	cmp.w	r8, #0
 8005ca8:	dd09      	ble.n	8005cbe <_dtoa_r+0x72e>
 8005caa:	4545      	cmp	r5, r8
 8005cac:	9a05      	ldr	r2, [sp, #20]
 8005cae:	462b      	mov	r3, r5
 8005cb0:	bfa8      	it	ge
 8005cb2:	4643      	movge	r3, r8
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	9205      	str	r2, [sp, #20]
 8005cb8:	1aed      	subs	r5, r5, r3
 8005cba:	eba8 0803 	sub.w	r8, r8, r3
 8005cbe:	9b07      	ldr	r3, [sp, #28]
 8005cc0:	b1eb      	cbz	r3, 8005cfe <_dtoa_r+0x76e>
 8005cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d067      	beq.n	8005d98 <_dtoa_r+0x808>
 8005cc8:	b18f      	cbz	r7, 8005cee <_dtoa_r+0x75e>
 8005cca:	4631      	mov	r1, r6
 8005ccc:	463a      	mov	r2, r7
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 ff1c 	bl	8006b0c <__pow5mult>
 8005cd4:	9a04      	ldr	r2, [sp, #16]
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	4606      	mov	r6, r0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fe7f 	bl	80069de <__multiply>
 8005ce0:	9904      	ldr	r1, [sp, #16]
 8005ce2:	9008      	str	r0, [sp, #32]
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fd93 	bl	8006810 <_Bfree>
 8005cea:	9b08      	ldr	r3, [sp, #32]
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	9b07      	ldr	r3, [sp, #28]
 8005cf0:	1bda      	subs	r2, r3, r7
 8005cf2:	d004      	beq.n	8005cfe <_dtoa_r+0x76e>
 8005cf4:	9904      	ldr	r1, [sp, #16]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 ff08 	bl	8006b0c <__pow5mult>
 8005cfc:	9004      	str	r0, [sp, #16]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fe63 	bl	80069cc <__i2b>
 8005d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d08:	4607      	mov	r7, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 81d0 	beq.w	80060b0 <_dtoa_r+0xb20>
 8005d10:	461a      	mov	r2, r3
 8005d12:	4601      	mov	r1, r0
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fef9 	bl	8006b0c <__pow5mult>
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	4607      	mov	r7, r0
 8005d20:	dc40      	bgt.n	8005da4 <_dtoa_r+0x814>
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d139      	bne.n	8005d9c <_dtoa_r+0x80c>
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d136      	bne.n	8005da0 <_dtoa_r+0x810>
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d38:	0d1b      	lsrs	r3, r3, #20
 8005d3a:	051b      	lsls	r3, r3, #20
 8005d3c:	b12b      	cbz	r3, 8005d4a <_dtoa_r+0x7ba>
 8005d3e:	9b05      	ldr	r3, [sp, #20]
 8005d40:	3301      	adds	r3, #1
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	f108 0801 	add.w	r8, r8, #1
 8005d48:	2301      	movs	r3, #1
 8005d4a:	9307      	str	r3, [sp, #28]
 8005d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d12a      	bne.n	8005da8 <_dtoa_r+0x818>
 8005d52:	2001      	movs	r0, #1
 8005d54:	e030      	b.n	8005db8 <_dtoa_r+0x828>
 8005d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d5c:	e795      	b.n	8005c8a <_dtoa_r+0x6fa>
 8005d5e:	9b07      	ldr	r3, [sp, #28]
 8005d60:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005d64:	42bb      	cmp	r3, r7
 8005d66:	bfbf      	itttt	lt
 8005d68:	9b07      	ldrlt	r3, [sp, #28]
 8005d6a:	9707      	strlt	r7, [sp, #28]
 8005d6c:	1afa      	sublt	r2, r7, r3
 8005d6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d70:	bfbb      	ittet	lt
 8005d72:	189b      	addlt	r3, r3, r2
 8005d74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d76:	1bdf      	subge	r7, r3, r7
 8005d78:	2700      	movlt	r7, #0
 8005d7a:	f1b9 0f00 	cmp.w	r9, #0
 8005d7e:	bfb5      	itete	lt
 8005d80:	9b05      	ldrlt	r3, [sp, #20]
 8005d82:	9d05      	ldrge	r5, [sp, #20]
 8005d84:	eba3 0509 	sublt.w	r5, r3, r9
 8005d88:	464b      	movge	r3, r9
 8005d8a:	bfb8      	it	lt
 8005d8c:	2300      	movlt	r3, #0
 8005d8e:	e77e      	b.n	8005c8e <_dtoa_r+0x6fe>
 8005d90:	9f07      	ldr	r7, [sp, #28]
 8005d92:	9d05      	ldr	r5, [sp, #20]
 8005d94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005d96:	e783      	b.n	8005ca0 <_dtoa_r+0x710>
 8005d98:	9a07      	ldr	r2, [sp, #28]
 8005d9a:	e7ab      	b.n	8005cf4 <_dtoa_r+0x764>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e7d4      	b.n	8005d4a <_dtoa_r+0x7ba>
 8005da0:	9b00      	ldr	r3, [sp, #0]
 8005da2:	e7d2      	b.n	8005d4a <_dtoa_r+0x7ba>
 8005da4:	2300      	movs	r3, #0
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005dae:	6918      	ldr	r0, [r3, #16]
 8005db0:	f000 fdbe 	bl	8006930 <__hi0bits>
 8005db4:	f1c0 0020 	rsb	r0, r0, #32
 8005db8:	4440      	add	r0, r8
 8005dba:	f010 001f 	ands.w	r0, r0, #31
 8005dbe:	d047      	beq.n	8005e50 <_dtoa_r+0x8c0>
 8005dc0:	f1c0 0320 	rsb	r3, r0, #32
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	dd3b      	ble.n	8005e40 <_dtoa_r+0x8b0>
 8005dc8:	9b05      	ldr	r3, [sp, #20]
 8005dca:	f1c0 001c 	rsb	r0, r0, #28
 8005dce:	4403      	add	r3, r0
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	4405      	add	r5, r0
 8005dd4:	4480      	add	r8, r0
 8005dd6:	9b05      	ldr	r3, [sp, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dd05      	ble.n	8005de8 <_dtoa_r+0x858>
 8005ddc:	461a      	mov	r2, r3
 8005dde:	9904      	ldr	r1, [sp, #16]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fee1 	bl	8006ba8 <__lshift>
 8005de6:	9004      	str	r0, [sp, #16]
 8005de8:	f1b8 0f00 	cmp.w	r8, #0
 8005dec:	dd05      	ble.n	8005dfa <_dtoa_r+0x86a>
 8005dee:	4639      	mov	r1, r7
 8005df0:	4642      	mov	r2, r8
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fed8 	bl	8006ba8 <__lshift>
 8005df8:	4607      	mov	r7, r0
 8005dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dfc:	b353      	cbz	r3, 8005e54 <_dtoa_r+0x8c4>
 8005dfe:	4639      	mov	r1, r7
 8005e00:	9804      	ldr	r0, [sp, #16]
 8005e02:	f000 ff25 	bl	8006c50 <__mcmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	da24      	bge.n	8005e54 <_dtoa_r+0x8c4>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	9904      	ldr	r1, [sp, #16]
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fd14 	bl	800683e <__multadd>
 8005e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e18:	9004      	str	r0, [sp, #16]
 8005e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 814d 	beq.w	80060be <_dtoa_r+0xb2e>
 8005e24:	2300      	movs	r3, #0
 8005e26:	4631      	mov	r1, r6
 8005e28:	220a      	movs	r2, #10
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fd07 	bl	800683e <__multadd>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	4606      	mov	r6, r0
 8005e36:	dc4f      	bgt.n	8005ed8 <_dtoa_r+0x948>
 8005e38:	9b06      	ldr	r3, [sp, #24]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	dd4c      	ble.n	8005ed8 <_dtoa_r+0x948>
 8005e3e:	e011      	b.n	8005e64 <_dtoa_r+0x8d4>
 8005e40:	d0c9      	beq.n	8005dd6 <_dtoa_r+0x846>
 8005e42:	9a05      	ldr	r2, [sp, #20]
 8005e44:	331c      	adds	r3, #28
 8005e46:	441a      	add	r2, r3
 8005e48:	9205      	str	r2, [sp, #20]
 8005e4a:	441d      	add	r5, r3
 8005e4c:	4498      	add	r8, r3
 8005e4e:	e7c2      	b.n	8005dd6 <_dtoa_r+0x846>
 8005e50:	4603      	mov	r3, r0
 8005e52:	e7f6      	b.n	8005e42 <_dtoa_r+0x8b2>
 8005e54:	f1b9 0f00 	cmp.w	r9, #0
 8005e58:	dc38      	bgt.n	8005ecc <_dtoa_r+0x93c>
 8005e5a:	9b06      	ldr	r3, [sp, #24]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	dd35      	ble.n	8005ecc <_dtoa_r+0x93c>
 8005e60:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	b963      	cbnz	r3, 8005e82 <_dtoa_r+0x8f2>
 8005e68:	4639      	mov	r1, r7
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fce6 	bl	800683e <__multadd>
 8005e72:	4601      	mov	r1, r0
 8005e74:	4607      	mov	r7, r0
 8005e76:	9804      	ldr	r0, [sp, #16]
 8005e78:	f000 feea 	bl	8006c50 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f73f adcc 	bgt.w	8005a1a <_dtoa_r+0x48a>
 8005e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e84:	465d      	mov	r5, fp
 8005e86:	ea6f 0a03 	mvn.w	sl, r3
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fcbd 	bl	8006810 <_Bfree>
 8005e96:	2e00      	cmp	r6, #0
 8005e98:	f43f aeb7 	beq.w	8005c0a <_dtoa_r+0x67a>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	d005      	beq.n	8005eae <_dtoa_r+0x91e>
 8005ea2:	45b1      	cmp	r9, r6
 8005ea4:	d003      	beq.n	8005eae <_dtoa_r+0x91e>
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fcb1 	bl	8006810 <_Bfree>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fcad 	bl	8006810 <_Bfree>
 8005eb6:	e6a8      	b.n	8005c0a <_dtoa_r+0x67a>
 8005eb8:	2700      	movs	r7, #0
 8005eba:	463e      	mov	r6, r7
 8005ebc:	e7e1      	b.n	8005e82 <_dtoa_r+0x8f2>
 8005ebe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ec2:	463e      	mov	r6, r7
 8005ec4:	e5a9      	b.n	8005a1a <_dtoa_r+0x48a>
 8005ec6:	bf00      	nop
 8005ec8:	40240000 	.word	0x40240000
 8005ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ece:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80fa 	beq.w	80060cc <_dtoa_r+0xb3c>
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	dd05      	ble.n	8005ee8 <_dtoa_r+0x958>
 8005edc:	4631      	mov	r1, r6
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fe61 	bl	8006ba8 <__lshift>
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	9b07      	ldr	r3, [sp, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d04c      	beq.n	8005f88 <_dtoa_r+0x9f8>
 8005eee:	6871      	ldr	r1, [r6, #4]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 fc59 	bl	80067a8 <_Balloc>
 8005ef6:	6932      	ldr	r2, [r6, #16]
 8005ef8:	3202      	adds	r2, #2
 8005efa:	4605      	mov	r5, r0
 8005efc:	0092      	lsls	r2, r2, #2
 8005efe:	f106 010c 	add.w	r1, r6, #12
 8005f02:	300c      	adds	r0, #12
 8005f04:	f7fd fd90 	bl	8003a28 <memcpy>
 8005f08:	2201      	movs	r2, #1
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fe4b 	bl	8006ba8 <__lshift>
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	f8cd b014 	str.w	fp, [sp, #20]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	46b1      	mov	r9, r6
 8005f1e:	9307      	str	r3, [sp, #28]
 8005f20:	4606      	mov	r6, r0
 8005f22:	4639      	mov	r1, r7
 8005f24:	9804      	ldr	r0, [sp, #16]
 8005f26:	f7ff faa5 	bl	8005474 <quorem>
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f32:	9804      	ldr	r0, [sp, #16]
 8005f34:	f000 fe8c 	bl	8006c50 <__mcmp>
 8005f38:	4632      	mov	r2, r6
 8005f3a:	9000      	str	r0, [sp, #0]
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 fea0 	bl	8006c84 <__mdiff>
 8005f44:	68c3      	ldr	r3, [r0, #12]
 8005f46:	4602      	mov	r2, r0
 8005f48:	bb03      	cbnz	r3, 8005f8c <_dtoa_r+0x9fc>
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	9008      	str	r0, [sp, #32]
 8005f4e:	9804      	ldr	r0, [sp, #16]
 8005f50:	f000 fe7e 	bl	8006c50 <__mcmp>
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	4603      	mov	r3, r0
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	9308      	str	r3, [sp, #32]
 8005f5e:	f000 fc57 	bl	8006810 <_Bfree>
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	b9a3      	cbnz	r3, 8005f90 <_dtoa_r+0xa00>
 8005f66:	9a06      	ldr	r2, [sp, #24]
 8005f68:	b992      	cbnz	r2, 8005f90 <_dtoa_r+0xa00>
 8005f6a:	9a07      	ldr	r2, [sp, #28]
 8005f6c:	b982      	cbnz	r2, 8005f90 <_dtoa_r+0xa00>
 8005f6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f72:	d029      	beq.n	8005fc8 <_dtoa_r+0xa38>
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd01      	ble.n	8005f7e <_dtoa_r+0x9ee>
 8005f7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005f7e:	9b05      	ldr	r3, [sp, #20]
 8005f80:	1c5d      	adds	r5, r3, #1
 8005f82:	f883 8000 	strb.w	r8, [r3]
 8005f86:	e782      	b.n	8005e8e <_dtoa_r+0x8fe>
 8005f88:	4630      	mov	r0, r6
 8005f8a:	e7c2      	b.n	8005f12 <_dtoa_r+0x982>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e7e3      	b.n	8005f58 <_dtoa_r+0x9c8>
 8005f90:	9a00      	ldr	r2, [sp, #0]
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	db04      	blt.n	8005fa0 <_dtoa_r+0xa10>
 8005f96:	d125      	bne.n	8005fe4 <_dtoa_r+0xa54>
 8005f98:	9a06      	ldr	r2, [sp, #24]
 8005f9a:	bb1a      	cbnz	r2, 8005fe4 <_dtoa_r+0xa54>
 8005f9c:	9a07      	ldr	r2, [sp, #28]
 8005f9e:	bb0a      	cbnz	r2, 8005fe4 <_dtoa_r+0xa54>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	ddec      	ble.n	8005f7e <_dtoa_r+0x9ee>
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	9904      	ldr	r1, [sp, #16]
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fdfd 	bl	8006ba8 <__lshift>
 8005fae:	4639      	mov	r1, r7
 8005fb0:	9004      	str	r0, [sp, #16]
 8005fb2:	f000 fe4d 	bl	8006c50 <__mcmp>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	dc03      	bgt.n	8005fc2 <_dtoa_r+0xa32>
 8005fba:	d1e0      	bne.n	8005f7e <_dtoa_r+0x9ee>
 8005fbc:	f018 0f01 	tst.w	r8, #1
 8005fc0:	d0dd      	beq.n	8005f7e <_dtoa_r+0x9ee>
 8005fc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fc6:	d1d8      	bne.n	8005f7a <_dtoa_r+0x9ea>
 8005fc8:	9b05      	ldr	r3, [sp, #20]
 8005fca:	9a05      	ldr	r2, [sp, #20]
 8005fcc:	1c5d      	adds	r5, r3, #1
 8005fce:	2339      	movs	r3, #57	; 0x39
 8005fd0:	7013      	strb	r3, [r2, #0]
 8005fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fd6:	2b39      	cmp	r3, #57	; 0x39
 8005fd8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005fdc:	d04f      	beq.n	800607e <_dtoa_r+0xaee>
 8005fde:	3301      	adds	r3, #1
 8005fe0:	7013      	strb	r3, [r2, #0]
 8005fe2:	e754      	b.n	8005e8e <_dtoa_r+0x8fe>
 8005fe4:	9a05      	ldr	r2, [sp, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f102 0501 	add.w	r5, r2, #1
 8005fec:	dd06      	ble.n	8005ffc <_dtoa_r+0xa6c>
 8005fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ff2:	d0e9      	beq.n	8005fc8 <_dtoa_r+0xa38>
 8005ff4:	f108 0801 	add.w	r8, r8, #1
 8005ff8:	9b05      	ldr	r3, [sp, #20]
 8005ffa:	e7c2      	b.n	8005f82 <_dtoa_r+0x9f2>
 8005ffc:	9a02      	ldr	r2, [sp, #8]
 8005ffe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006002:	eba5 030b 	sub.w	r3, r5, fp
 8006006:	4293      	cmp	r3, r2
 8006008:	d021      	beq.n	800604e <_dtoa_r+0xabe>
 800600a:	2300      	movs	r3, #0
 800600c:	220a      	movs	r2, #10
 800600e:	9904      	ldr	r1, [sp, #16]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fc14 	bl	800683e <__multadd>
 8006016:	45b1      	cmp	r9, r6
 8006018:	9004      	str	r0, [sp, #16]
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	f04f 020a 	mov.w	r2, #10
 8006022:	4649      	mov	r1, r9
 8006024:	4620      	mov	r0, r4
 8006026:	d105      	bne.n	8006034 <_dtoa_r+0xaa4>
 8006028:	f000 fc09 	bl	800683e <__multadd>
 800602c:	4681      	mov	r9, r0
 800602e:	4606      	mov	r6, r0
 8006030:	9505      	str	r5, [sp, #20]
 8006032:	e776      	b.n	8005f22 <_dtoa_r+0x992>
 8006034:	f000 fc03 	bl	800683e <__multadd>
 8006038:	4631      	mov	r1, r6
 800603a:	4681      	mov	r9, r0
 800603c:	2300      	movs	r3, #0
 800603e:	220a      	movs	r2, #10
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fbfc 	bl	800683e <__multadd>
 8006046:	4606      	mov	r6, r0
 8006048:	e7f2      	b.n	8006030 <_dtoa_r+0xaa0>
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	2201      	movs	r2, #1
 8006050:	9904      	ldr	r1, [sp, #16]
 8006052:	4620      	mov	r0, r4
 8006054:	f000 fda8 	bl	8006ba8 <__lshift>
 8006058:	4639      	mov	r1, r7
 800605a:	9004      	str	r0, [sp, #16]
 800605c:	f000 fdf8 	bl	8006c50 <__mcmp>
 8006060:	2800      	cmp	r0, #0
 8006062:	dcb6      	bgt.n	8005fd2 <_dtoa_r+0xa42>
 8006064:	d102      	bne.n	800606c <_dtoa_r+0xadc>
 8006066:	f018 0f01 	tst.w	r8, #1
 800606a:	d1b2      	bne.n	8005fd2 <_dtoa_r+0xa42>
 800606c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006070:	2b30      	cmp	r3, #48	; 0x30
 8006072:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006076:	f47f af0a 	bne.w	8005e8e <_dtoa_r+0x8fe>
 800607a:	4615      	mov	r5, r2
 800607c:	e7f6      	b.n	800606c <_dtoa_r+0xadc>
 800607e:	4593      	cmp	fp, r2
 8006080:	d105      	bne.n	800608e <_dtoa_r+0xafe>
 8006082:	2331      	movs	r3, #49	; 0x31
 8006084:	f10a 0a01 	add.w	sl, sl, #1
 8006088:	f88b 3000 	strb.w	r3, [fp]
 800608c:	e6ff      	b.n	8005e8e <_dtoa_r+0x8fe>
 800608e:	4615      	mov	r5, r2
 8006090:	e79f      	b.n	8005fd2 <_dtoa_r+0xa42>
 8006092:	f8df b064 	ldr.w	fp, [pc, #100]	; 80060f8 <_dtoa_r+0xb68>
 8006096:	e007      	b.n	80060a8 <_dtoa_r+0xb18>
 8006098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80060fc <_dtoa_r+0xb6c>
 800609e:	b11b      	cbz	r3, 80060a8 <_dtoa_r+0xb18>
 80060a0:	f10b 0308 	add.w	r3, fp, #8
 80060a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	4658      	mov	r0, fp
 80060aa:	b017      	add	sp, #92	; 0x5c
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f77f ae35 	ble.w	8005d22 <_dtoa_r+0x792>
 80060b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ba:	9307      	str	r3, [sp, #28]
 80060bc:	e649      	b.n	8005d52 <_dtoa_r+0x7c2>
 80060be:	9b02      	ldr	r3, [sp, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dc03      	bgt.n	80060cc <_dtoa_r+0xb3c>
 80060c4:	9b06      	ldr	r3, [sp, #24]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	f73f aecc 	bgt.w	8005e64 <_dtoa_r+0x8d4>
 80060cc:	465d      	mov	r5, fp
 80060ce:	4639      	mov	r1, r7
 80060d0:	9804      	ldr	r0, [sp, #16]
 80060d2:	f7ff f9cf 	bl	8005474 <quorem>
 80060d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060da:	f805 8b01 	strb.w	r8, [r5], #1
 80060de:	9a02      	ldr	r2, [sp, #8]
 80060e0:	eba5 030b 	sub.w	r3, r5, fp
 80060e4:	429a      	cmp	r2, r3
 80060e6:	ddb0      	ble.n	800604a <_dtoa_r+0xaba>
 80060e8:	2300      	movs	r3, #0
 80060ea:	220a      	movs	r2, #10
 80060ec:	9904      	ldr	r1, [sp, #16]
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fba5 	bl	800683e <__multadd>
 80060f4:	9004      	str	r0, [sp, #16]
 80060f6:	e7ea      	b.n	80060ce <_dtoa_r+0xb3e>
 80060f8:	080088c0 	.word	0x080088c0
 80060fc:	08008940 	.word	0x08008940

08006100 <rshift>:
 8006100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006102:	6906      	ldr	r6, [r0, #16]
 8006104:	114b      	asrs	r3, r1, #5
 8006106:	429e      	cmp	r6, r3
 8006108:	f100 0414 	add.w	r4, r0, #20
 800610c:	dd30      	ble.n	8006170 <rshift+0x70>
 800610e:	f011 011f 	ands.w	r1, r1, #31
 8006112:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006116:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800611a:	d108      	bne.n	800612e <rshift+0x2e>
 800611c:	4621      	mov	r1, r4
 800611e:	42b2      	cmp	r2, r6
 8006120:	460b      	mov	r3, r1
 8006122:	d211      	bcs.n	8006148 <rshift+0x48>
 8006124:	f852 3b04 	ldr.w	r3, [r2], #4
 8006128:	f841 3b04 	str.w	r3, [r1], #4
 800612c:	e7f7      	b.n	800611e <rshift+0x1e>
 800612e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006132:	f1c1 0c20 	rsb	ip, r1, #32
 8006136:	40cd      	lsrs	r5, r1
 8006138:	3204      	adds	r2, #4
 800613a:	4623      	mov	r3, r4
 800613c:	42b2      	cmp	r2, r6
 800613e:	4617      	mov	r7, r2
 8006140:	d30c      	bcc.n	800615c <rshift+0x5c>
 8006142:	601d      	str	r5, [r3, #0]
 8006144:	b105      	cbz	r5, 8006148 <rshift+0x48>
 8006146:	3304      	adds	r3, #4
 8006148:	1b1a      	subs	r2, r3, r4
 800614a:	42a3      	cmp	r3, r4
 800614c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006150:	bf08      	it	eq
 8006152:	2300      	moveq	r3, #0
 8006154:	6102      	str	r2, [r0, #16]
 8006156:	bf08      	it	eq
 8006158:	6143      	streq	r3, [r0, #20]
 800615a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615c:	683f      	ldr	r7, [r7, #0]
 800615e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006162:	433d      	orrs	r5, r7
 8006164:	f843 5b04 	str.w	r5, [r3], #4
 8006168:	f852 5b04 	ldr.w	r5, [r2], #4
 800616c:	40cd      	lsrs	r5, r1
 800616e:	e7e5      	b.n	800613c <rshift+0x3c>
 8006170:	4623      	mov	r3, r4
 8006172:	e7e9      	b.n	8006148 <rshift+0x48>

08006174 <__hexdig_fun>:
 8006174:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d802      	bhi.n	8006182 <__hexdig_fun+0xe>
 800617c:	3820      	subs	r0, #32
 800617e:	b2c0      	uxtb	r0, r0
 8006180:	4770      	bx	lr
 8006182:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006186:	2b05      	cmp	r3, #5
 8006188:	d801      	bhi.n	800618e <__hexdig_fun+0x1a>
 800618a:	3847      	subs	r0, #71	; 0x47
 800618c:	e7f7      	b.n	800617e <__hexdig_fun+0xa>
 800618e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006192:	2b05      	cmp	r3, #5
 8006194:	d801      	bhi.n	800619a <__hexdig_fun+0x26>
 8006196:	3827      	subs	r0, #39	; 0x27
 8006198:	e7f1      	b.n	800617e <__hexdig_fun+0xa>
 800619a:	2000      	movs	r0, #0
 800619c:	4770      	bx	lr

0800619e <__gethex>:
 800619e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a2:	b08b      	sub	sp, #44	; 0x2c
 80061a4:	468a      	mov	sl, r1
 80061a6:	9002      	str	r0, [sp, #8]
 80061a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80061aa:	9306      	str	r3, [sp, #24]
 80061ac:	4690      	mov	r8, r2
 80061ae:	f000 fad0 	bl	8006752 <__localeconv_l>
 80061b2:	6803      	ldr	r3, [r0, #0]
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f856 	bl	8000268 <strlen>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	9001      	str	r0, [sp, #4]
 80061c0:	4403      	add	r3, r0
 80061c2:	f04f 0b00 	mov.w	fp, #0
 80061c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f8da 3000 	ldr.w	r3, [sl]
 80061d0:	3302      	adds	r3, #2
 80061d2:	461f      	mov	r7, r3
 80061d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061d8:	2830      	cmp	r0, #48	; 0x30
 80061da:	d06c      	beq.n	80062b6 <__gethex+0x118>
 80061dc:	f7ff ffca 	bl	8006174 <__hexdig_fun>
 80061e0:	4604      	mov	r4, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d16a      	bne.n	80062bc <__gethex+0x11e>
 80061e6:	9a01      	ldr	r2, [sp, #4]
 80061e8:	9903      	ldr	r1, [sp, #12]
 80061ea:	4638      	mov	r0, r7
 80061ec:	f001 f8f4 	bl	80073d8 <strncmp>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d166      	bne.n	80062c2 <__gethex+0x124>
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	5cf8      	ldrb	r0, [r7, r3]
 80061f8:	18fe      	adds	r6, r7, r3
 80061fa:	f7ff ffbb 	bl	8006174 <__hexdig_fun>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d062      	beq.n	80062c8 <__gethex+0x12a>
 8006202:	4633      	mov	r3, r6
 8006204:	7818      	ldrb	r0, [r3, #0]
 8006206:	2830      	cmp	r0, #48	; 0x30
 8006208:	461f      	mov	r7, r3
 800620a:	f103 0301 	add.w	r3, r3, #1
 800620e:	d0f9      	beq.n	8006204 <__gethex+0x66>
 8006210:	f7ff ffb0 	bl	8006174 <__hexdig_fun>
 8006214:	fab0 f580 	clz	r5, r0
 8006218:	096d      	lsrs	r5, r5, #5
 800621a:	4634      	mov	r4, r6
 800621c:	f04f 0b01 	mov.w	fp, #1
 8006220:	463a      	mov	r2, r7
 8006222:	4616      	mov	r6, r2
 8006224:	3201      	adds	r2, #1
 8006226:	7830      	ldrb	r0, [r6, #0]
 8006228:	f7ff ffa4 	bl	8006174 <__hexdig_fun>
 800622c:	2800      	cmp	r0, #0
 800622e:	d1f8      	bne.n	8006222 <__gethex+0x84>
 8006230:	9a01      	ldr	r2, [sp, #4]
 8006232:	9903      	ldr	r1, [sp, #12]
 8006234:	4630      	mov	r0, r6
 8006236:	f001 f8cf 	bl	80073d8 <strncmp>
 800623a:	b950      	cbnz	r0, 8006252 <__gethex+0xb4>
 800623c:	b954      	cbnz	r4, 8006254 <__gethex+0xb6>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	18f4      	adds	r4, r6, r3
 8006242:	4622      	mov	r2, r4
 8006244:	4616      	mov	r6, r2
 8006246:	3201      	adds	r2, #1
 8006248:	7830      	ldrb	r0, [r6, #0]
 800624a:	f7ff ff93 	bl	8006174 <__hexdig_fun>
 800624e:	2800      	cmp	r0, #0
 8006250:	d1f8      	bne.n	8006244 <__gethex+0xa6>
 8006252:	b10c      	cbz	r4, 8006258 <__gethex+0xba>
 8006254:	1ba4      	subs	r4, r4, r6
 8006256:	00a4      	lsls	r4, r4, #2
 8006258:	7833      	ldrb	r3, [r6, #0]
 800625a:	2b50      	cmp	r3, #80	; 0x50
 800625c:	d001      	beq.n	8006262 <__gethex+0xc4>
 800625e:	2b70      	cmp	r3, #112	; 0x70
 8006260:	d140      	bne.n	80062e4 <__gethex+0x146>
 8006262:	7873      	ldrb	r3, [r6, #1]
 8006264:	2b2b      	cmp	r3, #43	; 0x2b
 8006266:	d031      	beq.n	80062cc <__gethex+0x12e>
 8006268:	2b2d      	cmp	r3, #45	; 0x2d
 800626a:	d033      	beq.n	80062d4 <__gethex+0x136>
 800626c:	1c71      	adds	r1, r6, #1
 800626e:	f04f 0900 	mov.w	r9, #0
 8006272:	7808      	ldrb	r0, [r1, #0]
 8006274:	f7ff ff7e 	bl	8006174 <__hexdig_fun>
 8006278:	1e43      	subs	r3, r0, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b18      	cmp	r3, #24
 800627e:	d831      	bhi.n	80062e4 <__gethex+0x146>
 8006280:	f1a0 0210 	sub.w	r2, r0, #16
 8006284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006288:	f7ff ff74 	bl	8006174 <__hexdig_fun>
 800628c:	1e43      	subs	r3, r0, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b18      	cmp	r3, #24
 8006292:	d922      	bls.n	80062da <__gethex+0x13c>
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	d000      	beq.n	800629c <__gethex+0xfe>
 800629a:	4252      	negs	r2, r2
 800629c:	4414      	add	r4, r2
 800629e:	f8ca 1000 	str.w	r1, [sl]
 80062a2:	b30d      	cbz	r5, 80062e8 <__gethex+0x14a>
 80062a4:	f1bb 0f00 	cmp.w	fp, #0
 80062a8:	bf0c      	ite	eq
 80062aa:	2706      	moveq	r7, #6
 80062ac:	2700      	movne	r7, #0
 80062ae:	4638      	mov	r0, r7
 80062b0:	b00b      	add	sp, #44	; 0x2c
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	f10b 0b01 	add.w	fp, fp, #1
 80062ba:	e78a      	b.n	80061d2 <__gethex+0x34>
 80062bc:	2500      	movs	r5, #0
 80062be:	462c      	mov	r4, r5
 80062c0:	e7ae      	b.n	8006220 <__gethex+0x82>
 80062c2:	463e      	mov	r6, r7
 80062c4:	2501      	movs	r5, #1
 80062c6:	e7c7      	b.n	8006258 <__gethex+0xba>
 80062c8:	4604      	mov	r4, r0
 80062ca:	e7fb      	b.n	80062c4 <__gethex+0x126>
 80062cc:	f04f 0900 	mov.w	r9, #0
 80062d0:	1cb1      	adds	r1, r6, #2
 80062d2:	e7ce      	b.n	8006272 <__gethex+0xd4>
 80062d4:	f04f 0901 	mov.w	r9, #1
 80062d8:	e7fa      	b.n	80062d0 <__gethex+0x132>
 80062da:	230a      	movs	r3, #10
 80062dc:	fb03 0202 	mla	r2, r3, r2, r0
 80062e0:	3a10      	subs	r2, #16
 80062e2:	e7cf      	b.n	8006284 <__gethex+0xe6>
 80062e4:	4631      	mov	r1, r6
 80062e6:	e7da      	b.n	800629e <__gethex+0x100>
 80062e8:	1bf3      	subs	r3, r6, r7
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4629      	mov	r1, r5
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	dc49      	bgt.n	8006386 <__gethex+0x1e8>
 80062f2:	9802      	ldr	r0, [sp, #8]
 80062f4:	f000 fa58 	bl	80067a8 <_Balloc>
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	f100 0914 	add.w	r9, r0, #20
 80062fe:	f04f 0b00 	mov.w	fp, #0
 8006302:	f1c3 0301 	rsb	r3, r3, #1
 8006306:	4605      	mov	r5, r0
 8006308:	f8cd 9010 	str.w	r9, [sp, #16]
 800630c:	46da      	mov	sl, fp
 800630e:	9308      	str	r3, [sp, #32]
 8006310:	42b7      	cmp	r7, r6
 8006312:	d33b      	bcc.n	800638c <__gethex+0x1ee>
 8006314:	9804      	ldr	r0, [sp, #16]
 8006316:	f840 ab04 	str.w	sl, [r0], #4
 800631a:	eba0 0009 	sub.w	r0, r0, r9
 800631e:	1080      	asrs	r0, r0, #2
 8006320:	6128      	str	r0, [r5, #16]
 8006322:	0147      	lsls	r7, r0, #5
 8006324:	4650      	mov	r0, sl
 8006326:	f000 fb03 	bl	8006930 <__hi0bits>
 800632a:	f8d8 6000 	ldr.w	r6, [r8]
 800632e:	1a3f      	subs	r7, r7, r0
 8006330:	42b7      	cmp	r7, r6
 8006332:	dd64      	ble.n	80063fe <__gethex+0x260>
 8006334:	1bbf      	subs	r7, r7, r6
 8006336:	4639      	mov	r1, r7
 8006338:	4628      	mov	r0, r5
 800633a:	f000 fe13 	bl	8006f64 <__any_on>
 800633e:	4682      	mov	sl, r0
 8006340:	b178      	cbz	r0, 8006362 <__gethex+0x1c4>
 8006342:	1e7b      	subs	r3, r7, #1
 8006344:	1159      	asrs	r1, r3, #5
 8006346:	f003 021f 	and.w	r2, r3, #31
 800634a:	f04f 0a01 	mov.w	sl, #1
 800634e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006352:	fa0a f202 	lsl.w	r2, sl, r2
 8006356:	420a      	tst	r2, r1
 8006358:	d003      	beq.n	8006362 <__gethex+0x1c4>
 800635a:	4553      	cmp	r3, sl
 800635c:	dc46      	bgt.n	80063ec <__gethex+0x24e>
 800635e:	f04f 0a02 	mov.w	sl, #2
 8006362:	4639      	mov	r1, r7
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff fecb 	bl	8006100 <rshift>
 800636a:	443c      	add	r4, r7
 800636c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006370:	42a3      	cmp	r3, r4
 8006372:	da52      	bge.n	800641a <__gethex+0x27c>
 8006374:	4629      	mov	r1, r5
 8006376:	9802      	ldr	r0, [sp, #8]
 8006378:	f000 fa4a 	bl	8006810 <_Bfree>
 800637c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800637e:	2300      	movs	r3, #0
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	27a3      	movs	r7, #163	; 0xa3
 8006384:	e793      	b.n	80062ae <__gethex+0x110>
 8006386:	3101      	adds	r1, #1
 8006388:	105b      	asrs	r3, r3, #1
 800638a:	e7b0      	b.n	80062ee <__gethex+0x150>
 800638c:	1e73      	subs	r3, r6, #1
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	9a07      	ldr	r2, [sp, #28]
 8006392:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <__gethex+0x22e>
 800639a:	f1bb 0f20 	cmp.w	fp, #32
 800639e:	d107      	bne.n	80063b0 <__gethex+0x212>
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	f8c3 a000 	str.w	sl, [r3]
 80063a6:	3304      	adds	r3, #4
 80063a8:	f04f 0a00 	mov.w	sl, #0
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	46d3      	mov	fp, sl
 80063b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063b4:	f7ff fede 	bl	8006174 <__hexdig_fun>
 80063b8:	f000 000f 	and.w	r0, r0, #15
 80063bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80063c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80063c4:	f10b 0b04 	add.w	fp, fp, #4
 80063c8:	9b05      	ldr	r3, [sp, #20]
 80063ca:	e00d      	b.n	80063e8 <__gethex+0x24a>
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	9a08      	ldr	r2, [sp, #32]
 80063d0:	4413      	add	r3, r2
 80063d2:	42bb      	cmp	r3, r7
 80063d4:	d3e1      	bcc.n	800639a <__gethex+0x1fc>
 80063d6:	4618      	mov	r0, r3
 80063d8:	9a01      	ldr	r2, [sp, #4]
 80063da:	9903      	ldr	r1, [sp, #12]
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	f000 fffb 	bl	80073d8 <strncmp>
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d1d8      	bne.n	800639a <__gethex+0x1fc>
 80063e8:	461e      	mov	r6, r3
 80063ea:	e791      	b.n	8006310 <__gethex+0x172>
 80063ec:	1eb9      	subs	r1, r7, #2
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fdb8 	bl	8006f64 <__any_on>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d0b2      	beq.n	800635e <__gethex+0x1c0>
 80063f8:	f04f 0a03 	mov.w	sl, #3
 80063fc:	e7b1      	b.n	8006362 <__gethex+0x1c4>
 80063fe:	da09      	bge.n	8006414 <__gethex+0x276>
 8006400:	1bf7      	subs	r7, r6, r7
 8006402:	4629      	mov	r1, r5
 8006404:	463a      	mov	r2, r7
 8006406:	9802      	ldr	r0, [sp, #8]
 8006408:	f000 fbce 	bl	8006ba8 <__lshift>
 800640c:	1be4      	subs	r4, r4, r7
 800640e:	4605      	mov	r5, r0
 8006410:	f100 0914 	add.w	r9, r0, #20
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	e7a8      	b.n	800636c <__gethex+0x1ce>
 800641a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800641e:	42a0      	cmp	r0, r4
 8006420:	dd6a      	ble.n	80064f8 <__gethex+0x35a>
 8006422:	1b04      	subs	r4, r0, r4
 8006424:	42a6      	cmp	r6, r4
 8006426:	dc2e      	bgt.n	8006486 <__gethex+0x2e8>
 8006428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d022      	beq.n	8006476 <__gethex+0x2d8>
 8006430:	2b03      	cmp	r3, #3
 8006432:	d024      	beq.n	800647e <__gethex+0x2e0>
 8006434:	2b01      	cmp	r3, #1
 8006436:	d115      	bne.n	8006464 <__gethex+0x2c6>
 8006438:	42a6      	cmp	r6, r4
 800643a:	d113      	bne.n	8006464 <__gethex+0x2c6>
 800643c:	2e01      	cmp	r6, #1
 800643e:	dc0b      	bgt.n	8006458 <__gethex+0x2ba>
 8006440:	9a06      	ldr	r2, [sp, #24]
 8006442:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	2301      	movs	r3, #1
 800644a:	612b      	str	r3, [r5, #16]
 800644c:	f8c9 3000 	str.w	r3, [r9]
 8006450:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006452:	2762      	movs	r7, #98	; 0x62
 8006454:	601d      	str	r5, [r3, #0]
 8006456:	e72a      	b.n	80062ae <__gethex+0x110>
 8006458:	1e71      	subs	r1, r6, #1
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fd82 	bl	8006f64 <__any_on>
 8006460:	2800      	cmp	r0, #0
 8006462:	d1ed      	bne.n	8006440 <__gethex+0x2a2>
 8006464:	4629      	mov	r1, r5
 8006466:	9802      	ldr	r0, [sp, #8]
 8006468:	f000 f9d2 	bl	8006810 <_Bfree>
 800646c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800646e:	2300      	movs	r3, #0
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	2750      	movs	r7, #80	; 0x50
 8006474:	e71b      	b.n	80062ae <__gethex+0x110>
 8006476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0e1      	beq.n	8006440 <__gethex+0x2a2>
 800647c:	e7f2      	b.n	8006464 <__gethex+0x2c6>
 800647e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1dd      	bne.n	8006440 <__gethex+0x2a2>
 8006484:	e7ee      	b.n	8006464 <__gethex+0x2c6>
 8006486:	1e67      	subs	r7, r4, #1
 8006488:	f1ba 0f00 	cmp.w	sl, #0
 800648c:	d131      	bne.n	80064f2 <__gethex+0x354>
 800648e:	b127      	cbz	r7, 800649a <__gethex+0x2fc>
 8006490:	4639      	mov	r1, r7
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fd66 	bl	8006f64 <__any_on>
 8006498:	4682      	mov	sl, r0
 800649a:	117a      	asrs	r2, r7, #5
 800649c:	2301      	movs	r3, #1
 800649e:	f007 071f 	and.w	r7, r7, #31
 80064a2:	fa03 f707 	lsl.w	r7, r3, r7
 80064a6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80064aa:	4621      	mov	r1, r4
 80064ac:	421f      	tst	r7, r3
 80064ae:	4628      	mov	r0, r5
 80064b0:	bf18      	it	ne
 80064b2:	f04a 0a02 	orrne.w	sl, sl, #2
 80064b6:	1b36      	subs	r6, r6, r4
 80064b8:	f7ff fe22 	bl	8006100 <rshift>
 80064bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80064c0:	2702      	movs	r7, #2
 80064c2:	f1ba 0f00 	cmp.w	sl, #0
 80064c6:	d048      	beq.n	800655a <__gethex+0x3bc>
 80064c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d015      	beq.n	80064fc <__gethex+0x35e>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d017      	beq.n	8006504 <__gethex+0x366>
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d109      	bne.n	80064ec <__gethex+0x34e>
 80064d8:	f01a 0f02 	tst.w	sl, #2
 80064dc:	d006      	beq.n	80064ec <__gethex+0x34e>
 80064de:	f8d9 3000 	ldr.w	r3, [r9]
 80064e2:	ea4a 0a03 	orr.w	sl, sl, r3
 80064e6:	f01a 0f01 	tst.w	sl, #1
 80064ea:	d10e      	bne.n	800650a <__gethex+0x36c>
 80064ec:	f047 0710 	orr.w	r7, r7, #16
 80064f0:	e033      	b.n	800655a <__gethex+0x3bc>
 80064f2:	f04f 0a01 	mov.w	sl, #1
 80064f6:	e7d0      	b.n	800649a <__gethex+0x2fc>
 80064f8:	2701      	movs	r7, #1
 80064fa:	e7e2      	b.n	80064c2 <__gethex+0x324>
 80064fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fe:	f1c3 0301 	rsb	r3, r3, #1
 8006502:	9315      	str	r3, [sp, #84]	; 0x54
 8006504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <__gethex+0x34e>
 800650a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800650e:	f105 0314 	add.w	r3, r5, #20
 8006512:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006516:	eb03 010a 	add.w	r1, r3, sl
 800651a:	f04f 0c00 	mov.w	ip, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f853 2b04 	ldr.w	r2, [r3], #4
 8006524:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006528:	d01c      	beq.n	8006564 <__gethex+0x3c6>
 800652a:	3201      	adds	r2, #1
 800652c:	6002      	str	r2, [r0, #0]
 800652e:	2f02      	cmp	r7, #2
 8006530:	f105 0314 	add.w	r3, r5, #20
 8006534:	d138      	bne.n	80065a8 <__gethex+0x40a>
 8006536:	f8d8 2000 	ldr.w	r2, [r8]
 800653a:	3a01      	subs	r2, #1
 800653c:	42b2      	cmp	r2, r6
 800653e:	d10a      	bne.n	8006556 <__gethex+0x3b8>
 8006540:	1171      	asrs	r1, r6, #5
 8006542:	2201      	movs	r2, #1
 8006544:	f006 061f 	and.w	r6, r6, #31
 8006548:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800654c:	fa02 f606 	lsl.w	r6, r2, r6
 8006550:	421e      	tst	r6, r3
 8006552:	bf18      	it	ne
 8006554:	4617      	movne	r7, r2
 8006556:	f047 0720 	orr.w	r7, r7, #32
 800655a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800655c:	601d      	str	r5, [r3, #0]
 800655e:	9b06      	ldr	r3, [sp, #24]
 8006560:	601c      	str	r4, [r3, #0]
 8006562:	e6a4      	b.n	80062ae <__gethex+0x110>
 8006564:	4299      	cmp	r1, r3
 8006566:	f843 cc04 	str.w	ip, [r3, #-4]
 800656a:	d8d8      	bhi.n	800651e <__gethex+0x380>
 800656c:	68ab      	ldr	r3, [r5, #8]
 800656e:	4599      	cmp	r9, r3
 8006570:	db12      	blt.n	8006598 <__gethex+0x3fa>
 8006572:	6869      	ldr	r1, [r5, #4]
 8006574:	9802      	ldr	r0, [sp, #8]
 8006576:	3101      	adds	r1, #1
 8006578:	f000 f916 	bl	80067a8 <_Balloc>
 800657c:	692a      	ldr	r2, [r5, #16]
 800657e:	3202      	adds	r2, #2
 8006580:	f105 010c 	add.w	r1, r5, #12
 8006584:	4683      	mov	fp, r0
 8006586:	0092      	lsls	r2, r2, #2
 8006588:	300c      	adds	r0, #12
 800658a:	f7fd fa4d 	bl	8003a28 <memcpy>
 800658e:	4629      	mov	r1, r5
 8006590:	9802      	ldr	r0, [sp, #8]
 8006592:	f000 f93d 	bl	8006810 <_Bfree>
 8006596:	465d      	mov	r5, fp
 8006598:	692b      	ldr	r3, [r5, #16]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80065a0:	612a      	str	r2, [r5, #16]
 80065a2:	2201      	movs	r2, #1
 80065a4:	615a      	str	r2, [r3, #20]
 80065a6:	e7c2      	b.n	800652e <__gethex+0x390>
 80065a8:	692a      	ldr	r2, [r5, #16]
 80065aa:	454a      	cmp	r2, r9
 80065ac:	dd0b      	ble.n	80065c6 <__gethex+0x428>
 80065ae:	2101      	movs	r1, #1
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7ff fda5 	bl	8006100 <rshift>
 80065b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065ba:	3401      	adds	r4, #1
 80065bc:	42a3      	cmp	r3, r4
 80065be:	f6ff aed9 	blt.w	8006374 <__gethex+0x1d6>
 80065c2:	2701      	movs	r7, #1
 80065c4:	e7c7      	b.n	8006556 <__gethex+0x3b8>
 80065c6:	f016 061f 	ands.w	r6, r6, #31
 80065ca:	d0fa      	beq.n	80065c2 <__gethex+0x424>
 80065cc:	449a      	add	sl, r3
 80065ce:	f1c6 0620 	rsb	r6, r6, #32
 80065d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80065d6:	f000 f9ab 	bl	8006930 <__hi0bits>
 80065da:	42b0      	cmp	r0, r6
 80065dc:	dbe7      	blt.n	80065ae <__gethex+0x410>
 80065de:	e7f0      	b.n	80065c2 <__gethex+0x424>

080065e0 <L_shift>:
 80065e0:	f1c2 0208 	rsb	r2, r2, #8
 80065e4:	0092      	lsls	r2, r2, #2
 80065e6:	b570      	push	{r4, r5, r6, lr}
 80065e8:	f1c2 0620 	rsb	r6, r2, #32
 80065ec:	6843      	ldr	r3, [r0, #4]
 80065ee:	6804      	ldr	r4, [r0, #0]
 80065f0:	fa03 f506 	lsl.w	r5, r3, r6
 80065f4:	432c      	orrs	r4, r5
 80065f6:	40d3      	lsrs	r3, r2
 80065f8:	6004      	str	r4, [r0, #0]
 80065fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80065fe:	4288      	cmp	r0, r1
 8006600:	d3f4      	bcc.n	80065ec <L_shift+0xc>
 8006602:	bd70      	pop	{r4, r5, r6, pc}

08006604 <__match>:
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	6803      	ldr	r3, [r0, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660e:	b914      	cbnz	r4, 8006616 <__match+0x12>
 8006610:	6003      	str	r3, [r0, #0]
 8006612:	2001      	movs	r0, #1
 8006614:	bd30      	pop	{r4, r5, pc}
 8006616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800661a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800661e:	2d19      	cmp	r5, #25
 8006620:	bf98      	it	ls
 8006622:	3220      	addls	r2, #32
 8006624:	42a2      	cmp	r2, r4
 8006626:	d0f0      	beq.n	800660a <__match+0x6>
 8006628:	2000      	movs	r0, #0
 800662a:	e7f3      	b.n	8006614 <__match+0x10>

0800662c <__hexnan>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	680b      	ldr	r3, [r1, #0]
 8006632:	6801      	ldr	r1, [r0, #0]
 8006634:	115f      	asrs	r7, r3, #5
 8006636:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800663a:	f013 031f 	ands.w	r3, r3, #31
 800663e:	b087      	sub	sp, #28
 8006640:	bf18      	it	ne
 8006642:	3704      	addne	r7, #4
 8006644:	2500      	movs	r5, #0
 8006646:	1f3e      	subs	r6, r7, #4
 8006648:	4682      	mov	sl, r0
 800664a:	4690      	mov	r8, r2
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	f847 5c04 	str.w	r5, [r7, #-4]
 8006652:	46b1      	mov	r9, r6
 8006654:	4634      	mov	r4, r6
 8006656:	9502      	str	r5, [sp, #8]
 8006658:	46ab      	mov	fp, r5
 800665a:	784a      	ldrb	r2, [r1, #1]
 800665c:	1c4b      	adds	r3, r1, #1
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	b342      	cbz	r2, 80066b4 <__hexnan+0x88>
 8006662:	4610      	mov	r0, r2
 8006664:	9105      	str	r1, [sp, #20]
 8006666:	9204      	str	r2, [sp, #16]
 8006668:	f7ff fd84 	bl	8006174 <__hexdig_fun>
 800666c:	2800      	cmp	r0, #0
 800666e:	d143      	bne.n	80066f8 <__hexnan+0xcc>
 8006670:	9a04      	ldr	r2, [sp, #16]
 8006672:	9905      	ldr	r1, [sp, #20]
 8006674:	2a20      	cmp	r2, #32
 8006676:	d818      	bhi.n	80066aa <__hexnan+0x7e>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	459b      	cmp	fp, r3
 800667c:	dd13      	ble.n	80066a6 <__hexnan+0x7a>
 800667e:	454c      	cmp	r4, r9
 8006680:	d206      	bcs.n	8006690 <__hexnan+0x64>
 8006682:	2d07      	cmp	r5, #7
 8006684:	dc04      	bgt.n	8006690 <__hexnan+0x64>
 8006686:	462a      	mov	r2, r5
 8006688:	4649      	mov	r1, r9
 800668a:	4620      	mov	r0, r4
 800668c:	f7ff ffa8 	bl	80065e0 <L_shift>
 8006690:	4544      	cmp	r4, r8
 8006692:	d944      	bls.n	800671e <__hexnan+0xf2>
 8006694:	2300      	movs	r3, #0
 8006696:	f1a4 0904 	sub.w	r9, r4, #4
 800669a:	f844 3c04 	str.w	r3, [r4, #-4]
 800669e:	f8cd b008 	str.w	fp, [sp, #8]
 80066a2:	464c      	mov	r4, r9
 80066a4:	461d      	mov	r5, r3
 80066a6:	9903      	ldr	r1, [sp, #12]
 80066a8:	e7d7      	b.n	800665a <__hexnan+0x2e>
 80066aa:	2a29      	cmp	r2, #41	; 0x29
 80066ac:	d14a      	bne.n	8006744 <__hexnan+0x118>
 80066ae:	3102      	adds	r1, #2
 80066b0:	f8ca 1000 	str.w	r1, [sl]
 80066b4:	f1bb 0f00 	cmp.w	fp, #0
 80066b8:	d044      	beq.n	8006744 <__hexnan+0x118>
 80066ba:	454c      	cmp	r4, r9
 80066bc:	d206      	bcs.n	80066cc <__hexnan+0xa0>
 80066be:	2d07      	cmp	r5, #7
 80066c0:	dc04      	bgt.n	80066cc <__hexnan+0xa0>
 80066c2:	462a      	mov	r2, r5
 80066c4:	4649      	mov	r1, r9
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ff8a 	bl	80065e0 <L_shift>
 80066cc:	4544      	cmp	r4, r8
 80066ce:	d928      	bls.n	8006722 <__hexnan+0xf6>
 80066d0:	4643      	mov	r3, r8
 80066d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80066d6:	f843 2b04 	str.w	r2, [r3], #4
 80066da:	42a6      	cmp	r6, r4
 80066dc:	d2f9      	bcs.n	80066d2 <__hexnan+0xa6>
 80066de:	2200      	movs	r2, #0
 80066e0:	f843 2b04 	str.w	r2, [r3], #4
 80066e4:	429e      	cmp	r6, r3
 80066e6:	d2fb      	bcs.n	80066e0 <__hexnan+0xb4>
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	b91b      	cbnz	r3, 80066f4 <__hexnan+0xc8>
 80066ec:	4546      	cmp	r6, r8
 80066ee:	d127      	bne.n	8006740 <__hexnan+0x114>
 80066f0:	2301      	movs	r3, #1
 80066f2:	6033      	str	r3, [r6, #0]
 80066f4:	2005      	movs	r0, #5
 80066f6:	e026      	b.n	8006746 <__hexnan+0x11a>
 80066f8:	3501      	adds	r5, #1
 80066fa:	2d08      	cmp	r5, #8
 80066fc:	f10b 0b01 	add.w	fp, fp, #1
 8006700:	dd06      	ble.n	8006710 <__hexnan+0xe4>
 8006702:	4544      	cmp	r4, r8
 8006704:	d9cf      	bls.n	80066a6 <__hexnan+0x7a>
 8006706:	2300      	movs	r3, #0
 8006708:	f844 3c04 	str.w	r3, [r4, #-4]
 800670c:	2501      	movs	r5, #1
 800670e:	3c04      	subs	r4, #4
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	f000 000f 	and.w	r0, r0, #15
 8006716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800671a:	6020      	str	r0, [r4, #0]
 800671c:	e7c3      	b.n	80066a6 <__hexnan+0x7a>
 800671e:	2508      	movs	r5, #8
 8006720:	e7c1      	b.n	80066a6 <__hexnan+0x7a>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0df      	beq.n	80066e8 <__hexnan+0xbc>
 8006728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800672c:	f1c3 0320 	rsb	r3, r3, #32
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006738:	401a      	ands	r2, r3
 800673a:	f847 2c04 	str.w	r2, [r7, #-4]
 800673e:	e7d3      	b.n	80066e8 <__hexnan+0xbc>
 8006740:	3e04      	subs	r6, #4
 8006742:	e7d1      	b.n	80066e8 <__hexnan+0xbc>
 8006744:	2004      	movs	r0, #4
 8006746:	b007      	add	sp, #28
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800674c <__locale_ctype_ptr_l>:
 800674c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006750:	4770      	bx	lr

08006752 <__localeconv_l>:
 8006752:	30f0      	adds	r0, #240	; 0xf0
 8006754:	4770      	bx	lr
	...

08006758 <_localeconv_r>:
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <_localeconv_r+0x14>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6a18      	ldr	r0, [r3, #32]
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <_localeconv_r+0x18>)
 8006760:	2800      	cmp	r0, #0
 8006762:	bf08      	it	eq
 8006764:	4618      	moveq	r0, r3
 8006766:	30f0      	adds	r0, #240	; 0xf0
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	2000000c 	.word	0x2000000c
 8006770:	20000070 	.word	0x20000070

08006774 <malloc>:
 8006774:	4b02      	ldr	r3, [pc, #8]	; (8006780 <malloc+0xc>)
 8006776:	4601      	mov	r1, r0
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f000 bc71 	b.w	8007060 <_malloc_r>
 800677e:	bf00      	nop
 8006780:	2000000c 	.word	0x2000000c

08006784 <__ascii_mbtowc>:
 8006784:	b082      	sub	sp, #8
 8006786:	b901      	cbnz	r1, 800678a <__ascii_mbtowc+0x6>
 8006788:	a901      	add	r1, sp, #4
 800678a:	b142      	cbz	r2, 800679e <__ascii_mbtowc+0x1a>
 800678c:	b14b      	cbz	r3, 80067a2 <__ascii_mbtowc+0x1e>
 800678e:	7813      	ldrb	r3, [r2, #0]
 8006790:	600b      	str	r3, [r1, #0]
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	1c10      	adds	r0, r2, #0
 8006796:	bf18      	it	ne
 8006798:	2001      	movne	r0, #1
 800679a:	b002      	add	sp, #8
 800679c:	4770      	bx	lr
 800679e:	4610      	mov	r0, r2
 80067a0:	e7fb      	b.n	800679a <__ascii_mbtowc+0x16>
 80067a2:	f06f 0001 	mvn.w	r0, #1
 80067a6:	e7f8      	b.n	800679a <__ascii_mbtowc+0x16>

080067a8 <_Balloc>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067ac:	4604      	mov	r4, r0
 80067ae:	460e      	mov	r6, r1
 80067b0:	b93d      	cbnz	r5, 80067c2 <_Balloc+0x1a>
 80067b2:	2010      	movs	r0, #16
 80067b4:	f7ff ffde 	bl	8006774 <malloc>
 80067b8:	6260      	str	r0, [r4, #36]	; 0x24
 80067ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067be:	6005      	str	r5, [r0, #0]
 80067c0:	60c5      	str	r5, [r0, #12]
 80067c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067c4:	68eb      	ldr	r3, [r5, #12]
 80067c6:	b183      	cbz	r3, 80067ea <_Balloc+0x42>
 80067c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067d0:	b9b8      	cbnz	r0, 8006802 <_Balloc+0x5a>
 80067d2:	2101      	movs	r1, #1
 80067d4:	fa01 f506 	lsl.w	r5, r1, r6
 80067d8:	1d6a      	adds	r2, r5, #5
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fbe2 	bl	8006fa6 <_calloc_r>
 80067e2:	b160      	cbz	r0, 80067fe <_Balloc+0x56>
 80067e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80067e8:	e00e      	b.n	8006808 <_Balloc+0x60>
 80067ea:	2221      	movs	r2, #33	; 0x21
 80067ec:	2104      	movs	r1, #4
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 fbd9 	bl	8006fa6 <_calloc_r>
 80067f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f6:	60e8      	str	r0, [r5, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e4      	bne.n	80067c8 <_Balloc+0x20>
 80067fe:	2000      	movs	r0, #0
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	6802      	ldr	r2, [r0, #0]
 8006804:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006808:	2300      	movs	r3, #0
 800680a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800680e:	e7f7      	b.n	8006800 <_Balloc+0x58>

08006810 <_Bfree>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006814:	4606      	mov	r6, r0
 8006816:	460d      	mov	r5, r1
 8006818:	b93c      	cbnz	r4, 800682a <_Bfree+0x1a>
 800681a:	2010      	movs	r0, #16
 800681c:	f7ff ffaa 	bl	8006774 <malloc>
 8006820:	6270      	str	r0, [r6, #36]	; 0x24
 8006822:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006826:	6004      	str	r4, [r0, #0]
 8006828:	60c4      	str	r4, [r0, #12]
 800682a:	b13d      	cbz	r5, 800683c <_Bfree+0x2c>
 800682c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800682e:	686a      	ldr	r2, [r5, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006836:	6029      	str	r1, [r5, #0]
 8006838:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800683c:	bd70      	pop	{r4, r5, r6, pc}

0800683e <__multadd>:
 800683e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006842:	690d      	ldr	r5, [r1, #16]
 8006844:	461f      	mov	r7, r3
 8006846:	4606      	mov	r6, r0
 8006848:	460c      	mov	r4, r1
 800684a:	f101 0c14 	add.w	ip, r1, #20
 800684e:	2300      	movs	r3, #0
 8006850:	f8dc 0000 	ldr.w	r0, [ip]
 8006854:	b281      	uxth	r1, r0
 8006856:	fb02 7101 	mla	r1, r2, r1, r7
 800685a:	0c0f      	lsrs	r7, r1, #16
 800685c:	0c00      	lsrs	r0, r0, #16
 800685e:	fb02 7000 	mla	r0, r2, r0, r7
 8006862:	b289      	uxth	r1, r1
 8006864:	3301      	adds	r3, #1
 8006866:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800686a:	429d      	cmp	r5, r3
 800686c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006870:	f84c 1b04 	str.w	r1, [ip], #4
 8006874:	dcec      	bgt.n	8006850 <__multadd+0x12>
 8006876:	b1d7      	cbz	r7, 80068ae <__multadd+0x70>
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	42ab      	cmp	r3, r5
 800687c:	dc12      	bgt.n	80068a4 <__multadd+0x66>
 800687e:	6861      	ldr	r1, [r4, #4]
 8006880:	4630      	mov	r0, r6
 8006882:	3101      	adds	r1, #1
 8006884:	f7ff ff90 	bl	80067a8 <_Balloc>
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	3202      	adds	r2, #2
 800688c:	f104 010c 	add.w	r1, r4, #12
 8006890:	4680      	mov	r8, r0
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	300c      	adds	r0, #12
 8006896:	f7fd f8c7 	bl	8003a28 <memcpy>
 800689a:	4621      	mov	r1, r4
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff ffb7 	bl	8006810 <_Bfree>
 80068a2:	4644      	mov	r4, r8
 80068a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068a8:	3501      	adds	r5, #1
 80068aa:	615f      	str	r7, [r3, #20]
 80068ac:	6125      	str	r5, [r4, #16]
 80068ae:	4620      	mov	r0, r4
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068b4 <__s2b>:
 80068b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b8:	460c      	mov	r4, r1
 80068ba:	4615      	mov	r5, r2
 80068bc:	461f      	mov	r7, r3
 80068be:	2209      	movs	r2, #9
 80068c0:	3308      	adds	r3, #8
 80068c2:	4606      	mov	r6, r0
 80068c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c8:	2100      	movs	r1, #0
 80068ca:	2201      	movs	r2, #1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	db20      	blt.n	8006912 <__s2b+0x5e>
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff69 	bl	80067a8 <_Balloc>
 80068d6:	9b08      	ldr	r3, [sp, #32]
 80068d8:	6143      	str	r3, [r0, #20]
 80068da:	2d09      	cmp	r5, #9
 80068dc:	f04f 0301 	mov.w	r3, #1
 80068e0:	6103      	str	r3, [r0, #16]
 80068e2:	dd19      	ble.n	8006918 <__s2b+0x64>
 80068e4:	f104 0809 	add.w	r8, r4, #9
 80068e8:	46c1      	mov	r9, r8
 80068ea:	442c      	add	r4, r5
 80068ec:	f819 3b01 	ldrb.w	r3, [r9], #1
 80068f0:	4601      	mov	r1, r0
 80068f2:	3b30      	subs	r3, #48	; 0x30
 80068f4:	220a      	movs	r2, #10
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ffa1 	bl	800683e <__multadd>
 80068fc:	45a1      	cmp	r9, r4
 80068fe:	d1f5      	bne.n	80068ec <__s2b+0x38>
 8006900:	eb08 0405 	add.w	r4, r8, r5
 8006904:	3c08      	subs	r4, #8
 8006906:	1b2d      	subs	r5, r5, r4
 8006908:	1963      	adds	r3, r4, r5
 800690a:	42bb      	cmp	r3, r7
 800690c:	db07      	blt.n	800691e <__s2b+0x6a>
 800690e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006912:	0052      	lsls	r2, r2, #1
 8006914:	3101      	adds	r1, #1
 8006916:	e7d9      	b.n	80068cc <__s2b+0x18>
 8006918:	340a      	adds	r4, #10
 800691a:	2509      	movs	r5, #9
 800691c:	e7f3      	b.n	8006906 <__s2b+0x52>
 800691e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006922:	4601      	mov	r1, r0
 8006924:	3b30      	subs	r3, #48	; 0x30
 8006926:	220a      	movs	r2, #10
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff ff88 	bl	800683e <__multadd>
 800692e:	e7eb      	b.n	8006908 <__s2b+0x54>

08006930 <__hi0bits>:
 8006930:	0c02      	lsrs	r2, r0, #16
 8006932:	0412      	lsls	r2, r2, #16
 8006934:	4603      	mov	r3, r0
 8006936:	b9b2      	cbnz	r2, 8006966 <__hi0bits+0x36>
 8006938:	0403      	lsls	r3, r0, #16
 800693a:	2010      	movs	r0, #16
 800693c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006940:	bf04      	itt	eq
 8006942:	021b      	lsleq	r3, r3, #8
 8006944:	3008      	addeq	r0, #8
 8006946:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800694a:	bf04      	itt	eq
 800694c:	011b      	lsleq	r3, r3, #4
 800694e:	3004      	addeq	r0, #4
 8006950:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006954:	bf04      	itt	eq
 8006956:	009b      	lsleq	r3, r3, #2
 8006958:	3002      	addeq	r0, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	db06      	blt.n	800696c <__hi0bits+0x3c>
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	d503      	bpl.n	800696a <__hi0bits+0x3a>
 8006962:	3001      	adds	r0, #1
 8006964:	4770      	bx	lr
 8006966:	2000      	movs	r0, #0
 8006968:	e7e8      	b.n	800693c <__hi0bits+0xc>
 800696a:	2020      	movs	r0, #32
 800696c:	4770      	bx	lr

0800696e <__lo0bits>:
 800696e:	6803      	ldr	r3, [r0, #0]
 8006970:	f013 0207 	ands.w	r2, r3, #7
 8006974:	4601      	mov	r1, r0
 8006976:	d00b      	beq.n	8006990 <__lo0bits+0x22>
 8006978:	07da      	lsls	r2, r3, #31
 800697a:	d423      	bmi.n	80069c4 <__lo0bits+0x56>
 800697c:	0798      	lsls	r0, r3, #30
 800697e:	bf49      	itett	mi
 8006980:	085b      	lsrmi	r3, r3, #1
 8006982:	089b      	lsrpl	r3, r3, #2
 8006984:	2001      	movmi	r0, #1
 8006986:	600b      	strmi	r3, [r1, #0]
 8006988:	bf5c      	itt	pl
 800698a:	600b      	strpl	r3, [r1, #0]
 800698c:	2002      	movpl	r0, #2
 800698e:	4770      	bx	lr
 8006990:	b298      	uxth	r0, r3
 8006992:	b9a8      	cbnz	r0, 80069c0 <__lo0bits+0x52>
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	2010      	movs	r0, #16
 8006998:	f013 0fff 	tst.w	r3, #255	; 0xff
 800699c:	bf04      	itt	eq
 800699e:	0a1b      	lsreq	r3, r3, #8
 80069a0:	3008      	addeq	r0, #8
 80069a2:	071a      	lsls	r2, r3, #28
 80069a4:	bf04      	itt	eq
 80069a6:	091b      	lsreq	r3, r3, #4
 80069a8:	3004      	addeq	r0, #4
 80069aa:	079a      	lsls	r2, r3, #30
 80069ac:	bf04      	itt	eq
 80069ae:	089b      	lsreq	r3, r3, #2
 80069b0:	3002      	addeq	r0, #2
 80069b2:	07da      	lsls	r2, r3, #31
 80069b4:	d402      	bmi.n	80069bc <__lo0bits+0x4e>
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	d006      	beq.n	80069c8 <__lo0bits+0x5a>
 80069ba:	3001      	adds	r0, #1
 80069bc:	600b      	str	r3, [r1, #0]
 80069be:	4770      	bx	lr
 80069c0:	4610      	mov	r0, r2
 80069c2:	e7e9      	b.n	8006998 <__lo0bits+0x2a>
 80069c4:	2000      	movs	r0, #0
 80069c6:	4770      	bx	lr
 80069c8:	2020      	movs	r0, #32
 80069ca:	4770      	bx	lr

080069cc <__i2b>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	460c      	mov	r4, r1
 80069d0:	2101      	movs	r1, #1
 80069d2:	f7ff fee9 	bl	80067a8 <_Balloc>
 80069d6:	2201      	movs	r2, #1
 80069d8:	6144      	str	r4, [r0, #20]
 80069da:	6102      	str	r2, [r0, #16]
 80069dc:	bd10      	pop	{r4, pc}

080069de <__multiply>:
 80069de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e2:	4614      	mov	r4, r2
 80069e4:	690a      	ldr	r2, [r1, #16]
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	bfb8      	it	lt
 80069ec:	460b      	movlt	r3, r1
 80069ee:	4688      	mov	r8, r1
 80069f0:	bfbc      	itt	lt
 80069f2:	46a0      	movlt	r8, r4
 80069f4:	461c      	movlt	r4, r3
 80069f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a02:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a06:	eb07 0609 	add.w	r6, r7, r9
 8006a0a:	42b3      	cmp	r3, r6
 8006a0c:	bfb8      	it	lt
 8006a0e:	3101      	addlt	r1, #1
 8006a10:	f7ff feca 	bl	80067a8 <_Balloc>
 8006a14:	f100 0514 	add.w	r5, r0, #20
 8006a18:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4573      	cmp	r3, lr
 8006a22:	d316      	bcc.n	8006a52 <__multiply+0x74>
 8006a24:	f104 0214 	add.w	r2, r4, #20
 8006a28:	f108 0114 	add.w	r1, r8, #20
 8006a2c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	9b00      	ldr	r3, [sp, #0]
 8006a38:	9201      	str	r2, [sp, #4]
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d80c      	bhi.n	8006a58 <__multiply+0x7a>
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	dd03      	ble.n	8006a4a <__multiply+0x6c>
 8006a42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d05d      	beq.n	8006b06 <__multiply+0x128>
 8006a4a:	6106      	str	r6, [r0, #16]
 8006a4c:	b003      	add	sp, #12
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	f843 2b04 	str.w	r2, [r3], #4
 8006a56:	e7e3      	b.n	8006a20 <__multiply+0x42>
 8006a58:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a5c:	f1bb 0f00 	cmp.w	fp, #0
 8006a60:	d023      	beq.n	8006aaa <__multiply+0xcc>
 8006a62:	4689      	mov	r9, r1
 8006a64:	46ac      	mov	ip, r5
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a6e:	f8dc a000 	ldr.w	sl, [ip]
 8006a72:	b2a3      	uxth	r3, r4
 8006a74:	fa1f fa8a 	uxth.w	sl, sl
 8006a78:	fb0b a303 	mla	r3, fp, r3, sl
 8006a7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a80:	f8dc 4000 	ldr.w	r4, [ip]
 8006a84:	4443      	add	r3, r8
 8006a86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a8a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a92:	46e2      	mov	sl, ip
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a9a:	454f      	cmp	r7, r9
 8006a9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006aa0:	f84a 3b04 	str.w	r3, [sl], #4
 8006aa4:	d82b      	bhi.n	8006afe <__multiply+0x120>
 8006aa6:	f8cc 8004 	str.w	r8, [ip, #4]
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006ab0:	3204      	adds	r2, #4
 8006ab2:	f1ba 0f00 	cmp.w	sl, #0
 8006ab6:	d020      	beq.n	8006afa <__multiply+0x11c>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	4689      	mov	r9, r1
 8006abc:	46a8      	mov	r8, r5
 8006abe:	f04f 0b00 	mov.w	fp, #0
 8006ac2:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ac6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006aca:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ace:	445c      	add	r4, fp
 8006ad0:	46c4      	mov	ip, r8
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ad8:	f84c 3b04 	str.w	r3, [ip], #4
 8006adc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ae0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	fb0a b303 	mla	r3, sl, r3, fp
 8006aea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006aee:	454f      	cmp	r7, r9
 8006af0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006af4:	d805      	bhi.n	8006b02 <__multiply+0x124>
 8006af6:	f8c8 3004 	str.w	r3, [r8, #4]
 8006afa:	3504      	adds	r5, #4
 8006afc:	e79b      	b.n	8006a36 <__multiply+0x58>
 8006afe:	46d4      	mov	ip, sl
 8006b00:	e7b3      	b.n	8006a6a <__multiply+0x8c>
 8006b02:	46e0      	mov	r8, ip
 8006b04:	e7dd      	b.n	8006ac2 <__multiply+0xe4>
 8006b06:	3e01      	subs	r6, #1
 8006b08:	e799      	b.n	8006a3e <__multiply+0x60>
	...

08006b0c <__pow5mult>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4615      	mov	r5, r2
 8006b12:	f012 0203 	ands.w	r2, r2, #3
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	d007      	beq.n	8006b2c <__pow5mult+0x20>
 8006b1c:	3a01      	subs	r2, #1
 8006b1e:	4c21      	ldr	r4, [pc, #132]	; (8006ba4 <__pow5mult+0x98>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b26:	f7ff fe8a 	bl	800683e <__multadd>
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	10ad      	asrs	r5, r5, #2
 8006b2e:	d035      	beq.n	8006b9c <__pow5mult+0x90>
 8006b30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b32:	b93c      	cbnz	r4, 8006b44 <__pow5mult+0x38>
 8006b34:	2010      	movs	r0, #16
 8006b36:	f7ff fe1d 	bl	8006774 <malloc>
 8006b3a:	6270      	str	r0, [r6, #36]	; 0x24
 8006b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b40:	6004      	str	r4, [r0, #0]
 8006b42:	60c4      	str	r4, [r0, #12]
 8006b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b4c:	b94c      	cbnz	r4, 8006b62 <__pow5mult+0x56>
 8006b4e:	f240 2171 	movw	r1, #625	; 0x271
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ff3a 	bl	80069cc <__i2b>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b5e:	4604      	mov	r4, r0
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	07eb      	lsls	r3, r5, #31
 8006b68:	d50a      	bpl.n	8006b80 <__pow5mult+0x74>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7ff ff35 	bl	80069de <__multiply>
 8006b74:	4639      	mov	r1, r7
 8006b76:	4681      	mov	r9, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff fe49 	bl	8006810 <_Bfree>
 8006b7e:	464f      	mov	r7, r9
 8006b80:	106d      	asrs	r5, r5, #1
 8006b82:	d00b      	beq.n	8006b9c <__pow5mult+0x90>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	b938      	cbnz	r0, 8006b98 <__pow5mult+0x8c>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff ff26 	bl	80069de <__multiply>
 8006b92:	6020      	str	r0, [r4, #0]
 8006b94:	f8c0 8000 	str.w	r8, [r0]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	e7e4      	b.n	8006b66 <__pow5mult+0x5a>
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08008a48 	.word	0x08008a48

08006ba8 <__lshift>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	6849      	ldr	r1, [r1, #4]
 8006bb6:	eb0a 0903 	add.w	r9, sl, r3
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	f109 0501 	add.w	r5, r9, #1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	db32      	blt.n	8006c2e <__lshift+0x86>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff fded 	bl	80067a8 <_Balloc>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	f100 0114 	add.w	r1, r0, #20
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4553      	cmp	r3, sl
 8006bda:	db2b      	blt.n	8006c34 <__lshift+0x8c>
 8006bdc:	6920      	ldr	r0, [r4, #16]
 8006bde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be2:	f104 0314 	add.w	r3, r4, #20
 8006be6:	f016 021f 	ands.w	r2, r6, #31
 8006bea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf2:	d025      	beq.n	8006c40 <__lshift+0x98>
 8006bf4:	f1c2 0e20 	rsb	lr, r2, #32
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	468a      	mov	sl, r1
 8006bfe:	4096      	lsls	r6, r2
 8006c00:	4330      	orrs	r0, r6
 8006c02:	f84a 0b04 	str.w	r0, [sl], #4
 8006c06:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c0a:	459c      	cmp	ip, r3
 8006c0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c10:	d814      	bhi.n	8006c3c <__lshift+0x94>
 8006c12:	6048      	str	r0, [r1, #4]
 8006c14:	b108      	cbz	r0, 8006c1a <__lshift+0x72>
 8006c16:	f109 0502 	add.w	r5, r9, #2
 8006c1a:	3d01      	subs	r5, #1
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c22:	4621      	mov	r1, r4
 8006c24:	f7ff fdf4 	bl	8006810 <_Bfree>
 8006c28:	4640      	mov	r0, r8
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	3101      	adds	r1, #1
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	e7c7      	b.n	8006bc4 <__lshift+0x1c>
 8006c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	e7cd      	b.n	8006bd8 <__lshift+0x30>
 8006c3c:	4651      	mov	r1, sl
 8006c3e:	e7dc      	b.n	8006bfa <__lshift+0x52>
 8006c40:	3904      	subs	r1, #4
 8006c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c46:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c4a:	459c      	cmp	ip, r3
 8006c4c:	d8f9      	bhi.n	8006c42 <__lshift+0x9a>
 8006c4e:	e7e4      	b.n	8006c1a <__lshift+0x72>

08006c50 <__mcmp>:
 8006c50:	6903      	ldr	r3, [r0, #16]
 8006c52:	690a      	ldr	r2, [r1, #16]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	b530      	push	{r4, r5, lr}
 8006c58:	d10c      	bne.n	8006c74 <__mcmp+0x24>
 8006c5a:	0092      	lsls	r2, r2, #2
 8006c5c:	3014      	adds	r0, #20
 8006c5e:	3114      	adds	r1, #20
 8006c60:	1884      	adds	r4, r0, r2
 8006c62:	4411      	add	r1, r2
 8006c64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c6c:	4295      	cmp	r5, r2
 8006c6e:	d003      	beq.n	8006c78 <__mcmp+0x28>
 8006c70:	d305      	bcc.n	8006c7e <__mcmp+0x2e>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd30      	pop	{r4, r5, pc}
 8006c78:	42a0      	cmp	r0, r4
 8006c7a:	d3f3      	bcc.n	8006c64 <__mcmp+0x14>
 8006c7c:	e7fa      	b.n	8006c74 <__mcmp+0x24>
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c82:	e7f7      	b.n	8006c74 <__mcmp+0x24>

08006c84 <__mdiff>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	460d      	mov	r5, r1
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4614      	mov	r4, r2
 8006c92:	f7ff ffdd 	bl	8006c50 <__mcmp>
 8006c96:	1e06      	subs	r6, r0, #0
 8006c98:	d108      	bne.n	8006cac <__mdiff+0x28>
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff fd83 	bl	80067a8 <_Balloc>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	bfa4      	itt	ge
 8006cae:	4623      	movge	r3, r4
 8006cb0:	462c      	movge	r4, r5
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	6861      	ldr	r1, [r4, #4]
 8006cb6:	bfa6      	itte	ge
 8006cb8:	461d      	movge	r5, r3
 8006cba:	2600      	movge	r6, #0
 8006cbc:	2601      	movlt	r6, #1
 8006cbe:	f7ff fd73 	bl	80067a8 <_Balloc>
 8006cc2:	692b      	ldr	r3, [r5, #16]
 8006cc4:	60c6      	str	r6, [r0, #12]
 8006cc6:	6926      	ldr	r6, [r4, #16]
 8006cc8:	f105 0914 	add.w	r9, r5, #20
 8006ccc:	f104 0214 	add.w	r2, r4, #20
 8006cd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006cd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006cd8:	f100 0514 	add.w	r5, r0, #20
 8006cdc:	f04f 0e00 	mov.w	lr, #0
 8006ce0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ce4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ce8:	fa1e f18a 	uxtah	r1, lr, sl
 8006cec:	b2a3      	uxth	r3, r4
 8006cee:	1ac9      	subs	r1, r1, r3
 8006cf0:	0c23      	lsrs	r3, r4, #16
 8006cf2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006cf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cfa:	b289      	uxth	r1, r1
 8006cfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d00:	45c8      	cmp	r8, r9
 8006d02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d06:	4694      	mov	ip, r2
 8006d08:	f845 3b04 	str.w	r3, [r5], #4
 8006d0c:	d8e8      	bhi.n	8006ce0 <__mdiff+0x5c>
 8006d0e:	45bc      	cmp	ip, r7
 8006d10:	d304      	bcc.n	8006d1c <__mdiff+0x98>
 8006d12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d16:	b183      	cbz	r3, 8006d3a <__mdiff+0xb6>
 8006d18:	6106      	str	r6, [r0, #16]
 8006d1a:	e7c5      	b.n	8006ca8 <__mdiff+0x24>
 8006d1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d20:	fa1e f381 	uxtah	r3, lr, r1
 8006d24:	141a      	asrs	r2, r3, #16
 8006d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d34:	f845 3b04 	str.w	r3, [r5], #4
 8006d38:	e7e9      	b.n	8006d0e <__mdiff+0x8a>
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	e7e9      	b.n	8006d12 <__mdiff+0x8e>
	...

08006d40 <__ulp>:
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <__ulp+0x4c>)
 8006d42:	ee10 2a90 	vmov	r2, s1
 8006d46:	401a      	ands	r2, r3
 8006d48:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dd04      	ble.n	8006d5a <__ulp+0x1a>
 8006d50:	2000      	movs	r0, #0
 8006d52:	4619      	mov	r1, r3
 8006d54:	ec41 0b10 	vmov	d0, r0, r1
 8006d58:	4770      	bx	lr
 8006d5a:	425b      	negs	r3, r3
 8006d5c:	151b      	asrs	r3, r3, #20
 8006d5e:	2b13      	cmp	r3, #19
 8006d60:	f04f 0000 	mov.w	r0, #0
 8006d64:	f04f 0100 	mov.w	r1, #0
 8006d68:	dc04      	bgt.n	8006d74 <__ulp+0x34>
 8006d6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d6e:	fa42 f103 	asr.w	r1, r2, r3
 8006d72:	e7ef      	b.n	8006d54 <__ulp+0x14>
 8006d74:	3b14      	subs	r3, #20
 8006d76:	2b1e      	cmp	r3, #30
 8006d78:	f04f 0201 	mov.w	r2, #1
 8006d7c:	bfda      	itte	le
 8006d7e:	f1c3 031f 	rsble	r3, r3, #31
 8006d82:	fa02 f303 	lslle.w	r3, r2, r3
 8006d86:	4613      	movgt	r3, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	e7e3      	b.n	8006d54 <__ulp+0x14>
 8006d8c:	7ff00000 	.word	0x7ff00000

08006d90 <__b2d>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	6905      	ldr	r5, [r0, #16]
 8006d94:	f100 0714 	add.w	r7, r0, #20
 8006d98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006d9c:	1f2e      	subs	r6, r5, #4
 8006d9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff fdc4 	bl	8006930 <__hi0bits>
 8006da8:	f1c0 0320 	rsb	r3, r0, #32
 8006dac:	280a      	cmp	r0, #10
 8006dae:	600b      	str	r3, [r1, #0]
 8006db0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006e28 <__b2d+0x98>
 8006db4:	dc14      	bgt.n	8006de0 <__b2d+0x50>
 8006db6:	f1c0 0e0b 	rsb	lr, r0, #11
 8006dba:	fa24 f10e 	lsr.w	r1, r4, lr
 8006dbe:	42b7      	cmp	r7, r6
 8006dc0:	ea41 030c 	orr.w	r3, r1, ip
 8006dc4:	bf34      	ite	cc
 8006dc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006dca:	2100      	movcs	r1, #0
 8006dcc:	3015      	adds	r0, #21
 8006dce:	fa04 f000 	lsl.w	r0, r4, r0
 8006dd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8006dd6:	ea40 0201 	orr.w	r2, r0, r1
 8006dda:	ec43 2b10 	vmov	d0, r2, r3
 8006dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de0:	42b7      	cmp	r7, r6
 8006de2:	bf3a      	itte	cc
 8006de4:	f1a5 0608 	subcc.w	r6, r5, #8
 8006de8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006dec:	2100      	movcs	r1, #0
 8006dee:	380b      	subs	r0, #11
 8006df0:	d015      	beq.n	8006e1e <__b2d+0x8e>
 8006df2:	4084      	lsls	r4, r0
 8006df4:	f1c0 0520 	rsb	r5, r0, #32
 8006df8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006dfc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006e00:	42be      	cmp	r6, r7
 8006e02:	fa21 fc05 	lsr.w	ip, r1, r5
 8006e06:	ea44 030c 	orr.w	r3, r4, ip
 8006e0a:	bf8c      	ite	hi
 8006e0c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006e10:	2400      	movls	r4, #0
 8006e12:	fa01 f000 	lsl.w	r0, r1, r0
 8006e16:	40ec      	lsrs	r4, r5
 8006e18:	ea40 0204 	orr.w	r2, r0, r4
 8006e1c:	e7dd      	b.n	8006dda <__b2d+0x4a>
 8006e1e:	ea44 030c 	orr.w	r3, r4, ip
 8006e22:	460a      	mov	r2, r1
 8006e24:	e7d9      	b.n	8006dda <__b2d+0x4a>
 8006e26:	bf00      	nop
 8006e28:	3ff00000 	.word	0x3ff00000

08006e2c <__d2b>:
 8006e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	460e      	mov	r6, r1
 8006e32:	2101      	movs	r1, #1
 8006e34:	ec59 8b10 	vmov	r8, r9, d0
 8006e38:	4615      	mov	r5, r2
 8006e3a:	f7ff fcb5 	bl	80067a8 <_Balloc>
 8006e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e42:	4607      	mov	r7, r0
 8006e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e48:	bb34      	cbnz	r4, 8006e98 <__d2b+0x6c>
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	f1b8 0300 	subs.w	r3, r8, #0
 8006e50:	d027      	beq.n	8006ea2 <__d2b+0x76>
 8006e52:	a802      	add	r0, sp, #8
 8006e54:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006e58:	f7ff fd89 	bl	800696e <__lo0bits>
 8006e5c:	9900      	ldr	r1, [sp, #0]
 8006e5e:	b1f0      	cbz	r0, 8006e9e <__d2b+0x72>
 8006e60:	9a01      	ldr	r2, [sp, #4]
 8006e62:	f1c0 0320 	rsb	r3, r0, #32
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	40c2      	lsrs	r2, r0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	9201      	str	r2, [sp, #4]
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bf14      	ite	ne
 8006e7a:	2102      	movne	r1, #2
 8006e7c:	2101      	moveq	r1, #1
 8006e7e:	6139      	str	r1, [r7, #16]
 8006e80:	b1c4      	cbz	r4, 8006eb4 <__d2b+0x88>
 8006e82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006e86:	4404      	add	r4, r0
 8006e88:	6034      	str	r4, [r6, #0]
 8006e8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e8e:	6028      	str	r0, [r5, #0]
 8006e90:	4638      	mov	r0, r7
 8006e92:	b003      	add	sp, #12
 8006e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e9c:	e7d5      	b.n	8006e4a <__d2b+0x1e>
 8006e9e:	6179      	str	r1, [r7, #20]
 8006ea0:	e7e7      	b.n	8006e72 <__d2b+0x46>
 8006ea2:	a801      	add	r0, sp, #4
 8006ea4:	f7ff fd63 	bl	800696e <__lo0bits>
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	2101      	movs	r1, #1
 8006eae:	6139      	str	r1, [r7, #16]
 8006eb0:	3020      	adds	r0, #32
 8006eb2:	e7e5      	b.n	8006e80 <__d2b+0x54>
 8006eb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ebc:	6030      	str	r0, [r6, #0]
 8006ebe:	6918      	ldr	r0, [r3, #16]
 8006ec0:	f7ff fd36 	bl	8006930 <__hi0bits>
 8006ec4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ec8:	e7e1      	b.n	8006e8e <__d2b+0x62>

08006eca <__ratio>:
 8006eca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ece:	4688      	mov	r8, r1
 8006ed0:	4669      	mov	r1, sp
 8006ed2:	4681      	mov	r9, r0
 8006ed4:	f7ff ff5c 	bl	8006d90 <__b2d>
 8006ed8:	a901      	add	r1, sp, #4
 8006eda:	4640      	mov	r0, r8
 8006edc:	ec57 6b10 	vmov	r6, r7, d0
 8006ee0:	f7ff ff56 	bl	8006d90 <__b2d>
 8006ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ee8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006eec:	eba3 0c02 	sub.w	ip, r3, r2
 8006ef0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006efa:	ec5b ab10 	vmov	sl, fp, d0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfce      	itee	gt
 8006f02:	463a      	movgt	r2, r7
 8006f04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f08:	465a      	movle	r2, fp
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	463d      	mov	r5, r7
 8006f0e:	bfd4      	ite	le
 8006f10:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006f14:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006f18:	4630      	mov	r0, r6
 8006f1a:	ee10 2a10 	vmov	r2, s0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 fce3 	bl	80008ec <__aeabi_ddiv>
 8006f26:	ec41 0b10 	vmov	d0, r0, r1
 8006f2a:	b003      	add	sp, #12
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f30 <__copybits>:
 8006f30:	3901      	subs	r1, #1
 8006f32:	b510      	push	{r4, lr}
 8006f34:	1149      	asrs	r1, r1, #5
 8006f36:	6914      	ldr	r4, [r2, #16]
 8006f38:	3101      	adds	r1, #1
 8006f3a:	f102 0314 	add.w	r3, r2, #20
 8006f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	4602      	mov	r2, r0
 8006f4a:	d303      	bcc.n	8006f54 <__copybits+0x24>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	428a      	cmp	r2, r1
 8006f50:	d305      	bcc.n	8006f5e <__copybits+0x2e>
 8006f52:	bd10      	pop	{r4, pc}
 8006f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f58:	f840 2b04 	str.w	r2, [r0], #4
 8006f5c:	e7f3      	b.n	8006f46 <__copybits+0x16>
 8006f5e:	f842 3b04 	str.w	r3, [r2], #4
 8006f62:	e7f4      	b.n	8006f4e <__copybits+0x1e>

08006f64 <__any_on>:
 8006f64:	f100 0214 	add.w	r2, r0, #20
 8006f68:	6900      	ldr	r0, [r0, #16]
 8006f6a:	114b      	asrs	r3, r1, #5
 8006f6c:	4298      	cmp	r0, r3
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	db11      	blt.n	8006f96 <__any_on+0x32>
 8006f72:	dd0a      	ble.n	8006f8a <__any_on+0x26>
 8006f74:	f011 011f 	ands.w	r1, r1, #31
 8006f78:	d007      	beq.n	8006f8a <__any_on+0x26>
 8006f7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f7e:	fa24 f001 	lsr.w	r0, r4, r1
 8006f82:	fa00 f101 	lsl.w	r1, r0, r1
 8006f86:	428c      	cmp	r4, r1
 8006f88:	d10b      	bne.n	8006fa2 <__any_on+0x3e>
 8006f8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d803      	bhi.n	8006f9a <__any_on+0x36>
 8006f92:	2000      	movs	r0, #0
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	4603      	mov	r3, r0
 8006f98:	e7f7      	b.n	8006f8a <__any_on+0x26>
 8006f9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d0f5      	beq.n	8006f8e <__any_on+0x2a>
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7f6      	b.n	8006f94 <__any_on+0x30>

08006fa6 <_calloc_r>:
 8006fa6:	b538      	push	{r3, r4, r5, lr}
 8006fa8:	fb02 f401 	mul.w	r4, r2, r1
 8006fac:	4621      	mov	r1, r4
 8006fae:	f000 f857 	bl	8007060 <_malloc_r>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b118      	cbz	r0, 8006fbe <_calloc_r+0x18>
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f7fc fd40 	bl	8003a3e <memset>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08006fc4 <_free_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d045      	beq.n	8007058 <_free_r+0x94>
 8006fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd0:	1f0c      	subs	r4, r1, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfb8      	it	lt
 8006fd6:	18e4      	addlt	r4, r4, r3
 8006fd8:	f000 fa36 	bl	8007448 <__malloc_lock>
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	; (800705c <_free_r+0x98>)
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	b933      	cbnz	r3, 8006ff2 <_free_r+0x2e>
 8006fe4:	6063      	str	r3, [r4, #4]
 8006fe6:	6014      	str	r4, [r2, #0]
 8006fe8:	4628      	mov	r0, r5
 8006fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fee:	f000 ba2c 	b.w	800744a <__malloc_unlock>
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	d90c      	bls.n	8007010 <_free_r+0x4c>
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	1862      	adds	r2, r4, r1
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	bf04      	itt	eq
 8006ffe:	681a      	ldreq	r2, [r3, #0]
 8007000:	685b      	ldreq	r3, [r3, #4]
 8007002:	6063      	str	r3, [r4, #4]
 8007004:	bf04      	itt	eq
 8007006:	1852      	addeq	r2, r2, r1
 8007008:	6022      	streq	r2, [r4, #0]
 800700a:	6004      	str	r4, [r0, #0]
 800700c:	e7ec      	b.n	8006fe8 <_free_r+0x24>
 800700e:	4613      	mov	r3, r2
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	b10a      	cbz	r2, 8007018 <_free_r+0x54>
 8007014:	42a2      	cmp	r2, r4
 8007016:	d9fa      	bls.n	800700e <_free_r+0x4a>
 8007018:	6819      	ldr	r1, [r3, #0]
 800701a:	1858      	adds	r0, r3, r1
 800701c:	42a0      	cmp	r0, r4
 800701e:	d10b      	bne.n	8007038 <_free_r+0x74>
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	4401      	add	r1, r0
 8007024:	1858      	adds	r0, r3, r1
 8007026:	4282      	cmp	r2, r0
 8007028:	6019      	str	r1, [r3, #0]
 800702a:	d1dd      	bne.n	8006fe8 <_free_r+0x24>
 800702c:	6810      	ldr	r0, [r2, #0]
 800702e:	6852      	ldr	r2, [r2, #4]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	4401      	add	r1, r0
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e7d7      	b.n	8006fe8 <_free_r+0x24>
 8007038:	d902      	bls.n	8007040 <_free_r+0x7c>
 800703a:	230c      	movs	r3, #12
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	e7d3      	b.n	8006fe8 <_free_r+0x24>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	1821      	adds	r1, r4, r0
 8007044:	428a      	cmp	r2, r1
 8007046:	bf04      	itt	eq
 8007048:	6811      	ldreq	r1, [r2, #0]
 800704a:	6852      	ldreq	r2, [r2, #4]
 800704c:	6062      	str	r2, [r4, #4]
 800704e:	bf04      	itt	eq
 8007050:	1809      	addeq	r1, r1, r0
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	605c      	str	r4, [r3, #4]
 8007056:	e7c7      	b.n	8006fe8 <_free_r+0x24>
 8007058:	bd38      	pop	{r3, r4, r5, pc}
 800705a:	bf00      	nop
 800705c:	20000200 	.word	0x20000200

08007060 <_malloc_r>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	1ccd      	adds	r5, r1, #3
 8007064:	f025 0503 	bic.w	r5, r5, #3
 8007068:	3508      	adds	r5, #8
 800706a:	2d0c      	cmp	r5, #12
 800706c:	bf38      	it	cc
 800706e:	250c      	movcc	r5, #12
 8007070:	2d00      	cmp	r5, #0
 8007072:	4606      	mov	r6, r0
 8007074:	db01      	blt.n	800707a <_malloc_r+0x1a>
 8007076:	42a9      	cmp	r1, r5
 8007078:	d903      	bls.n	8007082 <_malloc_r+0x22>
 800707a:	230c      	movs	r3, #12
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	2000      	movs	r0, #0
 8007080:	bd70      	pop	{r4, r5, r6, pc}
 8007082:	f000 f9e1 	bl	8007448 <__malloc_lock>
 8007086:	4a21      	ldr	r2, [pc, #132]	; (800710c <_malloc_r+0xac>)
 8007088:	6814      	ldr	r4, [r2, #0]
 800708a:	4621      	mov	r1, r4
 800708c:	b991      	cbnz	r1, 80070b4 <_malloc_r+0x54>
 800708e:	4c20      	ldr	r4, [pc, #128]	; (8007110 <_malloc_r+0xb0>)
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	b91b      	cbnz	r3, 800709c <_malloc_r+0x3c>
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f98f 	bl	80073b8 <_sbrk_r>
 800709a:	6020      	str	r0, [r4, #0]
 800709c:	4629      	mov	r1, r5
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f98a 	bl	80073b8 <_sbrk_r>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d124      	bne.n	80070f2 <_malloc_r+0x92>
 80070a8:	230c      	movs	r3, #12
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	4630      	mov	r0, r6
 80070ae:	f000 f9cc 	bl	800744a <__malloc_unlock>
 80070b2:	e7e4      	b.n	800707e <_malloc_r+0x1e>
 80070b4:	680b      	ldr	r3, [r1, #0]
 80070b6:	1b5b      	subs	r3, r3, r5
 80070b8:	d418      	bmi.n	80070ec <_malloc_r+0x8c>
 80070ba:	2b0b      	cmp	r3, #11
 80070bc:	d90f      	bls.n	80070de <_malloc_r+0x7e>
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	50cd      	str	r5, [r1, r3]
 80070c2:	18cc      	adds	r4, r1, r3
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 f9c0 	bl	800744a <__malloc_unlock>
 80070ca:	f104 000b 	add.w	r0, r4, #11
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	f020 0007 	bic.w	r0, r0, #7
 80070d4:	1ac3      	subs	r3, r0, r3
 80070d6:	d0d3      	beq.n	8007080 <_malloc_r+0x20>
 80070d8:	425a      	negs	r2, r3
 80070da:	50e2      	str	r2, [r4, r3]
 80070dc:	e7d0      	b.n	8007080 <_malloc_r+0x20>
 80070de:	428c      	cmp	r4, r1
 80070e0:	684b      	ldr	r3, [r1, #4]
 80070e2:	bf16      	itet	ne
 80070e4:	6063      	strne	r3, [r4, #4]
 80070e6:	6013      	streq	r3, [r2, #0]
 80070e8:	460c      	movne	r4, r1
 80070ea:	e7eb      	b.n	80070c4 <_malloc_r+0x64>
 80070ec:	460c      	mov	r4, r1
 80070ee:	6849      	ldr	r1, [r1, #4]
 80070f0:	e7cc      	b.n	800708c <_malloc_r+0x2c>
 80070f2:	1cc4      	adds	r4, r0, #3
 80070f4:	f024 0403 	bic.w	r4, r4, #3
 80070f8:	42a0      	cmp	r0, r4
 80070fa:	d005      	beq.n	8007108 <_malloc_r+0xa8>
 80070fc:	1a21      	subs	r1, r4, r0
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 f95a 	bl	80073b8 <_sbrk_r>
 8007104:	3001      	adds	r0, #1
 8007106:	d0cf      	beq.n	80070a8 <_malloc_r+0x48>
 8007108:	6025      	str	r5, [r4, #0]
 800710a:	e7db      	b.n	80070c4 <_malloc_r+0x64>
 800710c:	20000200 	.word	0x20000200
 8007110:	20000204 	.word	0x20000204

08007114 <__ssputs_r>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	688e      	ldr	r6, [r1, #8]
 800711a:	429e      	cmp	r6, r3
 800711c:	4682      	mov	sl, r0
 800711e:	460c      	mov	r4, r1
 8007120:	4690      	mov	r8, r2
 8007122:	4699      	mov	r9, r3
 8007124:	d837      	bhi.n	8007196 <__ssputs_r+0x82>
 8007126:	898a      	ldrh	r2, [r1, #12]
 8007128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800712c:	d031      	beq.n	8007192 <__ssputs_r+0x7e>
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	6909      	ldr	r1, [r1, #16]
 8007132:	1a6f      	subs	r7, r5, r1
 8007134:	6965      	ldr	r5, [r4, #20]
 8007136:	2302      	movs	r3, #2
 8007138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800713c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007140:	f109 0301 	add.w	r3, r9, #1
 8007144:	443b      	add	r3, r7
 8007146:	429d      	cmp	r5, r3
 8007148:	bf38      	it	cc
 800714a:	461d      	movcc	r5, r3
 800714c:	0553      	lsls	r3, r2, #21
 800714e:	d530      	bpl.n	80071b2 <__ssputs_r+0x9e>
 8007150:	4629      	mov	r1, r5
 8007152:	f7ff ff85 	bl	8007060 <_malloc_r>
 8007156:	4606      	mov	r6, r0
 8007158:	b950      	cbnz	r0, 8007170 <__ssputs_r+0x5c>
 800715a:	230c      	movs	r3, #12
 800715c:	f8ca 3000 	str.w	r3, [sl]
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007170:	463a      	mov	r2, r7
 8007172:	6921      	ldr	r1, [r4, #16]
 8007174:	f7fc fc58 	bl	8003a28 <memcpy>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	6126      	str	r6, [r4, #16]
 8007186:	6165      	str	r5, [r4, #20]
 8007188:	443e      	add	r6, r7
 800718a:	1bed      	subs	r5, r5, r7
 800718c:	6026      	str	r6, [r4, #0]
 800718e:	60a5      	str	r5, [r4, #8]
 8007190:	464e      	mov	r6, r9
 8007192:	454e      	cmp	r6, r9
 8007194:	d900      	bls.n	8007198 <__ssputs_r+0x84>
 8007196:	464e      	mov	r6, r9
 8007198:	4632      	mov	r2, r6
 800719a:	4641      	mov	r1, r8
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	f000 f93a 	bl	8007416 <memmove>
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	1b9b      	subs	r3, r3, r6
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	441e      	add	r6, r3
 80071ac:	6026      	str	r6, [r4, #0]
 80071ae:	2000      	movs	r0, #0
 80071b0:	e7dc      	b.n	800716c <__ssputs_r+0x58>
 80071b2:	462a      	mov	r2, r5
 80071b4:	f000 f94a 	bl	800744c <_realloc_r>
 80071b8:	4606      	mov	r6, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d1e2      	bne.n	8007184 <__ssputs_r+0x70>
 80071be:	6921      	ldr	r1, [r4, #16]
 80071c0:	4650      	mov	r0, sl
 80071c2:	f7ff feff 	bl	8006fc4 <_free_r>
 80071c6:	e7c8      	b.n	800715a <__ssputs_r+0x46>

080071c8 <_svfiprintf_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	461d      	mov	r5, r3
 80071ce:	898b      	ldrh	r3, [r1, #12]
 80071d0:	061f      	lsls	r7, r3, #24
 80071d2:	b09d      	sub	sp, #116	; 0x74
 80071d4:	4680      	mov	r8, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4616      	mov	r6, r2
 80071da:	d50f      	bpl.n	80071fc <_svfiprintf_r+0x34>
 80071dc:	690b      	ldr	r3, [r1, #16]
 80071de:	b96b      	cbnz	r3, 80071fc <_svfiprintf_r+0x34>
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	f7ff ff3d 	bl	8007060 <_malloc_r>
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	6120      	str	r0, [r4, #16]
 80071ea:	b928      	cbnz	r0, 80071f8 <_svfiprintf_r+0x30>
 80071ec:	230c      	movs	r3, #12
 80071ee:	f8c8 3000 	str.w	r3, [r8]
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f6:	e0c8      	b.n	800738a <_svfiprintf_r+0x1c2>
 80071f8:	2340      	movs	r3, #64	; 0x40
 80071fa:	6163      	str	r3, [r4, #20]
 80071fc:	2300      	movs	r3, #0
 80071fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007200:	2320      	movs	r3, #32
 8007202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007206:	2330      	movs	r3, #48	; 0x30
 8007208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800720c:	9503      	str	r5, [sp, #12]
 800720e:	f04f 0b01 	mov.w	fp, #1
 8007212:	4637      	mov	r7, r6
 8007214:	463d      	mov	r5, r7
 8007216:	f815 3b01 	ldrb.w	r3, [r5], #1
 800721a:	b10b      	cbz	r3, 8007220 <_svfiprintf_r+0x58>
 800721c:	2b25      	cmp	r3, #37	; 0x25
 800721e:	d13e      	bne.n	800729e <_svfiprintf_r+0xd6>
 8007220:	ebb7 0a06 	subs.w	sl, r7, r6
 8007224:	d00b      	beq.n	800723e <_svfiprintf_r+0x76>
 8007226:	4653      	mov	r3, sl
 8007228:	4632      	mov	r2, r6
 800722a:	4621      	mov	r1, r4
 800722c:	4640      	mov	r0, r8
 800722e:	f7ff ff71 	bl	8007114 <__ssputs_r>
 8007232:	3001      	adds	r0, #1
 8007234:	f000 80a4 	beq.w	8007380 <_svfiprintf_r+0x1b8>
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	4453      	add	r3, sl
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	783b      	ldrb	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 809d 	beq.w	8007380 <_svfiprintf_r+0x1b8>
 8007246:	2300      	movs	r3, #0
 8007248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800724c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007258:	931a      	str	r3, [sp, #104]	; 0x68
 800725a:	462f      	mov	r7, r5
 800725c:	2205      	movs	r2, #5
 800725e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007262:	4850      	ldr	r0, [pc, #320]	; (80073a4 <_svfiprintf_r+0x1dc>)
 8007264:	f7f9 f80c 	bl	8000280 <memchr>
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	b9d0      	cbnz	r0, 80072a2 <_svfiprintf_r+0xda>
 800726c:	06d9      	lsls	r1, r3, #27
 800726e:	bf44      	itt	mi
 8007270:	2220      	movmi	r2, #32
 8007272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007276:	071a      	lsls	r2, r3, #28
 8007278:	bf44      	itt	mi
 800727a:	222b      	movmi	r2, #43	; 0x2b
 800727c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007280:	782a      	ldrb	r2, [r5, #0]
 8007282:	2a2a      	cmp	r2, #42	; 0x2a
 8007284:	d015      	beq.n	80072b2 <_svfiprintf_r+0xea>
 8007286:	9a07      	ldr	r2, [sp, #28]
 8007288:	462f      	mov	r7, r5
 800728a:	2000      	movs	r0, #0
 800728c:	250a      	movs	r5, #10
 800728e:	4639      	mov	r1, r7
 8007290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007294:	3b30      	subs	r3, #48	; 0x30
 8007296:	2b09      	cmp	r3, #9
 8007298:	d94d      	bls.n	8007336 <_svfiprintf_r+0x16e>
 800729a:	b1b8      	cbz	r0, 80072cc <_svfiprintf_r+0x104>
 800729c:	e00f      	b.n	80072be <_svfiprintf_r+0xf6>
 800729e:	462f      	mov	r7, r5
 80072a0:	e7b8      	b.n	8007214 <_svfiprintf_r+0x4c>
 80072a2:	4a40      	ldr	r2, [pc, #256]	; (80073a4 <_svfiprintf_r+0x1dc>)
 80072a4:	1a80      	subs	r0, r0, r2
 80072a6:	fa0b f000 	lsl.w	r0, fp, r0
 80072aa:	4318      	orrs	r0, r3
 80072ac:	9004      	str	r0, [sp, #16]
 80072ae:	463d      	mov	r5, r7
 80072b0:	e7d3      	b.n	800725a <_svfiprintf_r+0x92>
 80072b2:	9a03      	ldr	r2, [sp, #12]
 80072b4:	1d11      	adds	r1, r2, #4
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	9103      	str	r1, [sp, #12]
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	db01      	blt.n	80072c2 <_svfiprintf_r+0xfa>
 80072be:	9207      	str	r2, [sp, #28]
 80072c0:	e004      	b.n	80072cc <_svfiprintf_r+0x104>
 80072c2:	4252      	negs	r2, r2
 80072c4:	f043 0302 	orr.w	r3, r3, #2
 80072c8:	9207      	str	r2, [sp, #28]
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	783b      	ldrb	r3, [r7, #0]
 80072ce:	2b2e      	cmp	r3, #46	; 0x2e
 80072d0:	d10c      	bne.n	80072ec <_svfiprintf_r+0x124>
 80072d2:	787b      	ldrb	r3, [r7, #1]
 80072d4:	2b2a      	cmp	r3, #42	; 0x2a
 80072d6:	d133      	bne.n	8007340 <_svfiprintf_r+0x178>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d1a      	adds	r2, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9203      	str	r2, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfb8      	it	lt
 80072e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072e8:	3702      	adds	r7, #2
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	4d2e      	ldr	r5, [pc, #184]	; (80073a8 <_svfiprintf_r+0x1e0>)
 80072ee:	7839      	ldrb	r1, [r7, #0]
 80072f0:	2203      	movs	r2, #3
 80072f2:	4628      	mov	r0, r5
 80072f4:	f7f8 ffc4 	bl	8000280 <memchr>
 80072f8:	b138      	cbz	r0, 800730a <_svfiprintf_r+0x142>
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	1b40      	subs	r0, r0, r5
 80072fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	4303      	orrs	r3, r0
 8007306:	3701      	adds	r7, #1
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	7839      	ldrb	r1, [r7, #0]
 800730c:	4827      	ldr	r0, [pc, #156]	; (80073ac <_svfiprintf_r+0x1e4>)
 800730e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007312:	2206      	movs	r2, #6
 8007314:	1c7e      	adds	r6, r7, #1
 8007316:	f7f8 ffb3 	bl	8000280 <memchr>
 800731a:	2800      	cmp	r0, #0
 800731c:	d038      	beq.n	8007390 <_svfiprintf_r+0x1c8>
 800731e:	4b24      	ldr	r3, [pc, #144]	; (80073b0 <_svfiprintf_r+0x1e8>)
 8007320:	bb13      	cbnz	r3, 8007368 <_svfiprintf_r+0x1a0>
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	3307      	adds	r3, #7
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	3308      	adds	r3, #8
 800732c:	9303      	str	r3, [sp, #12]
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	444b      	add	r3, r9
 8007332:	9309      	str	r3, [sp, #36]	; 0x24
 8007334:	e76d      	b.n	8007212 <_svfiprintf_r+0x4a>
 8007336:	fb05 3202 	mla	r2, r5, r2, r3
 800733a:	2001      	movs	r0, #1
 800733c:	460f      	mov	r7, r1
 800733e:	e7a6      	b.n	800728e <_svfiprintf_r+0xc6>
 8007340:	2300      	movs	r3, #0
 8007342:	3701      	adds	r7, #1
 8007344:	9305      	str	r3, [sp, #20]
 8007346:	4619      	mov	r1, r3
 8007348:	250a      	movs	r5, #10
 800734a:	4638      	mov	r0, r7
 800734c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007350:	3a30      	subs	r2, #48	; 0x30
 8007352:	2a09      	cmp	r2, #9
 8007354:	d903      	bls.n	800735e <_svfiprintf_r+0x196>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0c8      	beq.n	80072ec <_svfiprintf_r+0x124>
 800735a:	9105      	str	r1, [sp, #20]
 800735c:	e7c6      	b.n	80072ec <_svfiprintf_r+0x124>
 800735e:	fb05 2101 	mla	r1, r5, r1, r2
 8007362:	2301      	movs	r3, #1
 8007364:	4607      	mov	r7, r0
 8007366:	e7f0      	b.n	800734a <_svfiprintf_r+0x182>
 8007368:	ab03      	add	r3, sp, #12
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4622      	mov	r2, r4
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <_svfiprintf_r+0x1ec>)
 8007370:	a904      	add	r1, sp, #16
 8007372:	4640      	mov	r0, r8
 8007374:	f7fc fc00 	bl	8003b78 <_printf_float>
 8007378:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800737c:	4681      	mov	r9, r0
 800737e:	d1d6      	bne.n	800732e <_svfiprintf_r+0x166>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	065b      	lsls	r3, r3, #25
 8007384:	f53f af35 	bmi.w	80071f2 <_svfiprintf_r+0x2a>
 8007388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800738a:	b01d      	add	sp, #116	; 0x74
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	ab03      	add	r3, sp, #12
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4622      	mov	r2, r4
 8007396:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <_svfiprintf_r+0x1ec>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	4640      	mov	r0, r8
 800739c:	f7fc fea2 	bl	80040e4 <_printf_i>
 80073a0:	e7ea      	b.n	8007378 <_svfiprintf_r+0x1b0>
 80073a2:	bf00      	nop
 80073a4:	08008a54 	.word	0x08008a54
 80073a8:	08008a5a 	.word	0x08008a5a
 80073ac:	08008a5e 	.word	0x08008a5e
 80073b0:	08003b79 	.word	0x08003b79
 80073b4:	08007115 	.word	0x08007115

080073b8 <_sbrk_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4c06      	ldr	r4, [pc, #24]	; (80073d4 <_sbrk_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4605      	mov	r5, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	f7fa fb80 	bl	8001ac8 <_sbrk>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_sbrk_r+0x1a>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_sbrk_r+0x1a>
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	2000020c 	.word	0x2000020c

080073d8 <strncmp>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	b16a      	cbz	r2, 80073f8 <strncmp+0x20>
 80073dc:	3901      	subs	r1, #1
 80073de:	1884      	adds	r4, r0, r2
 80073e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80073e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d103      	bne.n	80073f4 <strncmp+0x1c>
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	d001      	beq.n	80073f4 <strncmp+0x1c>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f5      	bne.n	80073e0 <strncmp+0x8>
 80073f4:	1a98      	subs	r0, r3, r2
 80073f6:	bd10      	pop	{r4, pc}
 80073f8:	4610      	mov	r0, r2
 80073fa:	e7fc      	b.n	80073f6 <strncmp+0x1e>

080073fc <__ascii_wctomb>:
 80073fc:	b149      	cbz	r1, 8007412 <__ascii_wctomb+0x16>
 80073fe:	2aff      	cmp	r2, #255	; 0xff
 8007400:	bf85      	ittet	hi
 8007402:	238a      	movhi	r3, #138	; 0x8a
 8007404:	6003      	strhi	r3, [r0, #0]
 8007406:	700a      	strbls	r2, [r1, #0]
 8007408:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800740c:	bf98      	it	ls
 800740e:	2001      	movls	r0, #1
 8007410:	4770      	bx	lr
 8007412:	4608      	mov	r0, r1
 8007414:	4770      	bx	lr

08007416 <memmove>:
 8007416:	4288      	cmp	r0, r1
 8007418:	b510      	push	{r4, lr}
 800741a:	eb01 0302 	add.w	r3, r1, r2
 800741e:	d807      	bhi.n	8007430 <memmove+0x1a>
 8007420:	1e42      	subs	r2, r0, #1
 8007422:	4299      	cmp	r1, r3
 8007424:	d00a      	beq.n	800743c <memmove+0x26>
 8007426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800742e:	e7f8      	b.n	8007422 <memmove+0xc>
 8007430:	4283      	cmp	r3, r0
 8007432:	d9f5      	bls.n	8007420 <memmove+0xa>
 8007434:	1881      	adds	r1, r0, r2
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	42d3      	cmn	r3, r2
 800743a:	d100      	bne.n	800743e <memmove+0x28>
 800743c:	bd10      	pop	{r4, pc}
 800743e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007442:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007446:	e7f7      	b.n	8007438 <memmove+0x22>

08007448 <__malloc_lock>:
 8007448:	4770      	bx	lr

0800744a <__malloc_unlock>:
 800744a:	4770      	bx	lr

0800744c <_realloc_r>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	4607      	mov	r7, r0
 8007450:	4614      	mov	r4, r2
 8007452:	460e      	mov	r6, r1
 8007454:	b921      	cbnz	r1, 8007460 <_realloc_r+0x14>
 8007456:	4611      	mov	r1, r2
 8007458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800745c:	f7ff be00 	b.w	8007060 <_malloc_r>
 8007460:	b922      	cbnz	r2, 800746c <_realloc_r+0x20>
 8007462:	f7ff fdaf 	bl	8006fc4 <_free_r>
 8007466:	4625      	mov	r5, r4
 8007468:	4628      	mov	r0, r5
 800746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746c:	f000 f814 	bl	8007498 <_malloc_usable_size_r>
 8007470:	42a0      	cmp	r0, r4
 8007472:	d20f      	bcs.n	8007494 <_realloc_r+0x48>
 8007474:	4621      	mov	r1, r4
 8007476:	4638      	mov	r0, r7
 8007478:	f7ff fdf2 	bl	8007060 <_malloc_r>
 800747c:	4605      	mov	r5, r0
 800747e:	2800      	cmp	r0, #0
 8007480:	d0f2      	beq.n	8007468 <_realloc_r+0x1c>
 8007482:	4631      	mov	r1, r6
 8007484:	4622      	mov	r2, r4
 8007486:	f7fc facf 	bl	8003a28 <memcpy>
 800748a:	4631      	mov	r1, r6
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff fd99 	bl	8006fc4 <_free_r>
 8007492:	e7e9      	b.n	8007468 <_realloc_r+0x1c>
 8007494:	4635      	mov	r5, r6
 8007496:	e7e7      	b.n	8007468 <_realloc_r+0x1c>

08007498 <_malloc_usable_size_r>:
 8007498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749c:	1f18      	subs	r0, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bfbc      	itt	lt
 80074a2:	580b      	ldrlt	r3, [r1, r0]
 80074a4:	18c0      	addlt	r0, r0, r3
 80074a6:	4770      	bx	lr

080074a8 <pow>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	ed2d 8b04 	vpush	{d8-d9}
 80074b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007784 <pow+0x2dc>
 80074b4:	b08d      	sub	sp, #52	; 0x34
 80074b6:	ec57 6b10 	vmov	r6, r7, d0
 80074ba:	ec55 4b11 	vmov	r4, r5, d1
 80074be:	f000 fa0f 	bl	80078e0 <__ieee754_pow>
 80074c2:	f999 3000 	ldrsb.w	r3, [r9]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	eeb0 8a40 	vmov.f32	s16, s0
 80074ce:	eef0 8a60 	vmov.f32	s17, s1
 80074d2:	46c8      	mov	r8, r9
 80074d4:	d05f      	beq.n	8007596 <pow+0xee>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	f7f9 fb75 	bl	8000bcc <__aeabi_dcmpun>
 80074e2:	4683      	mov	fp, r0
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d156      	bne.n	8007596 <pow+0xee>
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 fb6c 	bl	8000bcc <__aeabi_dcmpun>
 80074f4:	9001      	str	r0, [sp, #4]
 80074f6:	b1e8      	cbz	r0, 8007534 <pow+0x8c>
 80074f8:	2200      	movs	r2, #0
 80074fa:	2300      	movs	r3, #0
 80074fc:	4620      	mov	r0, r4
 80074fe:	4629      	mov	r1, r5
 8007500:	f7f9 fb32 	bl	8000b68 <__aeabi_dcmpeq>
 8007504:	2800      	cmp	r0, #0
 8007506:	d046      	beq.n	8007596 <pow+0xee>
 8007508:	2301      	movs	r3, #1
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	4b96      	ldr	r3, [pc, #600]	; (8007768 <pow+0x2c0>)
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	4b96      	ldr	r3, [pc, #600]	; (800776c <pow+0x2c4>)
 8007512:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007516:	2200      	movs	r2, #0
 8007518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	2b02      	cmp	r3, #2
 8007520:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007524:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007528:	d033      	beq.n	8007592 <pow+0xea>
 800752a:	a802      	add	r0, sp, #8
 800752c:	f000 ffaa 	bl	8008484 <matherr>
 8007530:	bb48      	cbnz	r0, 8007586 <pow+0xde>
 8007532:	e05d      	b.n	80075f0 <pow+0x148>
 8007534:	f04f 0a00 	mov.w	sl, #0
 8007538:	f04f 0b00 	mov.w	fp, #0
 800753c:	4652      	mov	r2, sl
 800753e:	465b      	mov	r3, fp
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f9 fb10 	bl	8000b68 <__aeabi_dcmpeq>
 8007548:	ec4b ab19 	vmov	d9, sl, fp
 800754c:	2800      	cmp	r0, #0
 800754e:	d054      	beq.n	80075fa <pow+0x152>
 8007550:	4652      	mov	r2, sl
 8007552:	465b      	mov	r3, fp
 8007554:	4620      	mov	r0, r4
 8007556:	4629      	mov	r1, r5
 8007558:	f7f9 fb06 	bl	8000b68 <__aeabi_dcmpeq>
 800755c:	4680      	mov	r8, r0
 800755e:	b318      	cbz	r0, 80075a8 <pow+0x100>
 8007560:	2301      	movs	r3, #1
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	4b80      	ldr	r3, [pc, #512]	; (8007768 <pow+0x2c0>)
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	930a      	str	r3, [sp, #40]	; 0x28
 800756c:	9b00      	ldr	r3, [sp, #0]
 800756e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007572:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007576:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0d5      	beq.n	800752a <pow+0x82>
 800757e:	4b7b      	ldr	r3, [pc, #492]	; (800776c <pow+0x2c4>)
 8007580:	2200      	movs	r2, #0
 8007582:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	b11b      	cbz	r3, 8007592 <pow+0xea>
 800758a:	f7fc fa23 	bl	80039d4 <__errno>
 800758e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007590:	6003      	str	r3, [r0, #0]
 8007592:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007596:	eeb0 0a48 	vmov.f32	s0, s16
 800759a:	eef0 0a68 	vmov.f32	s1, s17
 800759e:	b00d      	add	sp, #52	; 0x34
 80075a0:	ecbd 8b04 	vpop	{d8-d9}
 80075a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a8:	ec45 4b10 	vmov	d0, r4, r5
 80075ac:	f000 ff62 	bl	8008474 <finite>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d0f0      	beq.n	8007596 <pow+0xee>
 80075b4:	4652      	mov	r2, sl
 80075b6:	465b      	mov	r3, fp
 80075b8:	4620      	mov	r0, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7f9 fade 	bl	8000b7c <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d0e8      	beq.n	8007596 <pow+0xee>
 80075c4:	2301      	movs	r3, #1
 80075c6:	9302      	str	r3, [sp, #8]
 80075c8:	4b67      	ldr	r3, [pc, #412]	; (8007768 <pow+0x2c0>)
 80075ca:	9303      	str	r3, [sp, #12]
 80075cc:	f999 3000 	ldrsb.w	r3, [r9]
 80075d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80075d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80075d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80075dc:	b913      	cbnz	r3, 80075e4 <pow+0x13c>
 80075de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80075e2:	e7a2      	b.n	800752a <pow+0x82>
 80075e4:	4962      	ldr	r1, [pc, #392]	; (8007770 <pow+0x2c8>)
 80075e6:	2000      	movs	r0, #0
 80075e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d19c      	bne.n	800752a <pow+0x82>
 80075f0:	f7fc f9f0 	bl	80039d4 <__errno>
 80075f4:	2321      	movs	r3, #33	; 0x21
 80075f6:	6003      	str	r3, [r0, #0]
 80075f8:	e7c5      	b.n	8007586 <pow+0xde>
 80075fa:	eeb0 0a48 	vmov.f32	s0, s16
 80075fe:	eef0 0a68 	vmov.f32	s1, s17
 8007602:	f000 ff37 	bl	8008474 <finite>
 8007606:	9000      	str	r0, [sp, #0]
 8007608:	2800      	cmp	r0, #0
 800760a:	f040 8081 	bne.w	8007710 <pow+0x268>
 800760e:	ec47 6b10 	vmov	d0, r6, r7
 8007612:	f000 ff2f 	bl	8008474 <finite>
 8007616:	2800      	cmp	r0, #0
 8007618:	d07a      	beq.n	8007710 <pow+0x268>
 800761a:	ec45 4b10 	vmov	d0, r4, r5
 800761e:	f000 ff29 	bl	8008474 <finite>
 8007622:	2800      	cmp	r0, #0
 8007624:	d074      	beq.n	8007710 <pow+0x268>
 8007626:	ec53 2b18 	vmov	r2, r3, d8
 800762a:	ee18 0a10 	vmov	r0, s16
 800762e:	4619      	mov	r1, r3
 8007630:	f7f9 facc 	bl	8000bcc <__aeabi_dcmpun>
 8007634:	f999 9000 	ldrsb.w	r9, [r9]
 8007638:	4b4b      	ldr	r3, [pc, #300]	; (8007768 <pow+0x2c0>)
 800763a:	b1b0      	cbz	r0, 800766a <pow+0x1c2>
 800763c:	2201      	movs	r2, #1
 800763e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007642:	9b00      	ldr	r3, [sp, #0]
 8007644:	930a      	str	r3, [sp, #40]	; 0x28
 8007646:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800764a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800764e:	f1b9 0f00 	cmp.w	r9, #0
 8007652:	d0c4      	beq.n	80075de <pow+0x136>
 8007654:	4652      	mov	r2, sl
 8007656:	465b      	mov	r3, fp
 8007658:	4650      	mov	r0, sl
 800765a:	4659      	mov	r1, fp
 800765c:	f7f9 f946 	bl	80008ec <__aeabi_ddiv>
 8007660:	f1b9 0f02 	cmp.w	r9, #2
 8007664:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007668:	e7c1      	b.n	80075ee <pow+0x146>
 800766a:	2203      	movs	r2, #3
 800766c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007670:	900a      	str	r0, [sp, #40]	; 0x28
 8007672:	4629      	mov	r1, r5
 8007674:	4620      	mov	r0, r4
 8007676:	2200      	movs	r2, #0
 8007678:	4b3e      	ldr	r3, [pc, #248]	; (8007774 <pow+0x2cc>)
 800767a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800767e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007682:	f7f9 f809 	bl	8000698 <__aeabi_dmul>
 8007686:	4604      	mov	r4, r0
 8007688:	460d      	mov	r5, r1
 800768a:	f1b9 0f00 	cmp.w	r9, #0
 800768e:	d124      	bne.n	80076da <pow+0x232>
 8007690:	4b39      	ldr	r3, [pc, #228]	; (8007778 <pow+0x2d0>)
 8007692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007696:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800769a:	4630      	mov	r0, r6
 800769c:	4652      	mov	r2, sl
 800769e:	465b      	mov	r3, fp
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 fa6b 	bl	8000b7c <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d056      	beq.n	8007758 <pow+0x2b0>
 80076aa:	ec45 4b10 	vmov	d0, r4, r5
 80076ae:	f000 fef3 	bl	8008498 <rint>
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	ec51 0b10 	vmov	r0, r1, d0
 80076ba:	f7f9 fa55 	bl	8000b68 <__aeabi_dcmpeq>
 80076be:	b920      	cbnz	r0, 80076ca <pow+0x222>
 80076c0:	4b2e      	ldr	r3, [pc, #184]	; (800777c <pow+0x2d4>)
 80076c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80076c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076ca:	f998 3000 	ldrsb.w	r3, [r8]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d142      	bne.n	8007758 <pow+0x2b0>
 80076d2:	f7fc f97f 	bl	80039d4 <__errno>
 80076d6:	2322      	movs	r3, #34	; 0x22
 80076d8:	e78d      	b.n	80075f6 <pow+0x14e>
 80076da:	4b29      	ldr	r3, [pc, #164]	; (8007780 <pow+0x2d8>)
 80076dc:	2200      	movs	r2, #0
 80076de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076e2:	4630      	mov	r0, r6
 80076e4:	4652      	mov	r2, sl
 80076e6:	465b      	mov	r3, fp
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f9 fa47 	bl	8000b7c <__aeabi_dcmplt>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d0eb      	beq.n	80076ca <pow+0x222>
 80076f2:	ec45 4b10 	vmov	d0, r4, r5
 80076f6:	f000 fecf 	bl	8008498 <rint>
 80076fa:	4622      	mov	r2, r4
 80076fc:	462b      	mov	r3, r5
 80076fe:	ec51 0b10 	vmov	r0, r1, d0
 8007702:	f7f9 fa31 	bl	8000b68 <__aeabi_dcmpeq>
 8007706:	2800      	cmp	r0, #0
 8007708:	d1df      	bne.n	80076ca <pow+0x222>
 800770a:	2200      	movs	r2, #0
 800770c:	4b18      	ldr	r3, [pc, #96]	; (8007770 <pow+0x2c8>)
 800770e:	e7da      	b.n	80076c6 <pow+0x21e>
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	ec51 0b18 	vmov	r0, r1, d8
 8007718:	f7f9 fa26 	bl	8000b68 <__aeabi_dcmpeq>
 800771c:	2800      	cmp	r0, #0
 800771e:	f43f af3a 	beq.w	8007596 <pow+0xee>
 8007722:	ec47 6b10 	vmov	d0, r6, r7
 8007726:	f000 fea5 	bl	8008474 <finite>
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f af33 	beq.w	8007596 <pow+0xee>
 8007730:	ec45 4b10 	vmov	d0, r4, r5
 8007734:	f000 fe9e 	bl	8008474 <finite>
 8007738:	2800      	cmp	r0, #0
 800773a:	f43f af2c 	beq.w	8007596 <pow+0xee>
 800773e:	2304      	movs	r3, #4
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <pow+0x2c0>)
 8007744:	9303      	str	r3, [sp, #12]
 8007746:	2300      	movs	r3, #0
 8007748:	930a      	str	r3, [sp, #40]	; 0x28
 800774a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800774e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007752:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007756:	e7b8      	b.n	80076ca <pow+0x222>
 8007758:	a802      	add	r0, sp, #8
 800775a:	f000 fe93 	bl	8008484 <matherr>
 800775e:	2800      	cmp	r0, #0
 8007760:	f47f af11 	bne.w	8007586 <pow+0xde>
 8007764:	e7b5      	b.n	80076d2 <pow+0x22a>
 8007766:	bf00      	nop
 8007768:	08008b66 	.word	0x08008b66
 800776c:	3ff00000 	.word	0x3ff00000
 8007770:	fff00000 	.word	0xfff00000
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	47efffff 	.word	0x47efffff
 800777c:	c7efffff 	.word	0xc7efffff
 8007780:	7ff00000 	.word	0x7ff00000
 8007784:	200001dc 	.word	0x200001dc

08007788 <sqrt>:
 8007788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800778c:	ed2d 8b02 	vpush	{d8}
 8007790:	b08b      	sub	sp, #44	; 0x2c
 8007792:	ec55 4b10 	vmov	r4, r5, d0
 8007796:	f000 fdb1 	bl	80082fc <__ieee754_sqrt>
 800779a:	4b26      	ldr	r3, [pc, #152]	; (8007834 <sqrt+0xac>)
 800779c:	eeb0 8a40 	vmov.f32	s16, s0
 80077a0:	eef0 8a60 	vmov.f32	s17, s1
 80077a4:	f993 6000 	ldrsb.w	r6, [r3]
 80077a8:	1c73      	adds	r3, r6, #1
 80077aa:	d02a      	beq.n	8007802 <sqrt+0x7a>
 80077ac:	4622      	mov	r2, r4
 80077ae:	462b      	mov	r3, r5
 80077b0:	4620      	mov	r0, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	f7f9 fa0a 	bl	8000bcc <__aeabi_dcmpun>
 80077b8:	4607      	mov	r7, r0
 80077ba:	bb10      	cbnz	r0, 8007802 <sqrt+0x7a>
 80077bc:	f04f 0800 	mov.w	r8, #0
 80077c0:	f04f 0900 	mov.w	r9, #0
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	4620      	mov	r0, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7f9 f9d6 	bl	8000b7c <__aeabi_dcmplt>
 80077d0:	b1b8      	cbz	r0, 8007802 <sqrt+0x7a>
 80077d2:	2301      	movs	r3, #1
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <sqrt+0xb0>)
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	9708      	str	r7, [sp, #32]
 80077dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80077e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80077e4:	b9b6      	cbnz	r6, 8007814 <sqrt+0x8c>
 80077e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077ea:	4668      	mov	r0, sp
 80077ec:	f000 fe4a 	bl	8008484 <matherr>
 80077f0:	b1d0      	cbz	r0, 8007828 <sqrt+0xa0>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	b11b      	cbz	r3, 80077fe <sqrt+0x76>
 80077f6:	f7fc f8ed 	bl	80039d4 <__errno>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007802:	eeb0 0a48 	vmov.f32	s0, s16
 8007806:	eef0 0a68 	vmov.f32	s1, s17
 800780a:	b00b      	add	sp, #44	; 0x2c
 800780c:	ecbd 8b02 	vpop	{d8}
 8007810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	4640      	mov	r0, r8
 800781a:	4649      	mov	r1, r9
 800781c:	f7f9 f866 	bl	80008ec <__aeabi_ddiv>
 8007820:	2e02      	cmp	r6, #2
 8007822:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007826:	d1e0      	bne.n	80077ea <sqrt+0x62>
 8007828:	f7fc f8d4 	bl	80039d4 <__errno>
 800782c:	2321      	movs	r3, #33	; 0x21
 800782e:	6003      	str	r3, [r0, #0]
 8007830:	e7df      	b.n	80077f2 <sqrt+0x6a>
 8007832:	bf00      	nop
 8007834:	200001dc 	.word	0x200001dc
 8007838:	08008b6a 	.word	0x08008b6a

0800783c <sqrtf>:
 800783c:	b510      	push	{r4, lr}
 800783e:	ed2d 8b02 	vpush	{d8}
 8007842:	b08a      	sub	sp, #40	; 0x28
 8007844:	eeb0 8a40 	vmov.f32	s16, s0
 8007848:	f000 fe08 	bl	800845c <__ieee754_sqrtf>
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <sqrtf+0x98>)
 800784e:	f993 4000 	ldrsb.w	r4, [r3]
 8007852:	1c63      	adds	r3, r4, #1
 8007854:	d02c      	beq.n	80078b0 <sqrtf+0x74>
 8007856:	eeb4 8a48 	vcmp.f32	s16, s16
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	d627      	bvs.n	80078b0 <sqrtf+0x74>
 8007860:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	d522      	bpl.n	80078b0 <sqrtf+0x74>
 800786a:	2301      	movs	r3, #1
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <sqrtf+0x9c>)
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	ee18 0a10 	vmov	r0, s16
 8007876:	2300      	movs	r3, #0
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	f7f8 feb5 	bl	80005e8 <__aeabi_f2d>
 800787e:	2200      	movs	r2, #0
 8007880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007888:	2300      	movs	r3, #0
 800788a:	b9ac      	cbnz	r4, 80078b8 <sqrtf+0x7c>
 800788c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007890:	4668      	mov	r0, sp
 8007892:	f000 fdf7 	bl	8008484 <matherr>
 8007896:	b1b8      	cbz	r0, 80078c8 <sqrtf+0x8c>
 8007898:	9b08      	ldr	r3, [sp, #32]
 800789a:	b11b      	cbz	r3, 80078a4 <sqrtf+0x68>
 800789c:	f7fc f89a 	bl	80039d4 <__errno>
 80078a0:	9b08      	ldr	r3, [sp, #32]
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078a8:	f7f9 f9ee 	bl	8000c88 <__aeabi_d2f>
 80078ac:	ee00 0a10 	vmov	s0, r0
 80078b0:	b00a      	add	sp, #40	; 0x28
 80078b2:	ecbd 8b02 	vpop	{d8}
 80078b6:	bd10      	pop	{r4, pc}
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7f9 f816 	bl	80008ec <__aeabi_ddiv>
 80078c0:	2c02      	cmp	r4, #2
 80078c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078c6:	d1e3      	bne.n	8007890 <sqrtf+0x54>
 80078c8:	f7fc f884 	bl	80039d4 <__errno>
 80078cc:	2321      	movs	r3, #33	; 0x21
 80078ce:	6003      	str	r3, [r0, #0]
 80078d0:	e7e2      	b.n	8007898 <sqrtf+0x5c>
 80078d2:	bf00      	nop
 80078d4:	200001dc 	.word	0x200001dc
 80078d8:	08008b6f 	.word	0x08008b6f
 80078dc:	00000000 	.word	0x00000000

080078e0 <__ieee754_pow>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	b091      	sub	sp, #68	; 0x44
 80078e6:	ed8d 1b00 	vstr	d1, [sp]
 80078ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80078ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80078f2:	ea58 0302 	orrs.w	r3, r8, r2
 80078f6:	ec57 6b10 	vmov	r6, r7, d0
 80078fa:	f000 84be 	beq.w	800827a <__ieee754_pow+0x99a>
 80078fe:	4b7a      	ldr	r3, [pc, #488]	; (8007ae8 <__ieee754_pow+0x208>)
 8007900:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007904:	429c      	cmp	r4, r3
 8007906:	463d      	mov	r5, r7
 8007908:	ee10 aa10 	vmov	sl, s0
 800790c:	dc09      	bgt.n	8007922 <__ieee754_pow+0x42>
 800790e:	d103      	bne.n	8007918 <__ieee754_pow+0x38>
 8007910:	b93e      	cbnz	r6, 8007922 <__ieee754_pow+0x42>
 8007912:	45a0      	cmp	r8, r4
 8007914:	dc0d      	bgt.n	8007932 <__ieee754_pow+0x52>
 8007916:	e001      	b.n	800791c <__ieee754_pow+0x3c>
 8007918:	4598      	cmp	r8, r3
 800791a:	dc02      	bgt.n	8007922 <__ieee754_pow+0x42>
 800791c:	4598      	cmp	r8, r3
 800791e:	d10e      	bne.n	800793e <__ieee754_pow+0x5e>
 8007920:	b16a      	cbz	r2, 800793e <__ieee754_pow+0x5e>
 8007922:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800792a:	ea54 030a 	orrs.w	r3, r4, sl
 800792e:	f000 84a4 	beq.w	800827a <__ieee754_pow+0x99a>
 8007932:	486e      	ldr	r0, [pc, #440]	; (8007aec <__ieee754_pow+0x20c>)
 8007934:	b011      	add	sp, #68	; 0x44
 8007936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f000 bda5 	b.w	8008488 <nan>
 800793e:	2d00      	cmp	r5, #0
 8007940:	da53      	bge.n	80079ea <__ieee754_pow+0x10a>
 8007942:	4b6b      	ldr	r3, [pc, #428]	; (8007af0 <__ieee754_pow+0x210>)
 8007944:	4598      	cmp	r8, r3
 8007946:	dc4d      	bgt.n	80079e4 <__ieee754_pow+0x104>
 8007948:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800794c:	4598      	cmp	r8, r3
 800794e:	dd4c      	ble.n	80079ea <__ieee754_pow+0x10a>
 8007950:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007954:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007958:	2b14      	cmp	r3, #20
 800795a:	dd26      	ble.n	80079aa <__ieee754_pow+0xca>
 800795c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007960:	fa22 f103 	lsr.w	r1, r2, r3
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	4293      	cmp	r3, r2
 800796a:	d13e      	bne.n	80079ea <__ieee754_pow+0x10a>
 800796c:	f001 0101 	and.w	r1, r1, #1
 8007970:	f1c1 0b02 	rsb	fp, r1, #2
 8007974:	2a00      	cmp	r2, #0
 8007976:	d15b      	bne.n	8007a30 <__ieee754_pow+0x150>
 8007978:	4b5b      	ldr	r3, [pc, #364]	; (8007ae8 <__ieee754_pow+0x208>)
 800797a:	4598      	cmp	r8, r3
 800797c:	d124      	bne.n	80079c8 <__ieee754_pow+0xe8>
 800797e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007982:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007986:	ea53 030a 	orrs.w	r3, r3, sl
 800798a:	f000 8476 	beq.w	800827a <__ieee754_pow+0x99a>
 800798e:	4b59      	ldr	r3, [pc, #356]	; (8007af4 <__ieee754_pow+0x214>)
 8007990:	429c      	cmp	r4, r3
 8007992:	dd2d      	ble.n	80079f0 <__ieee754_pow+0x110>
 8007994:	f1b9 0f00 	cmp.w	r9, #0
 8007998:	f280 8473 	bge.w	8008282 <__ieee754_pow+0x9a2>
 800799c:	2000      	movs	r0, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	ec41 0b10 	vmov	d0, r0, r1
 80079a4:	b011      	add	sp, #68	; 0x44
 80079a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d13e      	bne.n	8007a2c <__ieee754_pow+0x14c>
 80079ae:	f1c3 0314 	rsb	r3, r3, #20
 80079b2:	fa48 f103 	asr.w	r1, r8, r3
 80079b6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ba:	4543      	cmp	r3, r8
 80079bc:	f040 8469 	bne.w	8008292 <__ieee754_pow+0x9b2>
 80079c0:	f001 0101 	and.w	r1, r1, #1
 80079c4:	f1c1 0b02 	rsb	fp, r1, #2
 80079c8:	4b4b      	ldr	r3, [pc, #300]	; (8007af8 <__ieee754_pow+0x218>)
 80079ca:	4598      	cmp	r8, r3
 80079cc:	d118      	bne.n	8007a00 <__ieee754_pow+0x120>
 80079ce:	f1b9 0f00 	cmp.w	r9, #0
 80079d2:	f280 845a 	bge.w	800828a <__ieee754_pow+0x9aa>
 80079d6:	4948      	ldr	r1, [pc, #288]	; (8007af8 <__ieee754_pow+0x218>)
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f8 ff85 	bl	80008ec <__aeabi_ddiv>
 80079e2:	e7dd      	b.n	80079a0 <__ieee754_pow+0xc0>
 80079e4:	f04f 0b02 	mov.w	fp, #2
 80079e8:	e7c4      	b.n	8007974 <__ieee754_pow+0x94>
 80079ea:	f04f 0b00 	mov.w	fp, #0
 80079ee:	e7c1      	b.n	8007974 <__ieee754_pow+0x94>
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	dad2      	bge.n	800799c <__ieee754_pow+0xbc>
 80079f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80079fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80079fe:	e7cf      	b.n	80079a0 <__ieee754_pow+0xc0>
 8007a00:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007a04:	d106      	bne.n	8007a14 <__ieee754_pow+0x134>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7f8 fe43 	bl	8000698 <__aeabi_dmul>
 8007a12:	e7c5      	b.n	80079a0 <__ieee754_pow+0xc0>
 8007a14:	4b39      	ldr	r3, [pc, #228]	; (8007afc <__ieee754_pow+0x21c>)
 8007a16:	4599      	cmp	r9, r3
 8007a18:	d10a      	bne.n	8007a30 <__ieee754_pow+0x150>
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	db08      	blt.n	8007a30 <__ieee754_pow+0x150>
 8007a1e:	ec47 6b10 	vmov	d0, r6, r7
 8007a22:	b011      	add	sp, #68	; 0x44
 8007a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	f000 bc68 	b.w	80082fc <__ieee754_sqrt>
 8007a2c:	f04f 0b00 	mov.w	fp, #0
 8007a30:	ec47 6b10 	vmov	d0, r6, r7
 8007a34:	f000 fd15 	bl	8008462 <fabs>
 8007a38:	ec51 0b10 	vmov	r0, r1, d0
 8007a3c:	f1ba 0f00 	cmp.w	sl, #0
 8007a40:	d127      	bne.n	8007a92 <__ieee754_pow+0x1b2>
 8007a42:	b124      	cbz	r4, 8007a4e <__ieee754_pow+0x16e>
 8007a44:	4b2c      	ldr	r3, [pc, #176]	; (8007af8 <__ieee754_pow+0x218>)
 8007a46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d121      	bne.n	8007a92 <__ieee754_pow+0x1b2>
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	da05      	bge.n	8007a60 <__ieee754_pow+0x180>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4927      	ldr	r1, [pc, #156]	; (8007af8 <__ieee754_pow+0x218>)
 8007a5c:	f7f8 ff46 	bl	80008ec <__aeabi_ddiv>
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	da9d      	bge.n	80079a0 <__ieee754_pow+0xc0>
 8007a64:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a6c:	ea54 030b 	orrs.w	r3, r4, fp
 8007a70:	d108      	bne.n	8007a84 <__ieee754_pow+0x1a4>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7f8 fc55 	bl	8000328 <__aeabi_dsub>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	e7ac      	b.n	80079de <__ieee754_pow+0xfe>
 8007a84:	f1bb 0f01 	cmp.w	fp, #1
 8007a88:	d18a      	bne.n	80079a0 <__ieee754_pow+0xc0>
 8007a8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a8e:	4619      	mov	r1, r3
 8007a90:	e786      	b.n	80079a0 <__ieee754_pow+0xc0>
 8007a92:	0fed      	lsrs	r5, r5, #31
 8007a94:	1e6b      	subs	r3, r5, #1
 8007a96:	930d      	str	r3, [sp, #52]	; 0x34
 8007a98:	ea5b 0303 	orrs.w	r3, fp, r3
 8007a9c:	d102      	bne.n	8007aa4 <__ieee754_pow+0x1c4>
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	e7e8      	b.n	8007a76 <__ieee754_pow+0x196>
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <__ieee754_pow+0x220>)
 8007aa6:	4598      	cmp	r8, r3
 8007aa8:	f340 80fe 	ble.w	8007ca8 <__ieee754_pow+0x3c8>
 8007aac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ab0:	4598      	cmp	r8, r3
 8007ab2:	dd0a      	ble.n	8007aca <__ieee754_pow+0x1ea>
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <__ieee754_pow+0x214>)
 8007ab6:	429c      	cmp	r4, r3
 8007ab8:	dc0d      	bgt.n	8007ad6 <__ieee754_pow+0x1f6>
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	f6bf af6d 	bge.w	800799c <__ieee754_pow+0xbc>
 8007ac2:	a307      	add	r3, pc, #28	; (adr r3, 8007ae0 <__ieee754_pow+0x200>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	e79f      	b.n	8007a0a <__ieee754_pow+0x12a>
 8007aca:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <__ieee754_pow+0x224>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	ddf4      	ble.n	8007aba <__ieee754_pow+0x1da>
 8007ad0:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <__ieee754_pow+0x218>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	dd18      	ble.n	8007b08 <__ieee754_pow+0x228>
 8007ad6:	f1b9 0f00 	cmp.w	r9, #0
 8007ada:	dcf2      	bgt.n	8007ac2 <__ieee754_pow+0x1e2>
 8007adc:	e75e      	b.n	800799c <__ieee754_pow+0xbc>
 8007ade:	bf00      	nop
 8007ae0:	8800759c 	.word	0x8800759c
 8007ae4:	7e37e43c 	.word	0x7e37e43c
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	08008a59 	.word	0x08008a59
 8007af0:	433fffff 	.word	0x433fffff
 8007af4:	3fefffff 	.word	0x3fefffff
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	41e00000 	.word	0x41e00000
 8007b04:	3feffffe 	.word	0x3feffffe
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b63      	ldr	r3, [pc, #396]	; (8007c98 <__ieee754_pow+0x3b8>)
 8007b0c:	f7f8 fc0c 	bl	8000328 <__aeabi_dsub>
 8007b10:	a355      	add	r3, pc, #340	; (adr r3, 8007c68 <__ieee754_pow+0x388>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	f7f8 fdbd 	bl	8000698 <__aeabi_dmul>
 8007b1e:	a354      	add	r3, pc, #336	; (adr r3, 8007c70 <__ieee754_pow+0x390>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	4606      	mov	r6, r0
 8007b26:	460f      	mov	r7, r1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f8 fdb4 	bl	8000698 <__aeabi_dmul>
 8007b30:	2200      	movs	r2, #0
 8007b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b36:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <__ieee754_pow+0x3bc>)
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7f8 fdac 	bl	8000698 <__aeabi_dmul>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	a14c      	add	r1, pc, #304	; (adr r1, 8007c78 <__ieee754_pow+0x398>)
 8007b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4a:	f7f8 fbed 	bl	8000328 <__aeabi_dsub>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	462b      	mov	r3, r5
 8007b52:	f7f8 fda1 	bl	8000698 <__aeabi_dmul>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	4950      	ldr	r1, [pc, #320]	; (8007ca0 <__ieee754_pow+0x3c0>)
 8007b5e:	f7f8 fbe3 	bl	8000328 <__aeabi_dsub>
 8007b62:	4622      	mov	r2, r4
 8007b64:	462b      	mov	r3, r5
 8007b66:	4680      	mov	r8, r0
 8007b68:	4689      	mov	r9, r1
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 fd93 	bl	8000698 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 fd8d 	bl	8000698 <__aeabi_dmul>
 8007b7e:	a340      	add	r3, pc, #256	; (adr r3, 8007c80 <__ieee754_pow+0x3a0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fd88 	bl	8000698 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b90:	f7f8 fbca 	bl	8000328 <__aeabi_dsub>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4604      	mov	r4, r0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fbc4 	bl	800032c <__adddf3>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007baa:	4632      	mov	r2, r6
 8007bac:	463b      	mov	r3, r7
 8007bae:	f7f8 fbbb 	bl	8000328 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fbb5 	bl	8000328 <__aeabi_dsub>
 8007bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bc0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460f      	mov	r7, r1
 8007bca:	f040 81eb 	bne.w	8007fa4 <__ieee754_pow+0x6c4>
 8007bce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007c88 <__ieee754_pow+0x3a8>
 8007bd2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007bd6:	2400      	movs	r4, #0
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007be4:	f7f8 fba0 	bl	8000328 <__aeabi_dsub>
 8007be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bec:	f7f8 fd54 	bl	8000698 <__aeabi_dmul>
 8007bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf4:	4680      	mov	r8, r0
 8007bf6:	4689      	mov	r9, r1
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fd4c 	bl	8000698 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4640      	mov	r0, r8
 8007c06:	4649      	mov	r1, r9
 8007c08:	f7f8 fb90 	bl	800032c <__adddf3>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	462b      	mov	r3, r5
 8007c10:	4680      	mov	r8, r0
 8007c12:	4689      	mov	r9, r1
 8007c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c18:	f7f8 fd3e 	bl	8000698 <__aeabi_dmul>
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	4602      	mov	r2, r0
 8007c24:	4649      	mov	r1, r9
 8007c26:	4640      	mov	r0, r8
 8007c28:	e9cd 4500 	strd	r4, r5, [sp]
 8007c2c:	f7f8 fb7e 	bl	800032c <__adddf3>
 8007c30:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <__ieee754_pow+0x3c4>)
 8007c32:	4299      	cmp	r1, r3
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	468b      	mov	fp, r1
 8007c3a:	f340 82f7 	ble.w	800822c <__ieee754_pow+0x94c>
 8007c3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c46:	4303      	orrs	r3, r0
 8007c48:	f000 81ea 	beq.w	8008020 <__ieee754_pow+0x740>
 8007c4c:	a310      	add	r3, pc, #64	; (adr r3, 8007c90 <__ieee754_pow+0x3b0>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c56:	f7f8 fd1f 	bl	8000698 <__aeabi_dmul>
 8007c5a:	a30d      	add	r3, pc, #52	; (adr r3, 8007c90 <__ieee754_pow+0x3b0>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	e6d5      	b.n	8007a0e <__ieee754_pow+0x12e>
 8007c62:	bf00      	nop
 8007c64:	f3af 8000 	nop.w
 8007c68:	60000000 	.word	0x60000000
 8007c6c:	3ff71547 	.word	0x3ff71547
 8007c70:	f85ddf44 	.word	0xf85ddf44
 8007c74:	3e54ae0b 	.word	0x3e54ae0b
 8007c78:	55555555 	.word	0x55555555
 8007c7c:	3fd55555 	.word	0x3fd55555
 8007c80:	652b82fe 	.word	0x652b82fe
 8007c84:	3ff71547 	.word	0x3ff71547
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	bff00000 	.word	0xbff00000
 8007c90:	8800759c 	.word	0x8800759c
 8007c94:	7e37e43c 	.word	0x7e37e43c
 8007c98:	3ff00000 	.word	0x3ff00000
 8007c9c:	3fd00000 	.word	0x3fd00000
 8007ca0:	3fe00000 	.word	0x3fe00000
 8007ca4:	408fffff 	.word	0x408fffff
 8007ca8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	da05      	bge.n	8007cbe <__ieee754_pow+0x3de>
 8007cb2:	4bd3      	ldr	r3, [pc, #844]	; (8008000 <__ieee754_pow+0x720>)
 8007cb4:	f7f8 fcf0 	bl	8000698 <__aeabi_dmul>
 8007cb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	1523      	asrs	r3, r4, #20
 8007cc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007cc4:	4413      	add	r3, r2
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	4bce      	ldr	r3, [pc, #824]	; (8008004 <__ieee754_pow+0x724>)
 8007cca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007cce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cd8:	dd08      	ble.n	8007cec <__ieee754_pow+0x40c>
 8007cda:	4bcb      	ldr	r3, [pc, #812]	; (8008008 <__ieee754_pow+0x728>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	f340 815e 	ble.w	8007f9e <__ieee754_pow+0x6be>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007cec:	f04f 0a00 	mov.w	sl, #0
 8007cf0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf8:	4bc4      	ldr	r3, [pc, #784]	; (800800c <__ieee754_pow+0x72c>)
 8007cfa:	4413      	add	r3, r2
 8007cfc:	ed93 7b00 	vldr	d7, [r3]
 8007d00:	4629      	mov	r1, r5
 8007d02:	ec53 2b17 	vmov	r2, r3, d7
 8007d06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d0e:	f7f8 fb0b 	bl	8000328 <__aeabi_dsub>
 8007d12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d1e:	f7f8 fb05 	bl	800032c <__adddf3>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	2000      	movs	r0, #0
 8007d28:	49b9      	ldr	r1, [pc, #740]	; (8008010 <__ieee754_pow+0x730>)
 8007d2a:	f7f8 fddf 	bl	80008ec <__aeabi_ddiv>
 8007d2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fcad 	bl	8000698 <__aeabi_dmul>
 8007d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d52:	106d      	asrs	r5, r5, #1
 8007d54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	4614      	mov	r4, r2
 8007d68:	461d      	mov	r5, r3
 8007d6a:	f7f8 fc95 	bl	8000698 <__aeabi_dmul>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 fad7 	bl	8000328 <__aeabi_dsub>
 8007d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	4620      	mov	r0, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7f8 facf 	bl	8000328 <__aeabi_dsub>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d92:	f7f8 fac9 	bl	8000328 <__aeabi_dsub>
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	f7f8 fc7d 	bl	8000698 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fabf 	bl	8000328 <__aeabi_dsub>
 8007daa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007dae:	f7f8 fc73 	bl	8000698 <__aeabi_dmul>
 8007db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f7f8 fc6b 	bl	8000698 <__aeabi_dmul>
 8007dc2:	a37b      	add	r3, pc, #492	; (adr r3, 8007fb0 <__ieee754_pow+0x6d0>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	4604      	mov	r4, r0
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fc64 	bl	8000698 <__aeabi_dmul>
 8007dd0:	a379      	add	r3, pc, #484	; (adr r3, 8007fb8 <__ieee754_pow+0x6d8>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 faa9 	bl	800032c <__adddf3>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	f7f8 fc5b 	bl	8000698 <__aeabi_dmul>
 8007de2:	a377      	add	r3, pc, #476	; (adr r3, 8007fc0 <__ieee754_pow+0x6e0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 faa0 	bl	800032c <__adddf3>
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	f7f8 fc52 	bl	8000698 <__aeabi_dmul>
 8007df4:	a374      	add	r3, pc, #464	; (adr r3, 8007fc8 <__ieee754_pow+0x6e8>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fa97 	bl	800032c <__adddf3>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	462b      	mov	r3, r5
 8007e02:	f7f8 fc49 	bl	8000698 <__aeabi_dmul>
 8007e06:	a372      	add	r3, pc, #456	; (adr r3, 8007fd0 <__ieee754_pow+0x6f0>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f7f8 fa8e 	bl	800032c <__adddf3>
 8007e10:	4622      	mov	r2, r4
 8007e12:	462b      	mov	r3, r5
 8007e14:	f7f8 fc40 	bl	8000698 <__aeabi_dmul>
 8007e18:	a36f      	add	r3, pc, #444	; (adr r3, 8007fd8 <__ieee754_pow+0x6f8>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fa85 	bl	800032c <__adddf3>
 8007e22:	4622      	mov	r2, r4
 8007e24:	4606      	mov	r6, r0
 8007e26:	460f      	mov	r7, r1
 8007e28:	462b      	mov	r3, r5
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 fc33 	bl	8000698 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 fc2d 	bl	8000698 <__aeabi_dmul>
 8007e3e:	4642      	mov	r2, r8
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	464b      	mov	r3, r9
 8007e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e4a:	f7f8 fa6f 	bl	800032c <__adddf3>
 8007e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e52:	f7f8 fc21 	bl	8000698 <__aeabi_dmul>
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f7f8 fa67 	bl	800032c <__adddf3>
 8007e5e:	4642      	mov	r2, r8
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	464b      	mov	r3, r9
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fc15 	bl	8000698 <__aeabi_dmul>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4b68      	ldr	r3, [pc, #416]	; (8008014 <__ieee754_pow+0x734>)
 8007e72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e76:	f7f8 fa59 	bl	800032c <__adddf3>
 8007e7a:	4632      	mov	r2, r6
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	f7f8 fa55 	bl	800032c <__adddf3>
 8007e82:	9802      	ldr	r0, [sp, #8]
 8007e84:	460d      	mov	r5, r1
 8007e86:	4604      	mov	r4, r0
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 fc02 	bl	8000698 <__aeabi_dmul>
 8007e94:	2200      	movs	r2, #0
 8007e96:	4680      	mov	r8, r0
 8007e98:	4689      	mov	r9, r1
 8007e9a:	4b5e      	ldr	r3, [pc, #376]	; (8008014 <__ieee754_pow+0x734>)
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7f8 fa42 	bl	8000328 <__aeabi_dsub>
 8007ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ea8:	f7f8 fa3e 	bl	8000328 <__aeabi_dsub>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fa38 	bl	8000328 <__aeabi_dsub>
 8007eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ebc:	f7f8 fbec 	bl	8000698 <__aeabi_dmul>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ecc:	f7f8 fbe4 	bl	8000698 <__aeabi_dmul>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fa28 	bl	800032c <__adddf3>
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fa20 	bl	800032c <__adddf3>
 8007eec:	9802      	ldr	r0, [sp, #8]
 8007eee:	a33c      	add	r3, pc, #240	; (adr r3, 8007fe0 <__ieee754_pow+0x700>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	f7f8 fbce 	bl	8000698 <__aeabi_dmul>
 8007efc:	4642      	mov	r2, r8
 8007efe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f02:	464b      	mov	r3, r9
 8007f04:	4620      	mov	r0, r4
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 fa0e 	bl	8000328 <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fa08 	bl	8000328 <__aeabi_dsub>
 8007f18:	a333      	add	r3, pc, #204	; (adr r3, 8007fe8 <__ieee754_pow+0x708>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 fbbb 	bl	8000698 <__aeabi_dmul>
 8007f22:	a333      	add	r3, pc, #204	; (adr r3, 8007ff0 <__ieee754_pow+0x710>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fbb2 	bl	8000698 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 f9f6 	bl	800032c <__adddf3>
 8007f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f42:	4b35      	ldr	r3, [pc, #212]	; (8008018 <__ieee754_pow+0x738>)
 8007f44:	4413      	add	r3, r2
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 f9ef 	bl	800032c <__adddf3>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f52:	460d      	mov	r5, r1
 8007f54:	f7f8 fb36 	bl	80005c4 <__aeabi_i2d>
 8007f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f5a:	4b30      	ldr	r3, [pc, #192]	; (800801c <__ieee754_pow+0x73c>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	4622      	mov	r2, r4
 8007f68:	462b      	mov	r3, r5
 8007f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6e:	f7f8 f9dd 	bl	800032c <__adddf3>
 8007f72:	4642      	mov	r2, r8
 8007f74:	464b      	mov	r3, r9
 8007f76:	f7f8 f9d9 	bl	800032c <__adddf3>
 8007f7a:	4632      	mov	r2, r6
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	f7f8 f9d5 	bl	800032c <__adddf3>
 8007f82:	9802      	ldr	r0, [sp, #8]
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f8c:	f7f8 f9cc 	bl	8000328 <__aeabi_dsub>
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	f7f8 f9c8 	bl	8000328 <__aeabi_dsub>
 8007f98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f9c:	e607      	b.n	8007bae <__ieee754_pow+0x2ce>
 8007f9e:	f04f 0a01 	mov.w	sl, #1
 8007fa2:	e6a5      	b.n	8007cf0 <__ieee754_pow+0x410>
 8007fa4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007ff8 <__ieee754_pow+0x718>
 8007fa8:	e613      	b.n	8007bd2 <__ieee754_pow+0x2f2>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	4a454eef 	.word	0x4a454eef
 8007fb4:	3fca7e28 	.word	0x3fca7e28
 8007fb8:	93c9db65 	.word	0x93c9db65
 8007fbc:	3fcd864a 	.word	0x3fcd864a
 8007fc0:	a91d4101 	.word	0xa91d4101
 8007fc4:	3fd17460 	.word	0x3fd17460
 8007fc8:	518f264d 	.word	0x518f264d
 8007fcc:	3fd55555 	.word	0x3fd55555
 8007fd0:	db6fabff 	.word	0xdb6fabff
 8007fd4:	3fdb6db6 	.word	0x3fdb6db6
 8007fd8:	33333303 	.word	0x33333303
 8007fdc:	3fe33333 	.word	0x3fe33333
 8007fe0:	e0000000 	.word	0xe0000000
 8007fe4:	3feec709 	.word	0x3feec709
 8007fe8:	dc3a03fd 	.word	0xdc3a03fd
 8007fec:	3feec709 	.word	0x3feec709
 8007ff0:	145b01f5 	.word	0x145b01f5
 8007ff4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ff8:	00000000 	.word	0x00000000
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	43400000 	.word	0x43400000
 8008004:	0003988e 	.word	0x0003988e
 8008008:	000bb679 	.word	0x000bb679
 800800c:	08008b78 	.word	0x08008b78
 8008010:	3ff00000 	.word	0x3ff00000
 8008014:	40080000 	.word	0x40080000
 8008018:	08008b98 	.word	0x08008b98
 800801c:	08008b88 	.word	0x08008b88
 8008020:	a3b4      	add	r3, pc, #720	; (adr r3, 80082f4 <__ieee754_pow+0xa14>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	4640      	mov	r0, r8
 8008028:	4649      	mov	r1, r9
 800802a:	f7f8 f97f 	bl	800032c <__adddf3>
 800802e:	4622      	mov	r2, r4
 8008030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008034:	462b      	mov	r3, r5
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 f975 	bl	8000328 <__aeabi_dsub>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008046:	f7f8 fdb7 	bl	8000bb8 <__aeabi_dcmpgt>
 800804a:	2800      	cmp	r0, #0
 800804c:	f47f adfe 	bne.w	8007c4c <__ieee754_pow+0x36c>
 8008050:	4aa3      	ldr	r2, [pc, #652]	; (80082e0 <__ieee754_pow+0xa00>)
 8008052:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008056:	4293      	cmp	r3, r2
 8008058:	f340 810a 	ble.w	8008270 <__ieee754_pow+0x990>
 800805c:	151b      	asrs	r3, r3, #20
 800805e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008062:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008066:	fa4a f303 	asr.w	r3, sl, r3
 800806a:	445b      	add	r3, fp
 800806c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008070:	4e9c      	ldr	r6, [pc, #624]	; (80082e4 <__ieee754_pow+0xa04>)
 8008072:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008076:	4116      	asrs	r6, r2
 8008078:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800807c:	2000      	movs	r0, #0
 800807e:	ea23 0106 	bic.w	r1, r3, r6
 8008082:	f1c2 0214 	rsb	r2, r2, #20
 8008086:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800808a:	fa4a fa02 	asr.w	sl, sl, r2
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	bfb8      	it	lt
 800809c:	f1ca 0a00 	rsblt	sl, sl, #0
 80080a0:	f7f8 f942 	bl	8000328 <__aeabi_dsub>
 80080a4:	e9cd 0100 	strd	r0, r1, [sp]
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080b0:	f7f8 f93c 	bl	800032c <__adddf3>
 80080b4:	2000      	movs	r0, #0
 80080b6:	a378      	add	r3, pc, #480	; (adr r3, 8008298 <__ieee754_pow+0x9b8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	4604      	mov	r4, r0
 80080be:	460d      	mov	r5, r1
 80080c0:	f7f8 faea 	bl	8000698 <__aeabi_dmul>
 80080c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080c8:	4606      	mov	r6, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 f92a 	bl	8000328 <__aeabi_dsub>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 f924 	bl	8000328 <__aeabi_dsub>
 80080e0:	a36f      	add	r3, pc, #444	; (adr r3, 80082a0 <__ieee754_pow+0x9c0>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 fad7 	bl	8000698 <__aeabi_dmul>
 80080ea:	a36f      	add	r3, pc, #444	; (adr r3, 80082a8 <__ieee754_pow+0x9c8>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 face 	bl	8000698 <__aeabi_dmul>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4640      	mov	r0, r8
 8008102:	4649      	mov	r1, r9
 8008104:	f7f8 f912 	bl	800032c <__adddf3>
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f90a 	bl	800032c <__adddf3>
 8008118:	4632      	mov	r2, r6
 800811a:	463b      	mov	r3, r7
 800811c:	4680      	mov	r8, r0
 800811e:	4689      	mov	r9, r1
 8008120:	f7f8 f902 	bl	8000328 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 f8fc 	bl	8000328 <__aeabi_dsub>
 8008130:	4642      	mov	r2, r8
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	464b      	mov	r3, r9
 8008138:	4640      	mov	r0, r8
 800813a:	4649      	mov	r1, r9
 800813c:	f7f8 faac 	bl	8000698 <__aeabi_dmul>
 8008140:	a35b      	add	r3, pc, #364	; (adr r3, 80082b0 <__ieee754_pow+0x9d0>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	4604      	mov	r4, r0
 8008148:	460d      	mov	r5, r1
 800814a:	f7f8 faa5 	bl	8000698 <__aeabi_dmul>
 800814e:	a35a      	add	r3, pc, #360	; (adr r3, 80082b8 <__ieee754_pow+0x9d8>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f8e8 	bl	8000328 <__aeabi_dsub>
 8008158:	4622      	mov	r2, r4
 800815a:	462b      	mov	r3, r5
 800815c:	f7f8 fa9c 	bl	8000698 <__aeabi_dmul>
 8008160:	a357      	add	r3, pc, #348	; (adr r3, 80082c0 <__ieee754_pow+0x9e0>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f8e1 	bl	800032c <__adddf3>
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	f7f8 fa93 	bl	8000698 <__aeabi_dmul>
 8008172:	a355      	add	r3, pc, #340	; (adr r3, 80082c8 <__ieee754_pow+0x9e8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f8d6 	bl	8000328 <__aeabi_dsub>
 800817c:	4622      	mov	r2, r4
 800817e:	462b      	mov	r3, r5
 8008180:	f7f8 fa8a 	bl	8000698 <__aeabi_dmul>
 8008184:	a352      	add	r3, pc, #328	; (adr r3, 80082d0 <__ieee754_pow+0x9f0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f8cf 	bl	800032c <__adddf3>
 800818e:	4622      	mov	r2, r4
 8008190:	462b      	mov	r3, r5
 8008192:	f7f8 fa81 	bl	8000698 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	f7f8 f8c3 	bl	8000328 <__aeabi_dsub>
 80081a2:	4604      	mov	r4, r0
 80081a4:	460d      	mov	r5, r1
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 fa73 	bl	8000698 <__aeabi_dmul>
 80081b2:	2200      	movs	r2, #0
 80081b4:	e9cd 0100 	strd	r0, r1, [sp]
 80081b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 f8b2 	bl	8000328 <__aeabi_dsub>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081cc:	f7f8 fb8e 	bl	80008ec <__aeabi_ddiv>
 80081d0:	4632      	mov	r2, r6
 80081d2:	4604      	mov	r4, r0
 80081d4:	460d      	mov	r5, r1
 80081d6:	463b      	mov	r3, r7
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 fa5c 	bl	8000698 <__aeabi_dmul>
 80081e0:	4632      	mov	r2, r6
 80081e2:	463b      	mov	r3, r7
 80081e4:	f7f8 f8a2 	bl	800032c <__adddf3>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4620      	mov	r0, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	f7f8 f89a 	bl	8000328 <__aeabi_dsub>
 80081f4:	4642      	mov	r2, r8
 80081f6:	464b      	mov	r3, r9
 80081f8:	f7f8 f896 	bl	8000328 <__aeabi_dsub>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	2000      	movs	r0, #0
 8008202:	4939      	ldr	r1, [pc, #228]	; (80082e8 <__ieee754_pow+0xa08>)
 8008204:	f7f8 f890 	bl	8000328 <__aeabi_dsub>
 8008208:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800820c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	da2f      	bge.n	8008276 <__ieee754_pow+0x996>
 8008216:	4650      	mov	r0, sl
 8008218:	ec43 2b10 	vmov	d0, r2, r3
 800821c:	f000 f9c0 	bl	80085a0 <scalbn>
 8008220:	ec51 0b10 	vmov	r0, r1, d0
 8008224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008228:	f7ff bbf1 	b.w	8007a0e <__ieee754_pow+0x12e>
 800822c:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <__ieee754_pow+0xa0c>)
 800822e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008232:	429e      	cmp	r6, r3
 8008234:	f77f af0c 	ble.w	8008050 <__ieee754_pow+0x770>
 8008238:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <__ieee754_pow+0xa10>)
 800823a:	440b      	add	r3, r1
 800823c:	4303      	orrs	r3, r0
 800823e:	d00b      	beq.n	8008258 <__ieee754_pow+0x978>
 8008240:	a325      	add	r3, pc, #148	; (adr r3, 80082d8 <__ieee754_pow+0x9f8>)
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800824a:	f7f8 fa25 	bl	8000698 <__aeabi_dmul>
 800824e:	a322      	add	r3, pc, #136	; (adr r3, 80082d8 <__ieee754_pow+0x9f8>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7ff bbdb 	b.w	8007a0e <__ieee754_pow+0x12e>
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	f7f8 f864 	bl	8000328 <__aeabi_dsub>
 8008260:	4642      	mov	r2, r8
 8008262:	464b      	mov	r3, r9
 8008264:	f7f8 fc9e 	bl	8000ba4 <__aeabi_dcmpge>
 8008268:	2800      	cmp	r0, #0
 800826a:	f43f aef1 	beq.w	8008050 <__ieee754_pow+0x770>
 800826e:	e7e7      	b.n	8008240 <__ieee754_pow+0x960>
 8008270:	f04f 0a00 	mov.w	sl, #0
 8008274:	e718      	b.n	80080a8 <__ieee754_pow+0x7c8>
 8008276:	4621      	mov	r1, r4
 8008278:	e7d4      	b.n	8008224 <__ieee754_pow+0x944>
 800827a:	2000      	movs	r0, #0
 800827c:	491a      	ldr	r1, [pc, #104]	; (80082e8 <__ieee754_pow+0xa08>)
 800827e:	f7ff bb8f 	b.w	80079a0 <__ieee754_pow+0xc0>
 8008282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008286:	f7ff bb8b 	b.w	80079a0 <__ieee754_pow+0xc0>
 800828a:	4630      	mov	r0, r6
 800828c:	4639      	mov	r1, r7
 800828e:	f7ff bb87 	b.w	80079a0 <__ieee754_pow+0xc0>
 8008292:	4693      	mov	fp, r2
 8008294:	f7ff bb98 	b.w	80079c8 <__ieee754_pow+0xe8>
 8008298:	00000000 	.word	0x00000000
 800829c:	3fe62e43 	.word	0x3fe62e43
 80082a0:	fefa39ef 	.word	0xfefa39ef
 80082a4:	3fe62e42 	.word	0x3fe62e42
 80082a8:	0ca86c39 	.word	0x0ca86c39
 80082ac:	be205c61 	.word	0xbe205c61
 80082b0:	72bea4d0 	.word	0x72bea4d0
 80082b4:	3e663769 	.word	0x3e663769
 80082b8:	c5d26bf1 	.word	0xc5d26bf1
 80082bc:	3ebbbd41 	.word	0x3ebbbd41
 80082c0:	af25de2c 	.word	0xaf25de2c
 80082c4:	3f11566a 	.word	0x3f11566a
 80082c8:	16bebd93 	.word	0x16bebd93
 80082cc:	3f66c16c 	.word	0x3f66c16c
 80082d0:	5555553e 	.word	0x5555553e
 80082d4:	3fc55555 	.word	0x3fc55555
 80082d8:	c2f8f359 	.word	0xc2f8f359
 80082dc:	01a56e1f 	.word	0x01a56e1f
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	000fffff 	.word	0x000fffff
 80082e8:	3ff00000 	.word	0x3ff00000
 80082ec:	4090cbff 	.word	0x4090cbff
 80082f0:	3f6f3400 	.word	0x3f6f3400
 80082f4:	652b82fe 	.word	0x652b82fe
 80082f8:	3c971547 	.word	0x3c971547

080082fc <__ieee754_sqrt>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	4955      	ldr	r1, [pc, #340]	; (8008458 <__ieee754_sqrt+0x15c>)
 8008302:	ec55 4b10 	vmov	r4, r5, d0
 8008306:	43a9      	bics	r1, r5
 8008308:	462b      	mov	r3, r5
 800830a:	462a      	mov	r2, r5
 800830c:	d112      	bne.n	8008334 <__ieee754_sqrt+0x38>
 800830e:	ee10 2a10 	vmov	r2, s0
 8008312:	ee10 0a10 	vmov	r0, s0
 8008316:	4629      	mov	r1, r5
 8008318:	f7f8 f9be 	bl	8000698 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4620      	mov	r0, r4
 8008322:	4629      	mov	r1, r5
 8008324:	f7f8 f802 	bl	800032c <__adddf3>
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	ec45 4b10 	vmov	d0, r4, r5
 8008330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008334:	2d00      	cmp	r5, #0
 8008336:	ee10 0a10 	vmov	r0, s0
 800833a:	4621      	mov	r1, r4
 800833c:	dc0f      	bgt.n	800835e <__ieee754_sqrt+0x62>
 800833e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008342:	4330      	orrs	r0, r6
 8008344:	d0f2      	beq.n	800832c <__ieee754_sqrt+0x30>
 8008346:	b155      	cbz	r5, 800835e <__ieee754_sqrt+0x62>
 8008348:	ee10 2a10 	vmov	r2, s0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f7 ffea 	bl	8000328 <__aeabi_dsub>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	f7f8 fac8 	bl	80008ec <__aeabi_ddiv>
 800835c:	e7e4      	b.n	8008328 <__ieee754_sqrt+0x2c>
 800835e:	151b      	asrs	r3, r3, #20
 8008360:	d073      	beq.n	800844a <__ieee754_sqrt+0x14e>
 8008362:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008366:	07dd      	lsls	r5, r3, #31
 8008368:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800836c:	bf48      	it	mi
 800836e:	0fc8      	lsrmi	r0, r1, #31
 8008370:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008374:	bf44      	itt	mi
 8008376:	0049      	lslmi	r1, r1, #1
 8008378:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800837c:	2500      	movs	r5, #0
 800837e:	1058      	asrs	r0, r3, #1
 8008380:	0fcb      	lsrs	r3, r1, #31
 8008382:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008386:	0049      	lsls	r1, r1, #1
 8008388:	2316      	movs	r3, #22
 800838a:	462c      	mov	r4, r5
 800838c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008390:	19a7      	adds	r7, r4, r6
 8008392:	4297      	cmp	r7, r2
 8008394:	bfde      	ittt	le
 8008396:	19bc      	addle	r4, r7, r6
 8008398:	1bd2      	suble	r2, r2, r7
 800839a:	19ad      	addle	r5, r5, r6
 800839c:	0fcf      	lsrs	r7, r1, #31
 800839e:	3b01      	subs	r3, #1
 80083a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80083a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80083ac:	d1f0      	bne.n	8008390 <__ieee754_sqrt+0x94>
 80083ae:	f04f 0c20 	mov.w	ip, #32
 80083b2:	469e      	mov	lr, r3
 80083b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80083b8:	42a2      	cmp	r2, r4
 80083ba:	eb06 070e 	add.w	r7, r6, lr
 80083be:	dc02      	bgt.n	80083c6 <__ieee754_sqrt+0xca>
 80083c0:	d112      	bne.n	80083e8 <__ieee754_sqrt+0xec>
 80083c2:	428f      	cmp	r7, r1
 80083c4:	d810      	bhi.n	80083e8 <__ieee754_sqrt+0xec>
 80083c6:	2f00      	cmp	r7, #0
 80083c8:	eb07 0e06 	add.w	lr, r7, r6
 80083cc:	da42      	bge.n	8008454 <__ieee754_sqrt+0x158>
 80083ce:	f1be 0f00 	cmp.w	lr, #0
 80083d2:	db3f      	blt.n	8008454 <__ieee754_sqrt+0x158>
 80083d4:	f104 0801 	add.w	r8, r4, #1
 80083d8:	1b12      	subs	r2, r2, r4
 80083da:	428f      	cmp	r7, r1
 80083dc:	bf88      	it	hi
 80083de:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80083e2:	1bc9      	subs	r1, r1, r7
 80083e4:	4433      	add	r3, r6
 80083e6:	4644      	mov	r4, r8
 80083e8:	0052      	lsls	r2, r2, #1
 80083ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80083ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80083f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80083f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083fa:	d1dd      	bne.n	80083b8 <__ieee754_sqrt+0xbc>
 80083fc:	430a      	orrs	r2, r1
 80083fe:	d006      	beq.n	800840e <__ieee754_sqrt+0x112>
 8008400:	1c5c      	adds	r4, r3, #1
 8008402:	bf13      	iteet	ne
 8008404:	3301      	addne	r3, #1
 8008406:	3501      	addeq	r5, #1
 8008408:	4663      	moveq	r3, ip
 800840a:	f023 0301 	bicne.w	r3, r3, #1
 800840e:	106a      	asrs	r2, r5, #1
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	07e9      	lsls	r1, r5, #31
 8008414:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008418:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800841c:	bf48      	it	mi
 800841e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008422:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008426:	461c      	mov	r4, r3
 8008428:	e780      	b.n	800832c <__ieee754_sqrt+0x30>
 800842a:	0aca      	lsrs	r2, r1, #11
 800842c:	3815      	subs	r0, #21
 800842e:	0549      	lsls	r1, r1, #21
 8008430:	2a00      	cmp	r2, #0
 8008432:	d0fa      	beq.n	800842a <__ieee754_sqrt+0x12e>
 8008434:	02d6      	lsls	r6, r2, #11
 8008436:	d50a      	bpl.n	800844e <__ieee754_sqrt+0x152>
 8008438:	f1c3 0420 	rsb	r4, r3, #32
 800843c:	fa21 f404 	lsr.w	r4, r1, r4
 8008440:	1e5d      	subs	r5, r3, #1
 8008442:	4099      	lsls	r1, r3
 8008444:	4322      	orrs	r2, r4
 8008446:	1b43      	subs	r3, r0, r5
 8008448:	e78b      	b.n	8008362 <__ieee754_sqrt+0x66>
 800844a:	4618      	mov	r0, r3
 800844c:	e7f0      	b.n	8008430 <__ieee754_sqrt+0x134>
 800844e:	0052      	lsls	r2, r2, #1
 8008450:	3301      	adds	r3, #1
 8008452:	e7ef      	b.n	8008434 <__ieee754_sqrt+0x138>
 8008454:	46a0      	mov	r8, r4
 8008456:	e7bf      	b.n	80083d8 <__ieee754_sqrt+0xdc>
 8008458:	7ff00000 	.word	0x7ff00000

0800845c <__ieee754_sqrtf>:
 800845c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008460:	4770      	bx	lr

08008462 <fabs>:
 8008462:	ec51 0b10 	vmov	r0, r1, d0
 8008466:	ee10 2a10 	vmov	r2, s0
 800846a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800846e:	ec43 2b10 	vmov	d0, r2, r3
 8008472:	4770      	bx	lr

08008474 <finite>:
 8008474:	ee10 3a90 	vmov	r3, s1
 8008478:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800847c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008480:	0fc0      	lsrs	r0, r0, #31
 8008482:	4770      	bx	lr

08008484 <matherr>:
 8008484:	2000      	movs	r0, #0
 8008486:	4770      	bx	lr

08008488 <nan>:
 8008488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008490 <nan+0x8>
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	00000000 	.word	0x00000000
 8008494:	7ff80000 	.word	0x7ff80000

08008498 <rint>:
 8008498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849a:	ec51 0b10 	vmov	r0, r1, d0
 800849e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80084a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80084a6:	2e13      	cmp	r6, #19
 80084a8:	460b      	mov	r3, r1
 80084aa:	ee10 4a10 	vmov	r4, s0
 80084ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80084b2:	dc56      	bgt.n	8008562 <rint+0xca>
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	da2b      	bge.n	8008510 <rint+0x78>
 80084b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80084bc:	4302      	orrs	r2, r0
 80084be:	d023      	beq.n	8008508 <rint+0x70>
 80084c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80084c4:	4302      	orrs	r2, r0
 80084c6:	4254      	negs	r4, r2
 80084c8:	4314      	orrs	r4, r2
 80084ca:	0c4b      	lsrs	r3, r1, #17
 80084cc:	0b24      	lsrs	r4, r4, #12
 80084ce:	045b      	lsls	r3, r3, #17
 80084d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80084d4:	ea44 0103 	orr.w	r1, r4, r3
 80084d8:	460b      	mov	r3, r1
 80084da:	492f      	ldr	r1, [pc, #188]	; (8008598 <rint+0x100>)
 80084dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80084e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80084e4:	4602      	mov	r2, r0
 80084e6:	4639      	mov	r1, r7
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7f7 ff1f 	bl	800032c <__adddf3>
 80084ee:	e9cd 0100 	strd	r0, r1, [sp]
 80084f2:	463b      	mov	r3, r7
 80084f4:	4632      	mov	r2, r6
 80084f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fa:	f7f7 ff15 	bl	8000328 <__aeabi_dsub>
 80084fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008502:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008506:	4639      	mov	r1, r7
 8008508:	ec41 0b10 	vmov	d0, r0, r1
 800850c:	b003      	add	sp, #12
 800850e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008510:	4a22      	ldr	r2, [pc, #136]	; (800859c <rint+0x104>)
 8008512:	4132      	asrs	r2, r6
 8008514:	ea01 0702 	and.w	r7, r1, r2
 8008518:	4307      	orrs	r7, r0
 800851a:	d0f5      	beq.n	8008508 <rint+0x70>
 800851c:	0852      	lsrs	r2, r2, #1
 800851e:	4011      	ands	r1, r2
 8008520:	430c      	orrs	r4, r1
 8008522:	d00b      	beq.n	800853c <rint+0xa4>
 8008524:	ea23 0202 	bic.w	r2, r3, r2
 8008528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800852c:	2e13      	cmp	r6, #19
 800852e:	fa43 f306 	asr.w	r3, r3, r6
 8008532:	bf0c      	ite	eq
 8008534:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008538:	2400      	movne	r4, #0
 800853a:	4313      	orrs	r3, r2
 800853c:	4916      	ldr	r1, [pc, #88]	; (8008598 <rint+0x100>)
 800853e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008542:	4622      	mov	r2, r4
 8008544:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008548:	4620      	mov	r0, r4
 800854a:	4629      	mov	r1, r5
 800854c:	f7f7 feee 	bl	800032c <__adddf3>
 8008550:	e9cd 0100 	strd	r0, r1, [sp]
 8008554:	4622      	mov	r2, r4
 8008556:	462b      	mov	r3, r5
 8008558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800855c:	f7f7 fee4 	bl	8000328 <__aeabi_dsub>
 8008560:	e7d2      	b.n	8008508 <rint+0x70>
 8008562:	2e33      	cmp	r6, #51	; 0x33
 8008564:	dd07      	ble.n	8008576 <rint+0xde>
 8008566:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800856a:	d1cd      	bne.n	8008508 <rint+0x70>
 800856c:	ee10 2a10 	vmov	r2, s0
 8008570:	f7f7 fedc 	bl	800032c <__adddf3>
 8008574:	e7c8      	b.n	8008508 <rint+0x70>
 8008576:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800857e:	40f2      	lsrs	r2, r6
 8008580:	4210      	tst	r0, r2
 8008582:	d0c1      	beq.n	8008508 <rint+0x70>
 8008584:	0852      	lsrs	r2, r2, #1
 8008586:	4210      	tst	r0, r2
 8008588:	bf1f      	itttt	ne
 800858a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800858e:	ea20 0202 	bicne.w	r2, r0, r2
 8008592:	4134      	asrne	r4, r6
 8008594:	4314      	orrne	r4, r2
 8008596:	e7d1      	b.n	800853c <rint+0xa4>
 8008598:	08008ba8 	.word	0x08008ba8
 800859c:	000fffff 	.word	0x000fffff

080085a0 <scalbn>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	ec55 4b10 	vmov	r4, r5, d0
 80085a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80085aa:	4606      	mov	r6, r0
 80085ac:	462b      	mov	r3, r5
 80085ae:	b9aa      	cbnz	r2, 80085dc <scalbn+0x3c>
 80085b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80085b4:	4323      	orrs	r3, r4
 80085b6:	d03b      	beq.n	8008630 <scalbn+0x90>
 80085b8:	4b31      	ldr	r3, [pc, #196]	; (8008680 <scalbn+0xe0>)
 80085ba:	4629      	mov	r1, r5
 80085bc:	2200      	movs	r2, #0
 80085be:	ee10 0a10 	vmov	r0, s0
 80085c2:	f7f8 f869 	bl	8000698 <__aeabi_dmul>
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <scalbn+0xe4>)
 80085c8:	429e      	cmp	r6, r3
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	da12      	bge.n	80085f6 <scalbn+0x56>
 80085d0:	a327      	add	r3, pc, #156	; (adr r3, 8008670 <scalbn+0xd0>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f7f8 f85f 	bl	8000698 <__aeabi_dmul>
 80085da:	e009      	b.n	80085f0 <scalbn+0x50>
 80085dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80085e0:	428a      	cmp	r2, r1
 80085e2:	d10c      	bne.n	80085fe <scalbn+0x5e>
 80085e4:	ee10 2a10 	vmov	r2, s0
 80085e8:	4620      	mov	r0, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f7 fe9e 	bl	800032c <__adddf3>
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	e01c      	b.n	8008630 <scalbn+0x90>
 80085f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80085fa:	460b      	mov	r3, r1
 80085fc:	3a36      	subs	r2, #54	; 0x36
 80085fe:	4432      	add	r2, r6
 8008600:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008604:	428a      	cmp	r2, r1
 8008606:	dd0b      	ble.n	8008620 <scalbn+0x80>
 8008608:	ec45 4b11 	vmov	d1, r4, r5
 800860c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008678 <scalbn+0xd8>
 8008610:	f000 f83c 	bl	800868c <copysign>
 8008614:	a318      	add	r3, pc, #96	; (adr r3, 8008678 <scalbn+0xd8>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	ec51 0b10 	vmov	r0, r1, d0
 800861e:	e7da      	b.n	80085d6 <scalbn+0x36>
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd08      	ble.n	8008636 <scalbn+0x96>
 8008624:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008628:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800862c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008630:	ec45 4b10 	vmov	d0, r4, r5
 8008634:	bd70      	pop	{r4, r5, r6, pc}
 8008636:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800863a:	da0d      	bge.n	8008658 <scalbn+0xb8>
 800863c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008640:	429e      	cmp	r6, r3
 8008642:	ec45 4b11 	vmov	d1, r4, r5
 8008646:	dce1      	bgt.n	800860c <scalbn+0x6c>
 8008648:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008670 <scalbn+0xd0>
 800864c:	f000 f81e 	bl	800868c <copysign>
 8008650:	a307      	add	r3, pc, #28	; (adr r3, 8008670 <scalbn+0xd0>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	e7e0      	b.n	800861a <scalbn+0x7a>
 8008658:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800865c:	3236      	adds	r2, #54	; 0x36
 800865e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	2200      	movs	r2, #0
 800866c:	4b06      	ldr	r3, [pc, #24]	; (8008688 <scalbn+0xe8>)
 800866e:	e7b2      	b.n	80085d6 <scalbn+0x36>
 8008670:	c2f8f359 	.word	0xc2f8f359
 8008674:	01a56e1f 	.word	0x01a56e1f
 8008678:	8800759c 	.word	0x8800759c
 800867c:	7e37e43c 	.word	0x7e37e43c
 8008680:	43500000 	.word	0x43500000
 8008684:	ffff3cb0 	.word	0xffff3cb0
 8008688:	3c900000 	.word	0x3c900000

0800868c <copysign>:
 800868c:	ec51 0b10 	vmov	r0, r1, d0
 8008690:	ee11 0a90 	vmov	r0, s3
 8008694:	ee10 2a10 	vmov	r2, s0
 8008698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800869c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80086a0:	ea41 0300 	orr.w	r3, r1, r0
 80086a4:	ec43 2b10 	vmov	d0, r2, r3
 80086a8:	4770      	bx	lr
	...

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
