
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  080066c8  080066c8  000166c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200001dc  08006da4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006da4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063dc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001241  00000000  00000000  000265e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000630  00000000  00000000  00027830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000568  00000000  00000000  00027e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029717  00000000  00000000  000283c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005017  00000000  00000000  00051adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb7eb  00000000  00000000  00056af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001522e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  0015235c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080066b0 	.word	0x080066b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080066b0 	.word	0x080066b0

08000200 <kalman>:
	//s4 -> p
	//s5 -> k
	//s6 -> used for intermediate in math

	//CALLEE-SAVE CONVENTION
	vpush {s1-s6}
 8000200:	ed6d 0a06 	vpush	{s1-s6}

	//Turning on exception bits
	mov r1, #0b1111110000000
 8000204:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
	vmsr fpscr, r1
 8000208:	eee1 1a10 	vmsr	fpscr, r1

	vldr s1, [r0] //q
 800020c:	edd0 0a00 	vldr	s1, [r0]
	vldr s2, [r0, #4] //r
 8000210:	ed90 1a01 	vldr	s2, [r0, #4]
	vldr s3, [r0, #8] //x
 8000214:	edd0 1a02 	vldr	s3, [r0, #8]
	vldr s4, [r0, #12] //p
 8000218:	ed90 2a03 	vldr	s4, [r0, #12]
	vldr s5, [r0, #16] //k
 800021c:	edd0 2a04 	vldr	s5, [r0, #16]

	//p = p + q ---> s4 = s4 + s1
	vadd.f32 s4, s4, s1
 8000220:	ee32 2a20 	vadd.f32	s4, s4, s1

	//k = p/(p+r)
	vadd.f32 s6, s4, s2
 8000224:	ee32 3a01 	vadd.f32	s6, s4, s2
	vdiv.f32 s5, s4, s6
 8000228:	eec2 2a03 	vdiv.f32	s5, s4, s6
	vstr s5, [r0, #16] //Store new k
 800022c:	edc0 2a04 	vstr	s5, [r0, #16]

	//x = x + k(measure - x)
	vsub.f32 s6, s0, s3
 8000230:	ee30 3a61 	vsub.f32	s6, s0, s3
	vmul.f32 s6, s5, s6
 8000234:	ee22 3a83 	vmul.f32	s6, s5, s6
	vadd.f32 s3, s3, s6
 8000238:	ee71 1a83 	vadd.f32	s3, s3, s6
	vstr s3, [r0, #8] //Store new x
 800023c:	edc0 1a02 	vstr	s3, [r0, #8]

	//p = (1-k)p
	vmov s6, #1.0
 8000240:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	vsub.f32 s6, s6, s5
 8000244:	ee33 3a62 	vsub.f32	s6, s6, s5
	vmul.f32 s4, s6, s4
 8000248:	ee23 2a02 	vmul.f32	s4, s6, s4
	vstr s4, [r0, #12] //Store new p
 800024c:	ed80 2a03 	vstr	s4, [r0, #12]

	//Check if errors occurred
	vmrs r1, fpscr
 8000250:	eef1 1a10 	vmrs	r1, fpscr
	and r1, r1, 0x0000001F
 8000254:	f001 011f 	and.w	r1, r1, #31
	cmp r1, #0
 8000258:	2900      	cmp	r1, #0
	bgt error
 800025a:	dc04      	bgt.n	8000266 <error>

	//CALLEE-SAVE CONVENTION
	vpop {s1-s6}
 800025c:	ecfd 0a06 	vpop	{s1-s6}
	mov r0, #0
 8000260:	f04f 0000 	mov.w	r0, #0
	bx lr
 8000264:	4770      	bx	lr

08000266 <error>:

error:
	//Return -1
	mov r0, #-1
 8000266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	vpop {s1-s6}
 800026a:	ecfd 0a06 	vpop	{s1-s6}
	bx lr
 800026e:	4770      	bx	lr

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800045e:	f1a4 0401 	sub.w	r4, r4, #1
 8000462:	d1e9      	bne.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ee      	sub	sp, #440	; 0x1b8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 f9f4 	bl	800111a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f84b 	bl	8000dcc <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  struct KalmanFilter filter;
  filter.k = 0.0;
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  filter.x = 0.0;
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  filter.p = 0.0;
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  filter.q = 0.0;
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  filter.r = 0.0;
 8000d56:	f04f 0300 	mov.w	r3, #0
 8000d5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  float array[] = TEST_ARRAY;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <main+0xa0>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	4611      	mov	r1, r2
 8000d66:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f001 fabc 	bl	80022e8 <memcpy>
  int array_size = sizeof(array)/sizeof(float);
 8000d70:	2365      	movs	r3, #101	; 0x65
 8000d72:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  int cnt = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (array_size > 0) {
 8000d7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	ddfb      	ble.n	8000d7c <main+0x54>
		  int result = kalman(&filter, array[cnt]);
 8000d84:	1d3a      	adds	r2, r7, #4
 8000d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	edd3 7a00 	vldr	s15, [r3]
 8000d92:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000d96:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa30 	bl	8000200 <kalman>
 8000da0:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
		  printf('%i', result);
 8000da4:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8000da8:	f242 5069 	movw	r0, #9577	; 0x2569
 8000dac:	f002 f8ee 	bl	8002f8c <iprintf>
		  cnt++;
 8000db0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000db4:	3301      	adds	r3, #1
 8000db6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
		  array_size--;
 8000dba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  if (array_size > 0) {
 8000dc4:	e7da      	b.n	8000d7c <main+0x54>
 8000dc6:	bf00      	nop
 8000dc8:	080066c8 	.word	0x080066c8

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b096      	sub	sp, #88	; 0x58
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2244      	movs	r2, #68	; 0x44
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fa8f 	bl	80022fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 fb0e 	bl	8001410 <HAL_PWREx_ControlVoltageScaling>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000dfa:	f000 f838 	bl	8000e6e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e0a:	2360      	movs	r3, #96	; 0x60
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e12:	2301      	movs	r3, #1
 8000e14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e1a:	233c      	movs	r3, #60	; 0x3c
 8000e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb92 	bl	8001558 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e3a:	f000 f818 	bl	8000e6e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2303      	movs	r3, #3
 8000e44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	2105      	movs	r1, #5
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 ffa4 	bl	8001da4 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e62:	f000 f804 	bl	8000e6e <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3758      	adds	r7, #88	; 0x58
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e72:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x6>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f95a 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
	}

return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e009      	b.n	8000f74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf1      	blt.n	8000f60 <_write+0x12>
	}
	return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f001 f938 	bl	8002294 <__errno>
 8001024:	4602      	mov	r2, r0
 8001026:	230c      	movs	r3, #12
 8001028:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200a0000 	.word	0x200a0000
 8001050:	00000400 	.word	0x00000400
 8001054:	200001f8 	.word	0x200001f8
 8001058:	20000210 	.word	0x20000210

0800105c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <SystemInit+0x64>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <SystemInit+0x64>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <SystemInit+0x68>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <SystemInit+0x68>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <SystemInit+0x68>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SystemInit+0x68>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <SystemInit+0x68>)
 8001088:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800108c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001090:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <SystemInit+0x68>)
 8001094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001098:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <SystemInit+0x68>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <SystemInit+0x68>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <SystemInit+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SystemInit+0x64>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	609a      	str	r2, [r3, #8]
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	40021000 	.word	0x40021000

080010c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010cc:	f7ff ffc6 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
	ldr	r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LoopForever+0x16>)
	cmp	r2, r3
 80010f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 f8d3 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fa:	f7ff fe15 	bl	8000d28 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001104:	08006bc8 	.word	0x08006bc8
	ldr	r0, =_sdata
 8001108:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800110c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001110:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001114:	2000020c 	.word	0x2000020c

08001118 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_IRQHandler>

0800111a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f91f 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f80e 	bl	800114c <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113c:	f7ff fe9c 	bl	8000e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001140:	79fb      	ldrb	r3, [r7, #7]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_InitTick+0x6c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d023      	beq.n	80011a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_InitTick+0x70>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_InitTick+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f91d 	bl	80013b6 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d809      	bhi.n	800119c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f000 f8f5 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0x74>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e007      	b.n	80011ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e004      	b.n	80011ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e001      	b.n	80011ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000204 	.word	0x20000204

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000204 	.word	0x20000204

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff47 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5c 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb0 	bl	8001324 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_PWREx_GetVoltageRange+0x3c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	e00b      	b.n	8001400 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_PWREx_GetVoltageRange+0x3c>)
 80013ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f6:	d102      	bne.n	80013fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	e000      	b.n	8001400 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80013fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000

08001410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d141      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800141e:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142a:	d131      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001432:	4a46      	ldr	r2, [pc, #280]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001444:	4a41      	ldr	r2, [pc, #260]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2232      	movs	r2, #50	; 0x32
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001462:	e002      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001476:	d102      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f2      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148a:	d158      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e057      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001496:	4a2d      	ldr	r2, [pc, #180]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014a0:	e04d      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d141      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b6:	d131      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2232      	movs	r2, #50	; 0x32
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ee:	e002      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d102      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f2      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001516:	d112      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e011      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800152c:	e007      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40007000 	.word	0x40007000
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f000 bc16 	b.w	8001d98 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156c:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001576:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80e4 	beq.w	8001756 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4c>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	f040 808b 	bne.w	80016b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f040 8087 	bne.w	80016b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x64>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e3ed      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <HAL_RCC_OscConfig+0x7e>
 80015cc:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d4:	e005      	b.n	80015e2 <HAL_RCC_OscConfig+0x8a>
 80015d6:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d223      	bcs.n	800162e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fd90 	bl	8002110 <RCC_SetFlashLatencyFromMSIRange>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e3ce      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7c      	ldr	r2, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4977      	ldr	r1, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001618:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4972      	ldr	r1, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e025      	b.n	800167a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	496a      	ldr	r1, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	4965      	ldr	r1, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fd50 	bl	8002110 <RCC_SetFlashLatencyFromMSIRange>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e38e      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167a:	f000 fcbf 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 800167e:	4601      	mov	r1, r0
 8001680:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a5a      	ldr	r2, [pc, #360]	; (80017f4 <HAL_RCC_OscConfig+0x29c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa21 f303 	lsr.w	r3, r1, r3
 8001696:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_RCC_OscConfig+0x2a0>)
 8001698:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800169a:	4b58      	ldr	r3, [pc, #352]	; (80017fc <HAL_RCC_OscConfig+0x2a4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fd54 	bl	800114c <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d052      	beq.n	8001754 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	e372      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d032      	beq.n	8001720 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fd91 	bl	80011ec <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ce:	f7ff fd8d 	bl	80011ec <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e35b      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	493a      	ldr	r1, [pc, #232]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e01a      	b.n	8001756 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172c:	f7ff fd5e 	bl	80011ec <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fd5a 	bl	80011ec <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e328      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1dc>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d073      	beq.n	800184a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x21c>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d10e      	bne.n	800178c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d10b      	bne.n	800178c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d063      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d15f      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e305      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x24c>
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0x288>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x270>
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x288>
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_RCC_OscConfig+0x298>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fd00 	bl	80011ec <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ee:	e010      	b.n	8001812 <HAL_RCC_OscConfig+0x2ba>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	0800685c 	.word	0x0800685c
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fcf4 	bl	80011ec <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e2c2      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4baf      	ldr	r3, [pc, #700]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x2a8>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fce4 	bl	80011ec <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fce0 	bl	80011ec <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e2ae      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4ba5      	ldr	r3, [pc, #660]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x2d0>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d060      	beq.n	8001918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x310>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d119      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x328>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e28b      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b93      	ldr	r3, [pc, #588]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4990      	ldr	r1, [pc, #576]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	e040      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a8b      	ldr	r2, [pc, #556]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc9f 	bl	80011ec <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fc9b 	bl	80011ec <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e269      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	497c      	ldr	r1, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a79      	ldr	r2, [pc, #484]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fc7b 	bl	80011ec <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fc77 	bl	80011ec <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e245      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fc56 	bl	80011ec <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc52 	bl	80011ec <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e220      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x3ec>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fc39 	bl	80011ec <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fc35 	bl	80011ec <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e203      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a6 	beq.w	8001af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_OscConfig+0x57c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_OscConfig+0x57c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <HAL_RCC_OscConfig+0x57c>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fbfc 	bl	80011ec <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff fbf8 	bl	80011ec <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1c6      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_RCC_OscConfig+0x57c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d8>
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2e:	e024      	b.n	8001a7a <HAL_RCC_OscConfig+0x522>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d110      	bne.n	8001a5a <HAL_RCC_OscConfig+0x502>
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a58:	e00f      	b.n	8001a7a <HAL_RCC_OscConfig+0x522>
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001a72:	f023 0304 	bic.w	r3, r3, #4
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fbb3 	bl	80011ec <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fbaf 	bl	80011ec <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e17b      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ed      	beq.n	8001a8a <HAL_RCC_OscConfig+0x532>
 8001aae:	e01a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb9c 	bl	80011ec <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb98 	bl	80011ec <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d906      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e164      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	4ba8      	ldr	r3, [pc, #672]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1e8      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4ba3      	ldr	r3, [pc, #652]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4aa2      	ldr	r2, [pc, #648]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b0c:	4b9b      	ldr	r3, [pc, #620]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b12:	4a9a      	ldr	r2, [pc, #616]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fb66 	bl	80011ec <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b24:	f7ff fb62 	bl	80011ec <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e130      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b36:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x5cc>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b46:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4c:	4a8b      	ldr	r2, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff fb49 	bl	80011ec <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5e:	f7ff fb45 	bl	80011ec <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e113      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b70:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8107 	beq.w	8001d96 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f040 80cb 	bne.w	8001d28 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0203 	and.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d12c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d123      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d11b      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d113      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d06d      	beq.n	8001cdc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d068      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c12:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0ba      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a55      	ldr	r2, [pc, #340]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c2e:	f7ff fadd 	bl	80011ec <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fad9 	bl	80011ec <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0a7      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <HAL_RCC_OscConfig+0x828>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c64:	3a01      	subs	r2, #1
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6e:	0212      	lsls	r2, r2, #8
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c76:	0852      	lsrs	r2, r2, #1
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0552      	lsls	r2, r2, #21
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c82:	0852      	lsrs	r2, r2, #1
 8001c84:	3a01      	subs	r2, #1
 8001c86:	0652      	lsls	r2, r2, #25
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c8e:	06d2      	lsls	r2, r2, #27
 8001c90:	430a      	orrs	r2, r1
 8001c92:	493a      	ldr	r1, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a34      	ldr	r2, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb0:	f7ff fa9c 	bl	80011ec <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fa98 	bl	80011ec <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e066      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd6:	e05e      	b.n	8001d96 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e05d      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d156      	bne.n	8001d96 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d00:	f7ff fa74 	bl	80011ec <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fa70 	bl	80011ec <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e03e      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x7b0>
 8001d26:	e036      	b.n	8001d96 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d031      	beq.n	8001d92 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d4c:	f023 0303 	bic.w	r3, r3, #3
 8001d50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff fa43 	bl	80011ec <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	e00c      	b.n	8001d84 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fa3f 	bl	80011ec <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d905      	bls.n	8001d84 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e00d      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x848>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_OscConfig+0x812>
 8001d90:	e001      	b.n	8001d96 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e10f      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d910      	bls.n	8001dec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 020f 	bic.w	r2, r3, #15
 8001dd2:	4984      	ldr	r1, [pc, #528]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0f7      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8089 	beq.w	8001f0c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d133      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0e4      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e12:	f000 f9d7 	bl	80021c4 <RCC_GetSysClockFreqFromPLLSource>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <HAL_RCC_ClockConfig+0x248>)
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d955      	bls.n	8001eca <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e044      	b.n	8001eca <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d03e      	beq.n	8001eca <HAL_RCC_ClockConfig+0x126>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d13a      	bne.n	8001eca <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e54:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5c:	4a62      	ldr	r2, [pc, #392]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e02f      	b.n	8001eca <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d115      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0ac      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8a:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0a0      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e098      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001eaa:	f000 f8a7 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCC_ClockConfig+0x248>)
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d909      	bls.n	8001eca <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ebe:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4944      	ldr	r1, [pc, #272]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001edc:	f7ff f986 	bl	80011ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff f982 	bl	80011ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e070      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4930      	ldr	r1, [pc, #192]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d105      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f3c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d210      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 020f 	bic.w	r2, r3, #15
 8001f54:	4923      	ldr	r1, [pc, #140]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_ClockConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e036      	b.n	8001fdc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fac:	f000 f826 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_RCC_ClockConfig+0x24c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x250>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f8bb 	bl	800114c <HAL_InitTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	04c4b400 	.word	0x04c4b400
 8001ff0:	0800685c 	.word	0x0800685c
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x34>
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d121      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d11e      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d102      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	e004      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d101      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_RCC_GetSysClockFreq+0x110>)
 8002082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d133      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800209a:	2b03      	cmp	r3, #3
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800209e:	e005      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020a2:	617b      	str	r3, [r7, #20]
      break;
 80020a4:	e005      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x110>)
 80020a8:	617b      	str	r3, [r7, #20]
      break;
 80020aa:	e002      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	617b      	str	r3, [r7, #20]
      break;
 80020b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	3301      	adds	r3, #1
 80020be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	fb02 f203 	mul.w	r2, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_GetSysClockFreq+0x104>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0e5b      	lsrs	r3, r3, #25
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	3301      	adds	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f2:	69bb      	ldr	r3, [r7, #24]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3724      	adds	r7, #36	; 0x24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40021000 	.word	0x40021000
 8002104:	0800686c 	.word	0x0800686c
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002128:	f7ff f952 	bl	80013d0 <HAL_PWREx_GetVoltageRange>
 800212c:	6178      	str	r0, [r7, #20]
 800212e:	e014      	b.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002148:	f7ff f942 	bl	80013d0 <HAL_PWREx_GetVoltageRange>
 800214c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002160:	d10b      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d913      	bls.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2ba0      	cmp	r3, #160	; 0xa0
 800216c:	d902      	bls.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800216e:	2302      	movs	r3, #2
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e00d      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e00a      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b7f      	cmp	r3, #127	; 0x7f
 800217e:	d902      	bls.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002180:	2302      	movs	r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e004      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b70      	cmp	r3, #112	; 0x70
 800218a:	d101      	bne.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 020f 	bic.w	r2, r3, #15
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40022000 	.word	0x40022000

080021c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d118      	bne.n	800220c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d107      	bne.n	80021f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e005      	b.n	8002202 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002202:	4a21      	ldr	r2, [pc, #132]	; (8002288 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d002      	beq.n	8002222 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800221c:	2b03      	cmp	r3, #3
 800221e:	d003      	beq.n	8002228 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002220:	e005      	b.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002224:	613b      	str	r3, [r7, #16]
    break;
 8002226:	e005      	b.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800222a:	613b      	str	r3, [r7, #16]
    break;
 800222c:	e002      	b.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
    break;
 8002232:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	fb02 f203 	mul.w	r2, r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	0e5b      	lsrs	r3, r3, #25
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	3301      	adds	r3, #1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002274:	683b      	ldr	r3, [r7, #0]
}
 8002276:	4618      	mov	r0, r3
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	0800686c 	.word	0x0800686c
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200

08002294 <__errno>:
 8002294:	4b01      	ldr	r3, [pc, #4]	; (800229c <__errno+0x8>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4e0d      	ldr	r6, [pc, #52]	; (80022d8 <__libc_init_array+0x38>)
 80022a4:	4c0d      	ldr	r4, [pc, #52]	; (80022dc <__libc_init_array+0x3c>)
 80022a6:	1ba4      	subs	r4, r4, r6
 80022a8:	10a4      	asrs	r4, r4, #2
 80022aa:	2500      	movs	r5, #0
 80022ac:	42a5      	cmp	r5, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	4e0b      	ldr	r6, [pc, #44]	; (80022e0 <__libc_init_array+0x40>)
 80022b2:	4c0c      	ldr	r4, [pc, #48]	; (80022e4 <__libc_init_array+0x44>)
 80022b4:	f004 f9fc 	bl	80066b0 <_init>
 80022b8:	1ba4      	subs	r4, r4, r6
 80022ba:	10a4      	asrs	r4, r4, #2
 80022bc:	2500      	movs	r5, #0
 80022be:	42a5      	cmp	r5, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c8:	4798      	blx	r3
 80022ca:	3501      	adds	r5, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022d2:	4798      	blx	r3
 80022d4:	3501      	adds	r5, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	08006bc0 	.word	0x08006bc0
 80022dc:	08006bc0 	.word	0x08006bc0
 80022e0:	08006bc0 	.word	0x08006bc0
 80022e4:	08006bc4 	.word	0x08006bc4

080022e8 <memcpy>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	1e43      	subs	r3, r0, #1
 80022ec:	440a      	add	r2, r1
 80022ee:	4291      	cmp	r1, r2
 80022f0:	d100      	bne.n	80022f4 <memcpy+0xc>
 80022f2:	bd10      	pop	{r4, pc}
 80022f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022fc:	e7f7      	b.n	80022ee <memcpy+0x6>

080022fe <memset>:
 80022fe:	4402      	add	r2, r0
 8002300:	4603      	mov	r3, r0
 8002302:	4293      	cmp	r3, r2
 8002304:	d100      	bne.n	8002308 <memset+0xa>
 8002306:	4770      	bx	lr
 8002308:	f803 1b01 	strb.w	r1, [r3], #1
 800230c:	e7f9      	b.n	8002302 <memset+0x4>

0800230e <__cvt>:
 800230e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002312:	ec55 4b10 	vmov	r4, r5, d0
 8002316:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002318:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800231c:	2d00      	cmp	r5, #0
 800231e:	460e      	mov	r6, r1
 8002320:	4691      	mov	r9, r2
 8002322:	4619      	mov	r1, r3
 8002324:	bfb8      	it	lt
 8002326:	4622      	movlt	r2, r4
 8002328:	462b      	mov	r3, r5
 800232a:	f027 0720 	bic.w	r7, r7, #32
 800232e:	bfbb      	ittet	lt
 8002330:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002334:	461d      	movlt	r5, r3
 8002336:	2300      	movge	r3, #0
 8002338:	232d      	movlt	r3, #45	; 0x2d
 800233a:	bfb8      	it	lt
 800233c:	4614      	movlt	r4, r2
 800233e:	2f46      	cmp	r7, #70	; 0x46
 8002340:	700b      	strb	r3, [r1, #0]
 8002342:	d004      	beq.n	800234e <__cvt+0x40>
 8002344:	2f45      	cmp	r7, #69	; 0x45
 8002346:	d100      	bne.n	800234a <__cvt+0x3c>
 8002348:	3601      	adds	r6, #1
 800234a:	2102      	movs	r1, #2
 800234c:	e000      	b.n	8002350 <__cvt+0x42>
 800234e:	2103      	movs	r1, #3
 8002350:	ab03      	add	r3, sp, #12
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	ab02      	add	r3, sp, #8
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4632      	mov	r2, r6
 800235a:	4653      	mov	r3, sl
 800235c:	ec45 4b10 	vmov	d0, r4, r5
 8002360:	f001 fd8e 	bl	8003e80 <_dtoa_r>
 8002364:	2f47      	cmp	r7, #71	; 0x47
 8002366:	4680      	mov	r8, r0
 8002368:	d102      	bne.n	8002370 <__cvt+0x62>
 800236a:	f019 0f01 	tst.w	r9, #1
 800236e:	d026      	beq.n	80023be <__cvt+0xb0>
 8002370:	2f46      	cmp	r7, #70	; 0x46
 8002372:	eb08 0906 	add.w	r9, r8, r6
 8002376:	d111      	bne.n	800239c <__cvt+0x8e>
 8002378:	f898 3000 	ldrb.w	r3, [r8]
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d10a      	bne.n	8002396 <__cvt+0x88>
 8002380:	2200      	movs	r2, #0
 8002382:	2300      	movs	r3, #0
 8002384:	4620      	mov	r0, r4
 8002386:	4629      	mov	r1, r5
 8002388:	f7fe fbee 	bl	8000b68 <__aeabi_dcmpeq>
 800238c:	b918      	cbnz	r0, 8002396 <__cvt+0x88>
 800238e:	f1c6 0601 	rsb	r6, r6, #1
 8002392:	f8ca 6000 	str.w	r6, [sl]
 8002396:	f8da 3000 	ldr.w	r3, [sl]
 800239a:	4499      	add	r9, r3
 800239c:	2200      	movs	r2, #0
 800239e:	2300      	movs	r3, #0
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fe fbe0 	bl	8000b68 <__aeabi_dcmpeq>
 80023a8:	b938      	cbnz	r0, 80023ba <__cvt+0xac>
 80023aa:	2230      	movs	r2, #48	; 0x30
 80023ac:	9b03      	ldr	r3, [sp, #12]
 80023ae:	454b      	cmp	r3, r9
 80023b0:	d205      	bcs.n	80023be <__cvt+0xb0>
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	9103      	str	r1, [sp, #12]
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e7f8      	b.n	80023ac <__cvt+0x9e>
 80023ba:	f8cd 900c 	str.w	r9, [sp, #12]
 80023be:	9b03      	ldr	r3, [sp, #12]
 80023c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023c2:	eba3 0308 	sub.w	r3, r3, r8
 80023c6:	4640      	mov	r0, r8
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	b004      	add	sp, #16
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080023d0 <__exponent>:
 80023d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023d2:	2900      	cmp	r1, #0
 80023d4:	4604      	mov	r4, r0
 80023d6:	bfba      	itte	lt
 80023d8:	4249      	neglt	r1, r1
 80023da:	232d      	movlt	r3, #45	; 0x2d
 80023dc:	232b      	movge	r3, #43	; 0x2b
 80023de:	2909      	cmp	r1, #9
 80023e0:	f804 2b02 	strb.w	r2, [r4], #2
 80023e4:	7043      	strb	r3, [r0, #1]
 80023e6:	dd20      	ble.n	800242a <__exponent+0x5a>
 80023e8:	f10d 0307 	add.w	r3, sp, #7
 80023ec:	461f      	mov	r7, r3
 80023ee:	260a      	movs	r6, #10
 80023f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80023f4:	fb06 1115 	mls	r1, r6, r5, r1
 80023f8:	3130      	adds	r1, #48	; 0x30
 80023fa:	2d09      	cmp	r5, #9
 80023fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002400:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002404:	4629      	mov	r1, r5
 8002406:	dc09      	bgt.n	800241c <__exponent+0x4c>
 8002408:	3130      	adds	r1, #48	; 0x30
 800240a:	3b02      	subs	r3, #2
 800240c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002410:	42bb      	cmp	r3, r7
 8002412:	4622      	mov	r2, r4
 8002414:	d304      	bcc.n	8002420 <__exponent+0x50>
 8002416:	1a10      	subs	r0, r2, r0
 8002418:	b003      	add	sp, #12
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241c:	4613      	mov	r3, r2
 800241e:	e7e7      	b.n	80023f0 <__exponent+0x20>
 8002420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002424:	f804 2b01 	strb.w	r2, [r4], #1
 8002428:	e7f2      	b.n	8002410 <__exponent+0x40>
 800242a:	2330      	movs	r3, #48	; 0x30
 800242c:	4419      	add	r1, r3
 800242e:	7083      	strb	r3, [r0, #2]
 8002430:	1d02      	adds	r2, r0, #4
 8002432:	70c1      	strb	r1, [r0, #3]
 8002434:	e7ef      	b.n	8002416 <__exponent+0x46>
	...

08002438 <_printf_float>:
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	b08d      	sub	sp, #52	; 0x34
 800243e:	460c      	mov	r4, r1
 8002440:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002444:	4616      	mov	r6, r2
 8002446:	461f      	mov	r7, r3
 8002448:	4605      	mov	r5, r0
 800244a:	f002 fec7 	bl	80051dc <_localeconv_r>
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd ff0c 	bl	8000270 <strlen>
 8002458:	2300      	movs	r3, #0
 800245a:	930a      	str	r3, [sp, #40]	; 0x28
 800245c:	f8d8 3000 	ldr.w	r3, [r8]
 8002460:	9005      	str	r0, [sp, #20]
 8002462:	3307      	adds	r3, #7
 8002464:	f023 0307 	bic.w	r3, r3, #7
 8002468:	f103 0208 	add.w	r2, r3, #8
 800246c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002470:	f8d4 b000 	ldr.w	fp, [r4]
 8002474:	f8c8 2000 	str.w	r2, [r8]
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002480:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002484:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002488:	9307      	str	r3, [sp, #28]
 800248a:	f8cd 8018 	str.w	r8, [sp, #24]
 800248e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002492:	4ba7      	ldr	r3, [pc, #668]	; (8002730 <_printf_float+0x2f8>)
 8002494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002498:	f7fe fb98 	bl	8000bcc <__aeabi_dcmpun>
 800249c:	bb70      	cbnz	r0, 80024fc <_printf_float+0xc4>
 800249e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024a2:	4ba3      	ldr	r3, [pc, #652]	; (8002730 <_printf_float+0x2f8>)
 80024a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80024a8:	f7fe fb72 	bl	8000b90 <__aeabi_dcmple>
 80024ac:	bb30      	cbnz	r0, 80024fc <_printf_float+0xc4>
 80024ae:	2200      	movs	r2, #0
 80024b0:	2300      	movs	r3, #0
 80024b2:	4640      	mov	r0, r8
 80024b4:	4649      	mov	r1, r9
 80024b6:	f7fe fb61 	bl	8000b7c <__aeabi_dcmplt>
 80024ba:	b110      	cbz	r0, 80024c2 <_printf_float+0x8a>
 80024bc:	232d      	movs	r3, #45	; 0x2d
 80024be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024c2:	4a9c      	ldr	r2, [pc, #624]	; (8002734 <_printf_float+0x2fc>)
 80024c4:	4b9c      	ldr	r3, [pc, #624]	; (8002738 <_printf_float+0x300>)
 80024c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80024ca:	bf8c      	ite	hi
 80024cc:	4690      	movhi	r8, r2
 80024ce:	4698      	movls	r8, r3
 80024d0:	2303      	movs	r3, #3
 80024d2:	f02b 0204 	bic.w	r2, fp, #4
 80024d6:	6123      	str	r3, [r4, #16]
 80024d8:	6022      	str	r2, [r4, #0]
 80024da:	f04f 0900 	mov.w	r9, #0
 80024de:	9700      	str	r7, [sp, #0]
 80024e0:	4633      	mov	r3, r6
 80024e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80024e4:	4621      	mov	r1, r4
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 f9e6 	bl	80028b8 <_printf_common>
 80024ec:	3001      	adds	r0, #1
 80024ee:	f040 808d 	bne.w	800260c <_printf_float+0x1d4>
 80024f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f6:	b00d      	add	sp, #52	; 0x34
 80024f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	4640      	mov	r0, r8
 8002502:	4649      	mov	r1, r9
 8002504:	f7fe fb62 	bl	8000bcc <__aeabi_dcmpun>
 8002508:	b110      	cbz	r0, 8002510 <_printf_float+0xd8>
 800250a:	4a8c      	ldr	r2, [pc, #560]	; (800273c <_printf_float+0x304>)
 800250c:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <_printf_float+0x308>)
 800250e:	e7da      	b.n	80024c6 <_printf_float+0x8e>
 8002510:	6861      	ldr	r1, [r4, #4]
 8002512:	1c4b      	adds	r3, r1, #1
 8002514:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002518:	a80a      	add	r0, sp, #40	; 0x28
 800251a:	d13e      	bne.n	800259a <_printf_float+0x162>
 800251c:	2306      	movs	r3, #6
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	2300      	movs	r3, #0
 8002522:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002526:	ab09      	add	r3, sp, #36	; 0x24
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	ec49 8b10 	vmov	d0, r8, r9
 800252e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002532:	6022      	str	r2, [r4, #0]
 8002534:	f8cd a004 	str.w	sl, [sp, #4]
 8002538:	6861      	ldr	r1, [r4, #4]
 800253a:	4628      	mov	r0, r5
 800253c:	f7ff fee7 	bl	800230e <__cvt>
 8002540:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002544:	2b47      	cmp	r3, #71	; 0x47
 8002546:	4680      	mov	r8, r0
 8002548:	d109      	bne.n	800255e <_printf_float+0x126>
 800254a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254c:	1cd8      	adds	r0, r3, #3
 800254e:	db02      	blt.n	8002556 <_printf_float+0x11e>
 8002550:	6862      	ldr	r2, [r4, #4]
 8002552:	4293      	cmp	r3, r2
 8002554:	dd47      	ble.n	80025e6 <_printf_float+0x1ae>
 8002556:	f1aa 0a02 	sub.w	sl, sl, #2
 800255a:	fa5f fa8a 	uxtb.w	sl, sl
 800255e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002564:	d824      	bhi.n	80025b0 <_printf_float+0x178>
 8002566:	3901      	subs	r1, #1
 8002568:	4652      	mov	r2, sl
 800256a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800256e:	9109      	str	r1, [sp, #36]	; 0x24
 8002570:	f7ff ff2e 	bl	80023d0 <__exponent>
 8002574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002576:	1813      	adds	r3, r2, r0
 8002578:	2a01      	cmp	r2, #1
 800257a:	4681      	mov	r9, r0
 800257c:	6123      	str	r3, [r4, #16]
 800257e:	dc02      	bgt.n	8002586 <_printf_float+0x14e>
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	07d1      	lsls	r1, r2, #31
 8002584:	d501      	bpl.n	800258a <_printf_float+0x152>
 8002586:	3301      	adds	r3, #1
 8002588:	6123      	str	r3, [r4, #16]
 800258a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0a5      	beq.n	80024de <_printf_float+0xa6>
 8002592:	232d      	movs	r3, #45	; 0x2d
 8002594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002598:	e7a1      	b.n	80024de <_printf_float+0xa6>
 800259a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800259e:	f000 8177 	beq.w	8002890 <_printf_float+0x458>
 80025a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80025a6:	d1bb      	bne.n	8002520 <_printf_float+0xe8>
 80025a8:	2900      	cmp	r1, #0
 80025aa:	d1b9      	bne.n	8002520 <_printf_float+0xe8>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e7b6      	b.n	800251e <_printf_float+0xe6>
 80025b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80025b4:	d119      	bne.n	80025ea <_printf_float+0x1b2>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	dd0c      	ble.n	80025d6 <_printf_float+0x19e>
 80025bc:	6121      	str	r1, [r4, #16]
 80025be:	b913      	cbnz	r3, 80025c6 <_printf_float+0x18e>
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	07d2      	lsls	r2, r2, #31
 80025c4:	d502      	bpl.n	80025cc <_printf_float+0x194>
 80025c6:	3301      	adds	r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	6123      	str	r3, [r4, #16]
 80025cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80025d0:	f04f 0900 	mov.w	r9, #0
 80025d4:	e7d9      	b.n	800258a <_printf_float+0x152>
 80025d6:	b913      	cbnz	r3, 80025de <_printf_float+0x1a6>
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	07d0      	lsls	r0, r2, #31
 80025dc:	d501      	bpl.n	80025e2 <_printf_float+0x1aa>
 80025de:	3302      	adds	r3, #2
 80025e0:	e7f3      	b.n	80025ca <_printf_float+0x192>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e7f1      	b.n	80025ca <_printf_float+0x192>
 80025e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80025ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80025ee:	4293      	cmp	r3, r2
 80025f0:	db05      	blt.n	80025fe <_printf_float+0x1c6>
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	6123      	str	r3, [r4, #16]
 80025f6:	07d1      	lsls	r1, r2, #31
 80025f8:	d5e8      	bpl.n	80025cc <_printf_float+0x194>
 80025fa:	3301      	adds	r3, #1
 80025fc:	e7e5      	b.n	80025ca <_printf_float+0x192>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bfd4      	ite	le
 8002602:	f1c3 0302 	rsble	r3, r3, #2
 8002606:	2301      	movgt	r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	e7de      	b.n	80025ca <_printf_float+0x192>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	055a      	lsls	r2, r3, #21
 8002610:	d407      	bmi.n	8002622 <_printf_float+0x1ea>
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	4642      	mov	r2, r8
 8002616:	4631      	mov	r1, r6
 8002618:	4628      	mov	r0, r5
 800261a:	47b8      	blx	r7
 800261c:	3001      	adds	r0, #1
 800261e:	d12b      	bne.n	8002678 <_printf_float+0x240>
 8002620:	e767      	b.n	80024f2 <_printf_float+0xba>
 8002622:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002626:	f240 80dc 	bls.w	80027e2 <_printf_float+0x3aa>
 800262a:	2200      	movs	r2, #0
 800262c:	2300      	movs	r3, #0
 800262e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002632:	f7fe fa99 	bl	8000b68 <__aeabi_dcmpeq>
 8002636:	2800      	cmp	r0, #0
 8002638:	d033      	beq.n	80026a2 <_printf_float+0x26a>
 800263a:	2301      	movs	r3, #1
 800263c:	4a41      	ldr	r2, [pc, #260]	; (8002744 <_printf_float+0x30c>)
 800263e:	4631      	mov	r1, r6
 8002640:	4628      	mov	r0, r5
 8002642:	47b8      	blx	r7
 8002644:	3001      	adds	r0, #1
 8002646:	f43f af54 	beq.w	80024f2 <_printf_float+0xba>
 800264a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800264e:	429a      	cmp	r2, r3
 8002650:	db02      	blt.n	8002658 <_printf_float+0x220>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	07d8      	lsls	r0, r3, #31
 8002656:	d50f      	bpl.n	8002678 <_printf_float+0x240>
 8002658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800265c:	4631      	mov	r1, r6
 800265e:	4628      	mov	r0, r5
 8002660:	47b8      	blx	r7
 8002662:	3001      	adds	r0, #1
 8002664:	f43f af45 	beq.w	80024f2 <_printf_float+0xba>
 8002668:	f04f 0800 	mov.w	r8, #0
 800266c:	f104 091a 	add.w	r9, r4, #26
 8002670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	4543      	cmp	r3, r8
 8002676:	dc09      	bgt.n	800268c <_printf_float+0x254>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	079b      	lsls	r3, r3, #30
 800267c:	f100 8103 	bmi.w	8002886 <_printf_float+0x44e>
 8002680:	68e0      	ldr	r0, [r4, #12]
 8002682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002684:	4298      	cmp	r0, r3
 8002686:	bfb8      	it	lt
 8002688:	4618      	movlt	r0, r3
 800268a:	e734      	b.n	80024f6 <_printf_float+0xbe>
 800268c:	2301      	movs	r3, #1
 800268e:	464a      	mov	r2, r9
 8002690:	4631      	mov	r1, r6
 8002692:	4628      	mov	r0, r5
 8002694:	47b8      	blx	r7
 8002696:	3001      	adds	r0, #1
 8002698:	f43f af2b 	beq.w	80024f2 <_printf_float+0xba>
 800269c:	f108 0801 	add.w	r8, r8, #1
 80026a0:	e7e6      	b.n	8002670 <_printf_float+0x238>
 80026a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	dc2b      	bgt.n	8002700 <_printf_float+0x2c8>
 80026a8:	2301      	movs	r3, #1
 80026aa:	4a26      	ldr	r2, [pc, #152]	; (8002744 <_printf_float+0x30c>)
 80026ac:	4631      	mov	r1, r6
 80026ae:	4628      	mov	r0, r5
 80026b0:	47b8      	blx	r7
 80026b2:	3001      	adds	r0, #1
 80026b4:	f43f af1d 	beq.w	80024f2 <_printf_float+0xba>
 80026b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026ba:	b923      	cbnz	r3, 80026c6 <_printf_float+0x28e>
 80026bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026be:	b913      	cbnz	r3, 80026c6 <_printf_float+0x28e>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	07d9      	lsls	r1, r3, #31
 80026c4:	d5d8      	bpl.n	8002678 <_printf_float+0x240>
 80026c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026ca:	4631      	mov	r1, r6
 80026cc:	4628      	mov	r0, r5
 80026ce:	47b8      	blx	r7
 80026d0:	3001      	adds	r0, #1
 80026d2:	f43f af0e 	beq.w	80024f2 <_printf_float+0xba>
 80026d6:	f04f 0900 	mov.w	r9, #0
 80026da:	f104 0a1a 	add.w	sl, r4, #26
 80026de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026e0:	425b      	negs	r3, r3
 80026e2:	454b      	cmp	r3, r9
 80026e4:	dc01      	bgt.n	80026ea <_printf_float+0x2b2>
 80026e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026e8:	e794      	b.n	8002614 <_printf_float+0x1dc>
 80026ea:	2301      	movs	r3, #1
 80026ec:	4652      	mov	r2, sl
 80026ee:	4631      	mov	r1, r6
 80026f0:	4628      	mov	r0, r5
 80026f2:	47b8      	blx	r7
 80026f4:	3001      	adds	r0, #1
 80026f6:	f43f aefc 	beq.w	80024f2 <_printf_float+0xba>
 80026fa:	f109 0901 	add.w	r9, r9, #1
 80026fe:	e7ee      	b.n	80026de <_printf_float+0x2a6>
 8002700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002704:	429a      	cmp	r2, r3
 8002706:	bfa8      	it	ge
 8002708:	461a      	movge	r2, r3
 800270a:	2a00      	cmp	r2, #0
 800270c:	4691      	mov	r9, r2
 800270e:	dd07      	ble.n	8002720 <_printf_float+0x2e8>
 8002710:	4613      	mov	r3, r2
 8002712:	4631      	mov	r1, r6
 8002714:	4642      	mov	r2, r8
 8002716:	4628      	mov	r0, r5
 8002718:	47b8      	blx	r7
 800271a:	3001      	adds	r0, #1
 800271c:	f43f aee9 	beq.w	80024f2 <_printf_float+0xba>
 8002720:	f104 031a 	add.w	r3, r4, #26
 8002724:	f04f 0b00 	mov.w	fp, #0
 8002728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800272c:	9306      	str	r3, [sp, #24]
 800272e:	e015      	b.n	800275c <_printf_float+0x324>
 8002730:	7fefffff 	.word	0x7fefffff
 8002734:	080068a4 	.word	0x080068a4
 8002738:	080068a0 	.word	0x080068a0
 800273c:	080068ac 	.word	0x080068ac
 8002740:	080068a8 	.word	0x080068a8
 8002744:	080068b0 	.word	0x080068b0
 8002748:	2301      	movs	r3, #1
 800274a:	9a06      	ldr	r2, [sp, #24]
 800274c:	4631      	mov	r1, r6
 800274e:	4628      	mov	r0, r5
 8002750:	47b8      	blx	r7
 8002752:	3001      	adds	r0, #1
 8002754:	f43f aecd 	beq.w	80024f2 <_printf_float+0xba>
 8002758:	f10b 0b01 	add.w	fp, fp, #1
 800275c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002760:	ebaa 0309 	sub.w	r3, sl, r9
 8002764:	455b      	cmp	r3, fp
 8002766:	dcef      	bgt.n	8002748 <_printf_float+0x310>
 8002768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800276c:	429a      	cmp	r2, r3
 800276e:	44d0      	add	r8, sl
 8002770:	db15      	blt.n	800279e <_printf_float+0x366>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	07da      	lsls	r2, r3, #31
 8002776:	d412      	bmi.n	800279e <_printf_float+0x366>
 8002778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800277a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800277c:	eba3 020a 	sub.w	r2, r3, sl
 8002780:	eba3 0a01 	sub.w	sl, r3, r1
 8002784:	4592      	cmp	sl, r2
 8002786:	bfa8      	it	ge
 8002788:	4692      	movge	sl, r2
 800278a:	f1ba 0f00 	cmp.w	sl, #0
 800278e:	dc0e      	bgt.n	80027ae <_printf_float+0x376>
 8002790:	f04f 0800 	mov.w	r8, #0
 8002794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002798:	f104 091a 	add.w	r9, r4, #26
 800279c:	e019      	b.n	80027d2 <_printf_float+0x39a>
 800279e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027a2:	4631      	mov	r1, r6
 80027a4:	4628      	mov	r0, r5
 80027a6:	47b8      	blx	r7
 80027a8:	3001      	adds	r0, #1
 80027aa:	d1e5      	bne.n	8002778 <_printf_float+0x340>
 80027ac:	e6a1      	b.n	80024f2 <_printf_float+0xba>
 80027ae:	4653      	mov	r3, sl
 80027b0:	4642      	mov	r2, r8
 80027b2:	4631      	mov	r1, r6
 80027b4:	4628      	mov	r0, r5
 80027b6:	47b8      	blx	r7
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1e9      	bne.n	8002790 <_printf_float+0x358>
 80027bc:	e699      	b.n	80024f2 <_printf_float+0xba>
 80027be:	2301      	movs	r3, #1
 80027c0:	464a      	mov	r2, r9
 80027c2:	4631      	mov	r1, r6
 80027c4:	4628      	mov	r0, r5
 80027c6:	47b8      	blx	r7
 80027c8:	3001      	adds	r0, #1
 80027ca:	f43f ae92 	beq.w	80024f2 <_printf_float+0xba>
 80027ce:	f108 0801 	add.w	r8, r8, #1
 80027d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	eba3 030a 	sub.w	r3, r3, sl
 80027dc:	4543      	cmp	r3, r8
 80027de:	dcee      	bgt.n	80027be <_printf_float+0x386>
 80027e0:	e74a      	b.n	8002678 <_printf_float+0x240>
 80027e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027e4:	2a01      	cmp	r2, #1
 80027e6:	dc01      	bgt.n	80027ec <_printf_float+0x3b4>
 80027e8:	07db      	lsls	r3, r3, #31
 80027ea:	d53a      	bpl.n	8002862 <_printf_float+0x42a>
 80027ec:	2301      	movs	r3, #1
 80027ee:	4642      	mov	r2, r8
 80027f0:	4631      	mov	r1, r6
 80027f2:	4628      	mov	r0, r5
 80027f4:	47b8      	blx	r7
 80027f6:	3001      	adds	r0, #1
 80027f8:	f43f ae7b 	beq.w	80024f2 <_printf_float+0xba>
 80027fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002800:	4631      	mov	r1, r6
 8002802:	4628      	mov	r0, r5
 8002804:	47b8      	blx	r7
 8002806:	3001      	adds	r0, #1
 8002808:	f108 0801 	add.w	r8, r8, #1
 800280c:	f43f ae71 	beq.w	80024f2 <_printf_float+0xba>
 8002810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8002818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800281c:	2300      	movs	r3, #0
 800281e:	f7fe f9a3 	bl	8000b68 <__aeabi_dcmpeq>
 8002822:	b9c8      	cbnz	r0, 8002858 <_printf_float+0x420>
 8002824:	4653      	mov	r3, sl
 8002826:	4642      	mov	r2, r8
 8002828:	4631      	mov	r1, r6
 800282a:	4628      	mov	r0, r5
 800282c:	47b8      	blx	r7
 800282e:	3001      	adds	r0, #1
 8002830:	d10e      	bne.n	8002850 <_printf_float+0x418>
 8002832:	e65e      	b.n	80024f2 <_printf_float+0xba>
 8002834:	2301      	movs	r3, #1
 8002836:	4652      	mov	r2, sl
 8002838:	4631      	mov	r1, r6
 800283a:	4628      	mov	r0, r5
 800283c:	47b8      	blx	r7
 800283e:	3001      	adds	r0, #1
 8002840:	f43f ae57 	beq.w	80024f2 <_printf_float+0xba>
 8002844:	f108 0801 	add.w	r8, r8, #1
 8002848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	4543      	cmp	r3, r8
 800284e:	dcf1      	bgt.n	8002834 <_printf_float+0x3fc>
 8002850:	464b      	mov	r3, r9
 8002852:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002856:	e6de      	b.n	8002616 <_printf_float+0x1de>
 8002858:	f04f 0800 	mov.w	r8, #0
 800285c:	f104 0a1a 	add.w	sl, r4, #26
 8002860:	e7f2      	b.n	8002848 <_printf_float+0x410>
 8002862:	2301      	movs	r3, #1
 8002864:	e7df      	b.n	8002826 <_printf_float+0x3ee>
 8002866:	2301      	movs	r3, #1
 8002868:	464a      	mov	r2, r9
 800286a:	4631      	mov	r1, r6
 800286c:	4628      	mov	r0, r5
 800286e:	47b8      	blx	r7
 8002870:	3001      	adds	r0, #1
 8002872:	f43f ae3e 	beq.w	80024f2 <_printf_float+0xba>
 8002876:	f108 0801 	add.w	r8, r8, #1
 800287a:	68e3      	ldr	r3, [r4, #12]
 800287c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	4543      	cmp	r3, r8
 8002882:	dcf0      	bgt.n	8002866 <_printf_float+0x42e>
 8002884:	e6fc      	b.n	8002680 <_printf_float+0x248>
 8002886:	f04f 0800 	mov.w	r8, #0
 800288a:	f104 0919 	add.w	r9, r4, #25
 800288e:	e7f4      	b.n	800287a <_printf_float+0x442>
 8002890:	2900      	cmp	r1, #0
 8002892:	f43f ae8b 	beq.w	80025ac <_printf_float+0x174>
 8002896:	2300      	movs	r3, #0
 8002898:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800289c:	ab09      	add	r3, sp, #36	; 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	ec49 8b10 	vmov	d0, r8, r9
 80028a4:	6022      	str	r2, [r4, #0]
 80028a6:	f8cd a004 	str.w	sl, [sp, #4]
 80028aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7ff fd2d 	bl	800230e <__cvt>
 80028b4:	4680      	mov	r8, r0
 80028b6:	e648      	b.n	800254a <_printf_float+0x112>

080028b8 <_printf_common>:
 80028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028bc:	4691      	mov	r9, r2
 80028be:	461f      	mov	r7, r3
 80028c0:	688a      	ldr	r2, [r1, #8]
 80028c2:	690b      	ldr	r3, [r1, #16]
 80028c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bfb8      	it	lt
 80028cc:	4613      	movlt	r3, r2
 80028ce:	f8c9 3000 	str.w	r3, [r9]
 80028d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028d6:	4606      	mov	r6, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	b112      	cbz	r2, 80028e2 <_printf_common+0x2a>
 80028dc:	3301      	adds	r3, #1
 80028de:	f8c9 3000 	str.w	r3, [r9]
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	0699      	lsls	r1, r3, #26
 80028e6:	bf42      	ittt	mi
 80028e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028ec:	3302      	addmi	r3, #2
 80028ee:	f8c9 3000 	strmi.w	r3, [r9]
 80028f2:	6825      	ldr	r5, [r4, #0]
 80028f4:	f015 0506 	ands.w	r5, r5, #6
 80028f8:	d107      	bne.n	800290a <_printf_common+0x52>
 80028fa:	f104 0a19 	add.w	sl, r4, #25
 80028fe:	68e3      	ldr	r3, [r4, #12]
 8002900:	f8d9 2000 	ldr.w	r2, [r9]
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	42ab      	cmp	r3, r5
 8002908:	dc28      	bgt.n	800295c <_printf_common+0xa4>
 800290a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	3300      	adds	r3, #0
 8002912:	bf18      	it	ne
 8002914:	2301      	movne	r3, #1
 8002916:	0692      	lsls	r2, r2, #26
 8002918:	d42d      	bmi.n	8002976 <_printf_common+0xbe>
 800291a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800291e:	4639      	mov	r1, r7
 8002920:	4630      	mov	r0, r6
 8002922:	47c0      	blx	r8
 8002924:	3001      	adds	r0, #1
 8002926:	d020      	beq.n	800296a <_printf_common+0xb2>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	68e5      	ldr	r5, [r4, #12]
 800292c:	f8d9 2000 	ldr.w	r2, [r9]
 8002930:	f003 0306 	and.w	r3, r3, #6
 8002934:	2b04      	cmp	r3, #4
 8002936:	bf08      	it	eq
 8002938:	1aad      	subeq	r5, r5, r2
 800293a:	68a3      	ldr	r3, [r4, #8]
 800293c:	6922      	ldr	r2, [r4, #16]
 800293e:	bf0c      	ite	eq
 8002940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002944:	2500      	movne	r5, #0
 8002946:	4293      	cmp	r3, r2
 8002948:	bfc4      	itt	gt
 800294a:	1a9b      	subgt	r3, r3, r2
 800294c:	18ed      	addgt	r5, r5, r3
 800294e:	f04f 0900 	mov.w	r9, #0
 8002952:	341a      	adds	r4, #26
 8002954:	454d      	cmp	r5, r9
 8002956:	d11a      	bne.n	800298e <_printf_common+0xd6>
 8002958:	2000      	movs	r0, #0
 800295a:	e008      	b.n	800296e <_printf_common+0xb6>
 800295c:	2301      	movs	r3, #1
 800295e:	4652      	mov	r2, sl
 8002960:	4639      	mov	r1, r7
 8002962:	4630      	mov	r0, r6
 8002964:	47c0      	blx	r8
 8002966:	3001      	adds	r0, #1
 8002968:	d103      	bne.n	8002972 <_printf_common+0xba>
 800296a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002972:	3501      	adds	r5, #1
 8002974:	e7c3      	b.n	80028fe <_printf_common+0x46>
 8002976:	18e1      	adds	r1, r4, r3
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	2030      	movs	r0, #48	; 0x30
 800297c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002980:	4422      	add	r2, r4
 8002982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800298a:	3302      	adds	r3, #2
 800298c:	e7c5      	b.n	800291a <_printf_common+0x62>
 800298e:	2301      	movs	r3, #1
 8002990:	4622      	mov	r2, r4
 8002992:	4639      	mov	r1, r7
 8002994:	4630      	mov	r0, r6
 8002996:	47c0      	blx	r8
 8002998:	3001      	adds	r0, #1
 800299a:	d0e6      	beq.n	800296a <_printf_common+0xb2>
 800299c:	f109 0901 	add.w	r9, r9, #1
 80029a0:	e7d8      	b.n	8002954 <_printf_common+0x9c>
	...

080029a4 <_printf_i>:
 80029a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80029ac:	460c      	mov	r4, r1
 80029ae:	7e09      	ldrb	r1, [r1, #24]
 80029b0:	b085      	sub	sp, #20
 80029b2:	296e      	cmp	r1, #110	; 0x6e
 80029b4:	4617      	mov	r7, r2
 80029b6:	4606      	mov	r6, r0
 80029b8:	4698      	mov	r8, r3
 80029ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029bc:	f000 80b3 	beq.w	8002b26 <_printf_i+0x182>
 80029c0:	d822      	bhi.n	8002a08 <_printf_i+0x64>
 80029c2:	2963      	cmp	r1, #99	; 0x63
 80029c4:	d036      	beq.n	8002a34 <_printf_i+0x90>
 80029c6:	d80a      	bhi.n	80029de <_printf_i+0x3a>
 80029c8:	2900      	cmp	r1, #0
 80029ca:	f000 80b9 	beq.w	8002b40 <_printf_i+0x19c>
 80029ce:	2958      	cmp	r1, #88	; 0x58
 80029d0:	f000 8083 	beq.w	8002ada <_printf_i+0x136>
 80029d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80029dc:	e032      	b.n	8002a44 <_printf_i+0xa0>
 80029de:	2964      	cmp	r1, #100	; 0x64
 80029e0:	d001      	beq.n	80029e6 <_printf_i+0x42>
 80029e2:	2969      	cmp	r1, #105	; 0x69
 80029e4:	d1f6      	bne.n	80029d4 <_printf_i+0x30>
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	0605      	lsls	r5, r0, #24
 80029ec:	f103 0104 	add.w	r1, r3, #4
 80029f0:	d52a      	bpl.n	8002a48 <_printf_i+0xa4>
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da03      	bge.n	8002a02 <_printf_i+0x5e>
 80029fa:	222d      	movs	r2, #45	; 0x2d
 80029fc:	425b      	negs	r3, r3
 80029fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a02:	486f      	ldr	r0, [pc, #444]	; (8002bc0 <_printf_i+0x21c>)
 8002a04:	220a      	movs	r2, #10
 8002a06:	e039      	b.n	8002a7c <_printf_i+0xd8>
 8002a08:	2973      	cmp	r1, #115	; 0x73
 8002a0a:	f000 809d 	beq.w	8002b48 <_printf_i+0x1a4>
 8002a0e:	d808      	bhi.n	8002a22 <_printf_i+0x7e>
 8002a10:	296f      	cmp	r1, #111	; 0x6f
 8002a12:	d020      	beq.n	8002a56 <_printf_i+0xb2>
 8002a14:	2970      	cmp	r1, #112	; 0x70
 8002a16:	d1dd      	bne.n	80029d4 <_printf_i+0x30>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f043 0320 	orr.w	r3, r3, #32
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	e003      	b.n	8002a2a <_printf_i+0x86>
 8002a22:	2975      	cmp	r1, #117	; 0x75
 8002a24:	d017      	beq.n	8002a56 <_printf_i+0xb2>
 8002a26:	2978      	cmp	r1, #120	; 0x78
 8002a28:	d1d4      	bne.n	80029d4 <_printf_i+0x30>
 8002a2a:	2378      	movs	r3, #120	; 0x78
 8002a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a30:	4864      	ldr	r0, [pc, #400]	; (8002bc4 <_printf_i+0x220>)
 8002a32:	e055      	b.n	8002ae0 <_printf_i+0x13c>
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	1d19      	adds	r1, r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6011      	str	r1, [r2, #0]
 8002a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a44:	2301      	movs	r3, #1
 8002a46:	e08c      	b.n	8002b62 <_printf_i+0x1be>
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6011      	str	r1, [r2, #0]
 8002a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a50:	bf18      	it	ne
 8002a52:	b21b      	sxthne	r3, r3
 8002a54:	e7cf      	b.n	80029f6 <_printf_i+0x52>
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	6825      	ldr	r5, [r4, #0]
 8002a5a:	1d18      	adds	r0, r3, #4
 8002a5c:	6010      	str	r0, [r2, #0]
 8002a5e:	0628      	lsls	r0, r5, #24
 8002a60:	d501      	bpl.n	8002a66 <_printf_i+0xc2>
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e002      	b.n	8002a6c <_printf_i+0xc8>
 8002a66:	0668      	lsls	r0, r5, #25
 8002a68:	d5fb      	bpl.n	8002a62 <_printf_i+0xbe>
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	4854      	ldr	r0, [pc, #336]	; (8002bc0 <_printf_i+0x21c>)
 8002a6e:	296f      	cmp	r1, #111	; 0x6f
 8002a70:	bf14      	ite	ne
 8002a72:	220a      	movne	r2, #10
 8002a74:	2208      	moveq	r2, #8
 8002a76:	2100      	movs	r1, #0
 8002a78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a7c:	6865      	ldr	r5, [r4, #4]
 8002a7e:	60a5      	str	r5, [r4, #8]
 8002a80:	2d00      	cmp	r5, #0
 8002a82:	f2c0 8095 	blt.w	8002bb0 <_printf_i+0x20c>
 8002a86:	6821      	ldr	r1, [r4, #0]
 8002a88:	f021 0104 	bic.w	r1, r1, #4
 8002a8c:	6021      	str	r1, [r4, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d13d      	bne.n	8002b0e <_printf_i+0x16a>
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	f040 808e 	bne.w	8002bb4 <_printf_i+0x210>
 8002a98:	4665      	mov	r5, ip
 8002a9a:	2a08      	cmp	r2, #8
 8002a9c:	d10b      	bne.n	8002ab6 <_printf_i+0x112>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	07db      	lsls	r3, r3, #31
 8002aa2:	d508      	bpl.n	8002ab6 <_printf_i+0x112>
 8002aa4:	6923      	ldr	r3, [r4, #16]
 8002aa6:	6862      	ldr	r2, [r4, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bfde      	ittt	le
 8002aac:	2330      	movle	r3, #48	; 0x30
 8002aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ab2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ab6:	ebac 0305 	sub.w	r3, ip, r5
 8002aba:	6123      	str	r3, [r4, #16]
 8002abc:	f8cd 8000 	str.w	r8, [sp]
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	aa03      	add	r2, sp, #12
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f7ff fef6 	bl	80028b8 <_printf_common>
 8002acc:	3001      	adds	r0, #1
 8002ace:	d14d      	bne.n	8002b6c <_printf_i+0x1c8>
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad4:	b005      	add	sp, #20
 8002ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ada:	4839      	ldr	r0, [pc, #228]	; (8002bc0 <_printf_i+0x21c>)
 8002adc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	6821      	ldr	r1, [r4, #0]
 8002ae4:	1d1d      	adds	r5, r3, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6015      	str	r5, [r2, #0]
 8002aea:	060a      	lsls	r2, r1, #24
 8002aec:	d50b      	bpl.n	8002b06 <_printf_i+0x162>
 8002aee:	07ca      	lsls	r2, r1, #31
 8002af0:	bf44      	itt	mi
 8002af2:	f041 0120 	orrmi.w	r1, r1, #32
 8002af6:	6021      	strmi	r1, [r4, #0]
 8002af8:	b91b      	cbnz	r3, 8002b02 <_printf_i+0x15e>
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	f022 0220 	bic.w	r2, r2, #32
 8002b00:	6022      	str	r2, [r4, #0]
 8002b02:	2210      	movs	r2, #16
 8002b04:	e7b7      	b.n	8002a76 <_printf_i+0xd2>
 8002b06:	064d      	lsls	r5, r1, #25
 8002b08:	bf48      	it	mi
 8002b0a:	b29b      	uxthmi	r3, r3
 8002b0c:	e7ef      	b.n	8002aee <_printf_i+0x14a>
 8002b0e:	4665      	mov	r5, ip
 8002b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b14:	fb02 3311 	mls	r3, r2, r1, r3
 8002b18:	5cc3      	ldrb	r3, [r0, r3]
 8002b1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b1e:	460b      	mov	r3, r1
 8002b20:	2900      	cmp	r1, #0
 8002b22:	d1f5      	bne.n	8002b10 <_printf_i+0x16c>
 8002b24:	e7b9      	b.n	8002a9a <_printf_i+0xf6>
 8002b26:	6813      	ldr	r3, [r2, #0]
 8002b28:	6825      	ldr	r5, [r4, #0]
 8002b2a:	6961      	ldr	r1, [r4, #20]
 8002b2c:	1d18      	adds	r0, r3, #4
 8002b2e:	6010      	str	r0, [r2, #0]
 8002b30:	0628      	lsls	r0, r5, #24
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	d501      	bpl.n	8002b3a <_printf_i+0x196>
 8002b36:	6019      	str	r1, [r3, #0]
 8002b38:	e002      	b.n	8002b40 <_printf_i+0x19c>
 8002b3a:	066a      	lsls	r2, r5, #25
 8002b3c:	d5fb      	bpl.n	8002b36 <_printf_i+0x192>
 8002b3e:	8019      	strh	r1, [r3, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	6123      	str	r3, [r4, #16]
 8002b44:	4665      	mov	r5, ip
 8002b46:	e7b9      	b.n	8002abc <_printf_i+0x118>
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	1d19      	adds	r1, r3, #4
 8002b4c:	6011      	str	r1, [r2, #0]
 8002b4e:	681d      	ldr	r5, [r3, #0]
 8002b50:	6862      	ldr	r2, [r4, #4]
 8002b52:	2100      	movs	r1, #0
 8002b54:	4628      	mov	r0, r5
 8002b56:	f7fd fb93 	bl	8000280 <memchr>
 8002b5a:	b108      	cbz	r0, 8002b60 <_printf_i+0x1bc>
 8002b5c:	1b40      	subs	r0, r0, r5
 8002b5e:	6060      	str	r0, [r4, #4]
 8002b60:	6863      	ldr	r3, [r4, #4]
 8002b62:	6123      	str	r3, [r4, #16]
 8002b64:	2300      	movs	r3, #0
 8002b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b6a:	e7a7      	b.n	8002abc <_printf_i+0x118>
 8002b6c:	6923      	ldr	r3, [r4, #16]
 8002b6e:	462a      	mov	r2, r5
 8002b70:	4639      	mov	r1, r7
 8002b72:	4630      	mov	r0, r6
 8002b74:	47c0      	blx	r8
 8002b76:	3001      	adds	r0, #1
 8002b78:	d0aa      	beq.n	8002ad0 <_printf_i+0x12c>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	079b      	lsls	r3, r3, #30
 8002b7e:	d413      	bmi.n	8002ba8 <_printf_i+0x204>
 8002b80:	68e0      	ldr	r0, [r4, #12]
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	4298      	cmp	r0, r3
 8002b86:	bfb8      	it	lt
 8002b88:	4618      	movlt	r0, r3
 8002b8a:	e7a3      	b.n	8002ad4 <_printf_i+0x130>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	464a      	mov	r2, r9
 8002b90:	4639      	mov	r1, r7
 8002b92:	4630      	mov	r0, r6
 8002b94:	47c0      	blx	r8
 8002b96:	3001      	adds	r0, #1
 8002b98:	d09a      	beq.n	8002ad0 <_printf_i+0x12c>
 8002b9a:	3501      	adds	r5, #1
 8002b9c:	68e3      	ldr	r3, [r4, #12]
 8002b9e:	9a03      	ldr	r2, [sp, #12]
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	42ab      	cmp	r3, r5
 8002ba4:	dcf2      	bgt.n	8002b8c <_printf_i+0x1e8>
 8002ba6:	e7eb      	b.n	8002b80 <_printf_i+0x1dc>
 8002ba8:	2500      	movs	r5, #0
 8002baa:	f104 0919 	add.w	r9, r4, #25
 8002bae:	e7f5      	b.n	8002b9c <_printf_i+0x1f8>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ac      	bne.n	8002b0e <_printf_i+0x16a>
 8002bb4:	7803      	ldrb	r3, [r0, #0]
 8002bb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bbe:	e76c      	b.n	8002a9a <_printf_i+0xf6>
 8002bc0:	080068b2 	.word	0x080068b2
 8002bc4:	080068c3 	.word	0x080068c3

08002bc8 <_scanf_float>:
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	469a      	mov	sl, r3
 8002bce:	688b      	ldr	r3, [r1, #8]
 8002bd0:	4616      	mov	r6, r2
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002bd8:	b087      	sub	sp, #28
 8002bda:	bf83      	ittte	hi
 8002bdc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8002be0:	189b      	addhi	r3, r3, r2
 8002be2:	9301      	strhi	r3, [sp, #4]
 8002be4:	2300      	movls	r3, #0
 8002be6:	bf86      	itte	hi
 8002be8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002bec:	608b      	strhi	r3, [r1, #8]
 8002bee:	9301      	strls	r3, [sp, #4]
 8002bf0:	680b      	ldr	r3, [r1, #0]
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	f04f 0b00 	mov.w	fp, #0
 8002bf8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002bfc:	f848 3b1c 	str.w	r3, [r8], #28
 8002c00:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8002c04:	4607      	mov	r7, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	4645      	mov	r5, r8
 8002c0a:	465a      	mov	r2, fp
 8002c0c:	46d9      	mov	r9, fp
 8002c0e:	f8cd b008 	str.w	fp, [sp, #8]
 8002c12:	68a1      	ldr	r1, [r4, #8]
 8002c14:	b181      	cbz	r1, 8002c38 <_scanf_float+0x70>
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b49      	cmp	r3, #73	; 0x49
 8002c1c:	d071      	beq.n	8002d02 <_scanf_float+0x13a>
 8002c1e:	d84d      	bhi.n	8002cbc <_scanf_float+0xf4>
 8002c20:	2b39      	cmp	r3, #57	; 0x39
 8002c22:	d840      	bhi.n	8002ca6 <_scanf_float+0xde>
 8002c24:	2b31      	cmp	r3, #49	; 0x31
 8002c26:	f080 8088 	bcs.w	8002d3a <_scanf_float+0x172>
 8002c2a:	2b2d      	cmp	r3, #45	; 0x2d
 8002c2c:	f000 8090 	beq.w	8002d50 <_scanf_float+0x188>
 8002c30:	d815      	bhi.n	8002c5e <_scanf_float+0x96>
 8002c32:	2b2b      	cmp	r3, #43	; 0x2b
 8002c34:	f000 808c 	beq.w	8002d50 <_scanf_float+0x188>
 8002c38:	f1b9 0f00 	cmp.w	r9, #0
 8002c3c:	d003      	beq.n	8002c46 <_scanf_float+0x7e>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	3a01      	subs	r2, #1
 8002c48:	2a01      	cmp	r2, #1
 8002c4a:	f200 80ea 	bhi.w	8002e22 <_scanf_float+0x25a>
 8002c4e:	4545      	cmp	r5, r8
 8002c50:	f200 80dc 	bhi.w	8002e0c <_scanf_float+0x244>
 8002c54:	2601      	movs	r6, #1
 8002c56:	4630      	mov	r0, r6
 8002c58:	b007      	add	sp, #28
 8002c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c60:	f000 809f 	beq.w	8002da2 <_scanf_float+0x1da>
 8002c64:	2b30      	cmp	r3, #48	; 0x30
 8002c66:	d1e7      	bne.n	8002c38 <_scanf_float+0x70>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002c6e:	d064      	beq.n	8002d3a <_scanf_float+0x172>
 8002c70:	9b01      	ldr	r3, [sp, #4]
 8002c72:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002c76:	6020      	str	r0, [r4, #0]
 8002c78:	f109 0901 	add.w	r9, r9, #1
 8002c7c:	b11b      	cbz	r3, 8002c86 <_scanf_float+0xbe>
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	3101      	adds	r1, #1
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	60a1      	str	r1, [r4, #8]
 8002c86:	68a3      	ldr	r3, [r4, #8]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60a3      	str	r3, [r4, #8]
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	6873      	ldr	r3, [r6, #4]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	6073      	str	r3, [r6, #4]
 8002c9a:	f340 80ac 	ble.w	8002df6 <_scanf_float+0x22e>
 8002c9e:	6833      	ldr	r3, [r6, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	6033      	str	r3, [r6, #0]
 8002ca4:	e7b5      	b.n	8002c12 <_scanf_float+0x4a>
 8002ca6:	2b45      	cmp	r3, #69	; 0x45
 8002ca8:	f000 8085 	beq.w	8002db6 <_scanf_float+0x1ee>
 8002cac:	2b46      	cmp	r3, #70	; 0x46
 8002cae:	d06a      	beq.n	8002d86 <_scanf_float+0x1be>
 8002cb0:	2b41      	cmp	r3, #65	; 0x41
 8002cb2:	d1c1      	bne.n	8002c38 <_scanf_float+0x70>
 8002cb4:	2a01      	cmp	r2, #1
 8002cb6:	d1bf      	bne.n	8002c38 <_scanf_float+0x70>
 8002cb8:	2202      	movs	r2, #2
 8002cba:	e046      	b.n	8002d4a <_scanf_float+0x182>
 8002cbc:	2b65      	cmp	r3, #101	; 0x65
 8002cbe:	d07a      	beq.n	8002db6 <_scanf_float+0x1ee>
 8002cc0:	d818      	bhi.n	8002cf4 <_scanf_float+0x12c>
 8002cc2:	2b54      	cmp	r3, #84	; 0x54
 8002cc4:	d066      	beq.n	8002d94 <_scanf_float+0x1cc>
 8002cc6:	d811      	bhi.n	8002cec <_scanf_float+0x124>
 8002cc8:	2b4e      	cmp	r3, #78	; 0x4e
 8002cca:	d1b5      	bne.n	8002c38 <_scanf_float+0x70>
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d146      	bne.n	8002d5e <_scanf_float+0x196>
 8002cd0:	f1b9 0f00 	cmp.w	r9, #0
 8002cd4:	d145      	bne.n	8002d62 <_scanf_float+0x19a>
 8002cd6:	6821      	ldr	r1, [r4, #0]
 8002cd8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002cdc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002ce0:	d13f      	bne.n	8002d62 <_scanf_float+0x19a>
 8002ce2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002ce6:	6021      	str	r1, [r4, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	e02e      	b.n	8002d4a <_scanf_float+0x182>
 8002cec:	2b59      	cmp	r3, #89	; 0x59
 8002cee:	d01e      	beq.n	8002d2e <_scanf_float+0x166>
 8002cf0:	2b61      	cmp	r3, #97	; 0x61
 8002cf2:	e7de      	b.n	8002cb2 <_scanf_float+0xea>
 8002cf4:	2b6e      	cmp	r3, #110	; 0x6e
 8002cf6:	d0e9      	beq.n	8002ccc <_scanf_float+0x104>
 8002cf8:	d815      	bhi.n	8002d26 <_scanf_float+0x15e>
 8002cfa:	2b66      	cmp	r3, #102	; 0x66
 8002cfc:	d043      	beq.n	8002d86 <_scanf_float+0x1be>
 8002cfe:	2b69      	cmp	r3, #105	; 0x69
 8002d00:	d19a      	bne.n	8002c38 <_scanf_float+0x70>
 8002d02:	f1bb 0f00 	cmp.w	fp, #0
 8002d06:	d138      	bne.n	8002d7a <_scanf_float+0x1b2>
 8002d08:	f1b9 0f00 	cmp.w	r9, #0
 8002d0c:	d197      	bne.n	8002c3e <_scanf_float+0x76>
 8002d0e:	6821      	ldr	r1, [r4, #0]
 8002d10:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002d14:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002d18:	d195      	bne.n	8002c46 <_scanf_float+0x7e>
 8002d1a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002d1e:	6021      	str	r1, [r4, #0]
 8002d20:	f04f 0b01 	mov.w	fp, #1
 8002d24:	e011      	b.n	8002d4a <_scanf_float+0x182>
 8002d26:	2b74      	cmp	r3, #116	; 0x74
 8002d28:	d034      	beq.n	8002d94 <_scanf_float+0x1cc>
 8002d2a:	2b79      	cmp	r3, #121	; 0x79
 8002d2c:	d184      	bne.n	8002c38 <_scanf_float+0x70>
 8002d2e:	f1bb 0f07 	cmp.w	fp, #7
 8002d32:	d181      	bne.n	8002c38 <_scanf_float+0x70>
 8002d34:	f04f 0b08 	mov.w	fp, #8
 8002d38:	e007      	b.n	8002d4a <_scanf_float+0x182>
 8002d3a:	eb12 0f0b 	cmn.w	r2, fp
 8002d3e:	f47f af7b 	bne.w	8002c38 <_scanf_float+0x70>
 8002d42:	6821      	ldr	r1, [r4, #0]
 8002d44:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8002d48:	6021      	str	r1, [r4, #0]
 8002d4a:	702b      	strb	r3, [r5, #0]
 8002d4c:	3501      	adds	r5, #1
 8002d4e:	e79a      	b.n	8002c86 <_scanf_float+0xbe>
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	0608      	lsls	r0, r1, #24
 8002d54:	f57f af70 	bpl.w	8002c38 <_scanf_float+0x70>
 8002d58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002d5c:	e7f4      	b.n	8002d48 <_scanf_float+0x180>
 8002d5e:	2a02      	cmp	r2, #2
 8002d60:	d047      	beq.n	8002df2 <_scanf_float+0x22a>
 8002d62:	f1bb 0f01 	cmp.w	fp, #1
 8002d66:	d003      	beq.n	8002d70 <_scanf_float+0x1a8>
 8002d68:	f1bb 0f04 	cmp.w	fp, #4
 8002d6c:	f47f af64 	bne.w	8002c38 <_scanf_float+0x70>
 8002d70:	f10b 0b01 	add.w	fp, fp, #1
 8002d74:	fa5f fb8b 	uxtb.w	fp, fp
 8002d78:	e7e7      	b.n	8002d4a <_scanf_float+0x182>
 8002d7a:	f1bb 0f03 	cmp.w	fp, #3
 8002d7e:	d0f7      	beq.n	8002d70 <_scanf_float+0x1a8>
 8002d80:	f1bb 0f05 	cmp.w	fp, #5
 8002d84:	e7f2      	b.n	8002d6c <_scanf_float+0x1a4>
 8002d86:	f1bb 0f02 	cmp.w	fp, #2
 8002d8a:	f47f af55 	bne.w	8002c38 <_scanf_float+0x70>
 8002d8e:	f04f 0b03 	mov.w	fp, #3
 8002d92:	e7da      	b.n	8002d4a <_scanf_float+0x182>
 8002d94:	f1bb 0f06 	cmp.w	fp, #6
 8002d98:	f47f af4e 	bne.w	8002c38 <_scanf_float+0x70>
 8002d9c:	f04f 0b07 	mov.w	fp, #7
 8002da0:	e7d3      	b.n	8002d4a <_scanf_float+0x182>
 8002da2:	6821      	ldr	r1, [r4, #0]
 8002da4:	0588      	lsls	r0, r1, #22
 8002da6:	f57f af47 	bpl.w	8002c38 <_scanf_float+0x70>
 8002daa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8002dae:	6021      	str	r1, [r4, #0]
 8002db0:	f8cd 9008 	str.w	r9, [sp, #8]
 8002db4:	e7c9      	b.n	8002d4a <_scanf_float+0x182>
 8002db6:	6821      	ldr	r1, [r4, #0]
 8002db8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8002dbc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002dc0:	d006      	beq.n	8002dd0 <_scanf_float+0x208>
 8002dc2:	0548      	lsls	r0, r1, #21
 8002dc4:	f57f af38 	bpl.w	8002c38 <_scanf_float+0x70>
 8002dc8:	f1b9 0f00 	cmp.w	r9, #0
 8002dcc:	f43f af3b 	beq.w	8002c46 <_scanf_float+0x7e>
 8002dd0:	0588      	lsls	r0, r1, #22
 8002dd2:	bf58      	it	pl
 8002dd4:	9802      	ldrpl	r0, [sp, #8]
 8002dd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002dda:	bf58      	it	pl
 8002ddc:	eba9 0000 	subpl.w	r0, r9, r0
 8002de0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002de4:	bf58      	it	pl
 8002de6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8002dea:	6021      	str	r1, [r4, #0]
 8002dec:	f04f 0900 	mov.w	r9, #0
 8002df0:	e7ab      	b.n	8002d4a <_scanf_float+0x182>
 8002df2:	2203      	movs	r2, #3
 8002df4:	e7a9      	b.n	8002d4a <_scanf_float+0x182>
 8002df6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002dfa:	9205      	str	r2, [sp, #20]
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	4638      	mov	r0, r7
 8002e00:	4798      	blx	r3
 8002e02:	9a05      	ldr	r2, [sp, #20]
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f43f af04 	beq.w	8002c12 <_scanf_float+0x4a>
 8002e0a:	e715      	b.n	8002c38 <_scanf_float+0x70>
 8002e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002e14:	4632      	mov	r2, r6
 8002e16:	4638      	mov	r0, r7
 8002e18:	4798      	blx	r3
 8002e1a:	6923      	ldr	r3, [r4, #16]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	6123      	str	r3, [r4, #16]
 8002e20:	e715      	b.n	8002c4e <_scanf_float+0x86>
 8002e22:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d80a      	bhi.n	8002e40 <_scanf_float+0x278>
 8002e2a:	f1bb 0f02 	cmp.w	fp, #2
 8002e2e:	d968      	bls.n	8002f02 <_scanf_float+0x33a>
 8002e30:	f1ab 0b03 	sub.w	fp, fp, #3
 8002e34:	fa5f fb8b 	uxtb.w	fp, fp
 8002e38:	eba5 0b0b 	sub.w	fp, r5, fp
 8002e3c:	455d      	cmp	r5, fp
 8002e3e:	d14b      	bne.n	8002ed8 <_scanf_float+0x310>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	05da      	lsls	r2, r3, #23
 8002e44:	d51f      	bpl.n	8002e86 <_scanf_float+0x2be>
 8002e46:	055b      	lsls	r3, r3, #21
 8002e48:	d468      	bmi.n	8002f1c <_scanf_float+0x354>
 8002e4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	2965      	cmp	r1, #101	; 0x65
 8002e52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002e56:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8002e5a:	6123      	str	r3, [r4, #16]
 8002e5c:	d00d      	beq.n	8002e7a <_scanf_float+0x2b2>
 8002e5e:	2945      	cmp	r1, #69	; 0x45
 8002e60:	d00b      	beq.n	8002e7a <_scanf_float+0x2b2>
 8002e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e66:	4632      	mov	r2, r6
 8002e68:	4638      	mov	r0, r7
 8002e6a:	4798      	blx	r3
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1a5 0b02 	sub.w	fp, r5, #2
 8002e78:	6123      	str	r3, [r4, #16]
 8002e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e7e:	4632      	mov	r2, r6
 8002e80:	4638      	mov	r0, r7
 8002e82:	4798      	blx	r3
 8002e84:	465d      	mov	r5, fp
 8002e86:	6826      	ldr	r6, [r4, #0]
 8002e88:	f016 0610 	ands.w	r6, r6, #16
 8002e8c:	d17a      	bne.n	8002f84 <_scanf_float+0x3bc>
 8002e8e:	702e      	strb	r6, [r5, #0]
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d142      	bne.n	8002f22 <_scanf_float+0x35a>
 8002e9c:	9b02      	ldr	r3, [sp, #8]
 8002e9e:	eba9 0303 	sub.w	r3, r9, r3
 8002ea2:	425a      	negs	r2, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d149      	bne.n	8002f3c <_scanf_float+0x374>
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4641      	mov	r1, r8
 8002eac:	4638      	mov	r0, r7
 8002eae:	f000 febb 	bl	8003c28 <_strtod_r>
 8002eb2:	6825      	ldr	r5, [r4, #0]
 8002eb4:	f8da 3000 	ldr.w	r3, [sl]
 8002eb8:	f015 0f02 	tst.w	r5, #2
 8002ebc:	f103 0204 	add.w	r2, r3, #4
 8002ec0:	ec59 8b10 	vmov	r8, r9, d0
 8002ec4:	f8ca 2000 	str.w	r2, [sl]
 8002ec8:	d043      	beq.n	8002f52 <_scanf_float+0x38a>
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	e9c3 8900 	strd	r8, r9, [r3]
 8002ed0:	68e3      	ldr	r3, [r4, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60e3      	str	r3, [r4, #12]
 8002ed6:	e6be      	b.n	8002c56 <_scanf_float+0x8e>
 8002ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002edc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	4798      	blx	r3
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	6123      	str	r3, [r4, #16]
 8002eec:	e7a6      	b.n	8002e3c <_scanf_float+0x274>
 8002eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ef2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002ef6:	4632      	mov	r2, r6
 8002ef8:	4638      	mov	r0, r7
 8002efa:	4798      	blx	r3
 8002efc:	6923      	ldr	r3, [r4, #16]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6123      	str	r3, [r4, #16]
 8002f02:	4545      	cmp	r5, r8
 8002f04:	d8f3      	bhi.n	8002eee <_scanf_float+0x326>
 8002f06:	e6a5      	b.n	8002c54 <_scanf_float+0x8c>
 8002f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002f10:	4632      	mov	r2, r6
 8002f12:	4638      	mov	r0, r7
 8002f14:	4798      	blx	r3
 8002f16:	6923      	ldr	r3, [r4, #16]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	6123      	str	r3, [r4, #16]
 8002f1c:	4545      	cmp	r5, r8
 8002f1e:	d8f3      	bhi.n	8002f08 <_scanf_float+0x340>
 8002f20:	e698      	b.n	8002c54 <_scanf_float+0x8c>
 8002f22:	9b03      	ldr	r3, [sp, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0bf      	beq.n	8002ea8 <_scanf_float+0x2e0>
 8002f28:	9904      	ldr	r1, [sp, #16]
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	4632      	mov	r2, r6
 8002f2e:	3101      	adds	r1, #1
 8002f30:	4638      	mov	r0, r7
 8002f32:	f000 ff05 	bl	8003d40 <_strtol_r>
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	9d04      	ldr	r5, [sp, #16]
 8002f3a:	1ac2      	subs	r2, r0, r3
 8002f3c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002f40:	429d      	cmp	r5, r3
 8002f42:	bf28      	it	cs
 8002f44:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8002f48:	490f      	ldr	r1, [pc, #60]	; (8002f88 <_scanf_float+0x3c0>)
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f000 f83c 	bl	8002fc8 <siprintf>
 8002f50:	e7aa      	b.n	8002ea8 <_scanf_float+0x2e0>
 8002f52:	f015 0504 	ands.w	r5, r5, #4
 8002f56:	d1b8      	bne.n	8002eca <_scanf_float+0x302>
 8002f58:	681f      	ldr	r7, [r3, #0]
 8002f5a:	ee10 2a10 	vmov	r2, s0
 8002f5e:	464b      	mov	r3, r9
 8002f60:	ee10 0a10 	vmov	r0, s0
 8002f64:	4649      	mov	r1, r9
 8002f66:	f7fd fe31 	bl	8000bcc <__aeabi_dcmpun>
 8002f6a:	b128      	cbz	r0, 8002f78 <_scanf_float+0x3b0>
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f825 	bl	8002fbc <nanf>
 8002f72:	ed87 0a00 	vstr	s0, [r7]
 8002f76:	e7ab      	b.n	8002ed0 <_scanf_float+0x308>
 8002f78:	4640      	mov	r0, r8
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f7fd fe84 	bl	8000c88 <__aeabi_d2f>
 8002f80:	6038      	str	r0, [r7, #0]
 8002f82:	e7a5      	b.n	8002ed0 <_scanf_float+0x308>
 8002f84:	2600      	movs	r6, #0
 8002f86:	e666      	b.n	8002c56 <_scanf_float+0x8e>
 8002f88:	080068d4 	.word	0x080068d4

08002f8c <iprintf>:
 8002f8c:	b40f      	push	{r0, r1, r2, r3}
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <iprintf+0x2c>)
 8002f90:	b513      	push	{r0, r1, r4, lr}
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	b124      	cbz	r4, 8002fa0 <iprintf+0x14>
 8002f96:	69a3      	ldr	r3, [r4, #24]
 8002f98:	b913      	cbnz	r3, 8002fa0 <iprintf+0x14>
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f001 fd68 	bl	8004a70 <__sinit>
 8002fa0:	ab05      	add	r3, sp, #20
 8002fa2:	9a04      	ldr	r2, [sp, #16]
 8002fa4:	68a1      	ldr	r1, [r4, #8]
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f002 ff71 	bl	8005e90 <_vfiprintf_r>
 8002fae:	b002      	add	sp, #8
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	b004      	add	sp, #16
 8002fb6:	4770      	bx	lr
 8002fb8:	2000000c 	.word	0x2000000c

08002fbc <nanf>:
 8002fbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002fc4 <nanf+0x8>
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	7fc00000 	.word	0x7fc00000

08002fc8 <siprintf>:
 8002fc8:	b40e      	push	{r1, r2, r3}
 8002fca:	b500      	push	{lr}
 8002fcc:	b09c      	sub	sp, #112	; 0x70
 8002fce:	ab1d      	add	r3, sp, #116	; 0x74
 8002fd0:	9002      	str	r0, [sp, #8]
 8002fd2:	9006      	str	r0, [sp, #24]
 8002fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fd8:	4809      	ldr	r0, [pc, #36]	; (8003000 <siprintf+0x38>)
 8002fda:	9107      	str	r1, [sp, #28]
 8002fdc:	9104      	str	r1, [sp, #16]
 8002fde:	4909      	ldr	r1, [pc, #36]	; (8003004 <siprintf+0x3c>)
 8002fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fe4:	9105      	str	r1, [sp, #20]
 8002fe6:	6800      	ldr	r0, [r0, #0]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	a902      	add	r1, sp, #8
 8002fec:	f002 fe2e 	bl	8005c4c <_svfiprintf_r>
 8002ff0:	9b02      	ldr	r3, [sp, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	b01c      	add	sp, #112	; 0x70
 8002ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ffc:	b003      	add	sp, #12
 8002ffe:	4770      	bx	lr
 8003000:	2000000c 	.word	0x2000000c
 8003004:	ffff0208 	.word	0xffff0208

08003008 <sulp>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	4604      	mov	r4, r0
 800300c:	460d      	mov	r5, r1
 800300e:	ec45 4b10 	vmov	d0, r4, r5
 8003012:	4616      	mov	r6, r2
 8003014:	f002 fbd6 	bl	80057c4 <__ulp>
 8003018:	ec51 0b10 	vmov	r0, r1, d0
 800301c:	b17e      	cbz	r6, 800303e <sulp+0x36>
 800301e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003022:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003026:	2b00      	cmp	r3, #0
 8003028:	dd09      	ble.n	800303e <sulp+0x36>
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003030:	2400      	movs	r4, #0
 8003032:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f7fd fb2d 	bl	8000698 <__aeabi_dmul>
 800303e:	bd70      	pop	{r4, r5, r6, pc}

08003040 <_strtod_l>:
 8003040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003044:	461f      	mov	r7, r3
 8003046:	b0a1      	sub	sp, #132	; 0x84
 8003048:	2300      	movs	r3, #0
 800304a:	4681      	mov	r9, r0
 800304c:	4638      	mov	r0, r7
 800304e:	460e      	mov	r6, r1
 8003050:	9217      	str	r2, [sp, #92]	; 0x5c
 8003052:	931c      	str	r3, [sp, #112]	; 0x70
 8003054:	f002 f8bf 	bl	80051d6 <__localeconv_l>
 8003058:	4680      	mov	r8, r0
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	f7fd f908 	bl	8000270 <strlen>
 8003060:	f04f 0a00 	mov.w	sl, #0
 8003064:	4604      	mov	r4, r0
 8003066:	f04f 0b00 	mov.w	fp, #0
 800306a:	961b      	str	r6, [sp, #108]	; 0x6c
 800306c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	2a0d      	cmp	r2, #13
 8003072:	d832      	bhi.n	80030da <_strtod_l+0x9a>
 8003074:	2a09      	cmp	r2, #9
 8003076:	d236      	bcs.n	80030e6 <_strtod_l+0xa6>
 8003078:	2a00      	cmp	r2, #0
 800307a:	d03e      	beq.n	80030fa <_strtod_l+0xba>
 800307c:	2300      	movs	r3, #0
 800307e:	930d      	str	r3, [sp, #52]	; 0x34
 8003080:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003082:	782b      	ldrb	r3, [r5, #0]
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	f040 80ac 	bne.w	80031e2 <_strtod_l+0x1a2>
 800308a:	786b      	ldrb	r3, [r5, #1]
 800308c:	2b58      	cmp	r3, #88	; 0x58
 800308e:	d001      	beq.n	8003094 <_strtod_l+0x54>
 8003090:	2b78      	cmp	r3, #120	; 0x78
 8003092:	d167      	bne.n	8003164 <_strtod_l+0x124>
 8003094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	ab1c      	add	r3, sp, #112	; 0x70
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	9702      	str	r7, [sp, #8]
 800309e:	ab1d      	add	r3, sp, #116	; 0x74
 80030a0:	4a88      	ldr	r2, [pc, #544]	; (80032c4 <_strtod_l+0x284>)
 80030a2:	a91b      	add	r1, sp, #108	; 0x6c
 80030a4:	4648      	mov	r0, r9
 80030a6:	f001 fdbc 	bl	8004c22 <__gethex>
 80030aa:	f010 0407 	ands.w	r4, r0, #7
 80030ae:	4606      	mov	r6, r0
 80030b0:	d005      	beq.n	80030be <_strtod_l+0x7e>
 80030b2:	2c06      	cmp	r4, #6
 80030b4:	d12b      	bne.n	800310e <_strtod_l+0xce>
 80030b6:	3501      	adds	r5, #1
 80030b8:	2300      	movs	r3, #0
 80030ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80030bc:	930d      	str	r3, [sp, #52]	; 0x34
 80030be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 859a 	bne.w	8003bfa <_strtod_l+0xbba>
 80030c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030c8:	b1e3      	cbz	r3, 8003104 <_strtod_l+0xc4>
 80030ca:	4652      	mov	r2, sl
 80030cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80030d0:	ec43 2b10 	vmov	d0, r2, r3
 80030d4:	b021      	add	sp, #132	; 0x84
 80030d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030da:	2a2b      	cmp	r2, #43	; 0x2b
 80030dc:	d015      	beq.n	800310a <_strtod_l+0xca>
 80030de:	2a2d      	cmp	r2, #45	; 0x2d
 80030e0:	d004      	beq.n	80030ec <_strtod_l+0xac>
 80030e2:	2a20      	cmp	r2, #32
 80030e4:	d1ca      	bne.n	800307c <_strtod_l+0x3c>
 80030e6:	3301      	adds	r3, #1
 80030e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80030ea:	e7bf      	b.n	800306c <_strtod_l+0x2c>
 80030ec:	2201      	movs	r2, #1
 80030ee:	920d      	str	r2, [sp, #52]	; 0x34
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1c2      	bne.n	8003080 <_strtod_l+0x40>
 80030fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8579 	bne.w	8003bf6 <_strtod_l+0xbb6>
 8003104:	4652      	mov	r2, sl
 8003106:	465b      	mov	r3, fp
 8003108:	e7e2      	b.n	80030d0 <_strtod_l+0x90>
 800310a:	2200      	movs	r2, #0
 800310c:	e7ef      	b.n	80030ee <_strtod_l+0xae>
 800310e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003110:	b13a      	cbz	r2, 8003122 <_strtod_l+0xe2>
 8003112:	2135      	movs	r1, #53	; 0x35
 8003114:	a81e      	add	r0, sp, #120	; 0x78
 8003116:	f002 fc4d 	bl	80059b4 <__copybits>
 800311a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800311c:	4648      	mov	r0, r9
 800311e:	f002 f8b9 	bl	8005294 <_Bfree>
 8003122:	3c01      	subs	r4, #1
 8003124:	2c04      	cmp	r4, #4
 8003126:	d806      	bhi.n	8003136 <_strtod_l+0xf6>
 8003128:	e8df f004 	tbb	[pc, r4]
 800312c:	1714030a 	.word	0x1714030a
 8003130:	0a          	.byte	0x0a
 8003131:	00          	.byte	0x00
 8003132:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8003136:	0730      	lsls	r0, r6, #28
 8003138:	d5c1      	bpl.n	80030be <_strtod_l+0x7e>
 800313a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800313e:	e7be      	b.n	80030be <_strtod_l+0x7e>
 8003140:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8003144:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003146:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800314a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800314e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003152:	e7f0      	b.n	8003136 <_strtod_l+0xf6>
 8003154:	f8df b170 	ldr.w	fp, [pc, #368]	; 80032c8 <_strtod_l+0x288>
 8003158:	e7ed      	b.n	8003136 <_strtod_l+0xf6>
 800315a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800315e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003162:	e7e8      	b.n	8003136 <_strtod_l+0xf6>
 8003164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	921b      	str	r2, [sp, #108]	; 0x6c
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d0f9      	beq.n	8003164 <_strtod_l+0x124>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0a4      	beq.n	80030be <_strtod_l+0x7e>
 8003174:	2301      	movs	r3, #1
 8003176:	2500      	movs	r5, #0
 8003178:	9306      	str	r3, [sp, #24]
 800317a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800317c:	9308      	str	r3, [sp, #32]
 800317e:	9507      	str	r5, [sp, #28]
 8003180:	9505      	str	r5, [sp, #20]
 8003182:	220a      	movs	r2, #10
 8003184:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003186:	7807      	ldrb	r7, [r0, #0]
 8003188:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800318c:	b2d9      	uxtb	r1, r3
 800318e:	2909      	cmp	r1, #9
 8003190:	d929      	bls.n	80031e6 <_strtod_l+0x1a6>
 8003192:	4622      	mov	r2, r4
 8003194:	f8d8 1000 	ldr.w	r1, [r8]
 8003198:	f002 ffe3 	bl	8006162 <strncmp>
 800319c:	2800      	cmp	r0, #0
 800319e:	d031      	beq.n	8003204 <_strtod_l+0x1c4>
 80031a0:	2000      	movs	r0, #0
 80031a2:	9c05      	ldr	r4, [sp, #20]
 80031a4:	9004      	str	r0, [sp, #16]
 80031a6:	463b      	mov	r3, r7
 80031a8:	4602      	mov	r2, r0
 80031aa:	2b65      	cmp	r3, #101	; 0x65
 80031ac:	d001      	beq.n	80031b2 <_strtod_l+0x172>
 80031ae:	2b45      	cmp	r3, #69	; 0x45
 80031b0:	d114      	bne.n	80031dc <_strtod_l+0x19c>
 80031b2:	b924      	cbnz	r4, 80031be <_strtod_l+0x17e>
 80031b4:	b910      	cbnz	r0, 80031bc <_strtod_l+0x17c>
 80031b6:	9b06      	ldr	r3, [sp, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d09e      	beq.n	80030fa <_strtod_l+0xba>
 80031bc:	2400      	movs	r4, #0
 80031be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80031c0:	1c73      	adds	r3, r6, #1
 80031c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80031c4:	7873      	ldrb	r3, [r6, #1]
 80031c6:	2b2b      	cmp	r3, #43	; 0x2b
 80031c8:	d078      	beq.n	80032bc <_strtod_l+0x27c>
 80031ca:	2b2d      	cmp	r3, #45	; 0x2d
 80031cc:	d070      	beq.n	80032b0 <_strtod_l+0x270>
 80031ce:	f04f 0c00 	mov.w	ip, #0
 80031d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80031d6:	2f09      	cmp	r7, #9
 80031d8:	d97c      	bls.n	80032d4 <_strtod_l+0x294>
 80031da:	961b      	str	r6, [sp, #108]	; 0x6c
 80031dc:	f04f 0e00 	mov.w	lr, #0
 80031e0:	e09a      	b.n	8003318 <_strtod_l+0x2d8>
 80031e2:	2300      	movs	r3, #0
 80031e4:	e7c7      	b.n	8003176 <_strtod_l+0x136>
 80031e6:	9905      	ldr	r1, [sp, #20]
 80031e8:	2908      	cmp	r1, #8
 80031ea:	bfdd      	ittte	le
 80031ec:	9907      	ldrle	r1, [sp, #28]
 80031ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80031f2:	9307      	strle	r3, [sp, #28]
 80031f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80031f8:	9b05      	ldr	r3, [sp, #20]
 80031fa:	3001      	adds	r0, #1
 80031fc:	3301      	adds	r3, #1
 80031fe:	9305      	str	r3, [sp, #20]
 8003200:	901b      	str	r0, [sp, #108]	; 0x6c
 8003202:	e7bf      	b.n	8003184 <_strtod_l+0x144>
 8003204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003206:	191a      	adds	r2, r3, r4
 8003208:	921b      	str	r2, [sp, #108]	; 0x6c
 800320a:	9a05      	ldr	r2, [sp, #20]
 800320c:	5d1b      	ldrb	r3, [r3, r4]
 800320e:	2a00      	cmp	r2, #0
 8003210:	d037      	beq.n	8003282 <_strtod_l+0x242>
 8003212:	9c05      	ldr	r4, [sp, #20]
 8003214:	4602      	mov	r2, r0
 8003216:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800321a:	2909      	cmp	r1, #9
 800321c:	d913      	bls.n	8003246 <_strtod_l+0x206>
 800321e:	2101      	movs	r1, #1
 8003220:	9104      	str	r1, [sp, #16]
 8003222:	e7c2      	b.n	80031aa <_strtod_l+0x16a>
 8003224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	921b      	str	r2, [sp, #108]	; 0x6c
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	3001      	adds	r0, #1
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d0f8      	beq.n	8003224 <_strtod_l+0x1e4>
 8003232:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003236:	2a08      	cmp	r2, #8
 8003238:	f200 84e4 	bhi.w	8003c04 <_strtod_l+0xbc4>
 800323c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800323e:	9208      	str	r2, [sp, #32]
 8003240:	4602      	mov	r2, r0
 8003242:	2000      	movs	r0, #0
 8003244:	4604      	mov	r4, r0
 8003246:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800324a:	f100 0101 	add.w	r1, r0, #1
 800324e:	d012      	beq.n	8003276 <_strtod_l+0x236>
 8003250:	440a      	add	r2, r1
 8003252:	eb00 0c04 	add.w	ip, r0, r4
 8003256:	4621      	mov	r1, r4
 8003258:	270a      	movs	r7, #10
 800325a:	458c      	cmp	ip, r1
 800325c:	d113      	bne.n	8003286 <_strtod_l+0x246>
 800325e:	1821      	adds	r1, r4, r0
 8003260:	2908      	cmp	r1, #8
 8003262:	f104 0401 	add.w	r4, r4, #1
 8003266:	4404      	add	r4, r0
 8003268:	dc19      	bgt.n	800329e <_strtod_l+0x25e>
 800326a:	9b07      	ldr	r3, [sp, #28]
 800326c:	210a      	movs	r1, #10
 800326e:	fb01 e303 	mla	r3, r1, r3, lr
 8003272:	9307      	str	r3, [sp, #28]
 8003274:	2100      	movs	r1, #0
 8003276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003278:	1c58      	adds	r0, r3, #1
 800327a:	901b      	str	r0, [sp, #108]	; 0x6c
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	4608      	mov	r0, r1
 8003280:	e7c9      	b.n	8003216 <_strtod_l+0x1d6>
 8003282:	9805      	ldr	r0, [sp, #20]
 8003284:	e7d3      	b.n	800322e <_strtod_l+0x1ee>
 8003286:	2908      	cmp	r1, #8
 8003288:	f101 0101 	add.w	r1, r1, #1
 800328c:	dc03      	bgt.n	8003296 <_strtod_l+0x256>
 800328e:	9b07      	ldr	r3, [sp, #28]
 8003290:	437b      	muls	r3, r7
 8003292:	9307      	str	r3, [sp, #28]
 8003294:	e7e1      	b.n	800325a <_strtod_l+0x21a>
 8003296:	2910      	cmp	r1, #16
 8003298:	bfd8      	it	le
 800329a:	437d      	mulle	r5, r7
 800329c:	e7dd      	b.n	800325a <_strtod_l+0x21a>
 800329e:	2c10      	cmp	r4, #16
 80032a0:	bfdc      	itt	le
 80032a2:	210a      	movle	r1, #10
 80032a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80032a8:	e7e4      	b.n	8003274 <_strtod_l+0x234>
 80032aa:	2301      	movs	r3, #1
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	e781      	b.n	80031b4 <_strtod_l+0x174>
 80032b0:	f04f 0c01 	mov.w	ip, #1
 80032b4:	1cb3      	adds	r3, r6, #2
 80032b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80032b8:	78b3      	ldrb	r3, [r6, #2]
 80032ba:	e78a      	b.n	80031d2 <_strtod_l+0x192>
 80032bc:	f04f 0c00 	mov.w	ip, #0
 80032c0:	e7f8      	b.n	80032b4 <_strtod_l+0x274>
 80032c2:	bf00      	nop
 80032c4:	080068dc 	.word	0x080068dc
 80032c8:	7ff00000 	.word	0x7ff00000
 80032cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032ce:	1c5f      	adds	r7, r3, #1
 80032d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d0f9      	beq.n	80032cc <_strtod_l+0x28c>
 80032d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80032dc:	2f08      	cmp	r7, #8
 80032de:	f63f af7d 	bhi.w	80031dc <_strtod_l+0x19c>
 80032e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80032e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032e8:	930a      	str	r3, [sp, #40]	; 0x28
 80032ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032ec:	1c5f      	adds	r7, r3, #1
 80032ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80032f6:	f1b8 0f09 	cmp.w	r8, #9
 80032fa:	d937      	bls.n	800336c <_strtod_l+0x32c>
 80032fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80032fe:	1a7f      	subs	r7, r7, r1
 8003300:	2f08      	cmp	r7, #8
 8003302:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003306:	dc37      	bgt.n	8003378 <_strtod_l+0x338>
 8003308:	45be      	cmp	lr, r7
 800330a:	bfa8      	it	ge
 800330c:	46be      	movge	lr, r7
 800330e:	f1bc 0f00 	cmp.w	ip, #0
 8003312:	d001      	beq.n	8003318 <_strtod_l+0x2d8>
 8003314:	f1ce 0e00 	rsb	lr, lr, #0
 8003318:	2c00      	cmp	r4, #0
 800331a:	d151      	bne.n	80033c0 <_strtod_l+0x380>
 800331c:	2800      	cmp	r0, #0
 800331e:	f47f aece 	bne.w	80030be <_strtod_l+0x7e>
 8003322:	9a06      	ldr	r2, [sp, #24]
 8003324:	2a00      	cmp	r2, #0
 8003326:	f47f aeca 	bne.w	80030be <_strtod_l+0x7e>
 800332a:	9a04      	ldr	r2, [sp, #16]
 800332c:	2a00      	cmp	r2, #0
 800332e:	f47f aee4 	bne.w	80030fa <_strtod_l+0xba>
 8003332:	2b4e      	cmp	r3, #78	; 0x4e
 8003334:	d027      	beq.n	8003386 <_strtod_l+0x346>
 8003336:	dc21      	bgt.n	800337c <_strtod_l+0x33c>
 8003338:	2b49      	cmp	r3, #73	; 0x49
 800333a:	f47f aede 	bne.w	80030fa <_strtod_l+0xba>
 800333e:	49a0      	ldr	r1, [pc, #640]	; (80035c0 <_strtod_l+0x580>)
 8003340:	a81b      	add	r0, sp, #108	; 0x6c
 8003342:	f001 fea1 	bl	8005088 <__match>
 8003346:	2800      	cmp	r0, #0
 8003348:	f43f aed7 	beq.w	80030fa <_strtod_l+0xba>
 800334c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800334e:	499d      	ldr	r1, [pc, #628]	; (80035c4 <_strtod_l+0x584>)
 8003350:	3b01      	subs	r3, #1
 8003352:	a81b      	add	r0, sp, #108	; 0x6c
 8003354:	931b      	str	r3, [sp, #108]	; 0x6c
 8003356:	f001 fe97 	bl	8005088 <__match>
 800335a:	b910      	cbnz	r0, 8003362 <_strtod_l+0x322>
 800335c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800335e:	3301      	adds	r3, #1
 8003360:	931b      	str	r3, [sp, #108]	; 0x6c
 8003362:	f8df b274 	ldr.w	fp, [pc, #628]	; 80035d8 <_strtod_l+0x598>
 8003366:	f04f 0a00 	mov.w	sl, #0
 800336a:	e6a8      	b.n	80030be <_strtod_l+0x7e>
 800336c:	210a      	movs	r1, #10
 800336e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003372:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003376:	e7b8      	b.n	80032ea <_strtod_l+0x2aa>
 8003378:	46be      	mov	lr, r7
 800337a:	e7c8      	b.n	800330e <_strtod_l+0x2ce>
 800337c:	2b69      	cmp	r3, #105	; 0x69
 800337e:	d0de      	beq.n	800333e <_strtod_l+0x2fe>
 8003380:	2b6e      	cmp	r3, #110	; 0x6e
 8003382:	f47f aeba 	bne.w	80030fa <_strtod_l+0xba>
 8003386:	4990      	ldr	r1, [pc, #576]	; (80035c8 <_strtod_l+0x588>)
 8003388:	a81b      	add	r0, sp, #108	; 0x6c
 800338a:	f001 fe7d 	bl	8005088 <__match>
 800338e:	2800      	cmp	r0, #0
 8003390:	f43f aeb3 	beq.w	80030fa <_strtod_l+0xba>
 8003394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b28      	cmp	r3, #40	; 0x28
 800339a:	d10e      	bne.n	80033ba <_strtod_l+0x37a>
 800339c:	aa1e      	add	r2, sp, #120	; 0x78
 800339e:	498b      	ldr	r1, [pc, #556]	; (80035cc <_strtod_l+0x58c>)
 80033a0:	a81b      	add	r0, sp, #108	; 0x6c
 80033a2:	f001 fe85 	bl	80050b0 <__hexnan>
 80033a6:	2805      	cmp	r0, #5
 80033a8:	d107      	bne.n	80033ba <_strtod_l+0x37a>
 80033aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80033b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80033b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80033b8:	e681      	b.n	80030be <_strtod_l+0x7e>
 80033ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80035e0 <_strtod_l+0x5a0>
 80033be:	e7d2      	b.n	8003366 <_strtod_l+0x326>
 80033c0:	ebae 0302 	sub.w	r3, lr, r2
 80033c4:	9306      	str	r3, [sp, #24]
 80033c6:	9b05      	ldr	r3, [sp, #20]
 80033c8:	9807      	ldr	r0, [sp, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf08      	it	eq
 80033ce:	4623      	moveq	r3, r4
 80033d0:	2c10      	cmp	r4, #16
 80033d2:	9305      	str	r3, [sp, #20]
 80033d4:	46a0      	mov	r8, r4
 80033d6:	bfa8      	it	ge
 80033d8:	f04f 0810 	movge.w	r8, #16
 80033dc:	f7fd f8e2 	bl	80005a4 <__aeabi_ui2d>
 80033e0:	2c09      	cmp	r4, #9
 80033e2:	4682      	mov	sl, r0
 80033e4:	468b      	mov	fp, r1
 80033e6:	dc13      	bgt.n	8003410 <_strtod_l+0x3d0>
 80033e8:	9b06      	ldr	r3, [sp, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f43f ae67 	beq.w	80030be <_strtod_l+0x7e>
 80033f0:	9b06      	ldr	r3, [sp, #24]
 80033f2:	dd7a      	ble.n	80034ea <_strtod_l+0x4aa>
 80033f4:	2b16      	cmp	r3, #22
 80033f6:	dc61      	bgt.n	80034bc <_strtod_l+0x47c>
 80033f8:	4a75      	ldr	r2, [pc, #468]	; (80035d0 <_strtod_l+0x590>)
 80033fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80033fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8003402:	4652      	mov	r2, sl
 8003404:	465b      	mov	r3, fp
 8003406:	f7fd f947 	bl	8000698 <__aeabi_dmul>
 800340a:	4682      	mov	sl, r0
 800340c:	468b      	mov	fp, r1
 800340e:	e656      	b.n	80030be <_strtod_l+0x7e>
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <_strtod_l+0x590>)
 8003412:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003416:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800341a:	f7fd f93d 	bl	8000698 <__aeabi_dmul>
 800341e:	4606      	mov	r6, r0
 8003420:	4628      	mov	r0, r5
 8003422:	460f      	mov	r7, r1
 8003424:	f7fd f8be 	bl	80005a4 <__aeabi_ui2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4630      	mov	r0, r6
 800342e:	4639      	mov	r1, r7
 8003430:	f7fc ff7c 	bl	800032c <__adddf3>
 8003434:	2c0f      	cmp	r4, #15
 8003436:	4682      	mov	sl, r0
 8003438:	468b      	mov	fp, r1
 800343a:	ddd5      	ble.n	80033e8 <_strtod_l+0x3a8>
 800343c:	9b06      	ldr	r3, [sp, #24]
 800343e:	eba4 0808 	sub.w	r8, r4, r8
 8003442:	4498      	add	r8, r3
 8003444:	f1b8 0f00 	cmp.w	r8, #0
 8003448:	f340 8096 	ble.w	8003578 <_strtod_l+0x538>
 800344c:	f018 030f 	ands.w	r3, r8, #15
 8003450:	d00a      	beq.n	8003468 <_strtod_l+0x428>
 8003452:	495f      	ldr	r1, [pc, #380]	; (80035d0 <_strtod_l+0x590>)
 8003454:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003458:	4652      	mov	r2, sl
 800345a:	465b      	mov	r3, fp
 800345c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003460:	f7fd f91a 	bl	8000698 <__aeabi_dmul>
 8003464:	4682      	mov	sl, r0
 8003466:	468b      	mov	fp, r1
 8003468:	f038 080f 	bics.w	r8, r8, #15
 800346c:	d073      	beq.n	8003556 <_strtod_l+0x516>
 800346e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003472:	dd47      	ble.n	8003504 <_strtod_l+0x4c4>
 8003474:	2400      	movs	r4, #0
 8003476:	46a0      	mov	r8, r4
 8003478:	9407      	str	r4, [sp, #28]
 800347a:	9405      	str	r4, [sp, #20]
 800347c:	2322      	movs	r3, #34	; 0x22
 800347e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80035d8 <_strtod_l+0x598>
 8003482:	f8c9 3000 	str.w	r3, [r9]
 8003486:	f04f 0a00 	mov.w	sl, #0
 800348a:	9b07      	ldr	r3, [sp, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f43f ae16 	beq.w	80030be <_strtod_l+0x7e>
 8003492:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003494:	4648      	mov	r0, r9
 8003496:	f001 fefd 	bl	8005294 <_Bfree>
 800349a:	9905      	ldr	r1, [sp, #20]
 800349c:	4648      	mov	r0, r9
 800349e:	f001 fef9 	bl	8005294 <_Bfree>
 80034a2:	4641      	mov	r1, r8
 80034a4:	4648      	mov	r0, r9
 80034a6:	f001 fef5 	bl	8005294 <_Bfree>
 80034aa:	9907      	ldr	r1, [sp, #28]
 80034ac:	4648      	mov	r0, r9
 80034ae:	f001 fef1 	bl	8005294 <_Bfree>
 80034b2:	4621      	mov	r1, r4
 80034b4:	4648      	mov	r0, r9
 80034b6:	f001 feed 	bl	8005294 <_Bfree>
 80034ba:	e600      	b.n	80030be <_strtod_l+0x7e>
 80034bc:	9a06      	ldr	r2, [sp, #24]
 80034be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80034c2:	4293      	cmp	r3, r2
 80034c4:	dbba      	blt.n	800343c <_strtod_l+0x3fc>
 80034c6:	4d42      	ldr	r5, [pc, #264]	; (80035d0 <_strtod_l+0x590>)
 80034c8:	f1c4 040f 	rsb	r4, r4, #15
 80034cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80034d0:	4652      	mov	r2, sl
 80034d2:	465b      	mov	r3, fp
 80034d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034d8:	f7fd f8de 	bl	8000698 <__aeabi_dmul>
 80034dc:	9b06      	ldr	r3, [sp, #24]
 80034de:	1b1c      	subs	r4, r3, r4
 80034e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80034e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80034e8:	e78d      	b.n	8003406 <_strtod_l+0x3c6>
 80034ea:	f113 0f16 	cmn.w	r3, #22
 80034ee:	dba5      	blt.n	800343c <_strtod_l+0x3fc>
 80034f0:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <_strtod_l+0x590>)
 80034f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80034f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80034fa:	4650      	mov	r0, sl
 80034fc:	4659      	mov	r1, fp
 80034fe:	f7fd f9f5 	bl	80008ec <__aeabi_ddiv>
 8003502:	e782      	b.n	800340a <_strtod_l+0x3ca>
 8003504:	2300      	movs	r3, #0
 8003506:	4e33      	ldr	r6, [pc, #204]	; (80035d4 <_strtod_l+0x594>)
 8003508:	ea4f 1828 	mov.w	r8, r8, asr #4
 800350c:	4650      	mov	r0, sl
 800350e:	4659      	mov	r1, fp
 8003510:	461d      	mov	r5, r3
 8003512:	f1b8 0f01 	cmp.w	r8, #1
 8003516:	dc21      	bgt.n	800355c <_strtod_l+0x51c>
 8003518:	b10b      	cbz	r3, 800351e <_strtod_l+0x4de>
 800351a:	4682      	mov	sl, r0
 800351c:	468b      	mov	fp, r1
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <_strtod_l+0x594>)
 8003520:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003524:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003528:	4652      	mov	r2, sl
 800352a:	465b      	mov	r3, fp
 800352c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003530:	f7fd f8b2 	bl	8000698 <__aeabi_dmul>
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <_strtod_l+0x598>)
 8003536:	460a      	mov	r2, r1
 8003538:	400b      	ands	r3, r1
 800353a:	4928      	ldr	r1, [pc, #160]	; (80035dc <_strtod_l+0x59c>)
 800353c:	428b      	cmp	r3, r1
 800353e:	4682      	mov	sl, r0
 8003540:	d898      	bhi.n	8003474 <_strtod_l+0x434>
 8003542:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003546:	428b      	cmp	r3, r1
 8003548:	bf86      	itte	hi
 800354a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80035e4 <_strtod_l+0x5a4>
 800354e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8003552:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003556:	2300      	movs	r3, #0
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	e077      	b.n	800364c <_strtod_l+0x60c>
 800355c:	f018 0f01 	tst.w	r8, #1
 8003560:	d006      	beq.n	8003570 <_strtod_l+0x530>
 8003562:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd f895 	bl	8000698 <__aeabi_dmul>
 800356e:	2301      	movs	r3, #1
 8003570:	3501      	adds	r5, #1
 8003572:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003576:	e7cc      	b.n	8003512 <_strtod_l+0x4d2>
 8003578:	d0ed      	beq.n	8003556 <_strtod_l+0x516>
 800357a:	f1c8 0800 	rsb	r8, r8, #0
 800357e:	f018 020f 	ands.w	r2, r8, #15
 8003582:	d00a      	beq.n	800359a <_strtod_l+0x55a>
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <_strtod_l+0x590>)
 8003586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800358a:	4650      	mov	r0, sl
 800358c:	4659      	mov	r1, fp
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fd f9ab 	bl	80008ec <__aeabi_ddiv>
 8003596:	4682      	mov	sl, r0
 8003598:	468b      	mov	fp, r1
 800359a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800359e:	d0da      	beq.n	8003556 <_strtod_l+0x516>
 80035a0:	f1b8 0f1f 	cmp.w	r8, #31
 80035a4:	dd20      	ble.n	80035e8 <_strtod_l+0x5a8>
 80035a6:	2400      	movs	r4, #0
 80035a8:	46a0      	mov	r8, r4
 80035aa:	9407      	str	r4, [sp, #28]
 80035ac:	9405      	str	r4, [sp, #20]
 80035ae:	2322      	movs	r3, #34	; 0x22
 80035b0:	f04f 0a00 	mov.w	sl, #0
 80035b4:	f04f 0b00 	mov.w	fp, #0
 80035b8:	f8c9 3000 	str.w	r3, [r9]
 80035bc:	e765      	b.n	800348a <_strtod_l+0x44a>
 80035be:	bf00      	nop
 80035c0:	080068a5 	.word	0x080068a5
 80035c4:	08006933 	.word	0x08006933
 80035c8:	080068ad 	.word	0x080068ad
 80035cc:	080068f0 	.word	0x080068f0
 80035d0:	080069d8 	.word	0x080069d8
 80035d4:	080069b0 	.word	0x080069b0
 80035d8:	7ff00000 	.word	0x7ff00000
 80035dc:	7ca00000 	.word	0x7ca00000
 80035e0:	fff80000 	.word	0xfff80000
 80035e4:	7fefffff 	.word	0x7fefffff
 80035e8:	f018 0310 	ands.w	r3, r8, #16
 80035ec:	bf18      	it	ne
 80035ee:	236a      	movne	r3, #106	; 0x6a
 80035f0:	4da0      	ldr	r5, [pc, #640]	; (8003874 <_strtod_l+0x834>)
 80035f2:	9304      	str	r3, [sp, #16]
 80035f4:	4650      	mov	r0, sl
 80035f6:	4659      	mov	r1, fp
 80035f8:	2300      	movs	r3, #0
 80035fa:	f1b8 0f00 	cmp.w	r8, #0
 80035fe:	f300 810a 	bgt.w	8003816 <_strtod_l+0x7d6>
 8003602:	b10b      	cbz	r3, 8003608 <_strtod_l+0x5c8>
 8003604:	4682      	mov	sl, r0
 8003606:	468b      	mov	fp, r1
 8003608:	9b04      	ldr	r3, [sp, #16]
 800360a:	b1bb      	cbz	r3, 800363c <_strtod_l+0x5fc>
 800360c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003614:	2b00      	cmp	r3, #0
 8003616:	4659      	mov	r1, fp
 8003618:	dd10      	ble.n	800363c <_strtod_l+0x5fc>
 800361a:	2b1f      	cmp	r3, #31
 800361c:	f340 8107 	ble.w	800382e <_strtod_l+0x7ee>
 8003620:	2b34      	cmp	r3, #52	; 0x34
 8003622:	bfde      	ittt	le
 8003624:	3b20      	suble	r3, #32
 8003626:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800362a:	fa02 f303 	lslle.w	r3, r2, r3
 800362e:	f04f 0a00 	mov.w	sl, #0
 8003632:	bfcc      	ite	gt
 8003634:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003638:	ea03 0b01 	andle.w	fp, r3, r1
 800363c:	2200      	movs	r2, #0
 800363e:	2300      	movs	r3, #0
 8003640:	4650      	mov	r0, sl
 8003642:	4659      	mov	r1, fp
 8003644:	f7fd fa90 	bl	8000b68 <__aeabi_dcmpeq>
 8003648:	2800      	cmp	r0, #0
 800364a:	d1ac      	bne.n	80035a6 <_strtod_l+0x566>
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	9a05      	ldr	r2, [sp, #20]
 8003652:	9908      	ldr	r1, [sp, #32]
 8003654:	4623      	mov	r3, r4
 8003656:	4648      	mov	r0, r9
 8003658:	f001 fe6e 	bl	8005338 <__s2b>
 800365c:	9007      	str	r0, [sp, #28]
 800365e:	2800      	cmp	r0, #0
 8003660:	f43f af08 	beq.w	8003474 <_strtod_l+0x434>
 8003664:	9a06      	ldr	r2, [sp, #24]
 8003666:	9b06      	ldr	r3, [sp, #24]
 8003668:	2a00      	cmp	r2, #0
 800366a:	f1c3 0300 	rsb	r3, r3, #0
 800366e:	bfa8      	it	ge
 8003670:	2300      	movge	r3, #0
 8003672:	930e      	str	r3, [sp, #56]	; 0x38
 8003674:	2400      	movs	r4, #0
 8003676:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800367a:	9316      	str	r3, [sp, #88]	; 0x58
 800367c:	46a0      	mov	r8, r4
 800367e:	9b07      	ldr	r3, [sp, #28]
 8003680:	4648      	mov	r0, r9
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	f001 fdd2 	bl	800522c <_Balloc>
 8003688:	9005      	str	r0, [sp, #20]
 800368a:	2800      	cmp	r0, #0
 800368c:	f43f aef6 	beq.w	800347c <_strtod_l+0x43c>
 8003690:	9b07      	ldr	r3, [sp, #28]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	3202      	adds	r2, #2
 8003696:	f103 010c 	add.w	r1, r3, #12
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	300c      	adds	r0, #12
 800369e:	f7fe fe23 	bl	80022e8 <memcpy>
 80036a2:	aa1e      	add	r2, sp, #120	; 0x78
 80036a4:	a91d      	add	r1, sp, #116	; 0x74
 80036a6:	ec4b ab10 	vmov	d0, sl, fp
 80036aa:	4648      	mov	r0, r9
 80036ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80036b0:	f002 f8fe 	bl	80058b0 <__d2b>
 80036b4:	901c      	str	r0, [sp, #112]	; 0x70
 80036b6:	2800      	cmp	r0, #0
 80036b8:	f43f aee0 	beq.w	800347c <_strtod_l+0x43c>
 80036bc:	2101      	movs	r1, #1
 80036be:	4648      	mov	r0, r9
 80036c0:	f001 fec6 	bl	8005450 <__i2b>
 80036c4:	4680      	mov	r8, r0
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f43f aed8 	beq.w	800347c <_strtod_l+0x43c>
 80036cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80036ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80036d0:	2e00      	cmp	r6, #0
 80036d2:	bfab      	itete	ge
 80036d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80036d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80036d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80036da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80036dc:	bfac      	ite	ge
 80036de:	18f7      	addge	r7, r6, r3
 80036e0:	1b9d      	sublt	r5, r3, r6
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	1af6      	subs	r6, r6, r3
 80036e6:	4416      	add	r6, r2
 80036e8:	4b63      	ldr	r3, [pc, #396]	; (8003878 <_strtod_l+0x838>)
 80036ea:	3e01      	subs	r6, #1
 80036ec:	429e      	cmp	r6, r3
 80036ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80036f2:	f280 80af 	bge.w	8003854 <_strtod_l+0x814>
 80036f6:	1b9b      	subs	r3, r3, r6
 80036f8:	2b1f      	cmp	r3, #31
 80036fa:	eba2 0203 	sub.w	r2, r2, r3
 80036fe:	f04f 0101 	mov.w	r1, #1
 8003702:	f300 809b 	bgt.w	800383c <_strtod_l+0x7fc>
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	930f      	str	r3, [sp, #60]	; 0x3c
 800370c:	2300      	movs	r3, #0
 800370e:	930a      	str	r3, [sp, #40]	; 0x28
 8003710:	18be      	adds	r6, r7, r2
 8003712:	9b04      	ldr	r3, [sp, #16]
 8003714:	42b7      	cmp	r7, r6
 8003716:	4415      	add	r5, r2
 8003718:	441d      	add	r5, r3
 800371a:	463b      	mov	r3, r7
 800371c:	bfa8      	it	ge
 800371e:	4633      	movge	r3, r6
 8003720:	42ab      	cmp	r3, r5
 8003722:	bfa8      	it	ge
 8003724:	462b      	movge	r3, r5
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfc2      	ittt	gt
 800372a:	1af6      	subgt	r6, r6, r3
 800372c:	1aed      	subgt	r5, r5, r3
 800372e:	1aff      	subgt	r7, r7, r3
 8003730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003732:	b1bb      	cbz	r3, 8003764 <_strtod_l+0x724>
 8003734:	4641      	mov	r1, r8
 8003736:	461a      	mov	r2, r3
 8003738:	4648      	mov	r0, r9
 800373a:	f001 ff29 	bl	8005590 <__pow5mult>
 800373e:	4680      	mov	r8, r0
 8003740:	2800      	cmp	r0, #0
 8003742:	f43f ae9b 	beq.w	800347c <_strtod_l+0x43c>
 8003746:	4601      	mov	r1, r0
 8003748:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800374a:	4648      	mov	r0, r9
 800374c:	f001 fe89 	bl	8005462 <__multiply>
 8003750:	900c      	str	r0, [sp, #48]	; 0x30
 8003752:	2800      	cmp	r0, #0
 8003754:	f43f ae92 	beq.w	800347c <_strtod_l+0x43c>
 8003758:	991c      	ldr	r1, [sp, #112]	; 0x70
 800375a:	4648      	mov	r0, r9
 800375c:	f001 fd9a 	bl	8005294 <_Bfree>
 8003760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003762:	931c      	str	r3, [sp, #112]	; 0x70
 8003764:	2e00      	cmp	r6, #0
 8003766:	dc7a      	bgt.n	800385e <_strtod_l+0x81e>
 8003768:	9b06      	ldr	r3, [sp, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	dd08      	ble.n	8003780 <_strtod_l+0x740>
 800376e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003770:	9905      	ldr	r1, [sp, #20]
 8003772:	4648      	mov	r0, r9
 8003774:	f001 ff0c 	bl	8005590 <__pow5mult>
 8003778:	9005      	str	r0, [sp, #20]
 800377a:	2800      	cmp	r0, #0
 800377c:	f43f ae7e 	beq.w	800347c <_strtod_l+0x43c>
 8003780:	2d00      	cmp	r5, #0
 8003782:	dd08      	ble.n	8003796 <_strtod_l+0x756>
 8003784:	462a      	mov	r2, r5
 8003786:	9905      	ldr	r1, [sp, #20]
 8003788:	4648      	mov	r0, r9
 800378a:	f001 ff4f 	bl	800562c <__lshift>
 800378e:	9005      	str	r0, [sp, #20]
 8003790:	2800      	cmp	r0, #0
 8003792:	f43f ae73 	beq.w	800347c <_strtod_l+0x43c>
 8003796:	2f00      	cmp	r7, #0
 8003798:	dd08      	ble.n	80037ac <_strtod_l+0x76c>
 800379a:	4641      	mov	r1, r8
 800379c:	463a      	mov	r2, r7
 800379e:	4648      	mov	r0, r9
 80037a0:	f001 ff44 	bl	800562c <__lshift>
 80037a4:	4680      	mov	r8, r0
 80037a6:	2800      	cmp	r0, #0
 80037a8:	f43f ae68 	beq.w	800347c <_strtod_l+0x43c>
 80037ac:	9a05      	ldr	r2, [sp, #20]
 80037ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80037b0:	4648      	mov	r0, r9
 80037b2:	f001 ffa9 	bl	8005708 <__mdiff>
 80037b6:	4604      	mov	r4, r0
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f43f ae5f 	beq.w	800347c <_strtod_l+0x43c>
 80037be:	68c3      	ldr	r3, [r0, #12]
 80037c0:	930c      	str	r3, [sp, #48]	; 0x30
 80037c2:	2300      	movs	r3, #0
 80037c4:	60c3      	str	r3, [r0, #12]
 80037c6:	4641      	mov	r1, r8
 80037c8:	f001 ff84 	bl	80056d4 <__mcmp>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	da55      	bge.n	800387c <_strtod_l+0x83c>
 80037d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037d2:	b9e3      	cbnz	r3, 800380e <_strtod_l+0x7ce>
 80037d4:	f1ba 0f00 	cmp.w	sl, #0
 80037d8:	d119      	bne.n	800380e <_strtod_l+0x7ce>
 80037da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80037de:	b9b3      	cbnz	r3, 800380e <_strtod_l+0x7ce>
 80037e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80037e4:	0d1b      	lsrs	r3, r3, #20
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80037ec:	d90f      	bls.n	800380e <_strtod_l+0x7ce>
 80037ee:	6963      	ldr	r3, [r4, #20]
 80037f0:	b913      	cbnz	r3, 80037f8 <_strtod_l+0x7b8>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	dd0a      	ble.n	800380e <_strtod_l+0x7ce>
 80037f8:	4621      	mov	r1, r4
 80037fa:	2201      	movs	r2, #1
 80037fc:	4648      	mov	r0, r9
 80037fe:	f001 ff15 	bl	800562c <__lshift>
 8003802:	4641      	mov	r1, r8
 8003804:	4604      	mov	r4, r0
 8003806:	f001 ff65 	bl	80056d4 <__mcmp>
 800380a:	2800      	cmp	r0, #0
 800380c:	dc67      	bgt.n	80038de <_strtod_l+0x89e>
 800380e:	9b04      	ldr	r3, [sp, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d171      	bne.n	80038f8 <_strtod_l+0x8b8>
 8003814:	e63d      	b.n	8003492 <_strtod_l+0x452>
 8003816:	f018 0f01 	tst.w	r8, #1
 800381a:	d004      	beq.n	8003826 <_strtod_l+0x7e6>
 800381c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003820:	f7fc ff3a 	bl	8000698 <__aeabi_dmul>
 8003824:	2301      	movs	r3, #1
 8003826:	ea4f 0868 	mov.w	r8, r8, asr #1
 800382a:	3508      	adds	r5, #8
 800382c:	e6e5      	b.n	80035fa <_strtod_l+0x5ba>
 800382e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	ea03 0a0a 	and.w	sl, r3, sl
 800383a:	e6ff      	b.n	800363c <_strtod_l+0x5fc>
 800383c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8003840:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8003844:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8003848:	36e2      	adds	r6, #226	; 0xe2
 800384a:	fa01 f306 	lsl.w	r3, r1, r6
 800384e:	930a      	str	r3, [sp, #40]	; 0x28
 8003850:	910f      	str	r1, [sp, #60]	; 0x3c
 8003852:	e75d      	b.n	8003710 <_strtod_l+0x6d0>
 8003854:	2300      	movs	r3, #0
 8003856:	930a      	str	r3, [sp, #40]	; 0x28
 8003858:	2301      	movs	r3, #1
 800385a:	930f      	str	r3, [sp, #60]	; 0x3c
 800385c:	e758      	b.n	8003710 <_strtod_l+0x6d0>
 800385e:	4632      	mov	r2, r6
 8003860:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003862:	4648      	mov	r0, r9
 8003864:	f001 fee2 	bl	800562c <__lshift>
 8003868:	901c      	str	r0, [sp, #112]	; 0x70
 800386a:	2800      	cmp	r0, #0
 800386c:	f47f af7c 	bne.w	8003768 <_strtod_l+0x728>
 8003870:	e604      	b.n	800347c <_strtod_l+0x43c>
 8003872:	bf00      	nop
 8003874:	08006908 	.word	0x08006908
 8003878:	fffffc02 	.word	0xfffffc02
 800387c:	465d      	mov	r5, fp
 800387e:	f040 8086 	bne.w	800398e <_strtod_l+0x94e>
 8003882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003888:	b32a      	cbz	r2, 80038d6 <_strtod_l+0x896>
 800388a:	4aaf      	ldr	r2, [pc, #700]	; (8003b48 <_strtod_l+0xb08>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d153      	bne.n	8003938 <_strtod_l+0x8f8>
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	4650      	mov	r0, sl
 8003894:	b1d3      	cbz	r3, 80038cc <_strtod_l+0x88c>
 8003896:	4aad      	ldr	r2, [pc, #692]	; (8003b4c <_strtod_l+0xb0c>)
 8003898:	402a      	ands	r2, r5
 800389a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800389e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a2:	d816      	bhi.n	80038d2 <_strtod_l+0x892>
 80038a4:	0d12      	lsrs	r2, r2, #20
 80038a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	4298      	cmp	r0, r3
 80038b0:	d142      	bne.n	8003938 <_strtod_l+0x8f8>
 80038b2:	4ba7      	ldr	r3, [pc, #668]	; (8003b50 <_strtod_l+0xb10>)
 80038b4:	429d      	cmp	r5, r3
 80038b6:	d102      	bne.n	80038be <_strtod_l+0x87e>
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f addf 	beq.w	800347c <_strtod_l+0x43c>
 80038be:	4ba3      	ldr	r3, [pc, #652]	; (8003b4c <_strtod_l+0xb0c>)
 80038c0:	402b      	ands	r3, r5
 80038c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80038c6:	f04f 0a00 	mov.w	sl, #0
 80038ca:	e7a0      	b.n	800380e <_strtod_l+0x7ce>
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d0:	e7ed      	b.n	80038ae <_strtod_l+0x86e>
 80038d2:	460b      	mov	r3, r1
 80038d4:	e7eb      	b.n	80038ae <_strtod_l+0x86e>
 80038d6:	bb7b      	cbnz	r3, 8003938 <_strtod_l+0x8f8>
 80038d8:	f1ba 0f00 	cmp.w	sl, #0
 80038dc:	d12c      	bne.n	8003938 <_strtod_l+0x8f8>
 80038de:	9904      	ldr	r1, [sp, #16]
 80038e0:	4a9a      	ldr	r2, [pc, #616]	; (8003b4c <_strtod_l+0xb0c>)
 80038e2:	465b      	mov	r3, fp
 80038e4:	b1f1      	cbz	r1, 8003924 <_strtod_l+0x8e4>
 80038e6:	ea02 010b 	and.w	r1, r2, fp
 80038ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80038ee:	dc19      	bgt.n	8003924 <_strtod_l+0x8e4>
 80038f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80038f4:	f77f ae5b 	ble.w	80035ae <_strtod_l+0x56e>
 80038f8:	4a96      	ldr	r2, [pc, #600]	; (8003b54 <_strtod_l+0xb14>)
 80038fa:	2300      	movs	r3, #0
 80038fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003900:	4650      	mov	r0, sl
 8003902:	4659      	mov	r1, fp
 8003904:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003908:	f7fc fec6 	bl	8000698 <__aeabi_dmul>
 800390c:	4682      	mov	sl, r0
 800390e:	468b      	mov	fp, r1
 8003910:	2900      	cmp	r1, #0
 8003912:	f47f adbe 	bne.w	8003492 <_strtod_l+0x452>
 8003916:	2800      	cmp	r0, #0
 8003918:	f47f adbb 	bne.w	8003492 <_strtod_l+0x452>
 800391c:	2322      	movs	r3, #34	; 0x22
 800391e:	f8c9 3000 	str.w	r3, [r9]
 8003922:	e5b6      	b.n	8003492 <_strtod_l+0x452>
 8003924:	4013      	ands	r3, r2
 8003926:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800392a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800392e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003932:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003936:	e76a      	b.n	800380e <_strtod_l+0x7ce>
 8003938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393a:	b193      	cbz	r3, 8003962 <_strtod_l+0x922>
 800393c:	422b      	tst	r3, r5
 800393e:	f43f af66 	beq.w	800380e <_strtod_l+0x7ce>
 8003942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003944:	9a04      	ldr	r2, [sp, #16]
 8003946:	4650      	mov	r0, sl
 8003948:	4659      	mov	r1, fp
 800394a:	b173      	cbz	r3, 800396a <_strtod_l+0x92a>
 800394c:	f7ff fb5c 	bl	8003008 <sulp>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003958:	f7fc fce8 	bl	800032c <__adddf3>
 800395c:	4682      	mov	sl, r0
 800395e:	468b      	mov	fp, r1
 8003960:	e755      	b.n	800380e <_strtod_l+0x7ce>
 8003962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003964:	ea13 0f0a 	tst.w	r3, sl
 8003968:	e7e9      	b.n	800393e <_strtod_l+0x8fe>
 800396a:	f7ff fb4d 	bl	8003008 <sulp>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003976:	f7fc fcd7 	bl	8000328 <__aeabi_dsub>
 800397a:	2200      	movs	r2, #0
 800397c:	2300      	movs	r3, #0
 800397e:	4682      	mov	sl, r0
 8003980:	468b      	mov	fp, r1
 8003982:	f7fd f8f1 	bl	8000b68 <__aeabi_dcmpeq>
 8003986:	2800      	cmp	r0, #0
 8003988:	f47f ae11 	bne.w	80035ae <_strtod_l+0x56e>
 800398c:	e73f      	b.n	800380e <_strtod_l+0x7ce>
 800398e:	4641      	mov	r1, r8
 8003990:	4620      	mov	r0, r4
 8003992:	f001 ffdc 	bl	800594e <__ratio>
 8003996:	ec57 6b10 	vmov	r6, r7, d0
 800399a:	2200      	movs	r2, #0
 800399c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039a0:	ee10 0a10 	vmov	r0, s0
 80039a4:	4639      	mov	r1, r7
 80039a6:	f7fd f8f3 	bl	8000b90 <__aeabi_dcmple>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d077      	beq.n	8003a9e <_strtod_l+0xa5e>
 80039ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04a      	beq.n	8003a4a <_strtod_l+0xa0a>
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <_strtod_l+0xb18>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039bc:	4f66      	ldr	r7, [pc, #408]	; (8003b58 <_strtod_l+0xb18>)
 80039be:	2600      	movs	r6, #0
 80039c0:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <_strtod_l+0xb0c>)
 80039c2:	402b      	ands	r3, r5
 80039c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80039c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039c8:	4b64      	ldr	r3, [pc, #400]	; (8003b5c <_strtod_l+0xb1c>)
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f040 80ce 	bne.w	8003b6c <_strtod_l+0xb2c>
 80039d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80039dc:	ec4b ab10 	vmov	d0, sl, fp
 80039e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80039e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039e8:	f001 feec 	bl	80057c4 <__ulp>
 80039ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039f0:	ec53 2b10 	vmov	r2, r3, d0
 80039f4:	f7fc fe50 	bl	8000698 <__aeabi_dmul>
 80039f8:	4652      	mov	r2, sl
 80039fa:	465b      	mov	r3, fp
 80039fc:	f7fc fc96 	bl	800032c <__adddf3>
 8003a00:	460b      	mov	r3, r1
 8003a02:	4952      	ldr	r1, [pc, #328]	; (8003b4c <_strtod_l+0xb0c>)
 8003a04:	4a56      	ldr	r2, [pc, #344]	; (8003b60 <_strtod_l+0xb20>)
 8003a06:	4019      	ands	r1, r3
 8003a08:	4291      	cmp	r1, r2
 8003a0a:	4682      	mov	sl, r0
 8003a0c:	d95b      	bls.n	8003ac6 <_strtod_l+0xa86>
 8003a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d103      	bne.n	8003a20 <_strtod_l+0x9e0>
 8003a18:	9b08      	ldr	r3, [sp, #32]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f43f ad2e 	beq.w	800347c <_strtod_l+0x43c>
 8003a20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003b50 <_strtod_l+0xb10>
 8003a24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a2a:	4648      	mov	r0, r9
 8003a2c:	f001 fc32 	bl	8005294 <_Bfree>
 8003a30:	9905      	ldr	r1, [sp, #20]
 8003a32:	4648      	mov	r0, r9
 8003a34:	f001 fc2e 	bl	8005294 <_Bfree>
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4648      	mov	r0, r9
 8003a3c:	f001 fc2a 	bl	8005294 <_Bfree>
 8003a40:	4621      	mov	r1, r4
 8003a42:	4648      	mov	r0, r9
 8003a44:	f001 fc26 	bl	8005294 <_Bfree>
 8003a48:	e619      	b.n	800367e <_strtod_l+0x63e>
 8003a4a:	f1ba 0f00 	cmp.w	sl, #0
 8003a4e:	d11a      	bne.n	8003a86 <_strtod_l+0xa46>
 8003a50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003a54:	b9eb      	cbnz	r3, 8003a92 <_strtod_l+0xa52>
 8003a56:	2200      	movs	r2, #0
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <_strtod_l+0xb18>)
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	4639      	mov	r1, r7
 8003a5e:	f7fd f88d 	bl	8000b7c <__aeabi_dcmplt>
 8003a62:	b9c8      	cbnz	r0, 8003a98 <_strtod_l+0xa58>
 8003a64:	4630      	mov	r0, r6
 8003a66:	4639      	mov	r1, r7
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <_strtod_l+0xb24>)
 8003a6c:	f7fc fe14 	bl	8000698 <__aeabi_dmul>
 8003a70:	4606      	mov	r6, r0
 8003a72:	460f      	mov	r7, r1
 8003a74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003a78:	9618      	str	r6, [sp, #96]	; 0x60
 8003a7a:	9319      	str	r3, [sp, #100]	; 0x64
 8003a7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003a80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a84:	e79c      	b.n	80039c0 <_strtod_l+0x980>
 8003a86:	f1ba 0f01 	cmp.w	sl, #1
 8003a8a:	d102      	bne.n	8003a92 <_strtod_l+0xa52>
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	f43f ad8e 	beq.w	80035ae <_strtod_l+0x56e>
 8003a92:	2200      	movs	r2, #0
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <_strtod_l+0xb28>)
 8003a96:	e78f      	b.n	80039b8 <_strtod_l+0x978>
 8003a98:	2600      	movs	r6, #0
 8003a9a:	4f32      	ldr	r7, [pc, #200]	; (8003b64 <_strtod_l+0xb24>)
 8003a9c:	e7ea      	b.n	8003a74 <_strtod_l+0xa34>
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <_strtod_l+0xb24>)
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f7fc fdf7 	bl	8000698 <__aeabi_dmul>
 8003aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aac:	4606      	mov	r6, r0
 8003aae:	460f      	mov	r7, r1
 8003ab0:	b933      	cbnz	r3, 8003ac0 <_strtod_l+0xa80>
 8003ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ab6:	9010      	str	r0, [sp, #64]	; 0x40
 8003ab8:	9311      	str	r3, [sp, #68]	; 0x44
 8003aba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003abe:	e7df      	b.n	8003a80 <_strtod_l+0xa40>
 8003ac0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8003ac4:	e7f9      	b.n	8003aba <_strtod_l+0xa7a>
 8003ac6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8003aca:	9b04      	ldr	r3, [sp, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ab      	bne.n	8003a28 <_strtod_l+0x9e8>
 8003ad0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003ad4:	0d1b      	lsrs	r3, r3, #20
 8003ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ad8:	051b      	lsls	r3, r3, #20
 8003ada:	429a      	cmp	r2, r3
 8003adc:	465d      	mov	r5, fp
 8003ade:	d1a3      	bne.n	8003a28 <_strtod_l+0x9e8>
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7fd f888 	bl	8000bf8 <__aeabi_d2iz>
 8003ae8:	f7fc fd6c 	bl	80005c4 <__aeabi_i2d>
 8003aec:	460b      	mov	r3, r1
 8003aee:	4602      	mov	r2, r0
 8003af0:	4639      	mov	r1, r7
 8003af2:	4630      	mov	r0, r6
 8003af4:	f7fc fc18 	bl	8000328 <__aeabi_dsub>
 8003af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003afa:	4606      	mov	r6, r0
 8003afc:	460f      	mov	r7, r1
 8003afe:	b933      	cbnz	r3, 8003b0e <_strtod_l+0xace>
 8003b00:	f1ba 0f00 	cmp.w	sl, #0
 8003b04:	d103      	bne.n	8003b0e <_strtod_l+0xace>
 8003b06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d06d      	beq.n	8003bea <_strtod_l+0xbaa>
 8003b0e:	a30a      	add	r3, pc, #40	; (adr r3, 8003b38 <_strtod_l+0xaf8>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	4630      	mov	r0, r6
 8003b16:	4639      	mov	r1, r7
 8003b18:	f7fd f830 	bl	8000b7c <__aeabi_dcmplt>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	f47f acb8 	bne.w	8003492 <_strtod_l+0x452>
 8003b22:	a307      	add	r3, pc, #28	; (adr r3, 8003b40 <_strtod_l+0xb00>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	f7fd f844 	bl	8000bb8 <__aeabi_dcmpgt>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	f43f af79 	beq.w	8003a28 <_strtod_l+0x9e8>
 8003b36:	e4ac      	b.n	8003492 <_strtod_l+0x452>
 8003b38:	94a03595 	.word	0x94a03595
 8003b3c:	3fdfffff 	.word	0x3fdfffff
 8003b40:	35afe535 	.word	0x35afe535
 8003b44:	3fe00000 	.word	0x3fe00000
 8003b48:	000fffff 	.word	0x000fffff
 8003b4c:	7ff00000 	.word	0x7ff00000
 8003b50:	7fefffff 	.word	0x7fefffff
 8003b54:	39500000 	.word	0x39500000
 8003b58:	3ff00000 	.word	0x3ff00000
 8003b5c:	7fe00000 	.word	0x7fe00000
 8003b60:	7c9fffff 	.word	0x7c9fffff
 8003b64:	3fe00000 	.word	0x3fe00000
 8003b68:	bff00000 	.word	0xbff00000
 8003b6c:	9b04      	ldr	r3, [sp, #16]
 8003b6e:	b333      	cbz	r3, 8003bbe <_strtod_l+0xb7e>
 8003b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003b76:	d822      	bhi.n	8003bbe <_strtod_l+0xb7e>
 8003b78:	a327      	add	r3, pc, #156	; (adr r3, 8003c18 <_strtod_l+0xbd8>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4639      	mov	r1, r7
 8003b82:	f7fd f805 	bl	8000b90 <__aeabi_dcmple>
 8003b86:	b1a0      	cbz	r0, 8003bb2 <_strtod_l+0xb72>
 8003b88:	4639      	mov	r1, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7fd f85c 	bl	8000c48 <__aeabi_d2uiz>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	bf08      	it	eq
 8003b94:	2001      	moveq	r0, #1
 8003b96:	f7fc fd05 	bl	80005a4 <__aeabi_ui2d>
 8003b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	460f      	mov	r7, r1
 8003ba0:	bb03      	cbnz	r3, 8003be4 <_strtod_l+0xba4>
 8003ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ba6:	9012      	str	r0, [sp, #72]	; 0x48
 8003ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8003baa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003bc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8003bc6:	f001 fdfd 	bl	80057c4 <__ulp>
 8003bca:	4650      	mov	r0, sl
 8003bcc:	ec53 2b10 	vmov	r2, r3, d0
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	f7fc fd61 	bl	8000698 <__aeabi_dmul>
 8003bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bda:	f7fc fba7 	bl	800032c <__adddf3>
 8003bde:	4682      	mov	sl, r0
 8003be0:	468b      	mov	fp, r1
 8003be2:	e772      	b.n	8003aca <_strtod_l+0xa8a>
 8003be4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8003be8:	e7df      	b.n	8003baa <_strtod_l+0xb6a>
 8003bea:	a30d      	add	r3, pc, #52	; (adr r3, 8003c20 <_strtod_l+0xbe0>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc ffc4 	bl	8000b7c <__aeabi_dcmplt>
 8003bf4:	e79c      	b.n	8003b30 <_strtod_l+0xaf0>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8003bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	f7ff ba61 	b.w	80030c6 <_strtod_l+0x86>
 8003c04:	2b65      	cmp	r3, #101	; 0x65
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f43f ab4e 	beq.w	80032aa <_strtod_l+0x26a>
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4614      	mov	r4, r2
 8003c12:	9104      	str	r1, [sp, #16]
 8003c14:	f7ff bacb 	b.w	80031ae <_strtod_l+0x16e>
 8003c18:	ffc00000 	.word	0xffc00000
 8003c1c:	41dfffff 	.word	0x41dfffff
 8003c20:	94a03595 	.word	0x94a03595
 8003c24:	3fcfffff 	.word	0x3fcfffff

08003c28 <_strtod_r>:
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <_strtod_r+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	b410      	push	{r4}
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4c04      	ldr	r4, [pc, #16]	; (8003c44 <_strtod_r+0x1c>)
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf08      	it	eq
 8003c36:	4623      	moveq	r3, r4
 8003c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c3c:	f7ff ba00 	b.w	8003040 <_strtod_l>
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	20000070 	.word	0x20000070

08003c48 <_strtol_l.isra.0>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	4689      	mov	r9, r1
 8003c50:	4692      	mov	sl, r2
 8003c52:	461e      	mov	r6, r3
 8003c54:	460f      	mov	r7, r1
 8003c56:	463d      	mov	r5, r7
 8003c58:	9808      	ldr	r0, [sp, #32]
 8003c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c5e:	f001 fab7 	bl	80051d0 <__locale_ctype_ptr_l>
 8003c62:	4420      	add	r0, r4
 8003c64:	7843      	ldrb	r3, [r0, #1]
 8003c66:	f013 0308 	ands.w	r3, r3, #8
 8003c6a:	d132      	bne.n	8003cd2 <_strtol_l.isra.0+0x8a>
 8003c6c:	2c2d      	cmp	r4, #45	; 0x2d
 8003c6e:	d132      	bne.n	8003cd6 <_strtol_l.isra.0+0x8e>
 8003c70:	787c      	ldrb	r4, [r7, #1]
 8003c72:	1cbd      	adds	r5, r7, #2
 8003c74:	2201      	movs	r2, #1
 8003c76:	2e00      	cmp	r6, #0
 8003c78:	d05d      	beq.n	8003d36 <_strtol_l.isra.0+0xee>
 8003c7a:	2e10      	cmp	r6, #16
 8003c7c:	d109      	bne.n	8003c92 <_strtol_l.isra.0+0x4a>
 8003c7e:	2c30      	cmp	r4, #48	; 0x30
 8003c80:	d107      	bne.n	8003c92 <_strtol_l.isra.0+0x4a>
 8003c82:	782b      	ldrb	r3, [r5, #0]
 8003c84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c88:	2b58      	cmp	r3, #88	; 0x58
 8003c8a:	d14f      	bne.n	8003d2c <_strtol_l.isra.0+0xe4>
 8003c8c:	786c      	ldrb	r4, [r5, #1]
 8003c8e:	2610      	movs	r6, #16
 8003c90:	3502      	adds	r5, #2
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	bf14      	ite	ne
 8003c96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c9e:	2700      	movs	r7, #0
 8003ca0:	fbb1 fcf6 	udiv	ip, r1, r6
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003caa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	d817      	bhi.n	8003ce2 <_strtol_l.isra.0+0x9a>
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	dd23      	ble.n	8003d00 <_strtol_l.isra.0+0xb8>
 8003cb8:	1c7b      	adds	r3, r7, #1
 8003cba:	d007      	beq.n	8003ccc <_strtol_l.isra.0+0x84>
 8003cbc:	4584      	cmp	ip, r0
 8003cbe:	d31c      	bcc.n	8003cfa <_strtol_l.isra.0+0xb2>
 8003cc0:	d101      	bne.n	8003cc6 <_strtol_l.isra.0+0x7e>
 8003cc2:	45a6      	cmp	lr, r4
 8003cc4:	db19      	blt.n	8003cfa <_strtol_l.isra.0+0xb2>
 8003cc6:	fb00 4006 	mla	r0, r0, r6, r4
 8003cca:	2701      	movs	r7, #1
 8003ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cd0:	e7eb      	b.n	8003caa <_strtol_l.isra.0+0x62>
 8003cd2:	462f      	mov	r7, r5
 8003cd4:	e7bf      	b.n	8003c56 <_strtol_l.isra.0+0xe>
 8003cd6:	2c2b      	cmp	r4, #43	; 0x2b
 8003cd8:	bf04      	itt	eq
 8003cda:	1cbd      	addeq	r5, r7, #2
 8003cdc:	787c      	ldrbeq	r4, [r7, #1]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	e7c9      	b.n	8003c76 <_strtol_l.isra.0+0x2e>
 8003ce2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003ce6:	2b19      	cmp	r3, #25
 8003ce8:	d801      	bhi.n	8003cee <_strtol_l.isra.0+0xa6>
 8003cea:	3c37      	subs	r4, #55	; 0x37
 8003cec:	e7e2      	b.n	8003cb4 <_strtol_l.isra.0+0x6c>
 8003cee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003cf2:	2b19      	cmp	r3, #25
 8003cf4:	d804      	bhi.n	8003d00 <_strtol_l.isra.0+0xb8>
 8003cf6:	3c57      	subs	r4, #87	; 0x57
 8003cf8:	e7dc      	b.n	8003cb4 <_strtol_l.isra.0+0x6c>
 8003cfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003cfe:	e7e5      	b.n	8003ccc <_strtol_l.isra.0+0x84>
 8003d00:	1c7b      	adds	r3, r7, #1
 8003d02:	d108      	bne.n	8003d16 <_strtol_l.isra.0+0xce>
 8003d04:	2322      	movs	r3, #34	; 0x22
 8003d06:	f8c8 3000 	str.w	r3, [r8]
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	f1ba 0f00 	cmp.w	sl, #0
 8003d10:	d107      	bne.n	8003d22 <_strtol_l.isra.0+0xda>
 8003d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d16:	b102      	cbz	r2, 8003d1a <_strtol_l.isra.0+0xd2>
 8003d18:	4240      	negs	r0, r0
 8003d1a:	f1ba 0f00 	cmp.w	sl, #0
 8003d1e:	d0f8      	beq.n	8003d12 <_strtol_l.isra.0+0xca>
 8003d20:	b10f      	cbz	r7, 8003d26 <_strtol_l.isra.0+0xde>
 8003d22:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003d26:	f8ca 9000 	str.w	r9, [sl]
 8003d2a:	e7f2      	b.n	8003d12 <_strtol_l.isra.0+0xca>
 8003d2c:	2430      	movs	r4, #48	; 0x30
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	d1af      	bne.n	8003c92 <_strtol_l.isra.0+0x4a>
 8003d32:	2608      	movs	r6, #8
 8003d34:	e7ad      	b.n	8003c92 <_strtol_l.isra.0+0x4a>
 8003d36:	2c30      	cmp	r4, #48	; 0x30
 8003d38:	d0a3      	beq.n	8003c82 <_strtol_l.isra.0+0x3a>
 8003d3a:	260a      	movs	r6, #10
 8003d3c:	e7a9      	b.n	8003c92 <_strtol_l.isra.0+0x4a>
	...

08003d40 <_strtol_r>:
 8003d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d42:	4c06      	ldr	r4, [pc, #24]	; (8003d5c <_strtol_r+0x1c>)
 8003d44:	4d06      	ldr	r5, [pc, #24]	; (8003d60 <_strtol_r+0x20>)
 8003d46:	6824      	ldr	r4, [r4, #0]
 8003d48:	6a24      	ldr	r4, [r4, #32]
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	bf08      	it	eq
 8003d4e:	462c      	moveq	r4, r5
 8003d50:	9400      	str	r4, [sp, #0]
 8003d52:	f7ff ff79 	bl	8003c48 <_strtol_l.isra.0>
 8003d56:	b003      	add	sp, #12
 8003d58:	bd30      	pop	{r4, r5, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	20000070 	.word	0x20000070

08003d64 <quorem>:
 8003d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	6903      	ldr	r3, [r0, #16]
 8003d6a:	690c      	ldr	r4, [r1, #16]
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	4680      	mov	r8, r0
 8003d70:	f2c0 8082 	blt.w	8003e78 <quorem+0x114>
 8003d74:	3c01      	subs	r4, #1
 8003d76:	f101 0714 	add.w	r7, r1, #20
 8003d7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d7e:	f100 0614 	add.w	r6, r0, #20
 8003d82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003d86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d8a:	eb06 030c 	add.w	r3, r6, ip
 8003d8e:	3501      	adds	r5, #1
 8003d90:	eb07 090c 	add.w	r9, r7, ip
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	fbb0 f5f5 	udiv	r5, r0, r5
 8003d9a:	b395      	cbz	r5, 8003e02 <quorem+0x9e>
 8003d9c:	f04f 0a00 	mov.w	sl, #0
 8003da0:	4638      	mov	r0, r7
 8003da2:	46b6      	mov	lr, r6
 8003da4:	46d3      	mov	fp, sl
 8003da6:	f850 2b04 	ldr.w	r2, [r0], #4
 8003daa:	b293      	uxth	r3, r2
 8003dac:	fb05 a303 	mla	r3, r5, r3, sl
 8003db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	ebab 0303 	sub.w	r3, fp, r3
 8003dba:	0c12      	lsrs	r2, r2, #16
 8003dbc:	f8de b000 	ldr.w	fp, [lr]
 8003dc0:	fb05 a202 	mla	r2, r5, r2, sl
 8003dc4:	fa13 f38b 	uxtah	r3, r3, fp
 8003dc8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003dcc:	fa1f fb82 	uxth.w	fp, r2
 8003dd0:	f8de 2000 	ldr.w	r2, [lr]
 8003dd4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003de2:	4581      	cmp	r9, r0
 8003de4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003de8:	f84e 3b04 	str.w	r3, [lr], #4
 8003dec:	d2db      	bcs.n	8003da6 <quorem+0x42>
 8003dee:	f856 300c 	ldr.w	r3, [r6, ip]
 8003df2:	b933      	cbnz	r3, 8003e02 <quorem+0x9e>
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	3b04      	subs	r3, #4
 8003df8:	429e      	cmp	r6, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	d330      	bcc.n	8003e60 <quorem+0xfc>
 8003dfe:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e02:	4640      	mov	r0, r8
 8003e04:	f001 fc66 	bl	80056d4 <__mcmp>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	db25      	blt.n	8003e58 <quorem+0xf4>
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f04f 0c00 	mov.w	ip, #0
 8003e14:	f857 2b04 	ldr.w	r2, [r7], #4
 8003e18:	f8d0 e000 	ldr.w	lr, [r0]
 8003e1c:	b293      	uxth	r3, r2
 8003e1e:	ebac 0303 	sub.w	r3, ip, r3
 8003e22:	0c12      	lsrs	r2, r2, #16
 8003e24:	fa13 f38e 	uxtah	r3, r3, lr
 8003e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e36:	45b9      	cmp	r9, r7
 8003e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e3c:	f840 3b04 	str.w	r3, [r0], #4
 8003e40:	d2e8      	bcs.n	8003e14 <quorem+0xb0>
 8003e42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003e46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003e4a:	b92a      	cbnz	r2, 8003e58 <quorem+0xf4>
 8003e4c:	3b04      	subs	r3, #4
 8003e4e:	429e      	cmp	r6, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	d30b      	bcc.n	8003e6c <quorem+0x108>
 8003e54:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e58:	4628      	mov	r0, r5
 8003e5a:	b003      	add	sp, #12
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	3b04      	subs	r3, #4
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	d1ca      	bne.n	8003dfe <quorem+0x9a>
 8003e68:	3c01      	subs	r4, #1
 8003e6a:	e7c5      	b.n	8003df8 <quorem+0x94>
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d1ef      	bne.n	8003e54 <quorem+0xf0>
 8003e74:	3c01      	subs	r4, #1
 8003e76:	e7ea      	b.n	8003e4e <quorem+0xea>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e7ee      	b.n	8003e5a <quorem+0xf6>
 8003e7c:	0000      	movs	r0, r0
	...

08003e80 <_dtoa_r>:
 8003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	ec57 6b10 	vmov	r6, r7, d0
 8003e88:	b097      	sub	sp, #92	; 0x5c
 8003e8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e8c:	9106      	str	r1, [sp, #24]
 8003e8e:	4604      	mov	r4, r0
 8003e90:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e92:	9312      	str	r3, [sp, #72]	; 0x48
 8003e94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003e98:	e9cd 6700 	strd	r6, r7, [sp]
 8003e9c:	b93d      	cbnz	r5, 8003eae <_dtoa_r+0x2e>
 8003e9e:	2010      	movs	r0, #16
 8003ea0:	f001 f9aa 	bl	80051f8 <malloc>
 8003ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8003ea6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003eaa:	6005      	str	r5, [r0, #0]
 8003eac:	60c5      	str	r5, [r0, #12]
 8003eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	b151      	cbz	r1, 8003eca <_dtoa_r+0x4a>
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	604a      	str	r2, [r1, #4]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4093      	lsls	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f001 f9e8 	bl	8005294 <_Bfree>
 8003ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	1e3b      	subs	r3, r7, #0
 8003ecc:	bfbb      	ittet	lt
 8003ece:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ed2:	9301      	strlt	r3, [sp, #4]
 8003ed4:	2300      	movge	r3, #0
 8003ed6:	2201      	movlt	r2, #1
 8003ed8:	bfac      	ite	ge
 8003eda:	f8c8 3000 	strge.w	r3, [r8]
 8003ede:	f8c8 2000 	strlt.w	r2, [r8]
 8003ee2:	4baf      	ldr	r3, [pc, #700]	; (80041a0 <_dtoa_r+0x320>)
 8003ee4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003ee8:	ea33 0308 	bics.w	r3, r3, r8
 8003eec:	d114      	bne.n	8003f18 <_dtoa_r+0x98>
 8003eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ef0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	b923      	cbnz	r3, 8003f04 <_dtoa_r+0x84>
 8003efa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f000 8542 	beq.w	8004988 <_dtoa_r+0xb08>
 8003f04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80041b4 <_dtoa_r+0x334>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8544 	beq.w	8004998 <_dtoa_r+0xb18>
 8003f10:	f10b 0303 	add.w	r3, fp, #3
 8003f14:	f000 bd3e 	b.w	8004994 <_dtoa_r+0xb14>
 8003f18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fe20 	bl	8000b68 <__aeabi_dcmpeq>
 8003f28:	4681      	mov	r9, r0
 8003f2a:	b168      	cbz	r0, 8003f48 <_dtoa_r+0xc8>
 8003f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8524 	beq.w	8004982 <_dtoa_r+0xb02>
 8003f3a:	4b9a      	ldr	r3, [pc, #616]	; (80041a4 <_dtoa_r+0x324>)
 8003f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f3e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	f000 bd28 	b.w	8004998 <_dtoa_r+0xb18>
 8003f48:	aa14      	add	r2, sp, #80	; 0x50
 8003f4a:	a915      	add	r1, sp, #84	; 0x54
 8003f4c:	ec47 6b10 	vmov	d0, r6, r7
 8003f50:	4620      	mov	r0, r4
 8003f52:	f001 fcad 	bl	80058b0 <__d2b>
 8003f56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003f5a:	9004      	str	r0, [sp, #16]
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	d07c      	beq.n	800405a <_dtoa_r+0x1da>
 8003f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003f68:	46b2      	mov	sl, r6
 8003f6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003f76:	2200      	movs	r2, #0
 8003f78:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <_dtoa_r+0x328>)
 8003f7a:	4650      	mov	r0, sl
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	f7fc f9d3 	bl	8000328 <__aeabi_dsub>
 8003f82:	a381      	add	r3, pc, #516	; (adr r3, 8004188 <_dtoa_r+0x308>)
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f7fc fb86 	bl	8000698 <__aeabi_dmul>
 8003f8c:	a380      	add	r3, pc, #512	; (adr r3, 8004190 <_dtoa_r+0x310>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc f9cb 	bl	800032c <__adddf3>
 8003f96:	4606      	mov	r6, r0
 8003f98:	4628      	mov	r0, r5
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	f7fc fb12 	bl	80005c4 <__aeabi_i2d>
 8003fa0:	a37d      	add	r3, pc, #500	; (adr r3, 8004198 <_dtoa_r+0x318>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fb77 	bl	8000698 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4630      	mov	r0, r6
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	f7fc f9bb 	bl	800032c <__adddf3>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	460f      	mov	r7, r1
 8003fba:	f7fc fe1d 	bl	8000bf8 <__aeabi_d2iz>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f7fc fdd8 	bl	8000b7c <__aeabi_dcmplt>
 8003fcc:	b148      	cbz	r0, 8003fe2 <_dtoa_r+0x162>
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f7fc faf8 	bl	80005c4 <__aeabi_i2d>
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	f7fc fdc6 	bl	8000b68 <__aeabi_dcmpeq>
 8003fdc:	b908      	cbnz	r0, 8003fe2 <_dtoa_r+0x162>
 8003fde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003fe2:	f1ba 0f16 	cmp.w	sl, #22
 8003fe6:	d859      	bhi.n	800409c <_dtoa_r+0x21c>
 8003fe8:	4970      	ldr	r1, [pc, #448]	; (80041ac <_dtoa_r+0x32c>)
 8003fea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ff6:	f7fc fddf 	bl	8000bb8 <__aeabi_dcmpgt>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d050      	beq.n	80040a0 <_dtoa_r+0x220>
 8003ffe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004002:	2300      	movs	r3, #0
 8004004:	930f      	str	r3, [sp, #60]	; 0x3c
 8004006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004008:	1b5d      	subs	r5, r3, r5
 800400a:	f1b5 0801 	subs.w	r8, r5, #1
 800400e:	bf49      	itett	mi
 8004010:	f1c5 0301 	rsbmi	r3, r5, #1
 8004014:	2300      	movpl	r3, #0
 8004016:	9305      	strmi	r3, [sp, #20]
 8004018:	f04f 0800 	movmi.w	r8, #0
 800401c:	bf58      	it	pl
 800401e:	9305      	strpl	r3, [sp, #20]
 8004020:	f1ba 0f00 	cmp.w	sl, #0
 8004024:	db3e      	blt.n	80040a4 <_dtoa_r+0x224>
 8004026:	2300      	movs	r3, #0
 8004028:	44d0      	add	r8, sl
 800402a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800402e:	9307      	str	r3, [sp, #28]
 8004030:	9b06      	ldr	r3, [sp, #24]
 8004032:	2b09      	cmp	r3, #9
 8004034:	f200 8090 	bhi.w	8004158 <_dtoa_r+0x2d8>
 8004038:	2b05      	cmp	r3, #5
 800403a:	bfc4      	itt	gt
 800403c:	3b04      	subgt	r3, #4
 800403e:	9306      	strgt	r3, [sp, #24]
 8004040:	9b06      	ldr	r3, [sp, #24]
 8004042:	f1a3 0302 	sub.w	r3, r3, #2
 8004046:	bfcc      	ite	gt
 8004048:	2500      	movgt	r5, #0
 800404a:	2501      	movle	r5, #1
 800404c:	2b03      	cmp	r3, #3
 800404e:	f200 808f 	bhi.w	8004170 <_dtoa_r+0x2f0>
 8004052:	e8df f003 	tbb	[pc, r3]
 8004056:	7f7d      	.short	0x7f7d
 8004058:	7131      	.short	0x7131
 800405a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800405e:	441d      	add	r5, r3
 8004060:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004064:	2820      	cmp	r0, #32
 8004066:	dd13      	ble.n	8004090 <_dtoa_r+0x210>
 8004068:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800406c:	9b00      	ldr	r3, [sp, #0]
 800406e:	fa08 f800 	lsl.w	r8, r8, r0
 8004072:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004076:	fa23 f000 	lsr.w	r0, r3, r0
 800407a:	ea48 0000 	orr.w	r0, r8, r0
 800407e:	f7fc fa91 	bl	80005a4 <__aeabi_ui2d>
 8004082:	2301      	movs	r3, #1
 8004084:	4682      	mov	sl, r0
 8004086:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800408a:	3d01      	subs	r5, #1
 800408c:	9313      	str	r3, [sp, #76]	; 0x4c
 800408e:	e772      	b.n	8003f76 <_dtoa_r+0xf6>
 8004090:	9b00      	ldr	r3, [sp, #0]
 8004092:	f1c0 0020 	rsb	r0, r0, #32
 8004096:	fa03 f000 	lsl.w	r0, r3, r0
 800409a:	e7f0      	b.n	800407e <_dtoa_r+0x1fe>
 800409c:	2301      	movs	r3, #1
 800409e:	e7b1      	b.n	8004004 <_dtoa_r+0x184>
 80040a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80040a2:	e7b0      	b.n	8004006 <_dtoa_r+0x186>
 80040a4:	9b05      	ldr	r3, [sp, #20]
 80040a6:	eba3 030a 	sub.w	r3, r3, sl
 80040aa:	9305      	str	r3, [sp, #20]
 80040ac:	f1ca 0300 	rsb	r3, sl, #0
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	2300      	movs	r3, #0
 80040b4:	930e      	str	r3, [sp, #56]	; 0x38
 80040b6:	e7bb      	b.n	8004030 <_dtoa_r+0x1b0>
 80040b8:	2301      	movs	r3, #1
 80040ba:	930a      	str	r3, [sp, #40]	; 0x28
 80040bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	dd59      	ble.n	8004176 <_dtoa_r+0x2f6>
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	4699      	mov	r9, r3
 80040c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040c8:	2200      	movs	r2, #0
 80040ca:	6072      	str	r2, [r6, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	f102 0014 	add.w	r0, r2, #20
 80040d2:	4298      	cmp	r0, r3
 80040d4:	6871      	ldr	r1, [r6, #4]
 80040d6:	d953      	bls.n	8004180 <_dtoa_r+0x300>
 80040d8:	4620      	mov	r0, r4
 80040da:	f001 f8a7 	bl	800522c <_Balloc>
 80040de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	f1b9 0f0e 	cmp.w	r9, #14
 80040e6:	f8d3 b000 	ldr.w	fp, [r3]
 80040ea:	f200 80e6 	bhi.w	80042ba <_dtoa_r+0x43a>
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f000 80e3 	beq.w	80042ba <_dtoa_r+0x43a>
 80040f4:	ed9d 7b00 	vldr	d7, [sp]
 80040f8:	f1ba 0f00 	cmp.w	sl, #0
 80040fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004100:	dd74      	ble.n	80041ec <_dtoa_r+0x36c>
 8004102:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <_dtoa_r+0x32c>)
 8004104:	f00a 030f 	and.w	r3, sl, #15
 8004108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800410c:	ed93 7b00 	vldr	d7, [r3]
 8004110:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004114:	06f0      	lsls	r0, r6, #27
 8004116:	ed8d 7b08 	vstr	d7, [sp, #32]
 800411a:	d565      	bpl.n	80041e8 <_dtoa_r+0x368>
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <_dtoa_r+0x330>)
 800411e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004122:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004126:	f7fc fbe1 	bl	80008ec <__aeabi_ddiv>
 800412a:	e9cd 0100 	strd	r0, r1, [sp]
 800412e:	f006 060f 	and.w	r6, r6, #15
 8004132:	2503      	movs	r5, #3
 8004134:	4f1e      	ldr	r7, [pc, #120]	; (80041b0 <_dtoa_r+0x330>)
 8004136:	e04c      	b.n	80041d2 <_dtoa_r+0x352>
 8004138:	2301      	movs	r3, #1
 800413a:	930a      	str	r3, [sp, #40]	; 0x28
 800413c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800413e:	4453      	add	r3, sl
 8004140:	f103 0901 	add.w	r9, r3, #1
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	464b      	mov	r3, r9
 8004148:	2b01      	cmp	r3, #1
 800414a:	bfb8      	it	lt
 800414c:	2301      	movlt	r3, #1
 800414e:	e7ba      	b.n	80040c6 <_dtoa_r+0x246>
 8004150:	2300      	movs	r3, #0
 8004152:	e7b2      	b.n	80040ba <_dtoa_r+0x23a>
 8004154:	2300      	movs	r3, #0
 8004156:	e7f0      	b.n	800413a <_dtoa_r+0x2ba>
 8004158:	2501      	movs	r5, #1
 800415a:	2300      	movs	r3, #0
 800415c:	9306      	str	r3, [sp, #24]
 800415e:	950a      	str	r5, [sp, #40]	; 0x28
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	9302      	str	r3, [sp, #8]
 8004166:	4699      	mov	r9, r3
 8004168:	2200      	movs	r2, #0
 800416a:	2312      	movs	r3, #18
 800416c:	920b      	str	r2, [sp, #44]	; 0x2c
 800416e:	e7aa      	b.n	80040c6 <_dtoa_r+0x246>
 8004170:	2301      	movs	r3, #1
 8004172:	930a      	str	r3, [sp, #40]	; 0x28
 8004174:	e7f4      	b.n	8004160 <_dtoa_r+0x2e0>
 8004176:	2301      	movs	r3, #1
 8004178:	9302      	str	r3, [sp, #8]
 800417a:	4699      	mov	r9, r3
 800417c:	461a      	mov	r2, r3
 800417e:	e7f5      	b.n	800416c <_dtoa_r+0x2ec>
 8004180:	3101      	adds	r1, #1
 8004182:	6071      	str	r1, [r6, #4]
 8004184:	0052      	lsls	r2, r2, #1
 8004186:	e7a2      	b.n	80040ce <_dtoa_r+0x24e>
 8004188:	636f4361 	.word	0x636f4361
 800418c:	3fd287a7 	.word	0x3fd287a7
 8004190:	8b60c8b3 	.word	0x8b60c8b3
 8004194:	3fc68a28 	.word	0x3fc68a28
 8004198:	509f79fb 	.word	0x509f79fb
 800419c:	3fd34413 	.word	0x3fd34413
 80041a0:	7ff00000 	.word	0x7ff00000
 80041a4:	080068b1 	.word	0x080068b1
 80041a8:	3ff80000 	.word	0x3ff80000
 80041ac:	080069d8 	.word	0x080069d8
 80041b0:	080069b0 	.word	0x080069b0
 80041b4:	08006939 	.word	0x08006939
 80041b8:	07f1      	lsls	r1, r6, #31
 80041ba:	d508      	bpl.n	80041ce <_dtoa_r+0x34e>
 80041bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c4:	f7fc fa68 	bl	8000698 <__aeabi_dmul>
 80041c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041cc:	3501      	adds	r5, #1
 80041ce:	1076      	asrs	r6, r6, #1
 80041d0:	3708      	adds	r7, #8
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d1f0      	bne.n	80041b8 <_dtoa_r+0x338>
 80041d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041de:	f7fc fb85 	bl	80008ec <__aeabi_ddiv>
 80041e2:	e9cd 0100 	strd	r0, r1, [sp]
 80041e6:	e01a      	b.n	800421e <_dtoa_r+0x39e>
 80041e8:	2502      	movs	r5, #2
 80041ea:	e7a3      	b.n	8004134 <_dtoa_r+0x2b4>
 80041ec:	f000 80a0 	beq.w	8004330 <_dtoa_r+0x4b0>
 80041f0:	f1ca 0600 	rsb	r6, sl, #0
 80041f4:	4b9f      	ldr	r3, [pc, #636]	; (8004474 <_dtoa_r+0x5f4>)
 80041f6:	4fa0      	ldr	r7, [pc, #640]	; (8004478 <_dtoa_r+0x5f8>)
 80041f8:	f006 020f 	and.w	r2, r6, #15
 80041fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004208:	f7fc fa46 	bl	8000698 <__aeabi_dmul>
 800420c:	e9cd 0100 	strd	r0, r1, [sp]
 8004210:	1136      	asrs	r6, r6, #4
 8004212:	2300      	movs	r3, #0
 8004214:	2502      	movs	r5, #2
 8004216:	2e00      	cmp	r6, #0
 8004218:	d17f      	bne.n	800431a <_dtoa_r+0x49a>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e1      	bne.n	80041e2 <_dtoa_r+0x362>
 800421e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8087 	beq.w	8004334 <_dtoa_r+0x4b4>
 8004226:	e9dd 6700 	ldrd	r6, r7, [sp]
 800422a:	2200      	movs	r2, #0
 800422c:	4b93      	ldr	r3, [pc, #588]	; (800447c <_dtoa_r+0x5fc>)
 800422e:	4630      	mov	r0, r6
 8004230:	4639      	mov	r1, r7
 8004232:	f7fc fca3 	bl	8000b7c <__aeabi_dcmplt>
 8004236:	2800      	cmp	r0, #0
 8004238:	d07c      	beq.n	8004334 <_dtoa_r+0x4b4>
 800423a:	f1b9 0f00 	cmp.w	r9, #0
 800423e:	d079      	beq.n	8004334 <_dtoa_r+0x4b4>
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	dd35      	ble.n	80042b2 <_dtoa_r+0x432>
 8004246:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800424a:	9308      	str	r3, [sp, #32]
 800424c:	4639      	mov	r1, r7
 800424e:	2200      	movs	r2, #0
 8004250:	4b8b      	ldr	r3, [pc, #556]	; (8004480 <_dtoa_r+0x600>)
 8004252:	4630      	mov	r0, r6
 8004254:	f7fc fa20 	bl	8000698 <__aeabi_dmul>
 8004258:	e9cd 0100 	strd	r0, r1, [sp]
 800425c:	9f02      	ldr	r7, [sp, #8]
 800425e:	3501      	adds	r5, #1
 8004260:	4628      	mov	r0, r5
 8004262:	f7fc f9af 	bl	80005c4 <__aeabi_i2d>
 8004266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800426a:	f7fc fa15 	bl	8000698 <__aeabi_dmul>
 800426e:	2200      	movs	r2, #0
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <_dtoa_r+0x604>)
 8004272:	f7fc f85b 	bl	800032c <__adddf3>
 8004276:	4605      	mov	r5, r0
 8004278:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800427c:	2f00      	cmp	r7, #0
 800427e:	d15d      	bne.n	800433c <_dtoa_r+0x4bc>
 8004280:	2200      	movs	r2, #0
 8004282:	4b81      	ldr	r3, [pc, #516]	; (8004488 <_dtoa_r+0x608>)
 8004284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004288:	f7fc f84e 	bl	8000328 <__aeabi_dsub>
 800428c:	462a      	mov	r2, r5
 800428e:	4633      	mov	r3, r6
 8004290:	e9cd 0100 	strd	r0, r1, [sp]
 8004294:	f7fc fc90 	bl	8000bb8 <__aeabi_dcmpgt>
 8004298:	2800      	cmp	r0, #0
 800429a:	f040 8288 	bne.w	80047ae <_dtoa_r+0x92e>
 800429e:	462a      	mov	r2, r5
 80042a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80042a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a8:	f7fc fc68 	bl	8000b7c <__aeabi_dcmplt>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f040 827c 	bne.w	80047aa <_dtoa_r+0x92a>
 80042b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042b6:	e9cd 2300 	strd	r2, r3, [sp]
 80042ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f2c0 8150 	blt.w	8004562 <_dtoa_r+0x6e2>
 80042c2:	f1ba 0f0e 	cmp.w	sl, #14
 80042c6:	f300 814c 	bgt.w	8004562 <_dtoa_r+0x6e2>
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <_dtoa_r+0x5f4>)
 80042cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042d0:	ed93 7b00 	vldr	d7, [r3]
 80042d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80042dc:	f280 80d8 	bge.w	8004490 <_dtoa_r+0x610>
 80042e0:	f1b9 0f00 	cmp.w	r9, #0
 80042e4:	f300 80d4 	bgt.w	8004490 <_dtoa_r+0x610>
 80042e8:	f040 825e 	bne.w	80047a8 <_dtoa_r+0x928>
 80042ec:	2200      	movs	r2, #0
 80042ee:	4b66      	ldr	r3, [pc, #408]	; (8004488 <_dtoa_r+0x608>)
 80042f0:	ec51 0b17 	vmov	r0, r1, d7
 80042f4:	f7fc f9d0 	bl	8000698 <__aeabi_dmul>
 80042f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042fc:	f7fc fc52 	bl	8000ba4 <__aeabi_dcmpge>
 8004300:	464f      	mov	r7, r9
 8004302:	464e      	mov	r6, r9
 8004304:	2800      	cmp	r0, #0
 8004306:	f040 8234 	bne.w	8004772 <_dtoa_r+0x8f2>
 800430a:	2331      	movs	r3, #49	; 0x31
 800430c:	f10b 0501 	add.w	r5, fp, #1
 8004310:	f88b 3000 	strb.w	r3, [fp]
 8004314:	f10a 0a01 	add.w	sl, sl, #1
 8004318:	e22f      	b.n	800477a <_dtoa_r+0x8fa>
 800431a:	07f2      	lsls	r2, r6, #31
 800431c:	d505      	bpl.n	800432a <_dtoa_r+0x4aa>
 800431e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004322:	f7fc f9b9 	bl	8000698 <__aeabi_dmul>
 8004326:	3501      	adds	r5, #1
 8004328:	2301      	movs	r3, #1
 800432a:	1076      	asrs	r6, r6, #1
 800432c:	3708      	adds	r7, #8
 800432e:	e772      	b.n	8004216 <_dtoa_r+0x396>
 8004330:	2502      	movs	r5, #2
 8004332:	e774      	b.n	800421e <_dtoa_r+0x39e>
 8004334:	f8cd a020 	str.w	sl, [sp, #32]
 8004338:	464f      	mov	r7, r9
 800433a:	e791      	b.n	8004260 <_dtoa_r+0x3e0>
 800433c:	4b4d      	ldr	r3, [pc, #308]	; (8004474 <_dtoa_r+0x5f4>)
 800433e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004342:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d047      	beq.n	80043dc <_dtoa_r+0x55c>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	2000      	movs	r0, #0
 8004352:	494e      	ldr	r1, [pc, #312]	; (800448c <_dtoa_r+0x60c>)
 8004354:	f7fc faca 	bl	80008ec <__aeabi_ddiv>
 8004358:	462a      	mov	r2, r5
 800435a:	4633      	mov	r3, r6
 800435c:	f7fb ffe4 	bl	8000328 <__aeabi_dsub>
 8004360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004364:	465d      	mov	r5, fp
 8004366:	e9dd 0100 	ldrd	r0, r1, [sp]
 800436a:	f7fc fc45 	bl	8000bf8 <__aeabi_d2iz>
 800436e:	4606      	mov	r6, r0
 8004370:	f7fc f928 	bl	80005c4 <__aeabi_i2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800437c:	f7fb ffd4 	bl	8000328 <__aeabi_dsub>
 8004380:	3630      	adds	r6, #48	; 0x30
 8004382:	f805 6b01 	strb.w	r6, [r5], #1
 8004386:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800438a:	e9cd 0100 	strd	r0, r1, [sp]
 800438e:	f7fc fbf5 	bl	8000b7c <__aeabi_dcmplt>
 8004392:	2800      	cmp	r0, #0
 8004394:	d163      	bne.n	800445e <_dtoa_r+0x5de>
 8004396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800439a:	2000      	movs	r0, #0
 800439c:	4937      	ldr	r1, [pc, #220]	; (800447c <_dtoa_r+0x5fc>)
 800439e:	f7fb ffc3 	bl	8000328 <__aeabi_dsub>
 80043a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043a6:	f7fc fbe9 	bl	8000b7c <__aeabi_dcmplt>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f040 80b7 	bne.w	800451e <_dtoa_r+0x69e>
 80043b0:	eba5 030b 	sub.w	r3, r5, fp
 80043b4:	429f      	cmp	r7, r3
 80043b6:	f77f af7c 	ble.w	80042b2 <_dtoa_r+0x432>
 80043ba:	2200      	movs	r2, #0
 80043bc:	4b30      	ldr	r3, [pc, #192]	; (8004480 <_dtoa_r+0x600>)
 80043be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043c2:	f7fc f969 	bl	8000698 <__aeabi_dmul>
 80043c6:	2200      	movs	r2, #0
 80043c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80043cc:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <_dtoa_r+0x600>)
 80043ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043d2:	f7fc f961 	bl	8000698 <__aeabi_dmul>
 80043d6:	e9cd 0100 	strd	r0, r1, [sp]
 80043da:	e7c4      	b.n	8004366 <_dtoa_r+0x4e6>
 80043dc:	462a      	mov	r2, r5
 80043de:	4633      	mov	r3, r6
 80043e0:	f7fc f95a 	bl	8000698 <__aeabi_dmul>
 80043e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80043e8:	eb0b 0507 	add.w	r5, fp, r7
 80043ec:	465e      	mov	r6, fp
 80043ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043f2:	f7fc fc01 	bl	8000bf8 <__aeabi_d2iz>
 80043f6:	4607      	mov	r7, r0
 80043f8:	f7fc f8e4 	bl	80005c4 <__aeabi_i2d>
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004406:	f7fb ff8f 	bl	8000328 <__aeabi_dsub>
 800440a:	f806 7b01 	strb.w	r7, [r6], #1
 800440e:	42ae      	cmp	r6, r5
 8004410:	e9cd 0100 	strd	r0, r1, [sp]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	d126      	bne.n	8004468 <_dtoa_r+0x5e8>
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <_dtoa_r+0x60c>)
 800441c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004420:	f7fb ff84 	bl	800032c <__adddf3>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800442c:	f7fc fbc4 	bl	8000bb8 <__aeabi_dcmpgt>
 8004430:	2800      	cmp	r0, #0
 8004432:	d174      	bne.n	800451e <_dtoa_r+0x69e>
 8004434:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004438:	2000      	movs	r0, #0
 800443a:	4914      	ldr	r1, [pc, #80]	; (800448c <_dtoa_r+0x60c>)
 800443c:	f7fb ff74 	bl	8000328 <__aeabi_dsub>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004448:	f7fc fb98 	bl	8000b7c <__aeabi_dcmplt>
 800444c:	2800      	cmp	r0, #0
 800444e:	f43f af30 	beq.w	80042b2 <_dtoa_r+0x432>
 8004452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004456:	2b30      	cmp	r3, #48	; 0x30
 8004458:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800445c:	d002      	beq.n	8004464 <_dtoa_r+0x5e4>
 800445e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004462:	e04a      	b.n	80044fa <_dtoa_r+0x67a>
 8004464:	4615      	mov	r5, r2
 8004466:	e7f4      	b.n	8004452 <_dtoa_r+0x5d2>
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <_dtoa_r+0x600>)
 800446a:	f7fc f915 	bl	8000698 <__aeabi_dmul>
 800446e:	e9cd 0100 	strd	r0, r1, [sp]
 8004472:	e7bc      	b.n	80043ee <_dtoa_r+0x56e>
 8004474:	080069d8 	.word	0x080069d8
 8004478:	080069b0 	.word	0x080069b0
 800447c:	3ff00000 	.word	0x3ff00000
 8004480:	40240000 	.word	0x40240000
 8004484:	401c0000 	.word	0x401c0000
 8004488:	40140000 	.word	0x40140000
 800448c:	3fe00000 	.word	0x3fe00000
 8004490:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004494:	465d      	mov	r5, fp
 8004496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800449a:	4630      	mov	r0, r6
 800449c:	4639      	mov	r1, r7
 800449e:	f7fc fa25 	bl	80008ec <__aeabi_ddiv>
 80044a2:	f7fc fba9 	bl	8000bf8 <__aeabi_d2iz>
 80044a6:	4680      	mov	r8, r0
 80044a8:	f7fc f88c 	bl	80005c4 <__aeabi_i2d>
 80044ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044b0:	f7fc f8f2 	bl	8000698 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80044c0:	f7fb ff32 	bl	8000328 <__aeabi_dsub>
 80044c4:	f805 6b01 	strb.w	r6, [r5], #1
 80044c8:	eba5 060b 	sub.w	r6, r5, fp
 80044cc:	45b1      	cmp	r9, r6
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	d139      	bne.n	8004548 <_dtoa_r+0x6c8>
 80044d4:	f7fb ff2a 	bl	800032c <__adddf3>
 80044d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	f7fc fb6a 	bl	8000bb8 <__aeabi_dcmpgt>
 80044e4:	b9c8      	cbnz	r0, 800451a <_dtoa_r+0x69a>
 80044e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044ea:	4630      	mov	r0, r6
 80044ec:	4639      	mov	r1, r7
 80044ee:	f7fc fb3b 	bl	8000b68 <__aeabi_dcmpeq>
 80044f2:	b110      	cbz	r0, 80044fa <_dtoa_r+0x67a>
 80044f4:	f018 0f01 	tst.w	r8, #1
 80044f8:	d10f      	bne.n	800451a <_dtoa_r+0x69a>
 80044fa:	9904      	ldr	r1, [sp, #16]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 fec9 	bl	8005294 <_Bfree>
 8004502:	2300      	movs	r3, #0
 8004504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004506:	702b      	strb	r3, [r5, #0]
 8004508:	f10a 0301 	add.w	r3, sl, #1
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8241 	beq.w	8004998 <_dtoa_r+0xb18>
 8004516:	601d      	str	r5, [r3, #0]
 8004518:	e23e      	b.n	8004998 <_dtoa_r+0xb18>
 800451a:	f8cd a020 	str.w	sl, [sp, #32]
 800451e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004522:	2a39      	cmp	r2, #57	; 0x39
 8004524:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8004528:	d108      	bne.n	800453c <_dtoa_r+0x6bc>
 800452a:	459b      	cmp	fp, r3
 800452c:	d10a      	bne.n	8004544 <_dtoa_r+0x6c4>
 800452e:	9b08      	ldr	r3, [sp, #32]
 8004530:	3301      	adds	r3, #1
 8004532:	9308      	str	r3, [sp, #32]
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	f88b 3000 	strb.w	r3, [fp]
 800453a:	465b      	mov	r3, fp
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	3201      	adds	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e78c      	b.n	800445e <_dtoa_r+0x5de>
 8004544:	461d      	mov	r5, r3
 8004546:	e7ea      	b.n	800451e <_dtoa_r+0x69e>
 8004548:	2200      	movs	r2, #0
 800454a:	4b9b      	ldr	r3, [pc, #620]	; (80047b8 <_dtoa_r+0x938>)
 800454c:	f7fc f8a4 	bl	8000698 <__aeabi_dmul>
 8004550:	2200      	movs	r2, #0
 8004552:	2300      	movs	r3, #0
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	f7fc fb06 	bl	8000b68 <__aeabi_dcmpeq>
 800455c:	2800      	cmp	r0, #0
 800455e:	d09a      	beq.n	8004496 <_dtoa_r+0x616>
 8004560:	e7cb      	b.n	80044fa <_dtoa_r+0x67a>
 8004562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004564:	2a00      	cmp	r2, #0
 8004566:	f000 808b 	beq.w	8004680 <_dtoa_r+0x800>
 800456a:	9a06      	ldr	r2, [sp, #24]
 800456c:	2a01      	cmp	r2, #1
 800456e:	dc6e      	bgt.n	800464e <_dtoa_r+0x7ce>
 8004570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004572:	2a00      	cmp	r2, #0
 8004574:	d067      	beq.n	8004646 <_dtoa_r+0x7c6>
 8004576:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800457a:	9f07      	ldr	r7, [sp, #28]
 800457c:	9d05      	ldr	r5, [sp, #20]
 800457e:	9a05      	ldr	r2, [sp, #20]
 8004580:	2101      	movs	r1, #1
 8004582:	441a      	add	r2, r3
 8004584:	4620      	mov	r0, r4
 8004586:	9205      	str	r2, [sp, #20]
 8004588:	4498      	add	r8, r3
 800458a:	f000 ff61 	bl	8005450 <__i2b>
 800458e:	4606      	mov	r6, r0
 8004590:	2d00      	cmp	r5, #0
 8004592:	dd0c      	ble.n	80045ae <_dtoa_r+0x72e>
 8004594:	f1b8 0f00 	cmp.w	r8, #0
 8004598:	dd09      	ble.n	80045ae <_dtoa_r+0x72e>
 800459a:	4545      	cmp	r5, r8
 800459c:	9a05      	ldr	r2, [sp, #20]
 800459e:	462b      	mov	r3, r5
 80045a0:	bfa8      	it	ge
 80045a2:	4643      	movge	r3, r8
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	9205      	str	r2, [sp, #20]
 80045a8:	1aed      	subs	r5, r5, r3
 80045aa:	eba8 0803 	sub.w	r8, r8, r3
 80045ae:	9b07      	ldr	r3, [sp, #28]
 80045b0:	b1eb      	cbz	r3, 80045ee <_dtoa_r+0x76e>
 80045b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d067      	beq.n	8004688 <_dtoa_r+0x808>
 80045b8:	b18f      	cbz	r7, 80045de <_dtoa_r+0x75e>
 80045ba:	4631      	mov	r1, r6
 80045bc:	463a      	mov	r2, r7
 80045be:	4620      	mov	r0, r4
 80045c0:	f000 ffe6 	bl	8005590 <__pow5mult>
 80045c4:	9a04      	ldr	r2, [sp, #16]
 80045c6:	4601      	mov	r1, r0
 80045c8:	4606      	mov	r6, r0
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 ff49 	bl	8005462 <__multiply>
 80045d0:	9904      	ldr	r1, [sp, #16]
 80045d2:	9008      	str	r0, [sp, #32]
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 fe5d 	bl	8005294 <_Bfree>
 80045da:	9b08      	ldr	r3, [sp, #32]
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	9b07      	ldr	r3, [sp, #28]
 80045e0:	1bda      	subs	r2, r3, r7
 80045e2:	d004      	beq.n	80045ee <_dtoa_r+0x76e>
 80045e4:	9904      	ldr	r1, [sp, #16]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 ffd2 	bl	8005590 <__pow5mult>
 80045ec:	9004      	str	r0, [sp, #16]
 80045ee:	2101      	movs	r1, #1
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 ff2d 	bl	8005450 <__i2b>
 80045f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045f8:	4607      	mov	r7, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 81d0 	beq.w	80049a0 <_dtoa_r+0xb20>
 8004600:	461a      	mov	r2, r3
 8004602:	4601      	mov	r1, r0
 8004604:	4620      	mov	r0, r4
 8004606:	f000 ffc3 	bl	8005590 <__pow5mult>
 800460a:	9b06      	ldr	r3, [sp, #24]
 800460c:	2b01      	cmp	r3, #1
 800460e:	4607      	mov	r7, r0
 8004610:	dc40      	bgt.n	8004694 <_dtoa_r+0x814>
 8004612:	9b00      	ldr	r3, [sp, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d139      	bne.n	800468c <_dtoa_r+0x80c>
 8004618:	9b01      	ldr	r3, [sp, #4]
 800461a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461e:	2b00      	cmp	r3, #0
 8004620:	d136      	bne.n	8004690 <_dtoa_r+0x810>
 8004622:	9b01      	ldr	r3, [sp, #4]
 8004624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004628:	0d1b      	lsrs	r3, r3, #20
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	b12b      	cbz	r3, 800463a <_dtoa_r+0x7ba>
 800462e:	9b05      	ldr	r3, [sp, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	9305      	str	r3, [sp, #20]
 8004634:	f108 0801 	add.w	r8, r8, #1
 8004638:	2301      	movs	r3, #1
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463e:	2b00      	cmp	r3, #0
 8004640:	d12a      	bne.n	8004698 <_dtoa_r+0x818>
 8004642:	2001      	movs	r0, #1
 8004644:	e030      	b.n	80046a8 <_dtoa_r+0x828>
 8004646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004648:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800464c:	e795      	b.n	800457a <_dtoa_r+0x6fa>
 800464e:	9b07      	ldr	r3, [sp, #28]
 8004650:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8004654:	42bb      	cmp	r3, r7
 8004656:	bfbf      	itttt	lt
 8004658:	9b07      	ldrlt	r3, [sp, #28]
 800465a:	9707      	strlt	r7, [sp, #28]
 800465c:	1afa      	sublt	r2, r7, r3
 800465e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004660:	bfbb      	ittet	lt
 8004662:	189b      	addlt	r3, r3, r2
 8004664:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004666:	1bdf      	subge	r7, r3, r7
 8004668:	2700      	movlt	r7, #0
 800466a:	f1b9 0f00 	cmp.w	r9, #0
 800466e:	bfb5      	itete	lt
 8004670:	9b05      	ldrlt	r3, [sp, #20]
 8004672:	9d05      	ldrge	r5, [sp, #20]
 8004674:	eba3 0509 	sublt.w	r5, r3, r9
 8004678:	464b      	movge	r3, r9
 800467a:	bfb8      	it	lt
 800467c:	2300      	movlt	r3, #0
 800467e:	e77e      	b.n	800457e <_dtoa_r+0x6fe>
 8004680:	9f07      	ldr	r7, [sp, #28]
 8004682:	9d05      	ldr	r5, [sp, #20]
 8004684:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004686:	e783      	b.n	8004590 <_dtoa_r+0x710>
 8004688:	9a07      	ldr	r2, [sp, #28]
 800468a:	e7ab      	b.n	80045e4 <_dtoa_r+0x764>
 800468c:	2300      	movs	r3, #0
 800468e:	e7d4      	b.n	800463a <_dtoa_r+0x7ba>
 8004690:	9b00      	ldr	r3, [sp, #0]
 8004692:	e7d2      	b.n	800463a <_dtoa_r+0x7ba>
 8004694:	2300      	movs	r3, #0
 8004696:	9307      	str	r3, [sp, #28]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800469e:	6918      	ldr	r0, [r3, #16]
 80046a0:	f000 fe88 	bl	80053b4 <__hi0bits>
 80046a4:	f1c0 0020 	rsb	r0, r0, #32
 80046a8:	4440      	add	r0, r8
 80046aa:	f010 001f 	ands.w	r0, r0, #31
 80046ae:	d047      	beq.n	8004740 <_dtoa_r+0x8c0>
 80046b0:	f1c0 0320 	rsb	r3, r0, #32
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	dd3b      	ble.n	8004730 <_dtoa_r+0x8b0>
 80046b8:	9b05      	ldr	r3, [sp, #20]
 80046ba:	f1c0 001c 	rsb	r0, r0, #28
 80046be:	4403      	add	r3, r0
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	4405      	add	r5, r0
 80046c4:	4480      	add	r8, r0
 80046c6:	9b05      	ldr	r3, [sp, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dd05      	ble.n	80046d8 <_dtoa_r+0x858>
 80046cc:	461a      	mov	r2, r3
 80046ce:	9904      	ldr	r1, [sp, #16]
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 ffab 	bl	800562c <__lshift>
 80046d6:	9004      	str	r0, [sp, #16]
 80046d8:	f1b8 0f00 	cmp.w	r8, #0
 80046dc:	dd05      	ble.n	80046ea <_dtoa_r+0x86a>
 80046de:	4639      	mov	r1, r7
 80046e0:	4642      	mov	r2, r8
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 ffa2 	bl	800562c <__lshift>
 80046e8:	4607      	mov	r7, r0
 80046ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ec:	b353      	cbz	r3, 8004744 <_dtoa_r+0x8c4>
 80046ee:	4639      	mov	r1, r7
 80046f0:	9804      	ldr	r0, [sp, #16]
 80046f2:	f000 ffef 	bl	80056d4 <__mcmp>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	da24      	bge.n	8004744 <_dtoa_r+0x8c4>
 80046fa:	2300      	movs	r3, #0
 80046fc:	220a      	movs	r2, #10
 80046fe:	9904      	ldr	r1, [sp, #16]
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fdde 	bl	80052c2 <__multadd>
 8004706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004708:	9004      	str	r0, [sp, #16]
 800470a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 814d 	beq.w	80049ae <_dtoa_r+0xb2e>
 8004714:	2300      	movs	r3, #0
 8004716:	4631      	mov	r1, r6
 8004718:	220a      	movs	r2, #10
 800471a:	4620      	mov	r0, r4
 800471c:	f000 fdd1 	bl	80052c2 <__multadd>
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	4606      	mov	r6, r0
 8004726:	dc4f      	bgt.n	80047c8 <_dtoa_r+0x948>
 8004728:	9b06      	ldr	r3, [sp, #24]
 800472a:	2b02      	cmp	r3, #2
 800472c:	dd4c      	ble.n	80047c8 <_dtoa_r+0x948>
 800472e:	e011      	b.n	8004754 <_dtoa_r+0x8d4>
 8004730:	d0c9      	beq.n	80046c6 <_dtoa_r+0x846>
 8004732:	9a05      	ldr	r2, [sp, #20]
 8004734:	331c      	adds	r3, #28
 8004736:	441a      	add	r2, r3
 8004738:	9205      	str	r2, [sp, #20]
 800473a:	441d      	add	r5, r3
 800473c:	4498      	add	r8, r3
 800473e:	e7c2      	b.n	80046c6 <_dtoa_r+0x846>
 8004740:	4603      	mov	r3, r0
 8004742:	e7f6      	b.n	8004732 <_dtoa_r+0x8b2>
 8004744:	f1b9 0f00 	cmp.w	r9, #0
 8004748:	dc38      	bgt.n	80047bc <_dtoa_r+0x93c>
 800474a:	9b06      	ldr	r3, [sp, #24]
 800474c:	2b02      	cmp	r3, #2
 800474e:	dd35      	ble.n	80047bc <_dtoa_r+0x93c>
 8004750:	f8cd 9008 	str.w	r9, [sp, #8]
 8004754:	9b02      	ldr	r3, [sp, #8]
 8004756:	b963      	cbnz	r3, 8004772 <_dtoa_r+0x8f2>
 8004758:	4639      	mov	r1, r7
 800475a:	2205      	movs	r2, #5
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fdb0 	bl	80052c2 <__multadd>
 8004762:	4601      	mov	r1, r0
 8004764:	4607      	mov	r7, r0
 8004766:	9804      	ldr	r0, [sp, #16]
 8004768:	f000 ffb4 	bl	80056d4 <__mcmp>
 800476c:	2800      	cmp	r0, #0
 800476e:	f73f adcc 	bgt.w	800430a <_dtoa_r+0x48a>
 8004772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004774:	465d      	mov	r5, fp
 8004776:	ea6f 0a03 	mvn.w	sl, r3
 800477a:	f04f 0900 	mov.w	r9, #0
 800477e:	4639      	mov	r1, r7
 8004780:	4620      	mov	r0, r4
 8004782:	f000 fd87 	bl	8005294 <_Bfree>
 8004786:	2e00      	cmp	r6, #0
 8004788:	f43f aeb7 	beq.w	80044fa <_dtoa_r+0x67a>
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	d005      	beq.n	800479e <_dtoa_r+0x91e>
 8004792:	45b1      	cmp	r9, r6
 8004794:	d003      	beq.n	800479e <_dtoa_r+0x91e>
 8004796:	4649      	mov	r1, r9
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fd7b 	bl	8005294 <_Bfree>
 800479e:	4631      	mov	r1, r6
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fd77 	bl	8005294 <_Bfree>
 80047a6:	e6a8      	b.n	80044fa <_dtoa_r+0x67a>
 80047a8:	2700      	movs	r7, #0
 80047aa:	463e      	mov	r6, r7
 80047ac:	e7e1      	b.n	8004772 <_dtoa_r+0x8f2>
 80047ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80047b2:	463e      	mov	r6, r7
 80047b4:	e5a9      	b.n	800430a <_dtoa_r+0x48a>
 80047b6:	bf00      	nop
 80047b8:	40240000 	.word	0x40240000
 80047bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047be:	f8cd 9008 	str.w	r9, [sp, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80fa 	beq.w	80049bc <_dtoa_r+0xb3c>
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	dd05      	ble.n	80047d8 <_dtoa_r+0x958>
 80047cc:	4631      	mov	r1, r6
 80047ce:	462a      	mov	r2, r5
 80047d0:	4620      	mov	r0, r4
 80047d2:	f000 ff2b 	bl	800562c <__lshift>
 80047d6:	4606      	mov	r6, r0
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04c      	beq.n	8004878 <_dtoa_r+0x9f8>
 80047de:	6871      	ldr	r1, [r6, #4]
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 fd23 	bl	800522c <_Balloc>
 80047e6:	6932      	ldr	r2, [r6, #16]
 80047e8:	3202      	adds	r2, #2
 80047ea:	4605      	mov	r5, r0
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	f106 010c 	add.w	r1, r6, #12
 80047f2:	300c      	adds	r0, #12
 80047f4:	f7fd fd78 	bl	80022e8 <memcpy>
 80047f8:	2201      	movs	r2, #1
 80047fa:	4629      	mov	r1, r5
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 ff15 	bl	800562c <__lshift>
 8004802:	9b00      	ldr	r3, [sp, #0]
 8004804:	f8cd b014 	str.w	fp, [sp, #20]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	46b1      	mov	r9, r6
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	4606      	mov	r6, r0
 8004812:	4639      	mov	r1, r7
 8004814:	9804      	ldr	r0, [sp, #16]
 8004816:	f7ff faa5 	bl	8003d64 <quorem>
 800481a:	4649      	mov	r1, r9
 800481c:	4605      	mov	r5, r0
 800481e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004822:	9804      	ldr	r0, [sp, #16]
 8004824:	f000 ff56 	bl	80056d4 <__mcmp>
 8004828:	4632      	mov	r2, r6
 800482a:	9000      	str	r0, [sp, #0]
 800482c:	4639      	mov	r1, r7
 800482e:	4620      	mov	r0, r4
 8004830:	f000 ff6a 	bl	8005708 <__mdiff>
 8004834:	68c3      	ldr	r3, [r0, #12]
 8004836:	4602      	mov	r2, r0
 8004838:	bb03      	cbnz	r3, 800487c <_dtoa_r+0x9fc>
 800483a:	4601      	mov	r1, r0
 800483c:	9008      	str	r0, [sp, #32]
 800483e:	9804      	ldr	r0, [sp, #16]
 8004840:	f000 ff48 	bl	80056d4 <__mcmp>
 8004844:	9a08      	ldr	r2, [sp, #32]
 8004846:	4603      	mov	r3, r0
 8004848:	4611      	mov	r1, r2
 800484a:	4620      	mov	r0, r4
 800484c:	9308      	str	r3, [sp, #32]
 800484e:	f000 fd21 	bl	8005294 <_Bfree>
 8004852:	9b08      	ldr	r3, [sp, #32]
 8004854:	b9a3      	cbnz	r3, 8004880 <_dtoa_r+0xa00>
 8004856:	9a06      	ldr	r2, [sp, #24]
 8004858:	b992      	cbnz	r2, 8004880 <_dtoa_r+0xa00>
 800485a:	9a07      	ldr	r2, [sp, #28]
 800485c:	b982      	cbnz	r2, 8004880 <_dtoa_r+0xa00>
 800485e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004862:	d029      	beq.n	80048b8 <_dtoa_r+0xa38>
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	dd01      	ble.n	800486e <_dtoa_r+0x9ee>
 800486a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800486e:	9b05      	ldr	r3, [sp, #20]
 8004870:	1c5d      	adds	r5, r3, #1
 8004872:	f883 8000 	strb.w	r8, [r3]
 8004876:	e782      	b.n	800477e <_dtoa_r+0x8fe>
 8004878:	4630      	mov	r0, r6
 800487a:	e7c2      	b.n	8004802 <_dtoa_r+0x982>
 800487c:	2301      	movs	r3, #1
 800487e:	e7e3      	b.n	8004848 <_dtoa_r+0x9c8>
 8004880:	9a00      	ldr	r2, [sp, #0]
 8004882:	2a00      	cmp	r2, #0
 8004884:	db04      	blt.n	8004890 <_dtoa_r+0xa10>
 8004886:	d125      	bne.n	80048d4 <_dtoa_r+0xa54>
 8004888:	9a06      	ldr	r2, [sp, #24]
 800488a:	bb1a      	cbnz	r2, 80048d4 <_dtoa_r+0xa54>
 800488c:	9a07      	ldr	r2, [sp, #28]
 800488e:	bb0a      	cbnz	r2, 80048d4 <_dtoa_r+0xa54>
 8004890:	2b00      	cmp	r3, #0
 8004892:	ddec      	ble.n	800486e <_dtoa_r+0x9ee>
 8004894:	2201      	movs	r2, #1
 8004896:	9904      	ldr	r1, [sp, #16]
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fec7 	bl	800562c <__lshift>
 800489e:	4639      	mov	r1, r7
 80048a0:	9004      	str	r0, [sp, #16]
 80048a2:	f000 ff17 	bl	80056d4 <__mcmp>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	dc03      	bgt.n	80048b2 <_dtoa_r+0xa32>
 80048aa:	d1e0      	bne.n	800486e <_dtoa_r+0x9ee>
 80048ac:	f018 0f01 	tst.w	r8, #1
 80048b0:	d0dd      	beq.n	800486e <_dtoa_r+0x9ee>
 80048b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048b6:	d1d8      	bne.n	800486a <_dtoa_r+0x9ea>
 80048b8:	9b05      	ldr	r3, [sp, #20]
 80048ba:	9a05      	ldr	r2, [sp, #20]
 80048bc:	1c5d      	adds	r5, r3, #1
 80048be:	2339      	movs	r3, #57	; 0x39
 80048c0:	7013      	strb	r3, [r2, #0]
 80048c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048c6:	2b39      	cmp	r3, #57	; 0x39
 80048c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80048cc:	d04f      	beq.n	800496e <_dtoa_r+0xaee>
 80048ce:	3301      	adds	r3, #1
 80048d0:	7013      	strb	r3, [r2, #0]
 80048d2:	e754      	b.n	800477e <_dtoa_r+0x8fe>
 80048d4:	9a05      	ldr	r2, [sp, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f102 0501 	add.w	r5, r2, #1
 80048dc:	dd06      	ble.n	80048ec <_dtoa_r+0xa6c>
 80048de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048e2:	d0e9      	beq.n	80048b8 <_dtoa_r+0xa38>
 80048e4:	f108 0801 	add.w	r8, r8, #1
 80048e8:	9b05      	ldr	r3, [sp, #20]
 80048ea:	e7c2      	b.n	8004872 <_dtoa_r+0x9f2>
 80048ec:	9a02      	ldr	r2, [sp, #8]
 80048ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80048f2:	eba5 030b 	sub.w	r3, r5, fp
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d021      	beq.n	800493e <_dtoa_r+0xabe>
 80048fa:	2300      	movs	r3, #0
 80048fc:	220a      	movs	r2, #10
 80048fe:	9904      	ldr	r1, [sp, #16]
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fcde 	bl	80052c2 <__multadd>
 8004906:	45b1      	cmp	r9, r6
 8004908:	9004      	str	r0, [sp, #16]
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	f04f 020a 	mov.w	r2, #10
 8004912:	4649      	mov	r1, r9
 8004914:	4620      	mov	r0, r4
 8004916:	d105      	bne.n	8004924 <_dtoa_r+0xaa4>
 8004918:	f000 fcd3 	bl	80052c2 <__multadd>
 800491c:	4681      	mov	r9, r0
 800491e:	4606      	mov	r6, r0
 8004920:	9505      	str	r5, [sp, #20]
 8004922:	e776      	b.n	8004812 <_dtoa_r+0x992>
 8004924:	f000 fccd 	bl	80052c2 <__multadd>
 8004928:	4631      	mov	r1, r6
 800492a:	4681      	mov	r9, r0
 800492c:	2300      	movs	r3, #0
 800492e:	220a      	movs	r2, #10
 8004930:	4620      	mov	r0, r4
 8004932:	f000 fcc6 	bl	80052c2 <__multadd>
 8004936:	4606      	mov	r6, r0
 8004938:	e7f2      	b.n	8004920 <_dtoa_r+0xaa0>
 800493a:	f04f 0900 	mov.w	r9, #0
 800493e:	2201      	movs	r2, #1
 8004940:	9904      	ldr	r1, [sp, #16]
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fe72 	bl	800562c <__lshift>
 8004948:	4639      	mov	r1, r7
 800494a:	9004      	str	r0, [sp, #16]
 800494c:	f000 fec2 	bl	80056d4 <__mcmp>
 8004950:	2800      	cmp	r0, #0
 8004952:	dcb6      	bgt.n	80048c2 <_dtoa_r+0xa42>
 8004954:	d102      	bne.n	800495c <_dtoa_r+0xadc>
 8004956:	f018 0f01 	tst.w	r8, #1
 800495a:	d1b2      	bne.n	80048c2 <_dtoa_r+0xa42>
 800495c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004960:	2b30      	cmp	r3, #48	; 0x30
 8004962:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004966:	f47f af0a 	bne.w	800477e <_dtoa_r+0x8fe>
 800496a:	4615      	mov	r5, r2
 800496c:	e7f6      	b.n	800495c <_dtoa_r+0xadc>
 800496e:	4593      	cmp	fp, r2
 8004970:	d105      	bne.n	800497e <_dtoa_r+0xafe>
 8004972:	2331      	movs	r3, #49	; 0x31
 8004974:	f10a 0a01 	add.w	sl, sl, #1
 8004978:	f88b 3000 	strb.w	r3, [fp]
 800497c:	e6ff      	b.n	800477e <_dtoa_r+0x8fe>
 800497e:	4615      	mov	r5, r2
 8004980:	e79f      	b.n	80048c2 <_dtoa_r+0xa42>
 8004982:	f8df b064 	ldr.w	fp, [pc, #100]	; 80049e8 <_dtoa_r+0xb68>
 8004986:	e007      	b.n	8004998 <_dtoa_r+0xb18>
 8004988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800498a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80049ec <_dtoa_r+0xb6c>
 800498e:	b11b      	cbz	r3, 8004998 <_dtoa_r+0xb18>
 8004990:	f10b 0308 	add.w	r3, fp, #8
 8004994:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4658      	mov	r0, fp
 800499a:	b017      	add	sp, #92	; 0x5c
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	9b06      	ldr	r3, [sp, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	f77f ae35 	ble.w	8004612 <_dtoa_r+0x792>
 80049a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	e649      	b.n	8004642 <_dtoa_r+0x7c2>
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dc03      	bgt.n	80049bc <_dtoa_r+0xb3c>
 80049b4:	9b06      	ldr	r3, [sp, #24]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	f73f aecc 	bgt.w	8004754 <_dtoa_r+0x8d4>
 80049bc:	465d      	mov	r5, fp
 80049be:	4639      	mov	r1, r7
 80049c0:	9804      	ldr	r0, [sp, #16]
 80049c2:	f7ff f9cf 	bl	8003d64 <quorem>
 80049c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80049ca:	f805 8b01 	strb.w	r8, [r5], #1
 80049ce:	9a02      	ldr	r2, [sp, #8]
 80049d0:	eba5 030b 	sub.w	r3, r5, fp
 80049d4:	429a      	cmp	r2, r3
 80049d6:	ddb0      	ble.n	800493a <_dtoa_r+0xaba>
 80049d8:	2300      	movs	r3, #0
 80049da:	220a      	movs	r2, #10
 80049dc:	9904      	ldr	r1, [sp, #16]
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 fc6f 	bl	80052c2 <__multadd>
 80049e4:	9004      	str	r0, [sp, #16]
 80049e6:	e7ea      	b.n	80049be <_dtoa_r+0xb3e>
 80049e8:	080068b0 	.word	0x080068b0
 80049ec:	08006930 	.word	0x08006930

080049f0 <std>:
 80049f0:	2300      	movs	r3, #0
 80049f2:	b510      	push	{r4, lr}
 80049f4:	4604      	mov	r4, r0
 80049f6:	e9c0 3300 	strd	r3, r3, [r0]
 80049fa:	6083      	str	r3, [r0, #8]
 80049fc:	8181      	strh	r1, [r0, #12]
 80049fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004a00:	81c2      	strh	r2, [r0, #14]
 8004a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a06:	6183      	str	r3, [r0, #24]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	305c      	adds	r0, #92	; 0x5c
 8004a0e:	f7fd fc76 	bl	80022fe <memset>
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <std+0x38>)
 8004a14:	6263      	str	r3, [r4, #36]	; 0x24
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <std+0x3c>)
 8004a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <std+0x40>)
 8004a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x44>)
 8004a20:	6224      	str	r4, [r4, #32]
 8004a22:	6323      	str	r3, [r4, #48]	; 0x30
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	bf00      	nop
 8004a28:	080060dd 	.word	0x080060dd
 8004a2c:	080060ff 	.word	0x080060ff
 8004a30:	08006137 	.word	0x08006137
 8004a34:	0800615b 	.word	0x0800615b

08004a38 <_cleanup_r>:
 8004a38:	4901      	ldr	r1, [pc, #4]	; (8004a40 <_cleanup_r+0x8>)
 8004a3a:	f000 b885 	b.w	8004b48 <_fwalk_reent>
 8004a3e:	bf00      	nop
 8004a40:	08006475 	.word	0x08006475

08004a44 <__sfmoreglue>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	1e4a      	subs	r2, r1, #1
 8004a48:	2568      	movs	r5, #104	; 0x68
 8004a4a:	4355      	muls	r5, r2
 8004a4c:	460e      	mov	r6, r1
 8004a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a52:	f001 f847 	bl	8005ae4 <_malloc_r>
 8004a56:	4604      	mov	r4, r0
 8004a58:	b140      	cbz	r0, 8004a6c <__sfmoreglue+0x28>
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a60:	300c      	adds	r0, #12
 8004a62:	60a0      	str	r0, [r4, #8]
 8004a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a68:	f7fd fc49 	bl	80022fe <memset>
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}

08004a70 <__sinit>:
 8004a70:	6983      	ldr	r3, [r0, #24]
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4604      	mov	r4, r0
 8004a76:	bb33      	cbnz	r3, 8004ac6 <__sinit+0x56>
 8004a78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a7c:	6503      	str	r3, [r0, #80]	; 0x50
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <__sinit+0x58>)
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <__sinit+0x5c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6282      	str	r2, [r0, #40]	; 0x28
 8004a86:	4298      	cmp	r0, r3
 8004a88:	bf04      	itt	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	6183      	streq	r3, [r0, #24]
 8004a8e:	f000 f81f 	bl	8004ad0 <__sfp>
 8004a92:	6060      	str	r0, [r4, #4]
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 f81b 	bl	8004ad0 <__sfp>
 8004a9a:	60a0      	str	r0, [r4, #8]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 f817 	bl	8004ad0 <__sfp>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	60e0      	str	r0, [r4, #12]
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	6860      	ldr	r0, [r4, #4]
 8004aaa:	f7ff ffa1 	bl	80049f0 <std>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	2109      	movs	r1, #9
 8004ab2:	68a0      	ldr	r0, [r4, #8]
 8004ab4:	f7ff ff9c 	bl	80049f0 <std>
 8004ab8:	2202      	movs	r2, #2
 8004aba:	2112      	movs	r1, #18
 8004abc:	68e0      	ldr	r0, [r4, #12]
 8004abe:	f7ff ff97 	bl	80049f0 <std>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61a3      	str	r3, [r4, #24]
 8004ac6:	bd10      	pop	{r4, pc}
 8004ac8:	0800689c 	.word	0x0800689c
 8004acc:	08004a39 	.word	0x08004a39

08004ad0 <__sfp>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <__sfp+0x70>)
 8004ad4:	681e      	ldr	r6, [r3, #0]
 8004ad6:	69b3      	ldr	r3, [r6, #24]
 8004ad8:	4607      	mov	r7, r0
 8004ada:	b913      	cbnz	r3, 8004ae2 <__sfp+0x12>
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff ffc7 	bl	8004a70 <__sinit>
 8004ae2:	3648      	adds	r6, #72	; 0x48
 8004ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	d503      	bpl.n	8004af4 <__sfp+0x24>
 8004aec:	6833      	ldr	r3, [r6, #0]
 8004aee:	b133      	cbz	r3, 8004afe <__sfp+0x2e>
 8004af0:	6836      	ldr	r6, [r6, #0]
 8004af2:	e7f7      	b.n	8004ae4 <__sfp+0x14>
 8004af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004af8:	b16d      	cbz	r5, 8004b16 <__sfp+0x46>
 8004afa:	3468      	adds	r4, #104	; 0x68
 8004afc:	e7f4      	b.n	8004ae8 <__sfp+0x18>
 8004afe:	2104      	movs	r1, #4
 8004b00:	4638      	mov	r0, r7
 8004b02:	f7ff ff9f 	bl	8004a44 <__sfmoreglue>
 8004b06:	6030      	str	r0, [r6, #0]
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1f1      	bne.n	8004af0 <__sfp+0x20>
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4604      	mov	r4, r0
 8004b12:	4620      	mov	r0, r4
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <__sfp+0x74>)
 8004b18:	6665      	str	r5, [r4, #100]	; 0x64
 8004b1a:	e9c4 5500 	strd	r5, r5, [r4]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b30:	f7fd fbe5 	bl	80022fe <memset>
 8004b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b3c:	e7e9      	b.n	8004b12 <__sfp+0x42>
 8004b3e:	bf00      	nop
 8004b40:	0800689c 	.word	0x0800689c
 8004b44:	ffff0001 	.word	0xffff0001

08004b48 <_fwalk_reent>:
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	4689      	mov	r9, r1
 8004b50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b54:	2600      	movs	r6, #0
 8004b56:	b914      	cbnz	r4, 8004b5e <_fwalk_reent+0x16>
 8004b58:	4630      	mov	r0, r6
 8004b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b62:	3f01      	subs	r7, #1
 8004b64:	d501      	bpl.n	8004b6a <_fwalk_reent+0x22>
 8004b66:	6824      	ldr	r4, [r4, #0]
 8004b68:	e7f5      	b.n	8004b56 <_fwalk_reent+0xe>
 8004b6a:	89ab      	ldrh	r3, [r5, #12]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d907      	bls.n	8004b80 <_fwalk_reent+0x38>
 8004b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b74:	3301      	adds	r3, #1
 8004b76:	d003      	beq.n	8004b80 <_fwalk_reent+0x38>
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	47c8      	blx	r9
 8004b7e:	4306      	orrs	r6, r0
 8004b80:	3568      	adds	r5, #104	; 0x68
 8004b82:	e7ee      	b.n	8004b62 <_fwalk_reent+0x1a>

08004b84 <rshift>:
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	6906      	ldr	r6, [r0, #16]
 8004b88:	114b      	asrs	r3, r1, #5
 8004b8a:	429e      	cmp	r6, r3
 8004b8c:	f100 0414 	add.w	r4, r0, #20
 8004b90:	dd30      	ble.n	8004bf4 <rshift+0x70>
 8004b92:	f011 011f 	ands.w	r1, r1, #31
 8004b96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004b9a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004b9e:	d108      	bne.n	8004bb2 <rshift+0x2e>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	42b2      	cmp	r2, r6
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	d211      	bcs.n	8004bcc <rshift+0x48>
 8004ba8:	f852 3b04 	ldr.w	r3, [r2], #4
 8004bac:	f841 3b04 	str.w	r3, [r1], #4
 8004bb0:	e7f7      	b.n	8004ba2 <rshift+0x1e>
 8004bb2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8004bb6:	f1c1 0c20 	rsb	ip, r1, #32
 8004bba:	40cd      	lsrs	r5, r1
 8004bbc:	3204      	adds	r2, #4
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	42b2      	cmp	r2, r6
 8004bc2:	4617      	mov	r7, r2
 8004bc4:	d30c      	bcc.n	8004be0 <rshift+0x5c>
 8004bc6:	601d      	str	r5, [r3, #0]
 8004bc8:	b105      	cbz	r5, 8004bcc <rshift+0x48>
 8004bca:	3304      	adds	r3, #4
 8004bcc:	1b1a      	subs	r2, r3, r4
 8004bce:	42a3      	cmp	r3, r4
 8004bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004bd4:	bf08      	it	eq
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	6102      	str	r2, [r0, #16]
 8004bda:	bf08      	it	eq
 8004bdc:	6143      	streq	r3, [r0, #20]
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be0:	683f      	ldr	r7, [r7, #0]
 8004be2:	fa07 f70c 	lsl.w	r7, r7, ip
 8004be6:	433d      	orrs	r5, r7
 8004be8:	f843 5b04 	str.w	r5, [r3], #4
 8004bec:	f852 5b04 	ldr.w	r5, [r2], #4
 8004bf0:	40cd      	lsrs	r5, r1
 8004bf2:	e7e5      	b.n	8004bc0 <rshift+0x3c>
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	e7e9      	b.n	8004bcc <rshift+0x48>

08004bf8 <__hexdig_fun>:
 8004bf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d802      	bhi.n	8004c06 <__hexdig_fun+0xe>
 8004c00:	3820      	subs	r0, #32
 8004c02:	b2c0      	uxtb	r0, r0
 8004c04:	4770      	bx	lr
 8004c06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d801      	bhi.n	8004c12 <__hexdig_fun+0x1a>
 8004c0e:	3847      	subs	r0, #71	; 0x47
 8004c10:	e7f7      	b.n	8004c02 <__hexdig_fun+0xa>
 8004c12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d801      	bhi.n	8004c1e <__hexdig_fun+0x26>
 8004c1a:	3827      	subs	r0, #39	; 0x27
 8004c1c:	e7f1      	b.n	8004c02 <__hexdig_fun+0xa>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	4770      	bx	lr

08004c22 <__gethex>:
 8004c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	b08b      	sub	sp, #44	; 0x2c
 8004c28:	468a      	mov	sl, r1
 8004c2a:	9002      	str	r0, [sp, #8]
 8004c2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004c2e:	9306      	str	r3, [sp, #24]
 8004c30:	4690      	mov	r8, r2
 8004c32:	f000 fad0 	bl	80051d6 <__localeconv_l>
 8004c36:	6803      	ldr	r3, [r0, #0]
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fb18 	bl	8000270 <strlen>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	4403      	add	r3, r0
 8004c46:	f04f 0b00 	mov.w	fp, #0
 8004c4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004c4e:	9307      	str	r3, [sp, #28]
 8004c50:	f8da 3000 	ldr.w	r3, [sl]
 8004c54:	3302      	adds	r3, #2
 8004c56:	461f      	mov	r7, r3
 8004c58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004c5c:	2830      	cmp	r0, #48	; 0x30
 8004c5e:	d06c      	beq.n	8004d3a <__gethex+0x118>
 8004c60:	f7ff ffca 	bl	8004bf8 <__hexdig_fun>
 8004c64:	4604      	mov	r4, r0
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d16a      	bne.n	8004d40 <__gethex+0x11e>
 8004c6a:	9a01      	ldr	r2, [sp, #4]
 8004c6c:	9903      	ldr	r1, [sp, #12]
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f001 fa77 	bl	8006162 <strncmp>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d166      	bne.n	8004d46 <__gethex+0x124>
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	5cf8      	ldrb	r0, [r7, r3]
 8004c7c:	18fe      	adds	r6, r7, r3
 8004c7e:	f7ff ffbb 	bl	8004bf8 <__hexdig_fun>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d062      	beq.n	8004d4c <__gethex+0x12a>
 8004c86:	4633      	mov	r3, r6
 8004c88:	7818      	ldrb	r0, [r3, #0]
 8004c8a:	2830      	cmp	r0, #48	; 0x30
 8004c8c:	461f      	mov	r7, r3
 8004c8e:	f103 0301 	add.w	r3, r3, #1
 8004c92:	d0f9      	beq.n	8004c88 <__gethex+0x66>
 8004c94:	f7ff ffb0 	bl	8004bf8 <__hexdig_fun>
 8004c98:	fab0 f580 	clz	r5, r0
 8004c9c:	096d      	lsrs	r5, r5, #5
 8004c9e:	4634      	mov	r4, r6
 8004ca0:	f04f 0b01 	mov.w	fp, #1
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4616      	mov	r6, r2
 8004ca8:	3201      	adds	r2, #1
 8004caa:	7830      	ldrb	r0, [r6, #0]
 8004cac:	f7ff ffa4 	bl	8004bf8 <__hexdig_fun>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1f8      	bne.n	8004ca6 <__gethex+0x84>
 8004cb4:	9a01      	ldr	r2, [sp, #4]
 8004cb6:	9903      	ldr	r1, [sp, #12]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f001 fa52 	bl	8006162 <strncmp>
 8004cbe:	b950      	cbnz	r0, 8004cd6 <__gethex+0xb4>
 8004cc0:	b954      	cbnz	r4, 8004cd8 <__gethex+0xb6>
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	18f4      	adds	r4, r6, r3
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4616      	mov	r6, r2
 8004cca:	3201      	adds	r2, #1
 8004ccc:	7830      	ldrb	r0, [r6, #0]
 8004cce:	f7ff ff93 	bl	8004bf8 <__hexdig_fun>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1f8      	bne.n	8004cc8 <__gethex+0xa6>
 8004cd6:	b10c      	cbz	r4, 8004cdc <__gethex+0xba>
 8004cd8:	1ba4      	subs	r4, r4, r6
 8004cda:	00a4      	lsls	r4, r4, #2
 8004cdc:	7833      	ldrb	r3, [r6, #0]
 8004cde:	2b50      	cmp	r3, #80	; 0x50
 8004ce0:	d001      	beq.n	8004ce6 <__gethex+0xc4>
 8004ce2:	2b70      	cmp	r3, #112	; 0x70
 8004ce4:	d140      	bne.n	8004d68 <__gethex+0x146>
 8004ce6:	7873      	ldrb	r3, [r6, #1]
 8004ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8004cea:	d031      	beq.n	8004d50 <__gethex+0x12e>
 8004cec:	2b2d      	cmp	r3, #45	; 0x2d
 8004cee:	d033      	beq.n	8004d58 <__gethex+0x136>
 8004cf0:	1c71      	adds	r1, r6, #1
 8004cf2:	f04f 0900 	mov.w	r9, #0
 8004cf6:	7808      	ldrb	r0, [r1, #0]
 8004cf8:	f7ff ff7e 	bl	8004bf8 <__hexdig_fun>
 8004cfc:	1e43      	subs	r3, r0, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b18      	cmp	r3, #24
 8004d02:	d831      	bhi.n	8004d68 <__gethex+0x146>
 8004d04:	f1a0 0210 	sub.w	r2, r0, #16
 8004d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004d0c:	f7ff ff74 	bl	8004bf8 <__hexdig_fun>
 8004d10:	1e43      	subs	r3, r0, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b18      	cmp	r3, #24
 8004d16:	d922      	bls.n	8004d5e <__gethex+0x13c>
 8004d18:	f1b9 0f00 	cmp.w	r9, #0
 8004d1c:	d000      	beq.n	8004d20 <__gethex+0xfe>
 8004d1e:	4252      	negs	r2, r2
 8004d20:	4414      	add	r4, r2
 8004d22:	f8ca 1000 	str.w	r1, [sl]
 8004d26:	b30d      	cbz	r5, 8004d6c <__gethex+0x14a>
 8004d28:	f1bb 0f00 	cmp.w	fp, #0
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2706      	moveq	r7, #6
 8004d30:	2700      	movne	r7, #0
 8004d32:	4638      	mov	r0, r7
 8004d34:	b00b      	add	sp, #44	; 0x2c
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	f10b 0b01 	add.w	fp, fp, #1
 8004d3e:	e78a      	b.n	8004c56 <__gethex+0x34>
 8004d40:	2500      	movs	r5, #0
 8004d42:	462c      	mov	r4, r5
 8004d44:	e7ae      	b.n	8004ca4 <__gethex+0x82>
 8004d46:	463e      	mov	r6, r7
 8004d48:	2501      	movs	r5, #1
 8004d4a:	e7c7      	b.n	8004cdc <__gethex+0xba>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	e7fb      	b.n	8004d48 <__gethex+0x126>
 8004d50:	f04f 0900 	mov.w	r9, #0
 8004d54:	1cb1      	adds	r1, r6, #2
 8004d56:	e7ce      	b.n	8004cf6 <__gethex+0xd4>
 8004d58:	f04f 0901 	mov.w	r9, #1
 8004d5c:	e7fa      	b.n	8004d54 <__gethex+0x132>
 8004d5e:	230a      	movs	r3, #10
 8004d60:	fb03 0202 	mla	r2, r3, r2, r0
 8004d64:	3a10      	subs	r2, #16
 8004d66:	e7cf      	b.n	8004d08 <__gethex+0xe6>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	e7da      	b.n	8004d22 <__gethex+0x100>
 8004d6c:	1bf3      	subs	r3, r6, r7
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4629      	mov	r1, r5
 8004d72:	2b07      	cmp	r3, #7
 8004d74:	dc49      	bgt.n	8004e0a <__gethex+0x1e8>
 8004d76:	9802      	ldr	r0, [sp, #8]
 8004d78:	f000 fa58 	bl	800522c <_Balloc>
 8004d7c:	9b01      	ldr	r3, [sp, #4]
 8004d7e:	f100 0914 	add.w	r9, r0, #20
 8004d82:	f04f 0b00 	mov.w	fp, #0
 8004d86:	f1c3 0301 	rsb	r3, r3, #1
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004d90:	46da      	mov	sl, fp
 8004d92:	9308      	str	r3, [sp, #32]
 8004d94:	42b7      	cmp	r7, r6
 8004d96:	d33b      	bcc.n	8004e10 <__gethex+0x1ee>
 8004d98:	9804      	ldr	r0, [sp, #16]
 8004d9a:	f840 ab04 	str.w	sl, [r0], #4
 8004d9e:	eba0 0009 	sub.w	r0, r0, r9
 8004da2:	1080      	asrs	r0, r0, #2
 8004da4:	6128      	str	r0, [r5, #16]
 8004da6:	0147      	lsls	r7, r0, #5
 8004da8:	4650      	mov	r0, sl
 8004daa:	f000 fb03 	bl	80053b4 <__hi0bits>
 8004dae:	f8d8 6000 	ldr.w	r6, [r8]
 8004db2:	1a3f      	subs	r7, r7, r0
 8004db4:	42b7      	cmp	r7, r6
 8004db6:	dd64      	ble.n	8004e82 <__gethex+0x260>
 8004db8:	1bbf      	subs	r7, r7, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 fe13 	bl	80059e8 <__any_on>
 8004dc2:	4682      	mov	sl, r0
 8004dc4:	b178      	cbz	r0, 8004de6 <__gethex+0x1c4>
 8004dc6:	1e7b      	subs	r3, r7, #1
 8004dc8:	1159      	asrs	r1, r3, #5
 8004dca:	f003 021f 	and.w	r2, r3, #31
 8004dce:	f04f 0a01 	mov.w	sl, #1
 8004dd2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004dd6:	fa0a f202 	lsl.w	r2, sl, r2
 8004dda:	420a      	tst	r2, r1
 8004ddc:	d003      	beq.n	8004de6 <__gethex+0x1c4>
 8004dde:	4553      	cmp	r3, sl
 8004de0:	dc46      	bgt.n	8004e70 <__gethex+0x24e>
 8004de2:	f04f 0a02 	mov.w	sl, #2
 8004de6:	4639      	mov	r1, r7
 8004de8:	4628      	mov	r0, r5
 8004dea:	f7ff fecb 	bl	8004b84 <rshift>
 8004dee:	443c      	add	r4, r7
 8004df0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	da52      	bge.n	8004e9e <__gethex+0x27c>
 8004df8:	4629      	mov	r1, r5
 8004dfa:	9802      	ldr	r0, [sp, #8]
 8004dfc:	f000 fa4a 	bl	8005294 <_Bfree>
 8004e00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	27a3      	movs	r7, #163	; 0xa3
 8004e08:	e793      	b.n	8004d32 <__gethex+0x110>
 8004e0a:	3101      	adds	r1, #1
 8004e0c:	105b      	asrs	r3, r3, #1
 8004e0e:	e7b0      	b.n	8004d72 <__gethex+0x150>
 8004e10:	1e73      	subs	r3, r6, #1
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	9a07      	ldr	r2, [sp, #28]
 8004e16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <__gethex+0x22e>
 8004e1e:	f1bb 0f20 	cmp.w	fp, #32
 8004e22:	d107      	bne.n	8004e34 <__gethex+0x212>
 8004e24:	9b04      	ldr	r3, [sp, #16]
 8004e26:	f8c3 a000 	str.w	sl, [r3]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	f04f 0a00 	mov.w	sl, #0
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	46d3      	mov	fp, sl
 8004e34:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004e38:	f7ff fede 	bl	8004bf8 <__hexdig_fun>
 8004e3c:	f000 000f 	and.w	r0, r0, #15
 8004e40:	fa00 f00b 	lsl.w	r0, r0, fp
 8004e44:	ea4a 0a00 	orr.w	sl, sl, r0
 8004e48:	f10b 0b04 	add.w	fp, fp, #4
 8004e4c:	9b05      	ldr	r3, [sp, #20]
 8004e4e:	e00d      	b.n	8004e6c <__gethex+0x24a>
 8004e50:	9b05      	ldr	r3, [sp, #20]
 8004e52:	9a08      	ldr	r2, [sp, #32]
 8004e54:	4413      	add	r3, r2
 8004e56:	42bb      	cmp	r3, r7
 8004e58:	d3e1      	bcc.n	8004e1e <__gethex+0x1fc>
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	9a01      	ldr	r2, [sp, #4]
 8004e5e:	9903      	ldr	r1, [sp, #12]
 8004e60:	9309      	str	r3, [sp, #36]	; 0x24
 8004e62:	f001 f97e 	bl	8006162 <strncmp>
 8004e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1d8      	bne.n	8004e1e <__gethex+0x1fc>
 8004e6c:	461e      	mov	r6, r3
 8004e6e:	e791      	b.n	8004d94 <__gethex+0x172>
 8004e70:	1eb9      	subs	r1, r7, #2
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fdb8 	bl	80059e8 <__any_on>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0b2      	beq.n	8004de2 <__gethex+0x1c0>
 8004e7c:	f04f 0a03 	mov.w	sl, #3
 8004e80:	e7b1      	b.n	8004de6 <__gethex+0x1c4>
 8004e82:	da09      	bge.n	8004e98 <__gethex+0x276>
 8004e84:	1bf7      	subs	r7, r6, r7
 8004e86:	4629      	mov	r1, r5
 8004e88:	463a      	mov	r2, r7
 8004e8a:	9802      	ldr	r0, [sp, #8]
 8004e8c:	f000 fbce 	bl	800562c <__lshift>
 8004e90:	1be4      	subs	r4, r4, r7
 8004e92:	4605      	mov	r5, r0
 8004e94:	f100 0914 	add.w	r9, r0, #20
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	e7a8      	b.n	8004df0 <__gethex+0x1ce>
 8004e9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004ea2:	42a0      	cmp	r0, r4
 8004ea4:	dd6a      	ble.n	8004f7c <__gethex+0x35a>
 8004ea6:	1b04      	subs	r4, r0, r4
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	dc2e      	bgt.n	8004f0a <__gethex+0x2e8>
 8004eac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d022      	beq.n	8004efa <__gethex+0x2d8>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d024      	beq.n	8004f02 <__gethex+0x2e0>
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d115      	bne.n	8004ee8 <__gethex+0x2c6>
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d113      	bne.n	8004ee8 <__gethex+0x2c6>
 8004ec0:	2e01      	cmp	r6, #1
 8004ec2:	dc0b      	bgt.n	8004edc <__gethex+0x2ba>
 8004ec4:	9a06      	ldr	r2, [sp, #24]
 8004ec6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	612b      	str	r3, [r5, #16]
 8004ed0:	f8c9 3000 	str.w	r3, [r9]
 8004ed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ed6:	2762      	movs	r7, #98	; 0x62
 8004ed8:	601d      	str	r5, [r3, #0]
 8004eda:	e72a      	b.n	8004d32 <__gethex+0x110>
 8004edc:	1e71      	subs	r1, r6, #1
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fd82 	bl	80059e8 <__any_on>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d1ed      	bne.n	8004ec4 <__gethex+0x2a2>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	9802      	ldr	r0, [sp, #8]
 8004eec:	f000 f9d2 	bl	8005294 <_Bfree>
 8004ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	2750      	movs	r7, #80	; 0x50
 8004ef8:	e71b      	b.n	8004d32 <__gethex+0x110>
 8004efa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0e1      	beq.n	8004ec4 <__gethex+0x2a2>
 8004f00:	e7f2      	b.n	8004ee8 <__gethex+0x2c6>
 8004f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1dd      	bne.n	8004ec4 <__gethex+0x2a2>
 8004f08:	e7ee      	b.n	8004ee8 <__gethex+0x2c6>
 8004f0a:	1e67      	subs	r7, r4, #1
 8004f0c:	f1ba 0f00 	cmp.w	sl, #0
 8004f10:	d131      	bne.n	8004f76 <__gethex+0x354>
 8004f12:	b127      	cbz	r7, 8004f1e <__gethex+0x2fc>
 8004f14:	4639      	mov	r1, r7
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fd66 	bl	80059e8 <__any_on>
 8004f1c:	4682      	mov	sl, r0
 8004f1e:	117a      	asrs	r2, r7, #5
 8004f20:	2301      	movs	r3, #1
 8004f22:	f007 071f 	and.w	r7, r7, #31
 8004f26:	fa03 f707 	lsl.w	r7, r3, r7
 8004f2a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	421f      	tst	r7, r3
 8004f32:	4628      	mov	r0, r5
 8004f34:	bf18      	it	ne
 8004f36:	f04a 0a02 	orrne.w	sl, sl, #2
 8004f3a:	1b36      	subs	r6, r6, r4
 8004f3c:	f7ff fe22 	bl	8004b84 <rshift>
 8004f40:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004f44:	2702      	movs	r7, #2
 8004f46:	f1ba 0f00 	cmp.w	sl, #0
 8004f4a:	d048      	beq.n	8004fde <__gethex+0x3bc>
 8004f4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d015      	beq.n	8004f80 <__gethex+0x35e>
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d017      	beq.n	8004f88 <__gethex+0x366>
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d109      	bne.n	8004f70 <__gethex+0x34e>
 8004f5c:	f01a 0f02 	tst.w	sl, #2
 8004f60:	d006      	beq.n	8004f70 <__gethex+0x34e>
 8004f62:	f8d9 3000 	ldr.w	r3, [r9]
 8004f66:	ea4a 0a03 	orr.w	sl, sl, r3
 8004f6a:	f01a 0f01 	tst.w	sl, #1
 8004f6e:	d10e      	bne.n	8004f8e <__gethex+0x36c>
 8004f70:	f047 0710 	orr.w	r7, r7, #16
 8004f74:	e033      	b.n	8004fde <__gethex+0x3bc>
 8004f76:	f04f 0a01 	mov.w	sl, #1
 8004f7a:	e7d0      	b.n	8004f1e <__gethex+0x2fc>
 8004f7c:	2701      	movs	r7, #1
 8004f7e:	e7e2      	b.n	8004f46 <__gethex+0x324>
 8004f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f82:	f1c3 0301 	rsb	r3, r3, #1
 8004f86:	9315      	str	r3, [sp, #84]	; 0x54
 8004f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <__gethex+0x34e>
 8004f8e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8004f92:	f105 0314 	add.w	r3, r5, #20
 8004f96:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8004f9a:	eb03 010a 	add.w	r1, r3, sl
 8004f9e:	f04f 0c00 	mov.w	ip, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004fac:	d01c      	beq.n	8004fe8 <__gethex+0x3c6>
 8004fae:	3201      	adds	r2, #1
 8004fb0:	6002      	str	r2, [r0, #0]
 8004fb2:	2f02      	cmp	r7, #2
 8004fb4:	f105 0314 	add.w	r3, r5, #20
 8004fb8:	d138      	bne.n	800502c <__gethex+0x40a>
 8004fba:	f8d8 2000 	ldr.w	r2, [r8]
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	42b2      	cmp	r2, r6
 8004fc2:	d10a      	bne.n	8004fda <__gethex+0x3b8>
 8004fc4:	1171      	asrs	r1, r6, #5
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f006 061f 	and.w	r6, r6, #31
 8004fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004fd0:	fa02 f606 	lsl.w	r6, r2, r6
 8004fd4:	421e      	tst	r6, r3
 8004fd6:	bf18      	it	ne
 8004fd8:	4617      	movne	r7, r2
 8004fda:	f047 0720 	orr.w	r7, r7, #32
 8004fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fe0:	601d      	str	r5, [r3, #0]
 8004fe2:	9b06      	ldr	r3, [sp, #24]
 8004fe4:	601c      	str	r4, [r3, #0]
 8004fe6:	e6a4      	b.n	8004d32 <__gethex+0x110>
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	f843 cc04 	str.w	ip, [r3, #-4]
 8004fee:	d8d8      	bhi.n	8004fa2 <__gethex+0x380>
 8004ff0:	68ab      	ldr	r3, [r5, #8]
 8004ff2:	4599      	cmp	r9, r3
 8004ff4:	db12      	blt.n	800501c <__gethex+0x3fa>
 8004ff6:	6869      	ldr	r1, [r5, #4]
 8004ff8:	9802      	ldr	r0, [sp, #8]
 8004ffa:	3101      	adds	r1, #1
 8004ffc:	f000 f916 	bl	800522c <_Balloc>
 8005000:	692a      	ldr	r2, [r5, #16]
 8005002:	3202      	adds	r2, #2
 8005004:	f105 010c 	add.w	r1, r5, #12
 8005008:	4683      	mov	fp, r0
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	300c      	adds	r0, #12
 800500e:	f7fd f96b 	bl	80022e8 <memcpy>
 8005012:	4629      	mov	r1, r5
 8005014:	9802      	ldr	r0, [sp, #8]
 8005016:	f000 f93d 	bl	8005294 <_Bfree>
 800501a:	465d      	mov	r5, fp
 800501c:	692b      	ldr	r3, [r5, #16]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005024:	612a      	str	r2, [r5, #16]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
 800502a:	e7c2      	b.n	8004fb2 <__gethex+0x390>
 800502c:	692a      	ldr	r2, [r5, #16]
 800502e:	454a      	cmp	r2, r9
 8005030:	dd0b      	ble.n	800504a <__gethex+0x428>
 8005032:	2101      	movs	r1, #1
 8005034:	4628      	mov	r0, r5
 8005036:	f7ff fda5 	bl	8004b84 <rshift>
 800503a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800503e:	3401      	adds	r4, #1
 8005040:	42a3      	cmp	r3, r4
 8005042:	f6ff aed9 	blt.w	8004df8 <__gethex+0x1d6>
 8005046:	2701      	movs	r7, #1
 8005048:	e7c7      	b.n	8004fda <__gethex+0x3b8>
 800504a:	f016 061f 	ands.w	r6, r6, #31
 800504e:	d0fa      	beq.n	8005046 <__gethex+0x424>
 8005050:	449a      	add	sl, r3
 8005052:	f1c6 0620 	rsb	r6, r6, #32
 8005056:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800505a:	f000 f9ab 	bl	80053b4 <__hi0bits>
 800505e:	42b0      	cmp	r0, r6
 8005060:	dbe7      	blt.n	8005032 <__gethex+0x410>
 8005062:	e7f0      	b.n	8005046 <__gethex+0x424>

08005064 <L_shift>:
 8005064:	f1c2 0208 	rsb	r2, r2, #8
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	b570      	push	{r4, r5, r6, lr}
 800506c:	f1c2 0620 	rsb	r6, r2, #32
 8005070:	6843      	ldr	r3, [r0, #4]
 8005072:	6804      	ldr	r4, [r0, #0]
 8005074:	fa03 f506 	lsl.w	r5, r3, r6
 8005078:	432c      	orrs	r4, r5
 800507a:	40d3      	lsrs	r3, r2
 800507c:	6004      	str	r4, [r0, #0]
 800507e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005082:	4288      	cmp	r0, r1
 8005084:	d3f4      	bcc.n	8005070 <L_shift+0xc>
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <__match>:
 8005088:	b530      	push	{r4, r5, lr}
 800508a:	6803      	ldr	r3, [r0, #0]
 800508c:	3301      	adds	r3, #1
 800508e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005092:	b914      	cbnz	r4, 800509a <__match+0x12>
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	2001      	movs	r0, #1
 8005098:	bd30      	pop	{r4, r5, pc}
 800509a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80050a2:	2d19      	cmp	r5, #25
 80050a4:	bf98      	it	ls
 80050a6:	3220      	addls	r2, #32
 80050a8:	42a2      	cmp	r2, r4
 80050aa:	d0f0      	beq.n	800508e <__match+0x6>
 80050ac:	2000      	movs	r0, #0
 80050ae:	e7f3      	b.n	8005098 <__match+0x10>

080050b0 <__hexnan>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	680b      	ldr	r3, [r1, #0]
 80050b6:	6801      	ldr	r1, [r0, #0]
 80050b8:	115f      	asrs	r7, r3, #5
 80050ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80050be:	f013 031f 	ands.w	r3, r3, #31
 80050c2:	b087      	sub	sp, #28
 80050c4:	bf18      	it	ne
 80050c6:	3704      	addne	r7, #4
 80050c8:	2500      	movs	r5, #0
 80050ca:	1f3e      	subs	r6, r7, #4
 80050cc:	4682      	mov	sl, r0
 80050ce:	4690      	mov	r8, r2
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	f847 5c04 	str.w	r5, [r7, #-4]
 80050d6:	46b1      	mov	r9, r6
 80050d8:	4634      	mov	r4, r6
 80050da:	9502      	str	r5, [sp, #8]
 80050dc:	46ab      	mov	fp, r5
 80050de:	784a      	ldrb	r2, [r1, #1]
 80050e0:	1c4b      	adds	r3, r1, #1
 80050e2:	9303      	str	r3, [sp, #12]
 80050e4:	b342      	cbz	r2, 8005138 <__hexnan+0x88>
 80050e6:	4610      	mov	r0, r2
 80050e8:	9105      	str	r1, [sp, #20]
 80050ea:	9204      	str	r2, [sp, #16]
 80050ec:	f7ff fd84 	bl	8004bf8 <__hexdig_fun>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d143      	bne.n	800517c <__hexnan+0xcc>
 80050f4:	9a04      	ldr	r2, [sp, #16]
 80050f6:	9905      	ldr	r1, [sp, #20]
 80050f8:	2a20      	cmp	r2, #32
 80050fa:	d818      	bhi.n	800512e <__hexnan+0x7e>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	459b      	cmp	fp, r3
 8005100:	dd13      	ble.n	800512a <__hexnan+0x7a>
 8005102:	454c      	cmp	r4, r9
 8005104:	d206      	bcs.n	8005114 <__hexnan+0x64>
 8005106:	2d07      	cmp	r5, #7
 8005108:	dc04      	bgt.n	8005114 <__hexnan+0x64>
 800510a:	462a      	mov	r2, r5
 800510c:	4649      	mov	r1, r9
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff ffa8 	bl	8005064 <L_shift>
 8005114:	4544      	cmp	r4, r8
 8005116:	d944      	bls.n	80051a2 <__hexnan+0xf2>
 8005118:	2300      	movs	r3, #0
 800511a:	f1a4 0904 	sub.w	r9, r4, #4
 800511e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005122:	f8cd b008 	str.w	fp, [sp, #8]
 8005126:	464c      	mov	r4, r9
 8005128:	461d      	mov	r5, r3
 800512a:	9903      	ldr	r1, [sp, #12]
 800512c:	e7d7      	b.n	80050de <__hexnan+0x2e>
 800512e:	2a29      	cmp	r2, #41	; 0x29
 8005130:	d14a      	bne.n	80051c8 <__hexnan+0x118>
 8005132:	3102      	adds	r1, #2
 8005134:	f8ca 1000 	str.w	r1, [sl]
 8005138:	f1bb 0f00 	cmp.w	fp, #0
 800513c:	d044      	beq.n	80051c8 <__hexnan+0x118>
 800513e:	454c      	cmp	r4, r9
 8005140:	d206      	bcs.n	8005150 <__hexnan+0xa0>
 8005142:	2d07      	cmp	r5, #7
 8005144:	dc04      	bgt.n	8005150 <__hexnan+0xa0>
 8005146:	462a      	mov	r2, r5
 8005148:	4649      	mov	r1, r9
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff ff8a 	bl	8005064 <L_shift>
 8005150:	4544      	cmp	r4, r8
 8005152:	d928      	bls.n	80051a6 <__hexnan+0xf6>
 8005154:	4643      	mov	r3, r8
 8005156:	f854 2b04 	ldr.w	r2, [r4], #4
 800515a:	f843 2b04 	str.w	r2, [r3], #4
 800515e:	42a6      	cmp	r6, r4
 8005160:	d2f9      	bcs.n	8005156 <__hexnan+0xa6>
 8005162:	2200      	movs	r2, #0
 8005164:	f843 2b04 	str.w	r2, [r3], #4
 8005168:	429e      	cmp	r6, r3
 800516a:	d2fb      	bcs.n	8005164 <__hexnan+0xb4>
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	b91b      	cbnz	r3, 8005178 <__hexnan+0xc8>
 8005170:	4546      	cmp	r6, r8
 8005172:	d127      	bne.n	80051c4 <__hexnan+0x114>
 8005174:	2301      	movs	r3, #1
 8005176:	6033      	str	r3, [r6, #0]
 8005178:	2005      	movs	r0, #5
 800517a:	e026      	b.n	80051ca <__hexnan+0x11a>
 800517c:	3501      	adds	r5, #1
 800517e:	2d08      	cmp	r5, #8
 8005180:	f10b 0b01 	add.w	fp, fp, #1
 8005184:	dd06      	ble.n	8005194 <__hexnan+0xe4>
 8005186:	4544      	cmp	r4, r8
 8005188:	d9cf      	bls.n	800512a <__hexnan+0x7a>
 800518a:	2300      	movs	r3, #0
 800518c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005190:	2501      	movs	r5, #1
 8005192:	3c04      	subs	r4, #4
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	f000 000f 	and.w	r0, r0, #15
 800519a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800519e:	6020      	str	r0, [r4, #0]
 80051a0:	e7c3      	b.n	800512a <__hexnan+0x7a>
 80051a2:	2508      	movs	r5, #8
 80051a4:	e7c1      	b.n	800512a <__hexnan+0x7a>
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0df      	beq.n	800516c <__hexnan+0xbc>
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b0:	f1c3 0320 	rsb	r3, r3, #32
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
 80051b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80051bc:	401a      	ands	r2, r3
 80051be:	f847 2c04 	str.w	r2, [r7, #-4]
 80051c2:	e7d3      	b.n	800516c <__hexnan+0xbc>
 80051c4:	3e04      	subs	r6, #4
 80051c6:	e7d1      	b.n	800516c <__hexnan+0xbc>
 80051c8:	2004      	movs	r0, #4
 80051ca:	b007      	add	sp, #28
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051d0 <__locale_ctype_ptr_l>:
 80051d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80051d4:	4770      	bx	lr

080051d6 <__localeconv_l>:
 80051d6:	30f0      	adds	r0, #240	; 0xf0
 80051d8:	4770      	bx	lr
	...

080051dc <_localeconv_r>:
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <_localeconv_r+0x14>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a18      	ldr	r0, [r3, #32]
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <_localeconv_r+0x18>)
 80051e4:	2800      	cmp	r0, #0
 80051e6:	bf08      	it	eq
 80051e8:	4618      	moveq	r0, r3
 80051ea:	30f0      	adds	r0, #240	; 0xf0
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	20000070 	.word	0x20000070

080051f8 <malloc>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <malloc+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f000 bc71 	b.w	8005ae4 <_malloc_r>
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c

08005208 <__ascii_mbtowc>:
 8005208:	b082      	sub	sp, #8
 800520a:	b901      	cbnz	r1, 800520e <__ascii_mbtowc+0x6>
 800520c:	a901      	add	r1, sp, #4
 800520e:	b142      	cbz	r2, 8005222 <__ascii_mbtowc+0x1a>
 8005210:	b14b      	cbz	r3, 8005226 <__ascii_mbtowc+0x1e>
 8005212:	7813      	ldrb	r3, [r2, #0]
 8005214:	600b      	str	r3, [r1, #0]
 8005216:	7812      	ldrb	r2, [r2, #0]
 8005218:	1c10      	adds	r0, r2, #0
 800521a:	bf18      	it	ne
 800521c:	2001      	movne	r0, #1
 800521e:	b002      	add	sp, #8
 8005220:	4770      	bx	lr
 8005222:	4610      	mov	r0, r2
 8005224:	e7fb      	b.n	800521e <__ascii_mbtowc+0x16>
 8005226:	f06f 0001 	mvn.w	r0, #1
 800522a:	e7f8      	b.n	800521e <__ascii_mbtowc+0x16>

0800522c <_Balloc>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005230:	4604      	mov	r4, r0
 8005232:	460e      	mov	r6, r1
 8005234:	b93d      	cbnz	r5, 8005246 <_Balloc+0x1a>
 8005236:	2010      	movs	r0, #16
 8005238:	f7ff ffde 	bl	80051f8 <malloc>
 800523c:	6260      	str	r0, [r4, #36]	; 0x24
 800523e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005242:	6005      	str	r5, [r0, #0]
 8005244:	60c5      	str	r5, [r0, #12]
 8005246:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005248:	68eb      	ldr	r3, [r5, #12]
 800524a:	b183      	cbz	r3, 800526e <_Balloc+0x42>
 800524c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005254:	b9b8      	cbnz	r0, 8005286 <_Balloc+0x5a>
 8005256:	2101      	movs	r1, #1
 8005258:	fa01 f506 	lsl.w	r5, r1, r6
 800525c:	1d6a      	adds	r2, r5, #5
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fbe2 	bl	8005a2a <_calloc_r>
 8005266:	b160      	cbz	r0, 8005282 <_Balloc+0x56>
 8005268:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800526c:	e00e      	b.n	800528c <_Balloc+0x60>
 800526e:	2221      	movs	r2, #33	; 0x21
 8005270:	2104      	movs	r1, #4
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fbd9 	bl	8005a2a <_calloc_r>
 8005278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800527a:	60e8      	str	r0, [r5, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e4      	bne.n	800524c <_Balloc+0x20>
 8005282:	2000      	movs	r0, #0
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	6802      	ldr	r2, [r0, #0]
 8005288:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800528c:	2300      	movs	r3, #0
 800528e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005292:	e7f7      	b.n	8005284 <_Balloc+0x58>

08005294 <_Bfree>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005298:	4606      	mov	r6, r0
 800529a:	460d      	mov	r5, r1
 800529c:	b93c      	cbnz	r4, 80052ae <_Bfree+0x1a>
 800529e:	2010      	movs	r0, #16
 80052a0:	f7ff ffaa 	bl	80051f8 <malloc>
 80052a4:	6270      	str	r0, [r6, #36]	; 0x24
 80052a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052aa:	6004      	str	r4, [r0, #0]
 80052ac:	60c4      	str	r4, [r0, #12]
 80052ae:	b13d      	cbz	r5, 80052c0 <_Bfree+0x2c>
 80052b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80052b2:	686a      	ldr	r2, [r5, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80052c0:	bd70      	pop	{r4, r5, r6, pc}

080052c2 <__multadd>:
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	690d      	ldr	r5, [r1, #16]
 80052c8:	461f      	mov	r7, r3
 80052ca:	4606      	mov	r6, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	f101 0c14 	add.w	ip, r1, #20
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8dc 0000 	ldr.w	r0, [ip]
 80052d8:	b281      	uxth	r1, r0
 80052da:	fb02 7101 	mla	r1, r2, r1, r7
 80052de:	0c0f      	lsrs	r7, r1, #16
 80052e0:	0c00      	lsrs	r0, r0, #16
 80052e2:	fb02 7000 	mla	r0, r2, r0, r7
 80052e6:	b289      	uxth	r1, r1
 80052e8:	3301      	adds	r3, #1
 80052ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80052ee:	429d      	cmp	r5, r3
 80052f0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80052f4:	f84c 1b04 	str.w	r1, [ip], #4
 80052f8:	dcec      	bgt.n	80052d4 <__multadd+0x12>
 80052fa:	b1d7      	cbz	r7, 8005332 <__multadd+0x70>
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	42ab      	cmp	r3, r5
 8005300:	dc12      	bgt.n	8005328 <__multadd+0x66>
 8005302:	6861      	ldr	r1, [r4, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	3101      	adds	r1, #1
 8005308:	f7ff ff90 	bl	800522c <_Balloc>
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	3202      	adds	r2, #2
 8005310:	f104 010c 	add.w	r1, r4, #12
 8005314:	4680      	mov	r8, r0
 8005316:	0092      	lsls	r2, r2, #2
 8005318:	300c      	adds	r0, #12
 800531a:	f7fc ffe5 	bl	80022e8 <memcpy>
 800531e:	4621      	mov	r1, r4
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff ffb7 	bl	8005294 <_Bfree>
 8005326:	4644      	mov	r4, r8
 8005328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800532c:	3501      	adds	r5, #1
 800532e:	615f      	str	r7, [r3, #20]
 8005330:	6125      	str	r5, [r4, #16]
 8005332:	4620      	mov	r0, r4
 8005334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005338 <__s2b>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	460c      	mov	r4, r1
 800533e:	4615      	mov	r5, r2
 8005340:	461f      	mov	r7, r3
 8005342:	2209      	movs	r2, #9
 8005344:	3308      	adds	r3, #8
 8005346:	4606      	mov	r6, r0
 8005348:	fb93 f3f2 	sdiv	r3, r3, r2
 800534c:	2100      	movs	r1, #0
 800534e:	2201      	movs	r2, #1
 8005350:	429a      	cmp	r2, r3
 8005352:	db20      	blt.n	8005396 <__s2b+0x5e>
 8005354:	4630      	mov	r0, r6
 8005356:	f7ff ff69 	bl	800522c <_Balloc>
 800535a:	9b08      	ldr	r3, [sp, #32]
 800535c:	6143      	str	r3, [r0, #20]
 800535e:	2d09      	cmp	r5, #9
 8005360:	f04f 0301 	mov.w	r3, #1
 8005364:	6103      	str	r3, [r0, #16]
 8005366:	dd19      	ble.n	800539c <__s2b+0x64>
 8005368:	f104 0809 	add.w	r8, r4, #9
 800536c:	46c1      	mov	r9, r8
 800536e:	442c      	add	r4, r5
 8005370:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005374:	4601      	mov	r1, r0
 8005376:	3b30      	subs	r3, #48	; 0x30
 8005378:	220a      	movs	r2, #10
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ffa1 	bl	80052c2 <__multadd>
 8005380:	45a1      	cmp	r9, r4
 8005382:	d1f5      	bne.n	8005370 <__s2b+0x38>
 8005384:	eb08 0405 	add.w	r4, r8, r5
 8005388:	3c08      	subs	r4, #8
 800538a:	1b2d      	subs	r5, r5, r4
 800538c:	1963      	adds	r3, r4, r5
 800538e:	42bb      	cmp	r3, r7
 8005390:	db07      	blt.n	80053a2 <__s2b+0x6a>
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	0052      	lsls	r2, r2, #1
 8005398:	3101      	adds	r1, #1
 800539a:	e7d9      	b.n	8005350 <__s2b+0x18>
 800539c:	340a      	adds	r4, #10
 800539e:	2509      	movs	r5, #9
 80053a0:	e7f3      	b.n	800538a <__s2b+0x52>
 80053a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053a6:	4601      	mov	r1, r0
 80053a8:	3b30      	subs	r3, #48	; 0x30
 80053aa:	220a      	movs	r2, #10
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7ff ff88 	bl	80052c2 <__multadd>
 80053b2:	e7eb      	b.n	800538c <__s2b+0x54>

080053b4 <__hi0bits>:
 80053b4:	0c02      	lsrs	r2, r0, #16
 80053b6:	0412      	lsls	r2, r2, #16
 80053b8:	4603      	mov	r3, r0
 80053ba:	b9b2      	cbnz	r2, 80053ea <__hi0bits+0x36>
 80053bc:	0403      	lsls	r3, r0, #16
 80053be:	2010      	movs	r0, #16
 80053c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80053c4:	bf04      	itt	eq
 80053c6:	021b      	lsleq	r3, r3, #8
 80053c8:	3008      	addeq	r0, #8
 80053ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80053ce:	bf04      	itt	eq
 80053d0:	011b      	lsleq	r3, r3, #4
 80053d2:	3004      	addeq	r0, #4
 80053d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80053d8:	bf04      	itt	eq
 80053da:	009b      	lsleq	r3, r3, #2
 80053dc:	3002      	addeq	r0, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db06      	blt.n	80053f0 <__hi0bits+0x3c>
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	d503      	bpl.n	80053ee <__hi0bits+0x3a>
 80053e6:	3001      	adds	r0, #1
 80053e8:	4770      	bx	lr
 80053ea:	2000      	movs	r0, #0
 80053ec:	e7e8      	b.n	80053c0 <__hi0bits+0xc>
 80053ee:	2020      	movs	r0, #32
 80053f0:	4770      	bx	lr

080053f2 <__lo0bits>:
 80053f2:	6803      	ldr	r3, [r0, #0]
 80053f4:	f013 0207 	ands.w	r2, r3, #7
 80053f8:	4601      	mov	r1, r0
 80053fa:	d00b      	beq.n	8005414 <__lo0bits+0x22>
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	d423      	bmi.n	8005448 <__lo0bits+0x56>
 8005400:	0798      	lsls	r0, r3, #30
 8005402:	bf49      	itett	mi
 8005404:	085b      	lsrmi	r3, r3, #1
 8005406:	089b      	lsrpl	r3, r3, #2
 8005408:	2001      	movmi	r0, #1
 800540a:	600b      	strmi	r3, [r1, #0]
 800540c:	bf5c      	itt	pl
 800540e:	600b      	strpl	r3, [r1, #0]
 8005410:	2002      	movpl	r0, #2
 8005412:	4770      	bx	lr
 8005414:	b298      	uxth	r0, r3
 8005416:	b9a8      	cbnz	r0, 8005444 <__lo0bits+0x52>
 8005418:	0c1b      	lsrs	r3, r3, #16
 800541a:	2010      	movs	r0, #16
 800541c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005420:	bf04      	itt	eq
 8005422:	0a1b      	lsreq	r3, r3, #8
 8005424:	3008      	addeq	r0, #8
 8005426:	071a      	lsls	r2, r3, #28
 8005428:	bf04      	itt	eq
 800542a:	091b      	lsreq	r3, r3, #4
 800542c:	3004      	addeq	r0, #4
 800542e:	079a      	lsls	r2, r3, #30
 8005430:	bf04      	itt	eq
 8005432:	089b      	lsreq	r3, r3, #2
 8005434:	3002      	addeq	r0, #2
 8005436:	07da      	lsls	r2, r3, #31
 8005438:	d402      	bmi.n	8005440 <__lo0bits+0x4e>
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	d006      	beq.n	800544c <__lo0bits+0x5a>
 800543e:	3001      	adds	r0, #1
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	4770      	bx	lr
 8005444:	4610      	mov	r0, r2
 8005446:	e7e9      	b.n	800541c <__lo0bits+0x2a>
 8005448:	2000      	movs	r0, #0
 800544a:	4770      	bx	lr
 800544c:	2020      	movs	r0, #32
 800544e:	4770      	bx	lr

08005450 <__i2b>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	2101      	movs	r1, #1
 8005456:	f7ff fee9 	bl	800522c <_Balloc>
 800545a:	2201      	movs	r2, #1
 800545c:	6144      	str	r4, [r0, #20]
 800545e:	6102      	str	r2, [r0, #16]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__multiply>:
 8005462:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005466:	4614      	mov	r4, r2
 8005468:	690a      	ldr	r2, [r1, #16]
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	bfb8      	it	lt
 8005470:	460b      	movlt	r3, r1
 8005472:	4688      	mov	r8, r1
 8005474:	bfbc      	itt	lt
 8005476:	46a0      	movlt	r8, r4
 8005478:	461c      	movlt	r4, r3
 800547a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800547e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005482:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005486:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800548a:	eb07 0609 	add.w	r6, r7, r9
 800548e:	42b3      	cmp	r3, r6
 8005490:	bfb8      	it	lt
 8005492:	3101      	addlt	r1, #1
 8005494:	f7ff feca 	bl	800522c <_Balloc>
 8005498:	f100 0514 	add.w	r5, r0, #20
 800549c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80054a0:	462b      	mov	r3, r5
 80054a2:	2200      	movs	r2, #0
 80054a4:	4573      	cmp	r3, lr
 80054a6:	d316      	bcc.n	80054d6 <__multiply+0x74>
 80054a8:	f104 0214 	add.w	r2, r4, #20
 80054ac:	f108 0114 	add.w	r1, r8, #20
 80054b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80054b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	9b00      	ldr	r3, [sp, #0]
 80054bc:	9201      	str	r2, [sp, #4]
 80054be:	4293      	cmp	r3, r2
 80054c0:	d80c      	bhi.n	80054dc <__multiply+0x7a>
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	dd03      	ble.n	80054ce <__multiply+0x6c>
 80054c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d05d      	beq.n	800558a <__multiply+0x128>
 80054ce:	6106      	str	r6, [r0, #16]
 80054d0:	b003      	add	sp, #12
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	f843 2b04 	str.w	r2, [r3], #4
 80054da:	e7e3      	b.n	80054a4 <__multiply+0x42>
 80054dc:	f8b2 b000 	ldrh.w	fp, [r2]
 80054e0:	f1bb 0f00 	cmp.w	fp, #0
 80054e4:	d023      	beq.n	800552e <__multiply+0xcc>
 80054e6:	4689      	mov	r9, r1
 80054e8:	46ac      	mov	ip, r5
 80054ea:	f04f 0800 	mov.w	r8, #0
 80054ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80054f2:	f8dc a000 	ldr.w	sl, [ip]
 80054f6:	b2a3      	uxth	r3, r4
 80054f8:	fa1f fa8a 	uxth.w	sl, sl
 80054fc:	fb0b a303 	mla	r3, fp, r3, sl
 8005500:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005504:	f8dc 4000 	ldr.w	r4, [ip]
 8005508:	4443      	add	r3, r8
 800550a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800550e:	fb0b 840a 	mla	r4, fp, sl, r8
 8005512:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005516:	46e2      	mov	sl, ip
 8005518:	b29b      	uxth	r3, r3
 800551a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800551e:	454f      	cmp	r7, r9
 8005520:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005524:	f84a 3b04 	str.w	r3, [sl], #4
 8005528:	d82b      	bhi.n	8005582 <__multiply+0x120>
 800552a:	f8cc 8004 	str.w	r8, [ip, #4]
 800552e:	9b01      	ldr	r3, [sp, #4]
 8005530:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005534:	3204      	adds	r2, #4
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	d020      	beq.n	800557e <__multiply+0x11c>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	4689      	mov	r9, r1
 8005540:	46a8      	mov	r8, r5
 8005542:	f04f 0b00 	mov.w	fp, #0
 8005546:	f8b9 c000 	ldrh.w	ip, [r9]
 800554a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800554e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005552:	445c      	add	r4, fp
 8005554:	46c4      	mov	ip, r8
 8005556:	b29b      	uxth	r3, r3
 8005558:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800555c:	f84c 3b04 	str.w	r3, [ip], #4
 8005560:	f859 3b04 	ldr.w	r3, [r9], #4
 8005564:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	fb0a b303 	mla	r3, sl, r3, fp
 800556e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005572:	454f      	cmp	r7, r9
 8005574:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005578:	d805      	bhi.n	8005586 <__multiply+0x124>
 800557a:	f8c8 3004 	str.w	r3, [r8, #4]
 800557e:	3504      	adds	r5, #4
 8005580:	e79b      	b.n	80054ba <__multiply+0x58>
 8005582:	46d4      	mov	ip, sl
 8005584:	e7b3      	b.n	80054ee <__multiply+0x8c>
 8005586:	46e0      	mov	r8, ip
 8005588:	e7dd      	b.n	8005546 <__multiply+0xe4>
 800558a:	3e01      	subs	r6, #1
 800558c:	e799      	b.n	80054c2 <__multiply+0x60>
	...

08005590 <__pow5mult>:
 8005590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005594:	4615      	mov	r5, r2
 8005596:	f012 0203 	ands.w	r2, r2, #3
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	d007      	beq.n	80055b0 <__pow5mult+0x20>
 80055a0:	3a01      	subs	r2, #1
 80055a2:	4c21      	ldr	r4, [pc, #132]	; (8005628 <__pow5mult+0x98>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055aa:	f7ff fe8a 	bl	80052c2 <__multadd>
 80055ae:	4607      	mov	r7, r0
 80055b0:	10ad      	asrs	r5, r5, #2
 80055b2:	d035      	beq.n	8005620 <__pow5mult+0x90>
 80055b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80055b6:	b93c      	cbnz	r4, 80055c8 <__pow5mult+0x38>
 80055b8:	2010      	movs	r0, #16
 80055ba:	f7ff fe1d 	bl	80051f8 <malloc>
 80055be:	6270      	str	r0, [r6, #36]	; 0x24
 80055c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055c4:	6004      	str	r4, [r0, #0]
 80055c6:	60c4      	str	r4, [r0, #12]
 80055c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80055cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055d0:	b94c      	cbnz	r4, 80055e6 <__pow5mult+0x56>
 80055d2:	f240 2171 	movw	r1, #625	; 0x271
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ff3a 	bl	8005450 <__i2b>
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c8 0008 	str.w	r0, [r8, #8]
 80055e2:	4604      	mov	r4, r0
 80055e4:	6003      	str	r3, [r0, #0]
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	07eb      	lsls	r3, r5, #31
 80055ec:	d50a      	bpl.n	8005604 <__pow5mult+0x74>
 80055ee:	4639      	mov	r1, r7
 80055f0:	4622      	mov	r2, r4
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7ff ff35 	bl	8005462 <__multiply>
 80055f8:	4639      	mov	r1, r7
 80055fa:	4681      	mov	r9, r0
 80055fc:	4630      	mov	r0, r6
 80055fe:	f7ff fe49 	bl	8005294 <_Bfree>
 8005602:	464f      	mov	r7, r9
 8005604:	106d      	asrs	r5, r5, #1
 8005606:	d00b      	beq.n	8005620 <__pow5mult+0x90>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	b938      	cbnz	r0, 800561c <__pow5mult+0x8c>
 800560c:	4622      	mov	r2, r4
 800560e:	4621      	mov	r1, r4
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff ff26 	bl	8005462 <__multiply>
 8005616:	6020      	str	r0, [r4, #0]
 8005618:	f8c0 8000 	str.w	r8, [r0]
 800561c:	4604      	mov	r4, r0
 800561e:	e7e4      	b.n	80055ea <__pow5mult+0x5a>
 8005620:	4638      	mov	r0, r7
 8005622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005626:	bf00      	nop
 8005628:	08006aa0 	.word	0x08006aa0

0800562c <__lshift>:
 800562c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	460c      	mov	r4, r1
 8005632:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6849      	ldr	r1, [r1, #4]
 800563a:	eb0a 0903 	add.w	r9, sl, r3
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	4607      	mov	r7, r0
 8005642:	4616      	mov	r6, r2
 8005644:	f109 0501 	add.w	r5, r9, #1
 8005648:	42ab      	cmp	r3, r5
 800564a:	db32      	blt.n	80056b2 <__lshift+0x86>
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff fded 	bl	800522c <_Balloc>
 8005652:	2300      	movs	r3, #0
 8005654:	4680      	mov	r8, r0
 8005656:	f100 0114 	add.w	r1, r0, #20
 800565a:	461a      	mov	r2, r3
 800565c:	4553      	cmp	r3, sl
 800565e:	db2b      	blt.n	80056b8 <__lshift+0x8c>
 8005660:	6920      	ldr	r0, [r4, #16]
 8005662:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005666:	f104 0314 	add.w	r3, r4, #20
 800566a:	f016 021f 	ands.w	r2, r6, #31
 800566e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005672:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005676:	d025      	beq.n	80056c4 <__lshift+0x98>
 8005678:	f1c2 0e20 	rsb	lr, r2, #32
 800567c:	2000      	movs	r0, #0
 800567e:	681e      	ldr	r6, [r3, #0]
 8005680:	468a      	mov	sl, r1
 8005682:	4096      	lsls	r6, r2
 8005684:	4330      	orrs	r0, r6
 8005686:	f84a 0b04 	str.w	r0, [sl], #4
 800568a:	f853 0b04 	ldr.w	r0, [r3], #4
 800568e:	459c      	cmp	ip, r3
 8005690:	fa20 f00e 	lsr.w	r0, r0, lr
 8005694:	d814      	bhi.n	80056c0 <__lshift+0x94>
 8005696:	6048      	str	r0, [r1, #4]
 8005698:	b108      	cbz	r0, 800569e <__lshift+0x72>
 800569a:	f109 0502 	add.w	r5, r9, #2
 800569e:	3d01      	subs	r5, #1
 80056a0:	4638      	mov	r0, r7
 80056a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80056a6:	4621      	mov	r1, r4
 80056a8:	f7ff fdf4 	bl	8005294 <_Bfree>
 80056ac:	4640      	mov	r0, r8
 80056ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b2:	3101      	adds	r1, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	e7c7      	b.n	8005648 <__lshift+0x1c>
 80056b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80056bc:	3301      	adds	r3, #1
 80056be:	e7cd      	b.n	800565c <__lshift+0x30>
 80056c0:	4651      	mov	r1, sl
 80056c2:	e7dc      	b.n	800567e <__lshift+0x52>
 80056c4:	3904      	subs	r1, #4
 80056c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80056ce:	459c      	cmp	ip, r3
 80056d0:	d8f9      	bhi.n	80056c6 <__lshift+0x9a>
 80056d2:	e7e4      	b.n	800569e <__lshift+0x72>

080056d4 <__mcmp>:
 80056d4:	6903      	ldr	r3, [r0, #16]
 80056d6:	690a      	ldr	r2, [r1, #16]
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	b530      	push	{r4, r5, lr}
 80056dc:	d10c      	bne.n	80056f8 <__mcmp+0x24>
 80056de:	0092      	lsls	r2, r2, #2
 80056e0:	3014      	adds	r0, #20
 80056e2:	3114      	adds	r1, #20
 80056e4:	1884      	adds	r4, r0, r2
 80056e6:	4411      	add	r1, r2
 80056e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056f0:	4295      	cmp	r5, r2
 80056f2:	d003      	beq.n	80056fc <__mcmp+0x28>
 80056f4:	d305      	bcc.n	8005702 <__mcmp+0x2e>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd30      	pop	{r4, r5, pc}
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d3f3      	bcc.n	80056e8 <__mcmp+0x14>
 8005700:	e7fa      	b.n	80056f8 <__mcmp+0x24>
 8005702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005706:	e7f7      	b.n	80056f8 <__mcmp+0x24>

08005708 <__mdiff>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	460d      	mov	r5, r1
 800570e:	4607      	mov	r7, r0
 8005710:	4611      	mov	r1, r2
 8005712:	4628      	mov	r0, r5
 8005714:	4614      	mov	r4, r2
 8005716:	f7ff ffdd 	bl	80056d4 <__mcmp>
 800571a:	1e06      	subs	r6, r0, #0
 800571c:	d108      	bne.n	8005730 <__mdiff+0x28>
 800571e:	4631      	mov	r1, r6
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff fd83 	bl	800522c <_Balloc>
 8005726:	2301      	movs	r3, #1
 8005728:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005730:	bfa4      	itt	ge
 8005732:	4623      	movge	r3, r4
 8005734:	462c      	movge	r4, r5
 8005736:	4638      	mov	r0, r7
 8005738:	6861      	ldr	r1, [r4, #4]
 800573a:	bfa6      	itte	ge
 800573c:	461d      	movge	r5, r3
 800573e:	2600      	movge	r6, #0
 8005740:	2601      	movlt	r6, #1
 8005742:	f7ff fd73 	bl	800522c <_Balloc>
 8005746:	692b      	ldr	r3, [r5, #16]
 8005748:	60c6      	str	r6, [r0, #12]
 800574a:	6926      	ldr	r6, [r4, #16]
 800574c:	f105 0914 	add.w	r9, r5, #20
 8005750:	f104 0214 	add.w	r2, r4, #20
 8005754:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005758:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800575c:	f100 0514 	add.w	r5, r0, #20
 8005760:	f04f 0e00 	mov.w	lr, #0
 8005764:	f852 ab04 	ldr.w	sl, [r2], #4
 8005768:	f859 4b04 	ldr.w	r4, [r9], #4
 800576c:	fa1e f18a 	uxtah	r1, lr, sl
 8005770:	b2a3      	uxth	r3, r4
 8005772:	1ac9      	subs	r1, r1, r3
 8005774:	0c23      	lsrs	r3, r4, #16
 8005776:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800577a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800577e:	b289      	uxth	r1, r1
 8005780:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005784:	45c8      	cmp	r8, r9
 8005786:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800578a:	4694      	mov	ip, r2
 800578c:	f845 3b04 	str.w	r3, [r5], #4
 8005790:	d8e8      	bhi.n	8005764 <__mdiff+0x5c>
 8005792:	45bc      	cmp	ip, r7
 8005794:	d304      	bcc.n	80057a0 <__mdiff+0x98>
 8005796:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800579a:	b183      	cbz	r3, 80057be <__mdiff+0xb6>
 800579c:	6106      	str	r6, [r0, #16]
 800579e:	e7c5      	b.n	800572c <__mdiff+0x24>
 80057a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80057a4:	fa1e f381 	uxtah	r3, lr, r1
 80057a8:	141a      	asrs	r2, r3, #16
 80057aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80057b8:	f845 3b04 	str.w	r3, [r5], #4
 80057bc:	e7e9      	b.n	8005792 <__mdiff+0x8a>
 80057be:	3e01      	subs	r6, #1
 80057c0:	e7e9      	b.n	8005796 <__mdiff+0x8e>
	...

080057c4 <__ulp>:
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <__ulp+0x4c>)
 80057c6:	ee10 2a90 	vmov	r2, s1
 80057ca:	401a      	ands	r2, r3
 80057cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	dd04      	ble.n	80057de <__ulp+0x1a>
 80057d4:	2000      	movs	r0, #0
 80057d6:	4619      	mov	r1, r3
 80057d8:	ec41 0b10 	vmov	d0, r0, r1
 80057dc:	4770      	bx	lr
 80057de:	425b      	negs	r3, r3
 80057e0:	151b      	asrs	r3, r3, #20
 80057e2:	2b13      	cmp	r3, #19
 80057e4:	f04f 0000 	mov.w	r0, #0
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	dc04      	bgt.n	80057f8 <__ulp+0x34>
 80057ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80057f2:	fa42 f103 	asr.w	r1, r2, r3
 80057f6:	e7ef      	b.n	80057d8 <__ulp+0x14>
 80057f8:	3b14      	subs	r3, #20
 80057fa:	2b1e      	cmp	r3, #30
 80057fc:	f04f 0201 	mov.w	r2, #1
 8005800:	bfda      	itte	le
 8005802:	f1c3 031f 	rsble	r3, r3, #31
 8005806:	fa02 f303 	lslle.w	r3, r2, r3
 800580a:	4613      	movgt	r3, r2
 800580c:	4618      	mov	r0, r3
 800580e:	e7e3      	b.n	80057d8 <__ulp+0x14>
 8005810:	7ff00000 	.word	0x7ff00000

08005814 <__b2d>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	6905      	ldr	r5, [r0, #16]
 8005818:	f100 0714 	add.w	r7, r0, #20
 800581c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005820:	1f2e      	subs	r6, r5, #4
 8005822:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff fdc4 	bl	80053b4 <__hi0bits>
 800582c:	f1c0 0320 	rsb	r3, r0, #32
 8005830:	280a      	cmp	r0, #10
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	f8df c074 	ldr.w	ip, [pc, #116]	; 80058ac <__b2d+0x98>
 8005838:	dc14      	bgt.n	8005864 <__b2d+0x50>
 800583a:	f1c0 0e0b 	rsb	lr, r0, #11
 800583e:	fa24 f10e 	lsr.w	r1, r4, lr
 8005842:	42b7      	cmp	r7, r6
 8005844:	ea41 030c 	orr.w	r3, r1, ip
 8005848:	bf34      	ite	cc
 800584a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800584e:	2100      	movcs	r1, #0
 8005850:	3015      	adds	r0, #21
 8005852:	fa04 f000 	lsl.w	r0, r4, r0
 8005856:	fa21 f10e 	lsr.w	r1, r1, lr
 800585a:	ea40 0201 	orr.w	r2, r0, r1
 800585e:	ec43 2b10 	vmov	d0, r2, r3
 8005862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005864:	42b7      	cmp	r7, r6
 8005866:	bf3a      	itte	cc
 8005868:	f1a5 0608 	subcc.w	r6, r5, #8
 800586c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005870:	2100      	movcs	r1, #0
 8005872:	380b      	subs	r0, #11
 8005874:	d015      	beq.n	80058a2 <__b2d+0x8e>
 8005876:	4084      	lsls	r4, r0
 8005878:	f1c0 0520 	rsb	r5, r0, #32
 800587c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8005880:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8005884:	42be      	cmp	r6, r7
 8005886:	fa21 fc05 	lsr.w	ip, r1, r5
 800588a:	ea44 030c 	orr.w	r3, r4, ip
 800588e:	bf8c      	ite	hi
 8005890:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005894:	2400      	movls	r4, #0
 8005896:	fa01 f000 	lsl.w	r0, r1, r0
 800589a:	40ec      	lsrs	r4, r5
 800589c:	ea40 0204 	orr.w	r2, r0, r4
 80058a0:	e7dd      	b.n	800585e <__b2d+0x4a>
 80058a2:	ea44 030c 	orr.w	r3, r4, ip
 80058a6:	460a      	mov	r2, r1
 80058a8:	e7d9      	b.n	800585e <__b2d+0x4a>
 80058aa:	bf00      	nop
 80058ac:	3ff00000 	.word	0x3ff00000

080058b0 <__d2b>:
 80058b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	460e      	mov	r6, r1
 80058b6:	2101      	movs	r1, #1
 80058b8:	ec59 8b10 	vmov	r8, r9, d0
 80058bc:	4615      	mov	r5, r2
 80058be:	f7ff fcb5 	bl	800522c <_Balloc>
 80058c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058c6:	4607      	mov	r7, r0
 80058c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058cc:	bb34      	cbnz	r4, 800591c <__d2b+0x6c>
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f1b8 0300 	subs.w	r3, r8, #0
 80058d4:	d027      	beq.n	8005926 <__d2b+0x76>
 80058d6:	a802      	add	r0, sp, #8
 80058d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80058dc:	f7ff fd89 	bl	80053f2 <__lo0bits>
 80058e0:	9900      	ldr	r1, [sp, #0]
 80058e2:	b1f0      	cbz	r0, 8005922 <__d2b+0x72>
 80058e4:	9a01      	ldr	r2, [sp, #4]
 80058e6:	f1c0 0320 	rsb	r3, r0, #32
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	430b      	orrs	r3, r1
 80058f0:	40c2      	lsrs	r2, r0
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	9201      	str	r2, [sp, #4]
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bf14      	ite	ne
 80058fe:	2102      	movne	r1, #2
 8005900:	2101      	moveq	r1, #1
 8005902:	6139      	str	r1, [r7, #16]
 8005904:	b1c4      	cbz	r4, 8005938 <__d2b+0x88>
 8005906:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800590a:	4404      	add	r4, r0
 800590c:	6034      	str	r4, [r6, #0]
 800590e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005912:	6028      	str	r0, [r5, #0]
 8005914:	4638      	mov	r0, r7
 8005916:	b003      	add	sp, #12
 8005918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800591c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005920:	e7d5      	b.n	80058ce <__d2b+0x1e>
 8005922:	6179      	str	r1, [r7, #20]
 8005924:	e7e7      	b.n	80058f6 <__d2b+0x46>
 8005926:	a801      	add	r0, sp, #4
 8005928:	f7ff fd63 	bl	80053f2 <__lo0bits>
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	2101      	movs	r1, #1
 8005932:	6139      	str	r1, [r7, #16]
 8005934:	3020      	adds	r0, #32
 8005936:	e7e5      	b.n	8005904 <__d2b+0x54>
 8005938:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800593c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005940:	6030      	str	r0, [r6, #0]
 8005942:	6918      	ldr	r0, [r3, #16]
 8005944:	f7ff fd36 	bl	80053b4 <__hi0bits>
 8005948:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800594c:	e7e1      	b.n	8005912 <__d2b+0x62>

0800594e <__ratio>:
 800594e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005952:	4688      	mov	r8, r1
 8005954:	4669      	mov	r1, sp
 8005956:	4681      	mov	r9, r0
 8005958:	f7ff ff5c 	bl	8005814 <__b2d>
 800595c:	a901      	add	r1, sp, #4
 800595e:	4640      	mov	r0, r8
 8005960:	ec57 6b10 	vmov	r6, r7, d0
 8005964:	f7ff ff56 	bl	8005814 <__b2d>
 8005968:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800596c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005970:	eba3 0c02 	sub.w	ip, r3, r2
 8005974:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800597e:	ec5b ab10 	vmov	sl, fp, d0
 8005982:	2b00      	cmp	r3, #0
 8005984:	bfce      	itee	gt
 8005986:	463a      	movgt	r2, r7
 8005988:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800598c:	465a      	movle	r2, fp
 800598e:	4659      	mov	r1, fp
 8005990:	463d      	mov	r5, r7
 8005992:	bfd4      	ite	le
 8005994:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8005998:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800599c:	4630      	mov	r0, r6
 800599e:	ee10 2a10 	vmov	r2, s0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4629      	mov	r1, r5
 80059a6:	f7fa ffa1 	bl	80008ec <__aeabi_ddiv>
 80059aa:	ec41 0b10 	vmov	d0, r0, r1
 80059ae:	b003      	add	sp, #12
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059b4 <__copybits>:
 80059b4:	3901      	subs	r1, #1
 80059b6:	b510      	push	{r4, lr}
 80059b8:	1149      	asrs	r1, r1, #5
 80059ba:	6914      	ldr	r4, [r2, #16]
 80059bc:	3101      	adds	r1, #1
 80059be:	f102 0314 	add.w	r3, r2, #20
 80059c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	4602      	mov	r2, r0
 80059ce:	d303      	bcc.n	80059d8 <__copybits+0x24>
 80059d0:	2300      	movs	r3, #0
 80059d2:	428a      	cmp	r2, r1
 80059d4:	d305      	bcc.n	80059e2 <__copybits+0x2e>
 80059d6:	bd10      	pop	{r4, pc}
 80059d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059dc:	f840 2b04 	str.w	r2, [r0], #4
 80059e0:	e7f3      	b.n	80059ca <__copybits+0x16>
 80059e2:	f842 3b04 	str.w	r3, [r2], #4
 80059e6:	e7f4      	b.n	80059d2 <__copybits+0x1e>

080059e8 <__any_on>:
 80059e8:	f100 0214 	add.w	r2, r0, #20
 80059ec:	6900      	ldr	r0, [r0, #16]
 80059ee:	114b      	asrs	r3, r1, #5
 80059f0:	4298      	cmp	r0, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	db11      	blt.n	8005a1a <__any_on+0x32>
 80059f6:	dd0a      	ble.n	8005a0e <__any_on+0x26>
 80059f8:	f011 011f 	ands.w	r1, r1, #31
 80059fc:	d007      	beq.n	8005a0e <__any_on+0x26>
 80059fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a02:	fa24 f001 	lsr.w	r0, r4, r1
 8005a06:	fa00 f101 	lsl.w	r1, r0, r1
 8005a0a:	428c      	cmp	r4, r1
 8005a0c:	d10b      	bne.n	8005a26 <__any_on+0x3e>
 8005a0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d803      	bhi.n	8005a1e <__any_on+0x36>
 8005a16:	2000      	movs	r0, #0
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	e7f7      	b.n	8005a0e <__any_on+0x26>
 8005a1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d0f5      	beq.n	8005a12 <__any_on+0x2a>
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7f6      	b.n	8005a18 <__any_on+0x30>

08005a2a <_calloc_r>:
 8005a2a:	b538      	push	{r3, r4, r5, lr}
 8005a2c:	fb02 f401 	mul.w	r4, r2, r1
 8005a30:	4621      	mov	r1, r4
 8005a32:	f000 f857 	bl	8005ae4 <_malloc_r>
 8005a36:	4605      	mov	r5, r0
 8005a38:	b118      	cbz	r0, 8005a42 <_calloc_r+0x18>
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f7fc fc5e 	bl	80022fe <memset>
 8005a42:	4628      	mov	r0, r5
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
	...

08005a48 <_free_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d045      	beq.n	8005adc <_free_r+0x94>
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f0c      	subs	r4, r1, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	18e4      	addlt	r4, r4, r3
 8005a5c:	f000 fdc3 	bl	80065e6 <__malloc_lock>
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <_free_r+0x98>)
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	4610      	mov	r0, r2
 8005a66:	b933      	cbnz	r3, 8005a76 <_free_r+0x2e>
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	6014      	str	r4, [r2, #0]
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a72:	f000 bdb9 	b.w	80065e8 <__malloc_unlock>
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	d90c      	bls.n	8005a94 <_free_r+0x4c>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	1862      	adds	r2, r4, r1
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	bf04      	itt	eq
 8005a82:	681a      	ldreq	r2, [r3, #0]
 8005a84:	685b      	ldreq	r3, [r3, #4]
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	bf04      	itt	eq
 8005a8a:	1852      	addeq	r2, r2, r1
 8005a8c:	6022      	streq	r2, [r4, #0]
 8005a8e:	6004      	str	r4, [r0, #0]
 8005a90:	e7ec      	b.n	8005a6c <_free_r+0x24>
 8005a92:	4613      	mov	r3, r2
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	b10a      	cbz	r2, 8005a9c <_free_r+0x54>
 8005a98:	42a2      	cmp	r2, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x4a>
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	1858      	adds	r0, r3, r1
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x74>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	1858      	adds	r0, r3, r1
 8005aaa:	4282      	cmp	r2, r0
 8005aac:	6019      	str	r1, [r3, #0]
 8005aae:	d1dd      	bne.n	8005a6c <_free_r+0x24>
 8005ab0:	6810      	ldr	r0, [r2, #0]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	e7d7      	b.n	8005a6c <_free_r+0x24>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x7c>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	e7d3      	b.n	8005a6c <_free_r+0x24>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	1821      	adds	r1, r4, r0
 8005ac8:	428a      	cmp	r2, r1
 8005aca:	bf04      	itt	eq
 8005acc:	6811      	ldreq	r1, [r2, #0]
 8005ace:	6852      	ldreq	r2, [r2, #4]
 8005ad0:	6062      	str	r2, [r4, #4]
 8005ad2:	bf04      	itt	eq
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	605c      	str	r4, [r3, #4]
 8005ada:	e7c7      	b.n	8005a6c <_free_r+0x24>
 8005adc:	bd38      	pop	{r3, r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	200001fc 	.word	0x200001fc

08005ae4 <_malloc_r>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	1ccd      	adds	r5, r1, #3
 8005ae8:	f025 0503 	bic.w	r5, r5, #3
 8005aec:	3508      	adds	r5, #8
 8005aee:	2d0c      	cmp	r5, #12
 8005af0:	bf38      	it	cc
 8005af2:	250c      	movcc	r5, #12
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	4606      	mov	r6, r0
 8005af8:	db01      	blt.n	8005afe <_malloc_r+0x1a>
 8005afa:	42a9      	cmp	r1, r5
 8005afc:	d903      	bls.n	8005b06 <_malloc_r+0x22>
 8005afe:	230c      	movs	r3, #12
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	2000      	movs	r0, #0
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	f000 fd6e 	bl	80065e6 <__malloc_lock>
 8005b0a:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <_malloc_r+0xac>)
 8005b0c:	6814      	ldr	r4, [r2, #0]
 8005b0e:	4621      	mov	r1, r4
 8005b10:	b991      	cbnz	r1, 8005b38 <_malloc_r+0x54>
 8005b12:	4c20      	ldr	r4, [pc, #128]	; (8005b94 <_malloc_r+0xb0>)
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	b91b      	cbnz	r3, 8005b20 <_malloc_r+0x3c>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 facf 	bl	80060bc <_sbrk_r>
 8005b1e:	6020      	str	r0, [r4, #0]
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 faca 	bl	80060bc <_sbrk_r>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d124      	bne.n	8005b76 <_malloc_r+0x92>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 fd59 	bl	80065e8 <__malloc_unlock>
 8005b36:	e7e4      	b.n	8005b02 <_malloc_r+0x1e>
 8005b38:	680b      	ldr	r3, [r1, #0]
 8005b3a:	1b5b      	subs	r3, r3, r5
 8005b3c:	d418      	bmi.n	8005b70 <_malloc_r+0x8c>
 8005b3e:	2b0b      	cmp	r3, #11
 8005b40:	d90f      	bls.n	8005b62 <_malloc_r+0x7e>
 8005b42:	600b      	str	r3, [r1, #0]
 8005b44:	50cd      	str	r5, [r1, r3]
 8005b46:	18cc      	adds	r4, r1, r3
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 fd4d 	bl	80065e8 <__malloc_unlock>
 8005b4e:	f104 000b 	add.w	r0, r4, #11
 8005b52:	1d23      	adds	r3, r4, #4
 8005b54:	f020 0007 	bic.w	r0, r0, #7
 8005b58:	1ac3      	subs	r3, r0, r3
 8005b5a:	d0d3      	beq.n	8005b04 <_malloc_r+0x20>
 8005b5c:	425a      	negs	r2, r3
 8005b5e:	50e2      	str	r2, [r4, r3]
 8005b60:	e7d0      	b.n	8005b04 <_malloc_r+0x20>
 8005b62:	428c      	cmp	r4, r1
 8005b64:	684b      	ldr	r3, [r1, #4]
 8005b66:	bf16      	itet	ne
 8005b68:	6063      	strne	r3, [r4, #4]
 8005b6a:	6013      	streq	r3, [r2, #0]
 8005b6c:	460c      	movne	r4, r1
 8005b6e:	e7eb      	b.n	8005b48 <_malloc_r+0x64>
 8005b70:	460c      	mov	r4, r1
 8005b72:	6849      	ldr	r1, [r1, #4]
 8005b74:	e7cc      	b.n	8005b10 <_malloc_r+0x2c>
 8005b76:	1cc4      	adds	r4, r0, #3
 8005b78:	f024 0403 	bic.w	r4, r4, #3
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d005      	beq.n	8005b8c <_malloc_r+0xa8>
 8005b80:	1a21      	subs	r1, r4, r0
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 fa9a 	bl	80060bc <_sbrk_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d0cf      	beq.n	8005b2c <_malloc_r+0x48>
 8005b8c:	6025      	str	r5, [r4, #0]
 8005b8e:	e7db      	b.n	8005b48 <_malloc_r+0x64>
 8005b90:	200001fc 	.word	0x200001fc
 8005b94:	20000200 	.word	0x20000200

08005b98 <__ssputs_r>:
 8005b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	688e      	ldr	r6, [r1, #8]
 8005b9e:	429e      	cmp	r6, r3
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4690      	mov	r8, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	d837      	bhi.n	8005c1a <__ssputs_r+0x82>
 8005baa:	898a      	ldrh	r2, [r1, #12]
 8005bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bb0:	d031      	beq.n	8005c16 <__ssputs_r+0x7e>
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	6909      	ldr	r1, [r1, #16]
 8005bb6:	1a6f      	subs	r7, r5, r1
 8005bb8:	6965      	ldr	r5, [r4, #20]
 8005bba:	2302      	movs	r3, #2
 8005bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005bc4:	f109 0301 	add.w	r3, r9, #1
 8005bc8:	443b      	add	r3, r7
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	bf38      	it	cc
 8005bce:	461d      	movcc	r5, r3
 8005bd0:	0553      	lsls	r3, r2, #21
 8005bd2:	d530      	bpl.n	8005c36 <__ssputs_r+0x9e>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7ff ff85 	bl	8005ae4 <_malloc_r>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	b950      	cbnz	r0, 8005bf4 <__ssputs_r+0x5c>
 8005bde:	230c      	movs	r3, #12
 8005be0:	f8ca 3000 	str.w	r3, [sl]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	463a      	mov	r2, r7
 8005bf6:	6921      	ldr	r1, [r4, #16]
 8005bf8:	f7fc fb76 	bl	80022e8 <memcpy>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	6126      	str	r6, [r4, #16]
 8005c0a:	6165      	str	r5, [r4, #20]
 8005c0c:	443e      	add	r6, r7
 8005c0e:	1bed      	subs	r5, r5, r7
 8005c10:	6026      	str	r6, [r4, #0]
 8005c12:	60a5      	str	r5, [r4, #8]
 8005c14:	464e      	mov	r6, r9
 8005c16:	454e      	cmp	r6, r9
 8005c18:	d900      	bls.n	8005c1c <__ssputs_r+0x84>
 8005c1a:	464e      	mov	r6, r9
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4641      	mov	r1, r8
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	f000 fcc7 	bl	80065b4 <memmove>
 8005c26:	68a3      	ldr	r3, [r4, #8]
 8005c28:	1b9b      	subs	r3, r3, r6
 8005c2a:	60a3      	str	r3, [r4, #8]
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	441e      	add	r6, r3
 8005c30:	6026      	str	r6, [r4, #0]
 8005c32:	2000      	movs	r0, #0
 8005c34:	e7dc      	b.n	8005bf0 <__ssputs_r+0x58>
 8005c36:	462a      	mov	r2, r5
 8005c38:	f000 fcd7 	bl	80065ea <_realloc_r>
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d1e2      	bne.n	8005c08 <__ssputs_r+0x70>
 8005c42:	6921      	ldr	r1, [r4, #16]
 8005c44:	4650      	mov	r0, sl
 8005c46:	f7ff feff 	bl	8005a48 <_free_r>
 8005c4a:	e7c8      	b.n	8005bde <__ssputs_r+0x46>

08005c4c <_svfiprintf_r>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	461d      	mov	r5, r3
 8005c52:	898b      	ldrh	r3, [r1, #12]
 8005c54:	061f      	lsls	r7, r3, #24
 8005c56:	b09d      	sub	sp, #116	; 0x74
 8005c58:	4680      	mov	r8, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	d50f      	bpl.n	8005c80 <_svfiprintf_r+0x34>
 8005c60:	690b      	ldr	r3, [r1, #16]
 8005c62:	b96b      	cbnz	r3, 8005c80 <_svfiprintf_r+0x34>
 8005c64:	2140      	movs	r1, #64	; 0x40
 8005c66:	f7ff ff3d 	bl	8005ae4 <_malloc_r>
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	6120      	str	r0, [r4, #16]
 8005c6e:	b928      	cbnz	r0, 8005c7c <_svfiprintf_r+0x30>
 8005c70:	230c      	movs	r3, #12
 8005c72:	f8c8 3000 	str.w	r3, [r8]
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7a:	e0c8      	b.n	8005e0e <_svfiprintf_r+0x1c2>
 8005c7c:	2340      	movs	r3, #64	; 0x40
 8005c7e:	6163      	str	r3, [r4, #20]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	2320      	movs	r3, #32
 8005c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c8a:	2330      	movs	r3, #48	; 0x30
 8005c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c90:	9503      	str	r5, [sp, #12]
 8005c92:	f04f 0b01 	mov.w	fp, #1
 8005c96:	4637      	mov	r7, r6
 8005c98:	463d      	mov	r5, r7
 8005c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c9e:	b10b      	cbz	r3, 8005ca4 <_svfiprintf_r+0x58>
 8005ca0:	2b25      	cmp	r3, #37	; 0x25
 8005ca2:	d13e      	bne.n	8005d22 <_svfiprintf_r+0xd6>
 8005ca4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ca8:	d00b      	beq.n	8005cc2 <_svfiprintf_r+0x76>
 8005caa:	4653      	mov	r3, sl
 8005cac:	4632      	mov	r2, r6
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	f7ff ff71 	bl	8005b98 <__ssputs_r>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f000 80a4 	beq.w	8005e04 <_svfiprintf_r+0x1b8>
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	4453      	add	r3, sl
 8005cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc2:	783b      	ldrb	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 809d 	beq.w	8005e04 <_svfiprintf_r+0x1b8>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cde:	462f      	mov	r7, r5
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005ce6:	4850      	ldr	r0, [pc, #320]	; (8005e28 <_svfiprintf_r+0x1dc>)
 8005ce8:	f7fa faca 	bl	8000280 <memchr>
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	b9d0      	cbnz	r0, 8005d26 <_svfiprintf_r+0xda>
 8005cf0:	06d9      	lsls	r1, r3, #27
 8005cf2:	bf44      	itt	mi
 8005cf4:	2220      	movmi	r2, #32
 8005cf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cfa:	071a      	lsls	r2, r3, #28
 8005cfc:	bf44      	itt	mi
 8005cfe:	222b      	movmi	r2, #43	; 0x2b
 8005d00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d04:	782a      	ldrb	r2, [r5, #0]
 8005d06:	2a2a      	cmp	r2, #42	; 0x2a
 8005d08:	d015      	beq.n	8005d36 <_svfiprintf_r+0xea>
 8005d0a:	9a07      	ldr	r2, [sp, #28]
 8005d0c:	462f      	mov	r7, r5
 8005d0e:	2000      	movs	r0, #0
 8005d10:	250a      	movs	r5, #10
 8005d12:	4639      	mov	r1, r7
 8005d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d18:	3b30      	subs	r3, #48	; 0x30
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d94d      	bls.n	8005dba <_svfiprintf_r+0x16e>
 8005d1e:	b1b8      	cbz	r0, 8005d50 <_svfiprintf_r+0x104>
 8005d20:	e00f      	b.n	8005d42 <_svfiprintf_r+0xf6>
 8005d22:	462f      	mov	r7, r5
 8005d24:	e7b8      	b.n	8005c98 <_svfiprintf_r+0x4c>
 8005d26:	4a40      	ldr	r2, [pc, #256]	; (8005e28 <_svfiprintf_r+0x1dc>)
 8005d28:	1a80      	subs	r0, r0, r2
 8005d2a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d2e:	4318      	orrs	r0, r3
 8005d30:	9004      	str	r0, [sp, #16]
 8005d32:	463d      	mov	r5, r7
 8005d34:	e7d3      	b.n	8005cde <_svfiprintf_r+0x92>
 8005d36:	9a03      	ldr	r2, [sp, #12]
 8005d38:	1d11      	adds	r1, r2, #4
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	9103      	str	r1, [sp, #12]
 8005d3e:	2a00      	cmp	r2, #0
 8005d40:	db01      	blt.n	8005d46 <_svfiprintf_r+0xfa>
 8005d42:	9207      	str	r2, [sp, #28]
 8005d44:	e004      	b.n	8005d50 <_svfiprintf_r+0x104>
 8005d46:	4252      	negs	r2, r2
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	9207      	str	r2, [sp, #28]
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	783b      	ldrb	r3, [r7, #0]
 8005d52:	2b2e      	cmp	r3, #46	; 0x2e
 8005d54:	d10c      	bne.n	8005d70 <_svfiprintf_r+0x124>
 8005d56:	787b      	ldrb	r3, [r7, #1]
 8005d58:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5a:	d133      	bne.n	8005dc4 <_svfiprintf_r+0x178>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	9203      	str	r2, [sp, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bfb8      	it	lt
 8005d68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d6c:	3702      	adds	r7, #2
 8005d6e:	9305      	str	r3, [sp, #20]
 8005d70:	4d2e      	ldr	r5, [pc, #184]	; (8005e2c <_svfiprintf_r+0x1e0>)
 8005d72:	7839      	ldrb	r1, [r7, #0]
 8005d74:	2203      	movs	r2, #3
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7fa fa82 	bl	8000280 <memchr>
 8005d7c:	b138      	cbz	r0, 8005d8e <_svfiprintf_r+0x142>
 8005d7e:	2340      	movs	r3, #64	; 0x40
 8005d80:	1b40      	subs	r0, r0, r5
 8005d82:	fa03 f000 	lsl.w	r0, r3, r0
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	4303      	orrs	r3, r0
 8005d8a:	3701      	adds	r7, #1
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	7839      	ldrb	r1, [r7, #0]
 8005d90:	4827      	ldr	r0, [pc, #156]	; (8005e30 <_svfiprintf_r+0x1e4>)
 8005d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d96:	2206      	movs	r2, #6
 8005d98:	1c7e      	adds	r6, r7, #1
 8005d9a:	f7fa fa71 	bl	8000280 <memchr>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d038      	beq.n	8005e14 <_svfiprintf_r+0x1c8>
 8005da2:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <_svfiprintf_r+0x1e8>)
 8005da4:	bb13      	cbnz	r3, 8005dec <_svfiprintf_r+0x1a0>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	3307      	adds	r3, #7
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	3308      	adds	r3, #8
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	444b      	add	r3, r9
 8005db6:	9309      	str	r3, [sp, #36]	; 0x24
 8005db8:	e76d      	b.n	8005c96 <_svfiprintf_r+0x4a>
 8005dba:	fb05 3202 	mla	r2, r5, r2, r3
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	460f      	mov	r7, r1
 8005dc2:	e7a6      	b.n	8005d12 <_svfiprintf_r+0xc6>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	3701      	adds	r7, #1
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	250a      	movs	r5, #10
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd4:	3a30      	subs	r2, #48	; 0x30
 8005dd6:	2a09      	cmp	r2, #9
 8005dd8:	d903      	bls.n	8005de2 <_svfiprintf_r+0x196>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c8      	beq.n	8005d70 <_svfiprintf_r+0x124>
 8005dde:	9105      	str	r1, [sp, #20]
 8005de0:	e7c6      	b.n	8005d70 <_svfiprintf_r+0x124>
 8005de2:	fb05 2101 	mla	r1, r5, r1, r2
 8005de6:	2301      	movs	r3, #1
 8005de8:	4607      	mov	r7, r0
 8005dea:	e7f0      	b.n	8005dce <_svfiprintf_r+0x182>
 8005dec:	ab03      	add	r3, sp, #12
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4622      	mov	r2, r4
 8005df2:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <_svfiprintf_r+0x1ec>)
 8005df4:	a904      	add	r1, sp, #16
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7fc fb1e 	bl	8002438 <_printf_float>
 8005dfc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e00:	4681      	mov	r9, r0
 8005e02:	d1d6      	bne.n	8005db2 <_svfiprintf_r+0x166>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	065b      	lsls	r3, r3, #25
 8005e08:	f53f af35 	bmi.w	8005c76 <_svfiprintf_r+0x2a>
 8005e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e0e:	b01d      	add	sp, #116	; 0x74
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <_svfiprintf_r+0x1ec>)
 8005e1c:	a904      	add	r1, sp, #16
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7fc fdc0 	bl	80029a4 <_printf_i>
 8005e24:	e7ea      	b.n	8005dfc <_svfiprintf_r+0x1b0>
 8005e26:	bf00      	nop
 8005e28:	08006aac 	.word	0x08006aac
 8005e2c:	08006ab2 	.word	0x08006ab2
 8005e30:	08006ab6 	.word	0x08006ab6
 8005e34:	08002439 	.word	0x08002439
 8005e38:	08005b99 	.word	0x08005b99

08005e3c <__sfputc_r>:
 8005e3c:	6893      	ldr	r3, [r2, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	b410      	push	{r4}
 8005e44:	6093      	str	r3, [r2, #8]
 8005e46:	da08      	bge.n	8005e5a <__sfputc_r+0x1e>
 8005e48:	6994      	ldr	r4, [r2, #24]
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	db01      	blt.n	8005e52 <__sfputc_r+0x16>
 8005e4e:	290a      	cmp	r1, #10
 8005e50:	d103      	bne.n	8005e5a <__sfputc_r+0x1e>
 8005e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e56:	f000 b997 	b.w	8006188 <__swbuf_r>
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	1c58      	adds	r0, r3, #1
 8005e5e:	6010      	str	r0, [r2, #0]
 8005e60:	7019      	strb	r1, [r3, #0]
 8005e62:	4608      	mov	r0, r1
 8005e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <__sfputs_r>:
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	18d5      	adds	r5, r2, r3
 8005e74:	42ac      	cmp	r4, r5
 8005e76:	d101      	bne.n	8005e7c <__sfputs_r+0x12>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e007      	b.n	8005e8c <__sfputs_r+0x22>
 8005e7c:	463a      	mov	r2, r7
 8005e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ffda 	bl	8005e3c <__sfputc_r>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d1f3      	bne.n	8005e74 <__sfputs_r+0xa>
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e90 <_vfiprintf_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	460c      	mov	r4, r1
 8005e96:	b09d      	sub	sp, #116	; 0x74
 8005e98:	4617      	mov	r7, r2
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	b118      	cbz	r0, 8005ea8 <_vfiprintf_r+0x18>
 8005ea0:	6983      	ldr	r3, [r0, #24]
 8005ea2:	b90b      	cbnz	r3, 8005ea8 <_vfiprintf_r+0x18>
 8005ea4:	f7fe fde4 	bl	8004a70 <__sinit>
 8005ea8:	4b7c      	ldr	r3, [pc, #496]	; (800609c <_vfiprintf_r+0x20c>)
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d158      	bne.n	8005f60 <_vfiprintf_r+0xd0>
 8005eae:	6874      	ldr	r4, [r6, #4]
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	0718      	lsls	r0, r3, #28
 8005eb4:	d55e      	bpl.n	8005f74 <_vfiprintf_r+0xe4>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05b      	beq.n	8005f74 <_vfiprintf_r+0xe4>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ec6:	2330      	movs	r3, #48	; 0x30
 8005ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ecc:	9503      	str	r5, [sp, #12]
 8005ece:	f04f 0b01 	mov.w	fp, #1
 8005ed2:	46b8      	mov	r8, r7
 8005ed4:	4645      	mov	r5, r8
 8005ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005eda:	b10b      	cbz	r3, 8005ee0 <_vfiprintf_r+0x50>
 8005edc:	2b25      	cmp	r3, #37	; 0x25
 8005ede:	d154      	bne.n	8005f8a <_vfiprintf_r+0xfa>
 8005ee0:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ee4:	d00b      	beq.n	8005efe <_vfiprintf_r+0x6e>
 8005ee6:	4653      	mov	r3, sl
 8005ee8:	463a      	mov	r2, r7
 8005eea:	4621      	mov	r1, r4
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff ffbc 	bl	8005e6a <__sfputs_r>
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f000 80c2 	beq.w	800607c <_vfiprintf_r+0x1ec>
 8005ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efa:	4453      	add	r3, sl
 8005efc:	9309      	str	r3, [sp, #36]	; 0x24
 8005efe:	f898 3000 	ldrb.w	r3, [r8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80ba 	beq.w	800607c <_vfiprintf_r+0x1ec>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f1c:	46a8      	mov	r8, r5
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005f24:	485e      	ldr	r0, [pc, #376]	; (80060a0 <_vfiprintf_r+0x210>)
 8005f26:	f7fa f9ab 	bl	8000280 <memchr>
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	bb78      	cbnz	r0, 8005f8e <_vfiprintf_r+0xfe>
 8005f2e:	06d9      	lsls	r1, r3, #27
 8005f30:	bf44      	itt	mi
 8005f32:	2220      	movmi	r2, #32
 8005f34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f38:	071a      	lsls	r2, r3, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	222b      	movmi	r2, #43	; 0x2b
 8005f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f42:	782a      	ldrb	r2, [r5, #0]
 8005f44:	2a2a      	cmp	r2, #42	; 0x2a
 8005f46:	d02a      	beq.n	8005f9e <_vfiprintf_r+0x10e>
 8005f48:	9a07      	ldr	r2, [sp, #28]
 8005f4a:	46a8      	mov	r8, r5
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	250a      	movs	r5, #10
 8005f50:	4641      	mov	r1, r8
 8005f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f56:	3b30      	subs	r3, #48	; 0x30
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d969      	bls.n	8006030 <_vfiprintf_r+0x1a0>
 8005f5c:	b360      	cbz	r0, 8005fb8 <_vfiprintf_r+0x128>
 8005f5e:	e024      	b.n	8005faa <_vfiprintf_r+0x11a>
 8005f60:	4b50      	ldr	r3, [pc, #320]	; (80060a4 <_vfiprintf_r+0x214>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d101      	bne.n	8005f6a <_vfiprintf_r+0xda>
 8005f66:	68b4      	ldr	r4, [r6, #8]
 8005f68:	e7a2      	b.n	8005eb0 <_vfiprintf_r+0x20>
 8005f6a:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <_vfiprintf_r+0x218>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	bf08      	it	eq
 8005f70:	68f4      	ldreq	r4, [r6, #12]
 8005f72:	e79d      	b.n	8005eb0 <_vfiprintf_r+0x20>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 f978 	bl	800626c <__swsetup_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d09d      	beq.n	8005ebc <_vfiprintf_r+0x2c>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f84:	b01d      	add	sp, #116	; 0x74
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	46a8      	mov	r8, r5
 8005f8c:	e7a2      	b.n	8005ed4 <_vfiprintf_r+0x44>
 8005f8e:	4a44      	ldr	r2, [pc, #272]	; (80060a0 <_vfiprintf_r+0x210>)
 8005f90:	1a80      	subs	r0, r0, r2
 8005f92:	fa0b f000 	lsl.w	r0, fp, r0
 8005f96:	4318      	orrs	r0, r3
 8005f98:	9004      	str	r0, [sp, #16]
 8005f9a:	4645      	mov	r5, r8
 8005f9c:	e7be      	b.n	8005f1c <_vfiprintf_r+0x8c>
 8005f9e:	9a03      	ldr	r2, [sp, #12]
 8005fa0:	1d11      	adds	r1, r2, #4
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	9103      	str	r1, [sp, #12]
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	db01      	blt.n	8005fae <_vfiprintf_r+0x11e>
 8005faa:	9207      	str	r2, [sp, #28]
 8005fac:	e004      	b.n	8005fb8 <_vfiprintf_r+0x128>
 8005fae:	4252      	negs	r2, r2
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	f898 3000 	ldrb.w	r3, [r8]
 8005fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fbe:	d10e      	bne.n	8005fde <_vfiprintf_r+0x14e>
 8005fc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d138      	bne.n	800603a <_vfiprintf_r+0x1aa>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9203      	str	r2, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfb8      	it	lt
 8005fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fd8:	f108 0802 	add.w	r8, r8, #2
 8005fdc:	9305      	str	r3, [sp, #20]
 8005fde:	4d33      	ldr	r5, [pc, #204]	; (80060ac <_vfiprintf_r+0x21c>)
 8005fe0:	f898 1000 	ldrb.w	r1, [r8]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f7fa f94a 	bl	8000280 <memchr>
 8005fec:	b140      	cbz	r0, 8006000 <_vfiprintf_r+0x170>
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	1b40      	subs	r0, r0, r5
 8005ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	4303      	orrs	r3, r0
 8005ffa:	f108 0801 	add.w	r8, r8, #1
 8005ffe:	9304      	str	r3, [sp, #16]
 8006000:	f898 1000 	ldrb.w	r1, [r8]
 8006004:	482a      	ldr	r0, [pc, #168]	; (80060b0 <_vfiprintf_r+0x220>)
 8006006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800600a:	2206      	movs	r2, #6
 800600c:	f108 0701 	add.w	r7, r8, #1
 8006010:	f7fa f936 	bl	8000280 <memchr>
 8006014:	2800      	cmp	r0, #0
 8006016:	d037      	beq.n	8006088 <_vfiprintf_r+0x1f8>
 8006018:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <_vfiprintf_r+0x224>)
 800601a:	bb1b      	cbnz	r3, 8006064 <_vfiprintf_r+0x1d4>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	3307      	adds	r3, #7
 8006020:	f023 0307 	bic.w	r3, r3, #7
 8006024:	3308      	adds	r3, #8
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602a:	444b      	add	r3, r9
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	e750      	b.n	8005ed2 <_vfiprintf_r+0x42>
 8006030:	fb05 3202 	mla	r2, r5, r2, r3
 8006034:	2001      	movs	r0, #1
 8006036:	4688      	mov	r8, r1
 8006038:	e78a      	b.n	8005f50 <_vfiprintf_r+0xc0>
 800603a:	2300      	movs	r3, #0
 800603c:	f108 0801 	add.w	r8, r8, #1
 8006040:	9305      	str	r3, [sp, #20]
 8006042:	4619      	mov	r1, r3
 8006044:	250a      	movs	r5, #10
 8006046:	4640      	mov	r0, r8
 8006048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800604c:	3a30      	subs	r2, #48	; 0x30
 800604e:	2a09      	cmp	r2, #9
 8006050:	d903      	bls.n	800605a <_vfiprintf_r+0x1ca>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c3      	beq.n	8005fde <_vfiprintf_r+0x14e>
 8006056:	9105      	str	r1, [sp, #20]
 8006058:	e7c1      	b.n	8005fde <_vfiprintf_r+0x14e>
 800605a:	fb05 2101 	mla	r1, r5, r1, r2
 800605e:	2301      	movs	r3, #1
 8006060:	4680      	mov	r8, r0
 8006062:	e7f0      	b.n	8006046 <_vfiprintf_r+0x1b6>
 8006064:	ab03      	add	r3, sp, #12
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4622      	mov	r2, r4
 800606a:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <_vfiprintf_r+0x228>)
 800606c:	a904      	add	r1, sp, #16
 800606e:	4630      	mov	r0, r6
 8006070:	f7fc f9e2 	bl	8002438 <_printf_float>
 8006074:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006078:	4681      	mov	r9, r0
 800607a:	d1d5      	bne.n	8006028 <_vfiprintf_r+0x198>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	065b      	lsls	r3, r3, #25
 8006080:	f53f af7e 	bmi.w	8005f80 <_vfiprintf_r+0xf0>
 8006084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006086:	e77d      	b.n	8005f84 <_vfiprintf_r+0xf4>
 8006088:	ab03      	add	r3, sp, #12
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	4622      	mov	r2, r4
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <_vfiprintf_r+0x228>)
 8006090:	a904      	add	r1, sp, #16
 8006092:	4630      	mov	r0, r6
 8006094:	f7fc fc86 	bl	80029a4 <_printf_i>
 8006098:	e7ec      	b.n	8006074 <_vfiprintf_r+0x1e4>
 800609a:	bf00      	nop
 800609c:	08006960 	.word	0x08006960
 80060a0:	08006aac 	.word	0x08006aac
 80060a4:	08006980 	.word	0x08006980
 80060a8:	08006940 	.word	0x08006940
 80060ac:	08006ab2 	.word	0x08006ab2
 80060b0:	08006ab6 	.word	0x08006ab6
 80060b4:	08002439 	.word	0x08002439
 80060b8:	08005e6b 	.word	0x08005e6b

080060bc <_sbrk_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4c06      	ldr	r4, [pc, #24]	; (80060d8 <_sbrk_r+0x1c>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4605      	mov	r5, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	f7fa ff92 	bl	8000ff0 <_sbrk>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_sbrk_r+0x1a>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_sbrk_r+0x1a>
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20000208 	.word	0x20000208

080060dc <__sread>:
 80060dc:	b510      	push	{r4, lr}
 80060de:	460c      	mov	r4, r1
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	f000 faa8 	bl	8006638 <_read_r>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	bfab      	itete	ge
 80060ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ee:	89a3      	ldrhlt	r3, [r4, #12]
 80060f0:	181b      	addge	r3, r3, r0
 80060f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060f6:	bfac      	ite	ge
 80060f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060fa:	81a3      	strhlt	r3, [r4, #12]
 80060fc:	bd10      	pop	{r4, pc}

080060fe <__swrite>:
 80060fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	461f      	mov	r7, r3
 8006104:	898b      	ldrh	r3, [r1, #12]
 8006106:	05db      	lsls	r3, r3, #23
 8006108:	4605      	mov	r5, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4616      	mov	r6, r2
 800610e:	d505      	bpl.n	800611c <__swrite+0x1e>
 8006110:	2302      	movs	r3, #2
 8006112:	2200      	movs	r2, #0
 8006114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006118:	f000 f9d6 	bl	80064c8 <_lseek_r>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	4632      	mov	r2, r6
 800612a:	463b      	mov	r3, r7
 800612c:	4628      	mov	r0, r5
 800612e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	f000 b889 	b.w	8006248 <_write_r>

08006136 <__sseek>:
 8006136:	b510      	push	{r4, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613e:	f000 f9c3 	bl	80064c8 <_lseek_r>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	bf15      	itete	ne
 8006148:	6560      	strne	r0, [r4, #84]	; 0x54
 800614a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800614e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006152:	81a3      	strheq	r3, [r4, #12]
 8006154:	bf18      	it	ne
 8006156:	81a3      	strhne	r3, [r4, #12]
 8006158:	bd10      	pop	{r4, pc}

0800615a <__sclose>:
 800615a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615e:	f000 b8f3 	b.w	8006348 <_close_r>

08006162 <strncmp>:
 8006162:	b510      	push	{r4, lr}
 8006164:	b16a      	cbz	r2, 8006182 <strncmp+0x20>
 8006166:	3901      	subs	r1, #1
 8006168:	1884      	adds	r4, r0, r2
 800616a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800616e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006172:	4293      	cmp	r3, r2
 8006174:	d103      	bne.n	800617e <strncmp+0x1c>
 8006176:	42a0      	cmp	r0, r4
 8006178:	d001      	beq.n	800617e <strncmp+0x1c>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f5      	bne.n	800616a <strncmp+0x8>
 800617e:	1a98      	subs	r0, r3, r2
 8006180:	bd10      	pop	{r4, pc}
 8006182:	4610      	mov	r0, r2
 8006184:	e7fc      	b.n	8006180 <strncmp+0x1e>
	...

08006188 <__swbuf_r>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	460e      	mov	r6, r1
 800618c:	4614      	mov	r4, r2
 800618e:	4605      	mov	r5, r0
 8006190:	b118      	cbz	r0, 800619a <__swbuf_r+0x12>
 8006192:	6983      	ldr	r3, [r0, #24]
 8006194:	b90b      	cbnz	r3, 800619a <__swbuf_r+0x12>
 8006196:	f7fe fc6b 	bl	8004a70 <__sinit>
 800619a:	4b21      	ldr	r3, [pc, #132]	; (8006220 <__swbuf_r+0x98>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d12a      	bne.n	80061f6 <__swbuf_r+0x6e>
 80061a0:	686c      	ldr	r4, [r5, #4]
 80061a2:	69a3      	ldr	r3, [r4, #24]
 80061a4:	60a3      	str	r3, [r4, #8]
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	071a      	lsls	r2, r3, #28
 80061aa:	d52e      	bpl.n	800620a <__swbuf_r+0x82>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	b363      	cbz	r3, 800620a <__swbuf_r+0x82>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	1ac0      	subs	r0, r0, r3
 80061b6:	6963      	ldr	r3, [r4, #20]
 80061b8:	b2f6      	uxtb	r6, r6
 80061ba:	4283      	cmp	r3, r0
 80061bc:	4637      	mov	r7, r6
 80061be:	dc04      	bgt.n	80061ca <__swbuf_r+0x42>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 f956 	bl	8006474 <_fflush_r>
 80061c8:	bb28      	cbnz	r0, 8006216 <__swbuf_r+0x8e>
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	701e      	strb	r6, [r3, #0]
 80061d8:	6963      	ldr	r3, [r4, #20]
 80061da:	3001      	adds	r0, #1
 80061dc:	4283      	cmp	r3, r0
 80061de:	d004      	beq.n	80061ea <__swbuf_r+0x62>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d519      	bpl.n	800621a <__swbuf_r+0x92>
 80061e6:	2e0a      	cmp	r6, #10
 80061e8:	d117      	bne.n	800621a <__swbuf_r+0x92>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f941 	bl	8006474 <_fflush_r>
 80061f2:	b190      	cbz	r0, 800621a <__swbuf_r+0x92>
 80061f4:	e00f      	b.n	8006216 <__swbuf_r+0x8e>
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <__swbuf_r+0x9c>)
 80061f8:	429c      	cmp	r4, r3
 80061fa:	d101      	bne.n	8006200 <__swbuf_r+0x78>
 80061fc:	68ac      	ldr	r4, [r5, #8]
 80061fe:	e7d0      	b.n	80061a2 <__swbuf_r+0x1a>
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <__swbuf_r+0xa0>)
 8006202:	429c      	cmp	r4, r3
 8006204:	bf08      	it	eq
 8006206:	68ec      	ldreq	r4, [r5, #12]
 8006208:	e7cb      	b.n	80061a2 <__swbuf_r+0x1a>
 800620a:	4621      	mov	r1, r4
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f82d 	bl	800626c <__swsetup_r>
 8006212:	2800      	cmp	r0, #0
 8006214:	d0cc      	beq.n	80061b0 <__swbuf_r+0x28>
 8006216:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800621a:	4638      	mov	r0, r7
 800621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621e:	bf00      	nop
 8006220:	08006960 	.word	0x08006960
 8006224:	08006980 	.word	0x08006980
 8006228:	08006940 	.word	0x08006940

0800622c <__ascii_wctomb>:
 800622c:	b149      	cbz	r1, 8006242 <__ascii_wctomb+0x16>
 800622e:	2aff      	cmp	r2, #255	; 0xff
 8006230:	bf85      	ittet	hi
 8006232:	238a      	movhi	r3, #138	; 0x8a
 8006234:	6003      	strhi	r3, [r0, #0]
 8006236:	700a      	strbls	r2, [r1, #0]
 8006238:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800623c:	bf98      	it	ls
 800623e:	2001      	movls	r0, #1
 8006240:	4770      	bx	lr
 8006242:	4608      	mov	r0, r1
 8006244:	4770      	bx	lr
	...

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4c07      	ldr	r4, [pc, #28]	; (8006268 <_write_r+0x20>)
 800624c:	4605      	mov	r5, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fa fe79 	bl	8000f4e <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000208 	.word	0x20000208

0800626c <__swsetup_r>:
 800626c:	4b32      	ldr	r3, [pc, #200]	; (8006338 <__swsetup_r+0xcc>)
 800626e:	b570      	push	{r4, r5, r6, lr}
 8006270:	681d      	ldr	r5, [r3, #0]
 8006272:	4606      	mov	r6, r0
 8006274:	460c      	mov	r4, r1
 8006276:	b125      	cbz	r5, 8006282 <__swsetup_r+0x16>
 8006278:	69ab      	ldr	r3, [r5, #24]
 800627a:	b913      	cbnz	r3, 8006282 <__swsetup_r+0x16>
 800627c:	4628      	mov	r0, r5
 800627e:	f7fe fbf7 	bl	8004a70 <__sinit>
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <__swsetup_r+0xd0>)
 8006284:	429c      	cmp	r4, r3
 8006286:	d10f      	bne.n	80062a8 <__swsetup_r+0x3c>
 8006288:	686c      	ldr	r4, [r5, #4]
 800628a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628e:	b29a      	uxth	r2, r3
 8006290:	0715      	lsls	r5, r2, #28
 8006292:	d42c      	bmi.n	80062ee <__swsetup_r+0x82>
 8006294:	06d0      	lsls	r0, r2, #27
 8006296:	d411      	bmi.n	80062bc <__swsetup_r+0x50>
 8006298:	2209      	movs	r2, #9
 800629a:	6032      	str	r2, [r6, #0]
 800629c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a6:	e03e      	b.n	8006326 <__swsetup_r+0xba>
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <__swsetup_r+0xd4>)
 80062aa:	429c      	cmp	r4, r3
 80062ac:	d101      	bne.n	80062b2 <__swsetup_r+0x46>
 80062ae:	68ac      	ldr	r4, [r5, #8]
 80062b0:	e7eb      	b.n	800628a <__swsetup_r+0x1e>
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <__swsetup_r+0xd8>)
 80062b4:	429c      	cmp	r4, r3
 80062b6:	bf08      	it	eq
 80062b8:	68ec      	ldreq	r4, [r5, #12]
 80062ba:	e7e6      	b.n	800628a <__swsetup_r+0x1e>
 80062bc:	0751      	lsls	r1, r2, #29
 80062be:	d512      	bpl.n	80062e6 <__swsetup_r+0x7a>
 80062c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062c2:	b141      	cbz	r1, 80062d6 <__swsetup_r+0x6a>
 80062c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c8:	4299      	cmp	r1, r3
 80062ca:	d002      	beq.n	80062d2 <__swsetup_r+0x66>
 80062cc:	4630      	mov	r0, r6
 80062ce:	f7ff fbbb 	bl	8005a48 <_free_r>
 80062d2:	2300      	movs	r3, #0
 80062d4:	6363      	str	r3, [r4, #52]	; 0x34
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	2300      	movs	r3, #0
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	f043 0308 	orr.w	r3, r3, #8
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	b94b      	cbnz	r3, 8006306 <__swsetup_r+0x9a>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fc:	d003      	beq.n	8006306 <__swsetup_r+0x9a>
 80062fe:	4621      	mov	r1, r4
 8006300:	4630      	mov	r0, r6
 8006302:	f000 f917 	bl	8006534 <__smakebuf_r>
 8006306:	89a2      	ldrh	r2, [r4, #12]
 8006308:	f012 0301 	ands.w	r3, r2, #1
 800630c:	d00c      	beq.n	8006328 <__swsetup_r+0xbc>
 800630e:	2300      	movs	r3, #0
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	6963      	ldr	r3, [r4, #20]
 8006314:	425b      	negs	r3, r3
 8006316:	61a3      	str	r3, [r4, #24]
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	b953      	cbnz	r3, 8006332 <__swsetup_r+0xc6>
 800631c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006320:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006324:	d1ba      	bne.n	800629c <__swsetup_r+0x30>
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	0792      	lsls	r2, r2, #30
 800632a:	bf58      	it	pl
 800632c:	6963      	ldrpl	r3, [r4, #20]
 800632e:	60a3      	str	r3, [r4, #8]
 8006330:	e7f2      	b.n	8006318 <__swsetup_r+0xac>
 8006332:	2000      	movs	r0, #0
 8006334:	e7f7      	b.n	8006326 <__swsetup_r+0xba>
 8006336:	bf00      	nop
 8006338:	2000000c 	.word	0x2000000c
 800633c:	08006960 	.word	0x08006960
 8006340:	08006980 	.word	0x08006980
 8006344:	08006940 	.word	0x08006940

08006348 <_close_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4c06      	ldr	r4, [pc, #24]	; (8006364 <_close_r+0x1c>)
 800634c:	2300      	movs	r3, #0
 800634e:	4605      	mov	r5, r0
 8006350:	4608      	mov	r0, r1
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	f7fa fe17 	bl	8000f86 <_close>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_close_r+0x1a>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	b103      	cbz	r3, 8006362 <_close_r+0x1a>
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20000208 	.word	0x20000208

08006368 <__sflush_r>:
 8006368:	898a      	ldrh	r2, [r1, #12]
 800636a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	4605      	mov	r5, r0
 8006370:	0710      	lsls	r0, r2, #28
 8006372:	460c      	mov	r4, r1
 8006374:	d458      	bmi.n	8006428 <__sflush_r+0xc0>
 8006376:	684b      	ldr	r3, [r1, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	dc05      	bgt.n	8006388 <__sflush_r+0x20>
 800637c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	dc02      	bgt.n	8006388 <__sflush_r+0x20>
 8006382:	2000      	movs	r0, #0
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800638a:	2e00      	cmp	r6, #0
 800638c:	d0f9      	beq.n	8006382 <__sflush_r+0x1a>
 800638e:	2300      	movs	r3, #0
 8006390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006394:	682f      	ldr	r7, [r5, #0]
 8006396:	6a21      	ldr	r1, [r4, #32]
 8006398:	602b      	str	r3, [r5, #0]
 800639a:	d032      	beq.n	8006402 <__sflush_r+0x9a>
 800639c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	075a      	lsls	r2, r3, #29
 80063a2:	d505      	bpl.n	80063b0 <__sflush_r+0x48>
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	1ac0      	subs	r0, r0, r3
 80063a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063aa:	b10b      	cbz	r3, 80063b0 <__sflush_r+0x48>
 80063ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063ae:	1ac0      	subs	r0, r0, r3
 80063b0:	2300      	movs	r3, #0
 80063b2:	4602      	mov	r2, r0
 80063b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b6:	6a21      	ldr	r1, [r4, #32]
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b0      	blx	r6
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	d106      	bne.n	80063d0 <__sflush_r+0x68>
 80063c2:	6829      	ldr	r1, [r5, #0]
 80063c4:	291d      	cmp	r1, #29
 80063c6:	d848      	bhi.n	800645a <__sflush_r+0xf2>
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <__sflush_r+0x108>)
 80063ca:	40ca      	lsrs	r2, r1
 80063cc:	07d6      	lsls	r6, r2, #31
 80063ce:	d544      	bpl.n	800645a <__sflush_r+0xf2>
 80063d0:	2200      	movs	r2, #0
 80063d2:	6062      	str	r2, [r4, #4]
 80063d4:	04d9      	lsls	r1, r3, #19
 80063d6:	6922      	ldr	r2, [r4, #16]
 80063d8:	6022      	str	r2, [r4, #0]
 80063da:	d504      	bpl.n	80063e6 <__sflush_r+0x7e>
 80063dc:	1c42      	adds	r2, r0, #1
 80063de:	d101      	bne.n	80063e4 <__sflush_r+0x7c>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b903      	cbnz	r3, 80063e6 <__sflush_r+0x7e>
 80063e4:	6560      	str	r0, [r4, #84]	; 0x54
 80063e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063e8:	602f      	str	r7, [r5, #0]
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d0c9      	beq.n	8006382 <__sflush_r+0x1a>
 80063ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d002      	beq.n	80063fc <__sflush_r+0x94>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f7ff fb26 	bl	8005a48 <_free_r>
 80063fc:	2000      	movs	r0, #0
 80063fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006400:	e7c0      	b.n	8006384 <__sflush_r+0x1c>
 8006402:	2301      	movs	r3, #1
 8006404:	4628      	mov	r0, r5
 8006406:	47b0      	blx	r6
 8006408:	1c41      	adds	r1, r0, #1
 800640a:	d1c8      	bne.n	800639e <__sflush_r+0x36>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0c5      	beq.n	800639e <__sflush_r+0x36>
 8006412:	2b1d      	cmp	r3, #29
 8006414:	d001      	beq.n	800641a <__sflush_r+0xb2>
 8006416:	2b16      	cmp	r3, #22
 8006418:	d101      	bne.n	800641e <__sflush_r+0xb6>
 800641a:	602f      	str	r7, [r5, #0]
 800641c:	e7b1      	b.n	8006382 <__sflush_r+0x1a>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	e7ad      	b.n	8006384 <__sflush_r+0x1c>
 8006428:	690f      	ldr	r7, [r1, #16]
 800642a:	2f00      	cmp	r7, #0
 800642c:	d0a9      	beq.n	8006382 <__sflush_r+0x1a>
 800642e:	0793      	lsls	r3, r2, #30
 8006430:	680e      	ldr	r6, [r1, #0]
 8006432:	bf08      	it	eq
 8006434:	694b      	ldreq	r3, [r1, #20]
 8006436:	600f      	str	r7, [r1, #0]
 8006438:	bf18      	it	ne
 800643a:	2300      	movne	r3, #0
 800643c:	eba6 0807 	sub.w	r8, r6, r7
 8006440:	608b      	str	r3, [r1, #8]
 8006442:	f1b8 0f00 	cmp.w	r8, #0
 8006446:	dd9c      	ble.n	8006382 <__sflush_r+0x1a>
 8006448:	4643      	mov	r3, r8
 800644a:	463a      	mov	r2, r7
 800644c:	6a21      	ldr	r1, [r4, #32]
 800644e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006450:	4628      	mov	r0, r5
 8006452:	47b0      	blx	r6
 8006454:	2800      	cmp	r0, #0
 8006456:	dc06      	bgt.n	8006466 <__sflush_r+0xfe>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006464:	e78e      	b.n	8006384 <__sflush_r+0x1c>
 8006466:	4407      	add	r7, r0
 8006468:	eba8 0800 	sub.w	r8, r8, r0
 800646c:	e7e9      	b.n	8006442 <__sflush_r+0xda>
 800646e:	bf00      	nop
 8006470:	20400001 	.word	0x20400001

08006474 <_fflush_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	690b      	ldr	r3, [r1, #16]
 8006478:	4605      	mov	r5, r0
 800647a:	460c      	mov	r4, r1
 800647c:	b1db      	cbz	r3, 80064b6 <_fflush_r+0x42>
 800647e:	b118      	cbz	r0, 8006488 <_fflush_r+0x14>
 8006480:	6983      	ldr	r3, [r0, #24]
 8006482:	b90b      	cbnz	r3, 8006488 <_fflush_r+0x14>
 8006484:	f7fe faf4 	bl	8004a70 <__sinit>
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <_fflush_r+0x48>)
 800648a:	429c      	cmp	r4, r3
 800648c:	d109      	bne.n	80064a2 <_fflush_r+0x2e>
 800648e:	686c      	ldr	r4, [r5, #4]
 8006490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006494:	b17b      	cbz	r3, 80064b6 <_fflush_r+0x42>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800649e:	f7ff bf63 	b.w	8006368 <__sflush_r>
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <_fflush_r+0x4c>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	d101      	bne.n	80064ac <_fflush_r+0x38>
 80064a8:	68ac      	ldr	r4, [r5, #8]
 80064aa:	e7f1      	b.n	8006490 <_fflush_r+0x1c>
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <_fflush_r+0x50>)
 80064ae:	429c      	cmp	r4, r3
 80064b0:	bf08      	it	eq
 80064b2:	68ec      	ldreq	r4, [r5, #12]
 80064b4:	e7ec      	b.n	8006490 <_fflush_r+0x1c>
 80064b6:	2000      	movs	r0, #0
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	08006960 	.word	0x08006960
 80064c0:	08006980 	.word	0x08006980
 80064c4:	08006940 	.word	0x08006940

080064c8 <_lseek_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4c07      	ldr	r4, [pc, #28]	; (80064e8 <_lseek_r+0x20>)
 80064cc:	4605      	mov	r5, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fa fd7c 	bl	8000fd4 <_lseek>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_lseek_r+0x1e>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_lseek_r+0x1e>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000208 	.word	0x20000208

080064ec <__swhatbuf_r>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	460e      	mov	r6, r1
 80064f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f4:	2900      	cmp	r1, #0
 80064f6:	b096      	sub	sp, #88	; 0x58
 80064f8:	4614      	mov	r4, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	da07      	bge.n	800650e <__swhatbuf_r+0x22>
 80064fe:	2300      	movs	r3, #0
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	89b3      	ldrh	r3, [r6, #12]
 8006504:	061a      	lsls	r2, r3, #24
 8006506:	d410      	bmi.n	800652a <__swhatbuf_r+0x3e>
 8006508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650c:	e00e      	b.n	800652c <__swhatbuf_r+0x40>
 800650e:	466a      	mov	r2, sp
 8006510:	f000 f8a4 	bl	800665c <_fstat_r>
 8006514:	2800      	cmp	r0, #0
 8006516:	dbf2      	blt.n	80064fe <__swhatbuf_r+0x12>
 8006518:	9a01      	ldr	r2, [sp, #4]
 800651a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800651e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006522:	425a      	negs	r2, r3
 8006524:	415a      	adcs	r2, r3
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	e7ee      	b.n	8006508 <__swhatbuf_r+0x1c>
 800652a:	2340      	movs	r3, #64	; 0x40
 800652c:	2000      	movs	r0, #0
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	b016      	add	sp, #88	; 0x58
 8006532:	bd70      	pop	{r4, r5, r6, pc}

08006534 <__smakebuf_r>:
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006538:	079d      	lsls	r5, r3, #30
 800653a:	4606      	mov	r6, r0
 800653c:	460c      	mov	r4, r1
 800653e:	d507      	bpl.n	8006550 <__smakebuf_r+0x1c>
 8006540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	2301      	movs	r3, #1
 800654a:	6163      	str	r3, [r4, #20]
 800654c:	b002      	add	sp, #8
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	ab01      	add	r3, sp, #4
 8006552:	466a      	mov	r2, sp
 8006554:	f7ff ffca 	bl	80064ec <__swhatbuf_r>
 8006558:	9900      	ldr	r1, [sp, #0]
 800655a:	4605      	mov	r5, r0
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff fac1 	bl	8005ae4 <_malloc_r>
 8006562:	b948      	cbnz	r0, 8006578 <__smakebuf_r+0x44>
 8006564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006568:	059a      	lsls	r2, r3, #22
 800656a:	d4ef      	bmi.n	800654c <__smakebuf_r+0x18>
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	e7e3      	b.n	8006540 <__smakebuf_r+0xc>
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <__smakebuf_r+0x7c>)
 800657a:	62b3      	str	r3, [r6, #40]	; 0x28
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	6020      	str	r0, [r4, #0]
 8006580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	6163      	str	r3, [r4, #20]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	6120      	str	r0, [r4, #16]
 800658e:	b15b      	cbz	r3, 80065a8 <__smakebuf_r+0x74>
 8006590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f873 	bl	8006680 <_isatty_r>
 800659a:	b128      	cbz	r0, 80065a8 <__smakebuf_r+0x74>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	431d      	orrs	r5, r3
 80065ac:	81a5      	strh	r5, [r4, #12]
 80065ae:	e7cd      	b.n	800654c <__smakebuf_r+0x18>
 80065b0:	08004a39 	.word	0x08004a39

080065b4 <memmove>:
 80065b4:	4288      	cmp	r0, r1
 80065b6:	b510      	push	{r4, lr}
 80065b8:	eb01 0302 	add.w	r3, r1, r2
 80065bc:	d807      	bhi.n	80065ce <memmove+0x1a>
 80065be:	1e42      	subs	r2, r0, #1
 80065c0:	4299      	cmp	r1, r3
 80065c2:	d00a      	beq.n	80065da <memmove+0x26>
 80065c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065cc:	e7f8      	b.n	80065c0 <memmove+0xc>
 80065ce:	4283      	cmp	r3, r0
 80065d0:	d9f5      	bls.n	80065be <memmove+0xa>
 80065d2:	1881      	adds	r1, r0, r2
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	42d3      	cmn	r3, r2
 80065d8:	d100      	bne.n	80065dc <memmove+0x28>
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065e4:	e7f7      	b.n	80065d6 <memmove+0x22>

080065e6 <__malloc_lock>:
 80065e6:	4770      	bx	lr

080065e8 <__malloc_unlock>:
 80065e8:	4770      	bx	lr

080065ea <_realloc_r>:
 80065ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ec:	4607      	mov	r7, r0
 80065ee:	4614      	mov	r4, r2
 80065f0:	460e      	mov	r6, r1
 80065f2:	b921      	cbnz	r1, 80065fe <_realloc_r+0x14>
 80065f4:	4611      	mov	r1, r2
 80065f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065fa:	f7ff ba73 	b.w	8005ae4 <_malloc_r>
 80065fe:	b922      	cbnz	r2, 800660a <_realloc_r+0x20>
 8006600:	f7ff fa22 	bl	8005a48 <_free_r>
 8006604:	4625      	mov	r5, r4
 8006606:	4628      	mov	r0, r5
 8006608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660a:	f000 f849 	bl	80066a0 <_malloc_usable_size_r>
 800660e:	42a0      	cmp	r0, r4
 8006610:	d20f      	bcs.n	8006632 <_realloc_r+0x48>
 8006612:	4621      	mov	r1, r4
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff fa65 	bl	8005ae4 <_malloc_r>
 800661a:	4605      	mov	r5, r0
 800661c:	2800      	cmp	r0, #0
 800661e:	d0f2      	beq.n	8006606 <_realloc_r+0x1c>
 8006620:	4631      	mov	r1, r6
 8006622:	4622      	mov	r2, r4
 8006624:	f7fb fe60 	bl	80022e8 <memcpy>
 8006628:	4631      	mov	r1, r6
 800662a:	4638      	mov	r0, r7
 800662c:	f7ff fa0c 	bl	8005a48 <_free_r>
 8006630:	e7e9      	b.n	8006606 <_realloc_r+0x1c>
 8006632:	4635      	mov	r5, r6
 8006634:	e7e7      	b.n	8006606 <_realloc_r+0x1c>
	...

08006638 <_read_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4c07      	ldr	r4, [pc, #28]	; (8006658 <_read_r+0x20>)
 800663c:	4605      	mov	r5, r0
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	2200      	movs	r2, #0
 8006644:	6022      	str	r2, [r4, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f7fa fc64 	bl	8000f14 <_read>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_read_r+0x1e>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	b103      	cbz	r3, 8006656 <_read_r+0x1e>
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20000208 	.word	0x20000208

0800665c <_fstat_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4c07      	ldr	r4, [pc, #28]	; (800667c <_fstat_r+0x20>)
 8006660:	2300      	movs	r3, #0
 8006662:	4605      	mov	r5, r0
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	f7fa fc98 	bl	8000f9e <_fstat>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d102      	bne.n	8006678 <_fstat_r+0x1c>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	b103      	cbz	r3, 8006678 <_fstat_r+0x1c>
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	bd38      	pop	{r3, r4, r5, pc}
 800667a:	bf00      	nop
 800667c:	20000208 	.word	0x20000208

08006680 <_isatty_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4c06      	ldr	r4, [pc, #24]	; (800669c <_isatty_r+0x1c>)
 8006684:	2300      	movs	r3, #0
 8006686:	4605      	mov	r5, r0
 8006688:	4608      	mov	r0, r1
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	f7fa fc97 	bl	8000fbe <_isatty>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_isatty_r+0x1a>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	b103      	cbz	r3, 800669a <_isatty_r+0x1a>
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20000208 	.word	0x20000208

080066a0 <_malloc_usable_size_r>:
 80066a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a4:	1f18      	subs	r0, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfbc      	itt	lt
 80066aa:	580b      	ldrlt	r3, [r1, r0]
 80066ac:	18c0      	addlt	r0, r0, r3
 80066ae:	4770      	bx	lr

080066b0 <_init>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr

080066bc <_fini>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr
